
Oct21_Amit_Interfacing.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002652  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  00002652  000026c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001ddc  00000000  00000000  000026dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000123b  00000000  00000000  000044b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000160  00000000  00000000  000056f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000018f  00000000  00000000  00005853  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002045  00000000  00000000  000059e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001101  00000000  00000000  00007a27  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f82  00000000  00000000  00008b28  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  00009aac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002c2  00000000  00000000  00009c2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000088e  00000000  00000000  00009eee  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000a77c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e5       	ldi	r30, 0x52	; 82
      68:	f6 e2       	ldi	r31, 0x26	; 38
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 37       	cpi	r26, 0x74	; 116
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 47 06 	call	0xc8e	; 0xc8e <main>
      7a:	0c 94 27 13 	jmp	0x264e	; 0x264e <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 4f 10 	jmp	0x209e	; 0x209e <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a3 e6       	ldi	r26, 0x63	; 99
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 6b 10 	jmp	0x20d6	; 0x20d6 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 5b 10 	jmp	0x20b6	; 0x20b6 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 77 10 	jmp	0x20ee	; 0x20ee <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 5b 10 	jmp	0x20b6	; 0x20b6 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 77 10 	jmp	0x20ee	; 0x20ee <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 4f 10 	jmp	0x209e	; 0x209e <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	83 e6       	ldi	r24, 0x63	; 99
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 6b 10 	jmp	0x20d6	; 0x20d6 <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 57 10 	jmp	0x20ae	; 0x20ae <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	63 e6       	ldi	r22, 0x63	; 99
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 73 10 	jmp	0x20e6	; 0x20e6 <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 5b 10 	jmp	0x20b6	; 0x20b6 <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 77 10 	jmp	0x20ee	; 0x20ee <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 5b 10 	jmp	0x20b6	; 0x20b6 <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 77 10 	jmp	0x20ee	; 0x20ee <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 5b 10 	jmp	0x20b6	; 0x20b6 <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 77 10 	jmp	0x20ee	; 0x20ee <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 5f 10 	jmp	0x20be	; 0x20be <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 7b 10 	jmp	0x20f6	; 0x20f6 <__epilogue_restores__+0x20>

00000942 <__pack_f>:
     942:	df 92       	push	r13
     944:	ef 92       	push	r14
     946:	ff 92       	push	r15
     948:	0f 93       	push	r16
     94a:	1f 93       	push	r17
     94c:	fc 01       	movw	r30, r24
     94e:	e4 80       	ldd	r14, Z+4	; 0x04
     950:	f5 80       	ldd	r15, Z+5	; 0x05
     952:	06 81       	ldd	r16, Z+6	; 0x06
     954:	17 81       	ldd	r17, Z+7	; 0x07
     956:	d1 80       	ldd	r13, Z+1	; 0x01
     958:	80 81       	ld	r24, Z
     95a:	82 30       	cpi	r24, 0x02	; 2
     95c:	48 f4       	brcc	.+18     	; 0x970 <__pack_f+0x2e>
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	a0 e1       	ldi	r26, 0x10	; 16
     964:	b0 e0       	ldi	r27, 0x00	; 0
     966:	e8 2a       	or	r14, r24
     968:	f9 2a       	or	r15, r25
     96a:	0a 2b       	or	r16, r26
     96c:	1b 2b       	or	r17, r27
     96e:	a5 c0       	rjmp	.+330    	; 0xaba <__pack_f+0x178>
     970:	84 30       	cpi	r24, 0x04	; 4
     972:	09 f4       	brne	.+2      	; 0x976 <__pack_f+0x34>
     974:	9f c0       	rjmp	.+318    	; 0xab4 <__pack_f+0x172>
     976:	82 30       	cpi	r24, 0x02	; 2
     978:	21 f4       	brne	.+8      	; 0x982 <__pack_f+0x40>
     97a:	ee 24       	eor	r14, r14
     97c:	ff 24       	eor	r15, r15
     97e:	87 01       	movw	r16, r14
     980:	05 c0       	rjmp	.+10     	; 0x98c <__pack_f+0x4a>
     982:	e1 14       	cp	r14, r1
     984:	f1 04       	cpc	r15, r1
     986:	01 05       	cpc	r16, r1
     988:	11 05       	cpc	r17, r1
     98a:	19 f4       	brne	.+6      	; 0x992 <__pack_f+0x50>
     98c:	e0 e0       	ldi	r30, 0x00	; 0
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	96 c0       	rjmp	.+300    	; 0xabe <__pack_f+0x17c>
     992:	62 81       	ldd	r22, Z+2	; 0x02
     994:	73 81       	ldd	r23, Z+3	; 0x03
     996:	9f ef       	ldi	r25, 0xFF	; 255
     998:	62 38       	cpi	r22, 0x82	; 130
     99a:	79 07       	cpc	r23, r25
     99c:	0c f0       	brlt	.+2      	; 0x9a0 <__pack_f+0x5e>
     99e:	5b c0       	rjmp	.+182    	; 0xa56 <__pack_f+0x114>
     9a0:	22 e8       	ldi	r18, 0x82	; 130
     9a2:	3f ef       	ldi	r19, 0xFF	; 255
     9a4:	26 1b       	sub	r18, r22
     9a6:	37 0b       	sbc	r19, r23
     9a8:	2a 31       	cpi	r18, 0x1A	; 26
     9aa:	31 05       	cpc	r19, r1
     9ac:	2c f0       	brlt	.+10     	; 0x9b8 <__pack_f+0x76>
     9ae:	20 e0       	ldi	r18, 0x00	; 0
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	40 e0       	ldi	r20, 0x00	; 0
     9b4:	50 e0       	ldi	r21, 0x00	; 0
     9b6:	2a c0       	rjmp	.+84     	; 0xa0c <__pack_f+0xca>
     9b8:	b8 01       	movw	r22, r16
     9ba:	a7 01       	movw	r20, r14
     9bc:	02 2e       	mov	r0, r18
     9be:	04 c0       	rjmp	.+8      	; 0x9c8 <__pack_f+0x86>
     9c0:	76 95       	lsr	r23
     9c2:	67 95       	ror	r22
     9c4:	57 95       	ror	r21
     9c6:	47 95       	ror	r20
     9c8:	0a 94       	dec	r0
     9ca:	d2 f7       	brpl	.-12     	; 0x9c0 <__pack_f+0x7e>
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	a0 e0       	ldi	r26, 0x00	; 0
     9d2:	b0 e0       	ldi	r27, 0x00	; 0
     9d4:	04 c0       	rjmp	.+8      	; 0x9de <__pack_f+0x9c>
     9d6:	88 0f       	add	r24, r24
     9d8:	99 1f       	adc	r25, r25
     9da:	aa 1f       	adc	r26, r26
     9dc:	bb 1f       	adc	r27, r27
     9de:	2a 95       	dec	r18
     9e0:	d2 f7       	brpl	.-12     	; 0x9d6 <__pack_f+0x94>
     9e2:	01 97       	sbiw	r24, 0x01	; 1
     9e4:	a1 09       	sbc	r26, r1
     9e6:	b1 09       	sbc	r27, r1
     9e8:	8e 21       	and	r24, r14
     9ea:	9f 21       	and	r25, r15
     9ec:	a0 23       	and	r26, r16
     9ee:	b1 23       	and	r27, r17
     9f0:	00 97       	sbiw	r24, 0x00	; 0
     9f2:	a1 05       	cpc	r26, r1
     9f4:	b1 05       	cpc	r27, r1
     9f6:	21 f0       	breq	.+8      	; 0xa00 <__pack_f+0xbe>
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	a0 e0       	ldi	r26, 0x00	; 0
     9fe:	b0 e0       	ldi	r27, 0x00	; 0
     a00:	9a 01       	movw	r18, r20
     a02:	ab 01       	movw	r20, r22
     a04:	28 2b       	or	r18, r24
     a06:	39 2b       	or	r19, r25
     a08:	4a 2b       	or	r20, r26
     a0a:	5b 2b       	or	r21, r27
     a0c:	da 01       	movw	r26, r20
     a0e:	c9 01       	movw	r24, r18
     a10:	8f 77       	andi	r24, 0x7F	; 127
     a12:	90 70       	andi	r25, 0x00	; 0
     a14:	a0 70       	andi	r26, 0x00	; 0
     a16:	b0 70       	andi	r27, 0x00	; 0
     a18:	80 34       	cpi	r24, 0x40	; 64
     a1a:	91 05       	cpc	r25, r1
     a1c:	a1 05       	cpc	r26, r1
     a1e:	b1 05       	cpc	r27, r1
     a20:	39 f4       	brne	.+14     	; 0xa30 <__pack_f+0xee>
     a22:	27 ff       	sbrs	r18, 7
     a24:	09 c0       	rjmp	.+18     	; 0xa38 <__pack_f+0xf6>
     a26:	20 5c       	subi	r18, 0xC0	; 192
     a28:	3f 4f       	sbci	r19, 0xFF	; 255
     a2a:	4f 4f       	sbci	r20, 0xFF	; 255
     a2c:	5f 4f       	sbci	r21, 0xFF	; 255
     a2e:	04 c0       	rjmp	.+8      	; 0xa38 <__pack_f+0xf6>
     a30:	21 5c       	subi	r18, 0xC1	; 193
     a32:	3f 4f       	sbci	r19, 0xFF	; 255
     a34:	4f 4f       	sbci	r20, 0xFF	; 255
     a36:	5f 4f       	sbci	r21, 0xFF	; 255
     a38:	e0 e0       	ldi	r30, 0x00	; 0
     a3a:	f0 e0       	ldi	r31, 0x00	; 0
     a3c:	20 30       	cpi	r18, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	3a 07       	cpc	r19, r26
     a42:	a0 e0       	ldi	r26, 0x00	; 0
     a44:	4a 07       	cpc	r20, r26
     a46:	a0 e4       	ldi	r26, 0x40	; 64
     a48:	5a 07       	cpc	r21, r26
     a4a:	10 f0       	brcs	.+4      	; 0xa50 <__pack_f+0x10e>
     a4c:	e1 e0       	ldi	r30, 0x01	; 1
     a4e:	f0 e0       	ldi	r31, 0x00	; 0
     a50:	79 01       	movw	r14, r18
     a52:	8a 01       	movw	r16, r20
     a54:	27 c0       	rjmp	.+78     	; 0xaa4 <__pack_f+0x162>
     a56:	60 38       	cpi	r22, 0x80	; 128
     a58:	71 05       	cpc	r23, r1
     a5a:	64 f5       	brge	.+88     	; 0xab4 <__pack_f+0x172>
     a5c:	fb 01       	movw	r30, r22
     a5e:	e1 58       	subi	r30, 0x81	; 129
     a60:	ff 4f       	sbci	r31, 0xFF	; 255
     a62:	d8 01       	movw	r26, r16
     a64:	c7 01       	movw	r24, r14
     a66:	8f 77       	andi	r24, 0x7F	; 127
     a68:	90 70       	andi	r25, 0x00	; 0
     a6a:	a0 70       	andi	r26, 0x00	; 0
     a6c:	b0 70       	andi	r27, 0x00	; 0
     a6e:	80 34       	cpi	r24, 0x40	; 64
     a70:	91 05       	cpc	r25, r1
     a72:	a1 05       	cpc	r26, r1
     a74:	b1 05       	cpc	r27, r1
     a76:	39 f4       	brne	.+14     	; 0xa86 <__pack_f+0x144>
     a78:	e7 fe       	sbrs	r14, 7
     a7a:	0d c0       	rjmp	.+26     	; 0xa96 <__pack_f+0x154>
     a7c:	80 e4       	ldi	r24, 0x40	; 64
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	a0 e0       	ldi	r26, 0x00	; 0
     a82:	b0 e0       	ldi	r27, 0x00	; 0
     a84:	04 c0       	rjmp	.+8      	; 0xa8e <__pack_f+0x14c>
     a86:	8f e3       	ldi	r24, 0x3F	; 63
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	e8 0e       	add	r14, r24
     a90:	f9 1e       	adc	r15, r25
     a92:	0a 1f       	adc	r16, r26
     a94:	1b 1f       	adc	r17, r27
     a96:	17 ff       	sbrs	r17, 7
     a98:	05 c0       	rjmp	.+10     	; 0xaa4 <__pack_f+0x162>
     a9a:	16 95       	lsr	r17
     a9c:	07 95       	ror	r16
     a9e:	f7 94       	ror	r15
     aa0:	e7 94       	ror	r14
     aa2:	31 96       	adiw	r30, 0x01	; 1
     aa4:	87 e0       	ldi	r24, 0x07	; 7
     aa6:	16 95       	lsr	r17
     aa8:	07 95       	ror	r16
     aaa:	f7 94       	ror	r15
     aac:	e7 94       	ror	r14
     aae:	8a 95       	dec	r24
     ab0:	d1 f7       	brne	.-12     	; 0xaa6 <__pack_f+0x164>
     ab2:	05 c0       	rjmp	.+10     	; 0xabe <__pack_f+0x17c>
     ab4:	ee 24       	eor	r14, r14
     ab6:	ff 24       	eor	r15, r15
     ab8:	87 01       	movw	r16, r14
     aba:	ef ef       	ldi	r30, 0xFF	; 255
     abc:	f0 e0       	ldi	r31, 0x00	; 0
     abe:	6e 2f       	mov	r22, r30
     ac0:	67 95       	ror	r22
     ac2:	66 27       	eor	r22, r22
     ac4:	67 95       	ror	r22
     ac6:	90 2f       	mov	r25, r16
     ac8:	9f 77       	andi	r25, 0x7F	; 127
     aca:	d7 94       	ror	r13
     acc:	dd 24       	eor	r13, r13
     ace:	d7 94       	ror	r13
     ad0:	8e 2f       	mov	r24, r30
     ad2:	86 95       	lsr	r24
     ad4:	49 2f       	mov	r20, r25
     ad6:	46 2b       	or	r20, r22
     ad8:	58 2f       	mov	r21, r24
     ada:	5d 29       	or	r21, r13
     adc:	b7 01       	movw	r22, r14
     ade:	ca 01       	movw	r24, r20
     ae0:	1f 91       	pop	r17
     ae2:	0f 91       	pop	r16
     ae4:	ff 90       	pop	r15
     ae6:	ef 90       	pop	r14
     ae8:	df 90       	pop	r13
     aea:	08 95       	ret

00000aec <__unpack_f>:
     aec:	fc 01       	movw	r30, r24
     aee:	db 01       	movw	r26, r22
     af0:	40 81       	ld	r20, Z
     af2:	51 81       	ldd	r21, Z+1	; 0x01
     af4:	22 81       	ldd	r18, Z+2	; 0x02
     af6:	62 2f       	mov	r22, r18
     af8:	6f 77       	andi	r22, 0x7F	; 127
     afa:	70 e0       	ldi	r23, 0x00	; 0
     afc:	22 1f       	adc	r18, r18
     afe:	22 27       	eor	r18, r18
     b00:	22 1f       	adc	r18, r18
     b02:	93 81       	ldd	r25, Z+3	; 0x03
     b04:	89 2f       	mov	r24, r25
     b06:	88 0f       	add	r24, r24
     b08:	82 2b       	or	r24, r18
     b0a:	28 2f       	mov	r18, r24
     b0c:	30 e0       	ldi	r19, 0x00	; 0
     b0e:	99 1f       	adc	r25, r25
     b10:	99 27       	eor	r25, r25
     b12:	99 1f       	adc	r25, r25
     b14:	11 96       	adiw	r26, 0x01	; 1
     b16:	9c 93       	st	X, r25
     b18:	11 97       	sbiw	r26, 0x01	; 1
     b1a:	21 15       	cp	r18, r1
     b1c:	31 05       	cpc	r19, r1
     b1e:	a9 f5       	brne	.+106    	; 0xb8a <__unpack_f+0x9e>
     b20:	41 15       	cp	r20, r1
     b22:	51 05       	cpc	r21, r1
     b24:	61 05       	cpc	r22, r1
     b26:	71 05       	cpc	r23, r1
     b28:	11 f4       	brne	.+4      	; 0xb2e <__unpack_f+0x42>
     b2a:	82 e0       	ldi	r24, 0x02	; 2
     b2c:	37 c0       	rjmp	.+110    	; 0xb9c <__unpack_f+0xb0>
     b2e:	82 e8       	ldi	r24, 0x82	; 130
     b30:	9f ef       	ldi	r25, 0xFF	; 255
     b32:	13 96       	adiw	r26, 0x03	; 3
     b34:	9c 93       	st	X, r25
     b36:	8e 93       	st	-X, r24
     b38:	12 97       	sbiw	r26, 0x02	; 2
     b3a:	9a 01       	movw	r18, r20
     b3c:	ab 01       	movw	r20, r22
     b3e:	67 e0       	ldi	r22, 0x07	; 7
     b40:	22 0f       	add	r18, r18
     b42:	33 1f       	adc	r19, r19
     b44:	44 1f       	adc	r20, r20
     b46:	55 1f       	adc	r21, r21
     b48:	6a 95       	dec	r22
     b4a:	d1 f7       	brne	.-12     	; 0xb40 <__unpack_f+0x54>
     b4c:	83 e0       	ldi	r24, 0x03	; 3
     b4e:	8c 93       	st	X, r24
     b50:	0d c0       	rjmp	.+26     	; 0xb6c <__unpack_f+0x80>
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	44 1f       	adc	r20, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	12 96       	adiw	r26, 0x02	; 2
     b5c:	8d 91       	ld	r24, X+
     b5e:	9c 91       	ld	r25, X
     b60:	13 97       	sbiw	r26, 0x03	; 3
     b62:	01 97       	sbiw	r24, 0x01	; 1
     b64:	13 96       	adiw	r26, 0x03	; 3
     b66:	9c 93       	st	X, r25
     b68:	8e 93       	st	-X, r24
     b6a:	12 97       	sbiw	r26, 0x02	; 2
     b6c:	20 30       	cpi	r18, 0x00	; 0
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	38 07       	cpc	r19, r24
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	48 07       	cpc	r20, r24
     b76:	80 e4       	ldi	r24, 0x40	; 64
     b78:	58 07       	cpc	r21, r24
     b7a:	58 f3       	brcs	.-42     	; 0xb52 <__unpack_f+0x66>
     b7c:	14 96       	adiw	r26, 0x04	; 4
     b7e:	2d 93       	st	X+, r18
     b80:	3d 93       	st	X+, r19
     b82:	4d 93       	st	X+, r20
     b84:	5c 93       	st	X, r21
     b86:	17 97       	sbiw	r26, 0x07	; 7
     b88:	08 95       	ret
     b8a:	2f 3f       	cpi	r18, 0xFF	; 255
     b8c:	31 05       	cpc	r19, r1
     b8e:	79 f4       	brne	.+30     	; 0xbae <__unpack_f+0xc2>
     b90:	41 15       	cp	r20, r1
     b92:	51 05       	cpc	r21, r1
     b94:	61 05       	cpc	r22, r1
     b96:	71 05       	cpc	r23, r1
     b98:	19 f4       	brne	.+6      	; 0xba0 <__unpack_f+0xb4>
     b9a:	84 e0       	ldi	r24, 0x04	; 4
     b9c:	8c 93       	st	X, r24
     b9e:	08 95       	ret
     ba0:	64 ff       	sbrs	r22, 4
     ba2:	03 c0       	rjmp	.+6      	; 0xbaa <__unpack_f+0xbe>
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	8c 93       	st	X, r24
     ba8:	12 c0       	rjmp	.+36     	; 0xbce <__unpack_f+0xe2>
     baa:	1c 92       	st	X, r1
     bac:	10 c0       	rjmp	.+32     	; 0xbce <__unpack_f+0xe2>
     bae:	2f 57       	subi	r18, 0x7F	; 127
     bb0:	30 40       	sbci	r19, 0x00	; 0
     bb2:	13 96       	adiw	r26, 0x03	; 3
     bb4:	3c 93       	st	X, r19
     bb6:	2e 93       	st	-X, r18
     bb8:	12 97       	sbiw	r26, 0x02	; 2
     bba:	83 e0       	ldi	r24, 0x03	; 3
     bbc:	8c 93       	st	X, r24
     bbe:	87 e0       	ldi	r24, 0x07	; 7
     bc0:	44 0f       	add	r20, r20
     bc2:	55 1f       	adc	r21, r21
     bc4:	66 1f       	adc	r22, r22
     bc6:	77 1f       	adc	r23, r23
     bc8:	8a 95       	dec	r24
     bca:	d1 f7       	brne	.-12     	; 0xbc0 <__unpack_f+0xd4>
     bcc:	70 64       	ori	r23, 0x40	; 64
     bce:	14 96       	adiw	r26, 0x04	; 4
     bd0:	4d 93       	st	X+, r20
     bd2:	5d 93       	st	X+, r21
     bd4:	6d 93       	st	X+, r22
     bd6:	7c 93       	st	X, r23
     bd8:	17 97       	sbiw	r26, 0x07	; 7
     bda:	08 95       	ret

00000bdc <__fpcmp_parts_f>:
     bdc:	1f 93       	push	r17
     bde:	dc 01       	movw	r26, r24
     be0:	fb 01       	movw	r30, r22
     be2:	9c 91       	ld	r25, X
     be4:	92 30       	cpi	r25, 0x02	; 2
     be6:	08 f4       	brcc	.+2      	; 0xbea <__fpcmp_parts_f+0xe>
     be8:	47 c0       	rjmp	.+142    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bea:	80 81       	ld	r24, Z
     bec:	82 30       	cpi	r24, 0x02	; 2
     bee:	08 f4       	brcc	.+2      	; 0xbf2 <__fpcmp_parts_f+0x16>
     bf0:	43 c0       	rjmp	.+134    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bf2:	94 30       	cpi	r25, 0x04	; 4
     bf4:	51 f4       	brne	.+20     	; 0xc0a <__fpcmp_parts_f+0x2e>
     bf6:	11 96       	adiw	r26, 0x01	; 1
     bf8:	1c 91       	ld	r17, X
     bfa:	84 30       	cpi	r24, 0x04	; 4
     bfc:	99 f5       	brne	.+102    	; 0xc64 <__fpcmp_parts_f+0x88>
     bfe:	81 81       	ldd	r24, Z+1	; 0x01
     c00:	68 2f       	mov	r22, r24
     c02:	70 e0       	ldi	r23, 0x00	; 0
     c04:	61 1b       	sub	r22, r17
     c06:	71 09       	sbc	r23, r1
     c08:	3f c0       	rjmp	.+126    	; 0xc88 <__fpcmp_parts_f+0xac>
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	21 f0       	breq	.+8      	; 0xc16 <__fpcmp_parts_f+0x3a>
     c0e:	92 30       	cpi	r25, 0x02	; 2
     c10:	31 f4       	brne	.+12     	; 0xc1e <__fpcmp_parts_f+0x42>
     c12:	82 30       	cpi	r24, 0x02	; 2
     c14:	b9 f1       	breq	.+110    	; 0xc84 <__fpcmp_parts_f+0xa8>
     c16:	81 81       	ldd	r24, Z+1	; 0x01
     c18:	88 23       	and	r24, r24
     c1a:	89 f1       	breq	.+98     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c1c:	2d c0       	rjmp	.+90     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c1e:	11 96       	adiw	r26, 0x01	; 1
     c20:	1c 91       	ld	r17, X
     c22:	11 97       	sbiw	r26, 0x01	; 1
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	f1 f0       	breq	.+60     	; 0xc64 <__fpcmp_parts_f+0x88>
     c28:	81 81       	ldd	r24, Z+1	; 0x01
     c2a:	18 17       	cp	r17, r24
     c2c:	d9 f4       	brne	.+54     	; 0xc64 <__fpcmp_parts_f+0x88>
     c2e:	12 96       	adiw	r26, 0x02	; 2
     c30:	2d 91       	ld	r18, X+
     c32:	3c 91       	ld	r19, X
     c34:	13 97       	sbiw	r26, 0x03	; 3
     c36:	82 81       	ldd	r24, Z+2	; 0x02
     c38:	93 81       	ldd	r25, Z+3	; 0x03
     c3a:	82 17       	cp	r24, r18
     c3c:	93 07       	cpc	r25, r19
     c3e:	94 f0       	brlt	.+36     	; 0xc64 <__fpcmp_parts_f+0x88>
     c40:	28 17       	cp	r18, r24
     c42:	39 07       	cpc	r19, r25
     c44:	bc f0       	brlt	.+46     	; 0xc74 <__fpcmp_parts_f+0x98>
     c46:	14 96       	adiw	r26, 0x04	; 4
     c48:	8d 91       	ld	r24, X+
     c4a:	9d 91       	ld	r25, X+
     c4c:	0d 90       	ld	r0, X+
     c4e:	bc 91       	ld	r27, X
     c50:	a0 2d       	mov	r26, r0
     c52:	24 81       	ldd	r18, Z+4	; 0x04
     c54:	35 81       	ldd	r19, Z+5	; 0x05
     c56:	46 81       	ldd	r20, Z+6	; 0x06
     c58:	57 81       	ldd	r21, Z+7	; 0x07
     c5a:	28 17       	cp	r18, r24
     c5c:	39 07       	cpc	r19, r25
     c5e:	4a 07       	cpc	r20, r26
     c60:	5b 07       	cpc	r21, r27
     c62:	18 f4       	brcc	.+6      	; 0xc6a <__fpcmp_parts_f+0x8e>
     c64:	11 23       	and	r17, r17
     c66:	41 f0       	breq	.+16     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c68:	0a c0       	rjmp	.+20     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c6a:	82 17       	cp	r24, r18
     c6c:	93 07       	cpc	r25, r19
     c6e:	a4 07       	cpc	r26, r20
     c70:	b5 07       	cpc	r27, r21
     c72:	40 f4       	brcc	.+16     	; 0xc84 <__fpcmp_parts_f+0xa8>
     c74:	11 23       	and	r17, r17
     c76:	19 f0       	breq	.+6      	; 0xc7e <__fpcmp_parts_f+0xa2>
     c78:	61 e0       	ldi	r22, 0x01	; 1
     c7a:	70 e0       	ldi	r23, 0x00	; 0
     c7c:	05 c0       	rjmp	.+10     	; 0xc88 <__fpcmp_parts_f+0xac>
     c7e:	6f ef       	ldi	r22, 0xFF	; 255
     c80:	7f ef       	ldi	r23, 0xFF	; 255
     c82:	02 c0       	rjmp	.+4      	; 0xc88 <__fpcmp_parts_f+0xac>
     c84:	60 e0       	ldi	r22, 0x00	; 0
     c86:	70 e0       	ldi	r23, 0x00	; 0
     c88:	cb 01       	movw	r24, r22
     c8a:	1f 91       	pop	r17
     c8c:	08 95       	ret

00000c8e <main>:
#include "SSD.h"
#include "Lcd.h"
#include <stdio.h>

int main()
{
     c8e:	df 93       	push	r29
     c90:	cf 93       	push	r28
     c92:	cd b7       	in	r28, 0x3d	; 61
     c94:	de b7       	in	r29, 0x3e	; 62
     c96:	2e 97       	sbiw	r28, 0x0e	; 14
     c98:	0f b6       	in	r0, 0x3f	; 63
     c9a:	f8 94       	cli
     c9c:	de bf       	out	0x3e, r29	; 62
     c9e:	0f be       	out	0x3f, r0	; 63
     ca0:	cd bf       	out	0x3d, r28	; 61
	u8 cntr =0;
     ca2:	19 82       	std	Y+1, r1	; 0x01
	  0b10001,
	  0b10001,
	  0b10001,
	  0b10001,
	  0b11111
	};
     ca4:	ce 01       	movw	r24, r28
     ca6:	02 96       	adiw	r24, 0x02	; 2
     ca8:	9b 87       	std	Y+11, r25	; 0x0b
     caa:	8a 87       	std	Y+10, r24	; 0x0a
     cac:	eb e6       	ldi	r30, 0x6B	; 107
     cae:	f0 e0       	ldi	r31, 0x00	; 0
     cb0:	fd 87       	std	Y+13, r31	; 0x0d
     cb2:	ec 87       	std	Y+12, r30	; 0x0c
     cb4:	f8 e0       	ldi	r31, 0x08	; 8
     cb6:	fe 87       	std	Y+14, r31	; 0x0e
     cb8:	ec 85       	ldd	r30, Y+12	; 0x0c
     cba:	fd 85       	ldd	r31, Y+13	; 0x0d
     cbc:	00 80       	ld	r0, Z
     cbe:	8c 85       	ldd	r24, Y+12	; 0x0c
     cc0:	9d 85       	ldd	r25, Y+13	; 0x0d
     cc2:	01 96       	adiw	r24, 0x01	; 1
     cc4:	9d 87       	std	Y+13, r25	; 0x0d
     cc6:	8c 87       	std	Y+12, r24	; 0x0c
     cc8:	ea 85       	ldd	r30, Y+10	; 0x0a
     cca:	fb 85       	ldd	r31, Y+11	; 0x0b
     ccc:	00 82       	st	Z, r0
     cce:	8a 85       	ldd	r24, Y+10	; 0x0a
     cd0:	9b 85       	ldd	r25, Y+11	; 0x0b
     cd2:	01 96       	adiw	r24, 0x01	; 1
     cd4:	9b 87       	std	Y+11, r25	; 0x0b
     cd6:	8a 87       	std	Y+10, r24	; 0x0a
     cd8:	9e 85       	ldd	r25, Y+14	; 0x0e
     cda:	91 50       	subi	r25, 0x01	; 1
     cdc:	9e 87       	std	Y+14, r25	; 0x0e
     cde:	ee 85       	ldd	r30, Y+14	; 0x0e
     ce0:	ee 23       	and	r30, r30
     ce2:	51 f7       	brne	.-44     	; 0xcb8 <main+0x2a>


	Lcd_vidinit();
     ce4:	0e 94 8a 08 	call	0x1114	; 0x1114 <Lcd_vidinit>
	for (cntr=0; cntr<8; cntr++)
     ce8:	19 82       	std	Y+1, r1	; 0x01
     cea:	12 c0       	rjmp	.+36     	; 0xd10 <main+0x82>
	{
		Lcd_vidCmd(0x40+cntr); /* */
     cec:	89 81       	ldd	r24, Y+1	; 0x01
     cee:	80 5c       	subi	r24, 0xC0	; 192
     cf0:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <Lcd_vidCmd>
		Lcd_vidDisplayChar(customChar[cntr]);
     cf4:	89 81       	ldd	r24, Y+1	; 0x01
     cf6:	28 2f       	mov	r18, r24
     cf8:	30 e0       	ldi	r19, 0x00	; 0
     cfa:	ce 01       	movw	r24, r28
     cfc:	02 96       	adiw	r24, 0x02	; 2
     cfe:	fc 01       	movw	r30, r24
     d00:	e2 0f       	add	r30, r18
     d02:	f3 1f       	adc	r31, r19
     d04:	80 81       	ld	r24, Z
     d06:	0e 94 c3 0b 	call	0x1786	; 0x1786 <Lcd_vidDisplayChar>
	  0b11111
	};


	Lcd_vidinit();
	for (cntr=0; cntr<8; cntr++)
     d0a:	89 81       	ldd	r24, Y+1	; 0x01
     d0c:	8f 5f       	subi	r24, 0xFF	; 255
     d0e:	89 83       	std	Y+1, r24	; 0x01
     d10:	89 81       	ldd	r24, Y+1	; 0x01
     d12:	88 30       	cpi	r24, 0x08	; 8
     d14:	58 f3       	brcs	.-42     	; 0xcec <main+0x5e>
	{
		Lcd_vidCmd(0x40+cntr); /* */
		Lcd_vidDisplayChar(customChar[cntr]);
	}

	Lcd_vidRowColumn(0, 0);  /*DDRAM*/
     d16:	80 e0       	ldi	r24, 0x00	; 0
     d18:	60 e0       	ldi	r22, 0x00	; 0
     d1a:	0e 94 11 0c 	call	0x1822	; 0x1822 <Lcd_vidRowColumn>
	Lcd_vidDisplayChar(0);
     d1e:	80 e0       	ldi	r24, 0x00	; 0
     d20:	0e 94 c3 0b 	call	0x1786	; 0x1786 <Lcd_vidDisplayChar>

	SSD_vidinit();
     d24:	0e 94 98 06 	call	0xd30	; 0xd30 <SSD_vidinit>
	while (1)
	{
		SSD_viddisplyNum(85);
     d28:	85 e5       	ldi	r24, 0x55	; 85
     d2a:	0e 94 bd 06 	call	0xd7a	; 0xd7a <SSD_viddisplyNum>
     d2e:	fc cf       	rjmp	.-8      	; 0xd28 <main+0x9a>

00000d30 <SSD_vidinit>:
#include "SSD.h"
#include "Dio.h"
#include <util/delay.h>

void SSD_vidinit(void)
{
     d30:	df 93       	push	r29
     d32:	cf 93       	push	r28
     d34:	cd b7       	in	r28, 0x3d	; 61
     d36:	de b7       	in	r29, 0x3e	; 62
	Dio_vidconfigChanel(DIO_PORTB, DIO_PIN1, DIO_OUTPUT);
     d38:	81 e0       	ldi	r24, 0x01	; 1
     d3a:	61 e0       	ldi	r22, 0x01	; 1
     d3c:	41 e0       	ldi	r20, 0x01	; 1
     d3e:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTB, DIO_PIN2, DIO_OUTPUT);
     d42:	81 e0       	ldi	r24, 0x01	; 1
     d44:	62 e0       	ldi	r22, 0x02	; 2
     d46:	41 e0       	ldi	r20, 0x01	; 1
     d48:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <Dio_vidconfigChanel>

	Dio_vidconfigChanel(DIO_PORTA, DIO_PIN4, DIO_OUTPUT);
     d4c:	80 e0       	ldi	r24, 0x00	; 0
     d4e:	64 e0       	ldi	r22, 0x04	; 4
     d50:	41 e0       	ldi	r20, 0x01	; 1
     d52:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTA, DIO_PIN5, DIO_OUTPUT);
     d56:	80 e0       	ldi	r24, 0x00	; 0
     d58:	65 e0       	ldi	r22, 0x05	; 5
     d5a:	41 e0       	ldi	r20, 0x01	; 1
     d5c:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTA, DIO_PIN6, DIO_OUTPUT);
     d60:	80 e0       	ldi	r24, 0x00	; 0
     d62:	66 e0       	ldi	r22, 0x06	; 6
     d64:	41 e0       	ldi	r20, 0x01	; 1
     d66:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTA, DIO_PIN7, DIO_OUTPUT);
     d6a:	80 e0       	ldi	r24, 0x00	; 0
     d6c:	67 e0       	ldi	r22, 0x07	; 7
     d6e:	41 e0       	ldi	r20, 0x01	; 1
     d70:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <Dio_vidconfigChanel>
}
     d74:	cf 91       	pop	r28
     d76:	df 91       	pop	r29
     d78:	08 95       	ret

00000d7a <SSD_viddisplyNum>:

void SSD_viddisplyNum(u8 num)
{
     d7a:	df 93       	push	r29
     d7c:	cf 93       	push	r28
     d7e:	cd b7       	in	r28, 0x3d	; 61
     d80:	de b7       	in	r29, 0x3e	; 62
     d82:	6f 97       	sbiw	r28, 0x1f	; 31
     d84:	0f b6       	in	r0, 0x3f	; 63
     d86:	f8 94       	cli
     d88:	de bf       	out	0x3e, r29	; 62
     d8a:	0f be       	out	0x3f, r0	; 63
     d8c:	cd bf       	out	0x3d, r28	; 61
     d8e:	8f 8f       	std	Y+31, r24	; 0x1f
	u8 loc_secondDigit =  (num%10)<<4;
     d90:	8f 8d       	ldd	r24, Y+31	; 0x1f
     d92:	9a e0       	ldi	r25, 0x0A	; 10
     d94:	69 2f       	mov	r22, r25
     d96:	0e 94 43 10 	call	0x2086	; 0x2086 <__udivmodqi4>
     d9a:	89 2f       	mov	r24, r25
     d9c:	82 95       	swap	r24
     d9e:	80 7f       	andi	r24, 0xF0	; 240
     da0:	8e 8f       	std	Y+30, r24	; 0x1e
	u8 loc_firstDigit = (num/10)<<4;
     da2:	8f 8d       	ldd	r24, Y+31	; 0x1f
     da4:	9a e0       	ldi	r25, 0x0A	; 10
     da6:	69 2f       	mov	r22, r25
     da8:	0e 94 43 10 	call	0x2086	; 0x2086 <__udivmodqi4>
     dac:	82 95       	swap	r24
     dae:	80 7f       	andi	r24, 0xF0	; 240
     db0:	8d 8f       	std	Y+29, r24	; 0x1d

	/* Enable SSD 1	-> EN1 = High	*/
	Dio_vidwriteChanel(DIO_PORTB, DIO_PIN2, DIO_HIGH);
     db2:	81 e0       	ldi	r24, 0x01	; 1
     db4:	62 e0       	ldi	r22, 0x02	; 2
     db6:	41 e0       	ldi	r20, 0x01	; 1
     db8:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <Dio_vidwriteChanel>
	/* Disable SSD 2 -> EN2 =Low	*/
	Dio_vidwriteChanel(DIO_PORTB, DIO_PIN1, DIO_LOW);
     dbc:	81 e0       	ldi	r24, 0x01	; 1
     dbe:	61 e0       	ldi	r22, 0x01	; 1
     dc0:	40 e0       	ldi	r20, 0x00	; 0
     dc2:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <Dio_vidwriteChanel>
	/* Write first digit */
	Dio_vidWriteChanelGroup(DIO_PORTA, loc_firstDigit, SSD_MASK);
     dc6:	80 e0       	ldi	r24, 0x00	; 0
     dc8:	6d 8d       	ldd	r22, Y+29	; 0x1d
     dca:	4f e0       	ldi	r20, 0x0F	; 15
     dcc:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <Dio_vidWriteChanelGroup>
     dd0:	80 e0       	ldi	r24, 0x00	; 0
     dd2:	90 e0       	ldi	r25, 0x00	; 0
     dd4:	a0 e8       	ldi	r26, 0x80	; 128
     dd6:	bf e3       	ldi	r27, 0x3F	; 63
     dd8:	89 8f       	std	Y+25, r24	; 0x19
     dda:	9a 8f       	std	Y+26, r25	; 0x1a
     ddc:	ab 8f       	std	Y+27, r26	; 0x1b
     dde:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     de0:	69 8d       	ldd	r22, Y+25	; 0x19
     de2:	7a 8d       	ldd	r23, Y+26	; 0x1a
     de4:	8b 8d       	ldd	r24, Y+27	; 0x1b
     de6:	9c 8d       	ldd	r25, Y+28	; 0x1c
     de8:	20 e0       	ldi	r18, 0x00	; 0
     dea:	30 e0       	ldi	r19, 0x00	; 0
     dec:	4a e7       	ldi	r20, 0x7A	; 122
     dee:	55 e4       	ldi	r21, 0x45	; 69
     df0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     df4:	dc 01       	movw	r26, r24
     df6:	cb 01       	movw	r24, r22
     df8:	8d 8b       	std	Y+21, r24	; 0x15
     dfa:	9e 8b       	std	Y+22, r25	; 0x16
     dfc:	af 8b       	std	Y+23, r26	; 0x17
     dfe:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     e00:	6d 89       	ldd	r22, Y+21	; 0x15
     e02:	7e 89       	ldd	r23, Y+22	; 0x16
     e04:	8f 89       	ldd	r24, Y+23	; 0x17
     e06:	98 8d       	ldd	r25, Y+24	; 0x18
     e08:	20 e0       	ldi	r18, 0x00	; 0
     e0a:	30 e0       	ldi	r19, 0x00	; 0
     e0c:	40 e8       	ldi	r20, 0x80	; 128
     e0e:	5f e3       	ldi	r21, 0x3F	; 63
     e10:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
     e14:	88 23       	and	r24, r24
     e16:	2c f4       	brge	.+10     	; 0xe22 <SSD_viddisplyNum+0xa8>
		__ticks = 1;
     e18:	81 e0       	ldi	r24, 0x01	; 1
     e1a:	90 e0       	ldi	r25, 0x00	; 0
     e1c:	9c 8b       	std	Y+20, r25	; 0x14
     e1e:	8b 8b       	std	Y+19, r24	; 0x13
     e20:	3f c0       	rjmp	.+126    	; 0xea0 <SSD_viddisplyNum+0x126>
	else if (__tmp > 65535)
     e22:	6d 89       	ldd	r22, Y+21	; 0x15
     e24:	7e 89       	ldd	r23, Y+22	; 0x16
     e26:	8f 89       	ldd	r24, Y+23	; 0x17
     e28:	98 8d       	ldd	r25, Y+24	; 0x18
     e2a:	20 e0       	ldi	r18, 0x00	; 0
     e2c:	3f ef       	ldi	r19, 0xFF	; 255
     e2e:	4f e7       	ldi	r20, 0x7F	; 127
     e30:	57 e4       	ldi	r21, 0x47	; 71
     e32:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
     e36:	18 16       	cp	r1, r24
     e38:	4c f5       	brge	.+82     	; 0xe8c <SSD_viddisplyNum+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e3a:	69 8d       	ldd	r22, Y+25	; 0x19
     e3c:	7a 8d       	ldd	r23, Y+26	; 0x1a
     e3e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     e40:	9c 8d       	ldd	r25, Y+28	; 0x1c
     e42:	20 e0       	ldi	r18, 0x00	; 0
     e44:	30 e0       	ldi	r19, 0x00	; 0
     e46:	40 e2       	ldi	r20, 0x20	; 32
     e48:	51 e4       	ldi	r21, 0x41	; 65
     e4a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     e4e:	dc 01       	movw	r26, r24
     e50:	cb 01       	movw	r24, r22
     e52:	bc 01       	movw	r22, r24
     e54:	cd 01       	movw	r24, r26
     e56:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     e5a:	dc 01       	movw	r26, r24
     e5c:	cb 01       	movw	r24, r22
     e5e:	9c 8b       	std	Y+20, r25	; 0x14
     e60:	8b 8b       	std	Y+19, r24	; 0x13
     e62:	0f c0       	rjmp	.+30     	; 0xe82 <SSD_viddisplyNum+0x108>
     e64:	80 e9       	ldi	r24, 0x90	; 144
     e66:	91 e0       	ldi	r25, 0x01	; 1
     e68:	9a 8b       	std	Y+18, r25	; 0x12
     e6a:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     e6c:	89 89       	ldd	r24, Y+17	; 0x11
     e6e:	9a 89       	ldd	r25, Y+18	; 0x12
     e70:	01 97       	sbiw	r24, 0x01	; 1
     e72:	f1 f7       	brne	.-4      	; 0xe70 <SSD_viddisplyNum+0xf6>
     e74:	9a 8b       	std	Y+18, r25	; 0x12
     e76:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e78:	8b 89       	ldd	r24, Y+19	; 0x13
     e7a:	9c 89       	ldd	r25, Y+20	; 0x14
     e7c:	01 97       	sbiw	r24, 0x01	; 1
     e7e:	9c 8b       	std	Y+20, r25	; 0x14
     e80:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e82:	8b 89       	ldd	r24, Y+19	; 0x13
     e84:	9c 89       	ldd	r25, Y+20	; 0x14
     e86:	00 97       	sbiw	r24, 0x00	; 0
     e88:	69 f7       	brne	.-38     	; 0xe64 <SSD_viddisplyNum+0xea>
     e8a:	14 c0       	rjmp	.+40     	; 0xeb4 <SSD_viddisplyNum+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e8c:	6d 89       	ldd	r22, Y+21	; 0x15
     e8e:	7e 89       	ldd	r23, Y+22	; 0x16
     e90:	8f 89       	ldd	r24, Y+23	; 0x17
     e92:	98 8d       	ldd	r25, Y+24	; 0x18
     e94:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     e98:	dc 01       	movw	r26, r24
     e9a:	cb 01       	movw	r24, r22
     e9c:	9c 8b       	std	Y+20, r25	; 0x14
     e9e:	8b 8b       	std	Y+19, r24	; 0x13
     ea0:	8b 89       	ldd	r24, Y+19	; 0x13
     ea2:	9c 89       	ldd	r25, Y+20	; 0x14
     ea4:	98 8b       	std	Y+16, r25	; 0x10
     ea6:	8f 87       	std	Y+15, r24	; 0x0f
     ea8:	8f 85       	ldd	r24, Y+15	; 0x0f
     eaa:	98 89       	ldd	r25, Y+16	; 0x10
     eac:	01 97       	sbiw	r24, 0x01	; 1
     eae:	f1 f7       	brne	.-4      	; 0xeac <SSD_viddisplyNum+0x132>
     eb0:	98 8b       	std	Y+16, r25	; 0x10
     eb2:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1);

	/* Disable SSD 1	-> EN1 = Low	*/
	Dio_vidwriteChanel(DIO_PORTB, DIO_PIN2, DIO_LOW);
     eb4:	81 e0       	ldi	r24, 0x01	; 1
     eb6:	62 e0       	ldi	r22, 0x02	; 2
     eb8:	40 e0       	ldi	r20, 0x00	; 0
     eba:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <Dio_vidwriteChanel>
	/* Enable SSD 2 -> EN2 = High	*/
	Dio_vidwriteChanel(DIO_PORTB, DIO_PIN1, DIO_HIGH);
     ebe:	81 e0       	ldi	r24, 0x01	; 1
     ec0:	61 e0       	ldi	r22, 0x01	; 1
     ec2:	41 e0       	ldi	r20, 0x01	; 1
     ec4:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <Dio_vidwriteChanel>
	/* Write second digit */
	Dio_vidWriteChanelGroup(DIO_PORTA, loc_secondDigit, SSD_MASK);
     ec8:	80 e0       	ldi	r24, 0x00	; 0
     eca:	6e 8d       	ldd	r22, Y+30	; 0x1e
     ecc:	4f e0       	ldi	r20, 0x0F	; 15
     ece:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <Dio_vidWriteChanelGroup>
     ed2:	80 e0       	ldi	r24, 0x00	; 0
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	a0 e8       	ldi	r26, 0x80	; 128
     ed8:	bf e3       	ldi	r27, 0x3F	; 63
     eda:	8b 87       	std	Y+11, r24	; 0x0b
     edc:	9c 87       	std	Y+12, r25	; 0x0c
     ede:	ad 87       	std	Y+13, r26	; 0x0d
     ee0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ee2:	6b 85       	ldd	r22, Y+11	; 0x0b
     ee4:	7c 85       	ldd	r23, Y+12	; 0x0c
     ee6:	8d 85       	ldd	r24, Y+13	; 0x0d
     ee8:	9e 85       	ldd	r25, Y+14	; 0x0e
     eea:	20 e0       	ldi	r18, 0x00	; 0
     eec:	30 e0       	ldi	r19, 0x00	; 0
     eee:	4a e7       	ldi	r20, 0x7A	; 122
     ef0:	55 e4       	ldi	r21, 0x45	; 69
     ef2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     ef6:	dc 01       	movw	r26, r24
     ef8:	cb 01       	movw	r24, r22
     efa:	8f 83       	std	Y+7, r24	; 0x07
     efc:	98 87       	std	Y+8, r25	; 0x08
     efe:	a9 87       	std	Y+9, r26	; 0x09
     f00:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     f02:	6f 81       	ldd	r22, Y+7	; 0x07
     f04:	78 85       	ldd	r23, Y+8	; 0x08
     f06:	89 85       	ldd	r24, Y+9	; 0x09
     f08:	9a 85       	ldd	r25, Y+10	; 0x0a
     f0a:	20 e0       	ldi	r18, 0x00	; 0
     f0c:	30 e0       	ldi	r19, 0x00	; 0
     f0e:	40 e8       	ldi	r20, 0x80	; 128
     f10:	5f e3       	ldi	r21, 0x3F	; 63
     f12:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
     f16:	88 23       	and	r24, r24
     f18:	2c f4       	brge	.+10     	; 0xf24 <SSD_viddisplyNum+0x1aa>
		__ticks = 1;
     f1a:	81 e0       	ldi	r24, 0x01	; 1
     f1c:	90 e0       	ldi	r25, 0x00	; 0
     f1e:	9e 83       	std	Y+6, r25	; 0x06
     f20:	8d 83       	std	Y+5, r24	; 0x05
     f22:	3f c0       	rjmp	.+126    	; 0xfa2 <SSD_viddisplyNum+0x228>
	else if (__tmp > 65535)
     f24:	6f 81       	ldd	r22, Y+7	; 0x07
     f26:	78 85       	ldd	r23, Y+8	; 0x08
     f28:	89 85       	ldd	r24, Y+9	; 0x09
     f2a:	9a 85       	ldd	r25, Y+10	; 0x0a
     f2c:	20 e0       	ldi	r18, 0x00	; 0
     f2e:	3f ef       	ldi	r19, 0xFF	; 255
     f30:	4f e7       	ldi	r20, 0x7F	; 127
     f32:	57 e4       	ldi	r21, 0x47	; 71
     f34:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
     f38:	18 16       	cp	r1, r24
     f3a:	4c f5       	brge	.+82     	; 0xf8e <SSD_viddisplyNum+0x214>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f3c:	6b 85       	ldd	r22, Y+11	; 0x0b
     f3e:	7c 85       	ldd	r23, Y+12	; 0x0c
     f40:	8d 85       	ldd	r24, Y+13	; 0x0d
     f42:	9e 85       	ldd	r25, Y+14	; 0x0e
     f44:	20 e0       	ldi	r18, 0x00	; 0
     f46:	30 e0       	ldi	r19, 0x00	; 0
     f48:	40 e2       	ldi	r20, 0x20	; 32
     f4a:	51 e4       	ldi	r21, 0x41	; 65
     f4c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f50:	dc 01       	movw	r26, r24
     f52:	cb 01       	movw	r24, r22
     f54:	bc 01       	movw	r22, r24
     f56:	cd 01       	movw	r24, r26
     f58:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     f5c:	dc 01       	movw	r26, r24
     f5e:	cb 01       	movw	r24, r22
     f60:	9e 83       	std	Y+6, r25	; 0x06
     f62:	8d 83       	std	Y+5, r24	; 0x05
     f64:	0f c0       	rjmp	.+30     	; 0xf84 <SSD_viddisplyNum+0x20a>
     f66:	80 e9       	ldi	r24, 0x90	; 144
     f68:	91 e0       	ldi	r25, 0x01	; 1
     f6a:	9c 83       	std	Y+4, r25	; 0x04
     f6c:	8b 83       	std	Y+3, r24	; 0x03
     f6e:	8b 81       	ldd	r24, Y+3	; 0x03
     f70:	9c 81       	ldd	r25, Y+4	; 0x04
     f72:	01 97       	sbiw	r24, 0x01	; 1
     f74:	f1 f7       	brne	.-4      	; 0xf72 <SSD_viddisplyNum+0x1f8>
     f76:	9c 83       	std	Y+4, r25	; 0x04
     f78:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f7a:	8d 81       	ldd	r24, Y+5	; 0x05
     f7c:	9e 81       	ldd	r25, Y+6	; 0x06
     f7e:	01 97       	sbiw	r24, 0x01	; 1
     f80:	9e 83       	std	Y+6, r25	; 0x06
     f82:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f84:	8d 81       	ldd	r24, Y+5	; 0x05
     f86:	9e 81       	ldd	r25, Y+6	; 0x06
     f88:	00 97       	sbiw	r24, 0x00	; 0
     f8a:	69 f7       	brne	.-38     	; 0xf66 <SSD_viddisplyNum+0x1ec>
     f8c:	14 c0       	rjmp	.+40     	; 0xfb6 <SSD_viddisplyNum+0x23c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f8e:	6f 81       	ldd	r22, Y+7	; 0x07
     f90:	78 85       	ldd	r23, Y+8	; 0x08
     f92:	89 85       	ldd	r24, Y+9	; 0x09
     f94:	9a 85       	ldd	r25, Y+10	; 0x0a
     f96:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     f9a:	dc 01       	movw	r26, r24
     f9c:	cb 01       	movw	r24, r22
     f9e:	9e 83       	std	Y+6, r25	; 0x06
     fa0:	8d 83       	std	Y+5, r24	; 0x05
     fa2:	8d 81       	ldd	r24, Y+5	; 0x05
     fa4:	9e 81       	ldd	r25, Y+6	; 0x06
     fa6:	9a 83       	std	Y+2, r25	; 0x02
     fa8:	89 83       	std	Y+1, r24	; 0x01
     faa:	89 81       	ldd	r24, Y+1	; 0x01
     fac:	9a 81       	ldd	r25, Y+2	; 0x02
     fae:	01 97       	sbiw	r24, 0x01	; 1
     fb0:	f1 f7       	brne	.-4      	; 0xfae <SSD_viddisplyNum+0x234>
     fb2:	9a 83       	std	Y+2, r25	; 0x02
     fb4:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(1);
}
     fb6:	6f 96       	adiw	r28, 0x1f	; 31
     fb8:	0f b6       	in	r0, 0x3f	; 63
     fba:	f8 94       	cli
     fbc:	de bf       	out	0x3e, r29	; 62
     fbe:	0f be       	out	0x3f, r0	; 63
     fc0:	cd bf       	out	0x3d, r28	; 61
     fc2:	cf 91       	pop	r28
     fc4:	df 91       	pop	r29
     fc6:	08 95       	ret

00000fc8 <Led_vidinit>:

#include "Dio.h"
#include "Led.h"

void Led_vidinit(void)
{
     fc8:	df 93       	push	r29
     fca:	cf 93       	push	r28
     fcc:	cd b7       	in	r28, 0x3d	; 61
     fce:	de b7       	in	r29, 0x3e	; 62
	Dio_vidconfigChanel(DIO_PORTC, DIO_PIN2,DIO_OUTPUT);
     fd0:	82 e0       	ldi	r24, 0x02	; 2
     fd2:	62 e0       	ldi	r22, 0x02	; 2
     fd4:	41 e0       	ldi	r20, 0x01	; 1
     fd6:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTC, DIO_PIN7,DIO_OUTPUT);
     fda:	82 e0       	ldi	r24, 0x02	; 2
     fdc:	67 e0       	ldi	r22, 0x07	; 7
     fde:	41 e0       	ldi	r20, 0x01	; 1
     fe0:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTD, DIO_PIN3,DIO_OUTPUT);
     fe4:	83 e0       	ldi	r24, 0x03	; 3
     fe6:	63 e0       	ldi	r22, 0x03	; 3
     fe8:	41 e0       	ldi	r20, 0x01	; 1
     fea:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <Dio_vidconfigChanel>
}
     fee:	cf 91       	pop	r28
     ff0:	df 91       	pop	r29
     ff2:	08 95       	ret

00000ff4 <Led_vidledOn>:

void Led_vidledOn(led_ledId_t ledId)
{
     ff4:	df 93       	push	r29
     ff6:	cf 93       	push	r28
     ff8:	00 d0       	rcall	.+0      	; 0xffa <Led_vidledOn+0x6>
     ffa:	0f 92       	push	r0
     ffc:	cd b7       	in	r28, 0x3d	; 61
     ffe:	de b7       	in	r29, 0x3e	; 62
    1000:	89 83       	std	Y+1, r24	; 0x01
	switch (ledId)
    1002:	89 81       	ldd	r24, Y+1	; 0x01
    1004:	28 2f       	mov	r18, r24
    1006:	30 e0       	ldi	r19, 0x00	; 0
    1008:	3b 83       	std	Y+3, r19	; 0x03
    100a:	2a 83       	std	Y+2, r18	; 0x02
    100c:	8a 81       	ldd	r24, Y+2	; 0x02
    100e:	9b 81       	ldd	r25, Y+3	; 0x03
    1010:	81 30       	cpi	r24, 0x01	; 1
    1012:	91 05       	cpc	r25, r1
    1014:	79 f0       	breq	.+30     	; 0x1034 <Led_vidledOn+0x40>
    1016:	2a 81       	ldd	r18, Y+2	; 0x02
    1018:	3b 81       	ldd	r19, Y+3	; 0x03
    101a:	22 30       	cpi	r18, 0x02	; 2
    101c:	31 05       	cpc	r19, r1
    101e:	81 f0       	breq	.+32     	; 0x1040 <Led_vidledOn+0x4c>
    1020:	8a 81       	ldd	r24, Y+2	; 0x02
    1022:	9b 81       	ldd	r25, Y+3	; 0x03
    1024:	00 97       	sbiw	r24, 0x00	; 0
    1026:	89 f4       	brne	.+34     	; 0x104a <Led_vidledOn+0x56>
	{
	case LED0:
		Dio_vidwriteChanel(DIO_PORTC, DIO_PIN2, DIO_HIGH);
    1028:	82 e0       	ldi	r24, 0x02	; 2
    102a:	62 e0       	ldi	r22, 0x02	; 2
    102c:	41 e0       	ldi	r20, 0x01	; 1
    102e:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <Dio_vidwriteChanel>
    1032:	0b c0       	rjmp	.+22     	; 0x104a <Led_vidledOn+0x56>
		break;

	case LED1:
		Dio_vidwriteChanel(DIO_PORTC, DIO_PIN7, DIO_HIGH);
    1034:	82 e0       	ldi	r24, 0x02	; 2
    1036:	67 e0       	ldi	r22, 0x07	; 7
    1038:	41 e0       	ldi	r20, 0x01	; 1
    103a:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <Dio_vidwriteChanel>
    103e:	05 c0       	rjmp	.+10     	; 0x104a <Led_vidledOn+0x56>
		break;

	case LED2:
		Dio_vidwriteChanel(DIO_PORTD, DIO_PIN3, DIO_HIGH);
    1040:	83 e0       	ldi	r24, 0x03	; 3
    1042:	63 e0       	ldi	r22, 0x03	; 3
    1044:	41 e0       	ldi	r20, 0x01	; 1
    1046:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <Dio_vidwriteChanel>
		break;
	}
}
    104a:	0f 90       	pop	r0
    104c:	0f 90       	pop	r0
    104e:	0f 90       	pop	r0
    1050:	cf 91       	pop	r28
    1052:	df 91       	pop	r29
    1054:	08 95       	ret

00001056 <Led_vidledOff>:

void Led_vidledOff(led_ledId_t ledId)
{
    1056:	df 93       	push	r29
    1058:	cf 93       	push	r28
    105a:	00 d0       	rcall	.+0      	; 0x105c <Led_vidledOff+0x6>
    105c:	0f 92       	push	r0
    105e:	cd b7       	in	r28, 0x3d	; 61
    1060:	de b7       	in	r29, 0x3e	; 62
    1062:	89 83       	std	Y+1, r24	; 0x01
	switch (ledId)
    1064:	89 81       	ldd	r24, Y+1	; 0x01
    1066:	28 2f       	mov	r18, r24
    1068:	30 e0       	ldi	r19, 0x00	; 0
    106a:	3b 83       	std	Y+3, r19	; 0x03
    106c:	2a 83       	std	Y+2, r18	; 0x02
    106e:	8a 81       	ldd	r24, Y+2	; 0x02
    1070:	9b 81       	ldd	r25, Y+3	; 0x03
    1072:	81 30       	cpi	r24, 0x01	; 1
    1074:	91 05       	cpc	r25, r1
    1076:	79 f0       	breq	.+30     	; 0x1096 <Led_vidledOff+0x40>
    1078:	2a 81       	ldd	r18, Y+2	; 0x02
    107a:	3b 81       	ldd	r19, Y+3	; 0x03
    107c:	22 30       	cpi	r18, 0x02	; 2
    107e:	31 05       	cpc	r19, r1
    1080:	81 f0       	breq	.+32     	; 0x10a2 <Led_vidledOff+0x4c>
    1082:	8a 81       	ldd	r24, Y+2	; 0x02
    1084:	9b 81       	ldd	r25, Y+3	; 0x03
    1086:	00 97       	sbiw	r24, 0x00	; 0
    1088:	89 f4       	brne	.+34     	; 0x10ac <Led_vidledOff+0x56>
	{
	case LED0:
		Dio_vidwriteChanel(DIO_PORTC, DIO_PIN2, DIO_LOW);
    108a:	82 e0       	ldi	r24, 0x02	; 2
    108c:	62 e0       	ldi	r22, 0x02	; 2
    108e:	40 e0       	ldi	r20, 0x00	; 0
    1090:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <Dio_vidwriteChanel>
    1094:	0b c0       	rjmp	.+22     	; 0x10ac <Led_vidledOff+0x56>
		break;

	case LED1:
		Dio_vidwriteChanel(DIO_PORTC, DIO_PIN7, DIO_LOW);
    1096:	82 e0       	ldi	r24, 0x02	; 2
    1098:	67 e0       	ldi	r22, 0x07	; 7
    109a:	40 e0       	ldi	r20, 0x00	; 0
    109c:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <Dio_vidwriteChanel>
    10a0:	05 c0       	rjmp	.+10     	; 0x10ac <Led_vidledOff+0x56>
		break;

	case LED2:
		Dio_vidwriteChanel(DIO_PORTD, DIO_PIN3, DIO_LOW);
    10a2:	83 e0       	ldi	r24, 0x03	; 3
    10a4:	63 e0       	ldi	r22, 0x03	; 3
    10a6:	40 e0       	ldi	r20, 0x00	; 0
    10a8:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <Dio_vidwriteChanel>
		break;
	}
}
    10ac:	0f 90       	pop	r0
    10ae:	0f 90       	pop	r0
    10b0:	0f 90       	pop	r0
    10b2:	cf 91       	pop	r28
    10b4:	df 91       	pop	r29
    10b6:	08 95       	ret

000010b8 <Led_vidledToggle>:
void Led_vidledToggle(led_ledId_t ledId)
{
    10b8:	df 93       	push	r29
    10ba:	cf 93       	push	r28
    10bc:	00 d0       	rcall	.+0      	; 0x10be <Led_vidledToggle+0x6>
    10be:	0f 92       	push	r0
    10c0:	cd b7       	in	r28, 0x3d	; 61
    10c2:	de b7       	in	r29, 0x3e	; 62
    10c4:	89 83       	std	Y+1, r24	; 0x01
	switch (ledId)
    10c6:	89 81       	ldd	r24, Y+1	; 0x01
    10c8:	28 2f       	mov	r18, r24
    10ca:	30 e0       	ldi	r19, 0x00	; 0
    10cc:	3b 83       	std	Y+3, r19	; 0x03
    10ce:	2a 83       	std	Y+2, r18	; 0x02
    10d0:	8a 81       	ldd	r24, Y+2	; 0x02
    10d2:	9b 81       	ldd	r25, Y+3	; 0x03
    10d4:	81 30       	cpi	r24, 0x01	; 1
    10d6:	91 05       	cpc	r25, r1
    10d8:	71 f0       	breq	.+28     	; 0x10f6 <Led_vidledToggle+0x3e>
    10da:	2a 81       	ldd	r18, Y+2	; 0x02
    10dc:	3b 81       	ldd	r19, Y+3	; 0x03
    10de:	22 30       	cpi	r18, 0x02	; 2
    10e0:	31 05       	cpc	r19, r1
    10e2:	71 f0       	breq	.+28     	; 0x1100 <Led_vidledToggle+0x48>
    10e4:	8a 81       	ldd	r24, Y+2	; 0x02
    10e6:	9b 81       	ldd	r25, Y+3	; 0x03
    10e8:	00 97       	sbiw	r24, 0x00	; 0
    10ea:	71 f4       	brne	.+28     	; 0x1108 <Led_vidledToggle+0x50>
	{
	case LED0:
		Dio_vidflipChanel(DIO_PORTC, DIO_PIN2);
    10ec:	82 e0       	ldi	r24, 0x02	; 2
    10ee:	62 e0       	ldi	r22, 0x02	; 2
    10f0:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <Dio_vidflipChanel>
    10f4:	09 c0       	rjmp	.+18     	; 0x1108 <Led_vidledToggle+0x50>
		break;

	case LED1:
		Dio_vidflipChanel(DIO_PORTC, DIO_PIN7);
    10f6:	82 e0       	ldi	r24, 0x02	; 2
    10f8:	67 e0       	ldi	r22, 0x07	; 7
    10fa:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <Dio_vidflipChanel>
    10fe:	04 c0       	rjmp	.+8      	; 0x1108 <Led_vidledToggle+0x50>
		break;

	case LED2:
		Dio_vidflipChanel(DIO_PORTD, DIO_PIN3);
    1100:	83 e0       	ldi	r24, 0x03	; 3
    1102:	63 e0       	ldi	r22, 0x03	; 3
    1104:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <Dio_vidflipChanel>
		break;
	}
}
    1108:	0f 90       	pop	r0
    110a:	0f 90       	pop	r0
    110c:	0f 90       	pop	r0
    110e:	cf 91       	pop	r28
    1110:	df 91       	pop	r29
    1112:	08 95       	ret

00001114 <Lcd_vidinit>:
#include "util/delay.h"
#include <stdio.h>


void Lcd_vidinit(void)
{
    1114:	df 93       	push	r29
    1116:	cf 93       	push	r28
    1118:	cd b7       	in	r28, 0x3d	; 61
    111a:	de b7       	in	r29, 0x3e	; 62
    111c:	e4 97       	sbiw	r28, 0x34	; 52
    111e:	0f b6       	in	r0, 0x3f	; 63
    1120:	f8 94       	cli
    1122:	de bf       	out	0x3e, r29	; 62
    1124:	0f be       	out	0x3f, r0	; 63
    1126:	cd bf       	out	0x3d, r28	; 61
	/*	configure control pins as output	*/
	Dio_vidconfigChanel(DIO_PORTB, DIO_PIN1, DIO_OUTPUT);
    1128:	81 e0       	ldi	r24, 0x01	; 1
    112a:	61 e0       	ldi	r22, 0x01	; 1
    112c:	41 e0       	ldi	r20, 0x01	; 1
    112e:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTB, DIO_PIN2, DIO_OUTPUT);
    1132:	81 e0       	ldi	r24, 0x01	; 1
    1134:	62 e0       	ldi	r22, 0x02	; 2
    1136:	41 e0       	ldi	r20, 0x01	; 1
    1138:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTB, DIO_PIN3, DIO_OUTPUT);
    113c:	81 e0       	ldi	r24, 0x01	; 1
    113e:	63 e0       	ldi	r22, 0x03	; 3
    1140:	41 e0       	ldi	r20, 0x01	; 1
    1142:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <Dio_vidconfigChanel>

	/*	configure data pins as output	*/
	Dio_vidconfigChanel(DIO_PORTA, DIO_PIN4, DIO_OUTPUT);
    1146:	80 e0       	ldi	r24, 0x00	; 0
    1148:	64 e0       	ldi	r22, 0x04	; 4
    114a:	41 e0       	ldi	r20, 0x01	; 1
    114c:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTA, DIO_PIN5, DIO_OUTPUT);
    1150:	80 e0       	ldi	r24, 0x00	; 0
    1152:	65 e0       	ldi	r22, 0x05	; 5
    1154:	41 e0       	ldi	r20, 0x01	; 1
    1156:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTA, DIO_PIN6, DIO_OUTPUT);
    115a:	80 e0       	ldi	r24, 0x00	; 0
    115c:	66 e0       	ldi	r22, 0x06	; 6
    115e:	41 e0       	ldi	r20, 0x01	; 1
    1160:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTA, DIO_PIN7, DIO_OUTPUT);
    1164:	80 e0       	ldi	r24, 0x00	; 0
    1166:	67 e0       	ldi	r22, 0x07	; 7
    1168:	41 e0       	ldi	r20, 0x01	; 1
    116a:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <Dio_vidconfigChanel>

	Dio_vidwriteChanel(DIO_PORTB, DIO_PIN2, DIO_LOW);
    116e:	81 e0       	ldi	r24, 0x01	; 1
    1170:	62 e0       	ldi	r22, 0x02	; 2
    1172:	40 e0       	ldi	r20, 0x00	; 0
    1174:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <Dio_vidwriteChanel>
    1178:	80 e0       	ldi	r24, 0x00	; 0
    117a:	90 e0       	ldi	r25, 0x00	; 0
    117c:	a0 e7       	ldi	r26, 0x70	; 112
    117e:	b1 e4       	ldi	r27, 0x41	; 65
    1180:	89 ab       	std	Y+49, r24	; 0x31
    1182:	9a ab       	std	Y+50, r25	; 0x32
    1184:	ab ab       	std	Y+51, r26	; 0x33
    1186:	bc ab       	std	Y+52, r27	; 0x34
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1188:	69 a9       	ldd	r22, Y+49	; 0x31
    118a:	7a a9       	ldd	r23, Y+50	; 0x32
    118c:	8b a9       	ldd	r24, Y+51	; 0x33
    118e:	9c a9       	ldd	r25, Y+52	; 0x34
    1190:	20 e0       	ldi	r18, 0x00	; 0
    1192:	30 e0       	ldi	r19, 0x00	; 0
    1194:	4a e7       	ldi	r20, 0x7A	; 122
    1196:	55 e4       	ldi	r21, 0x45	; 69
    1198:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    119c:	dc 01       	movw	r26, r24
    119e:	cb 01       	movw	r24, r22
    11a0:	8d a7       	std	Y+45, r24	; 0x2d
    11a2:	9e a7       	std	Y+46, r25	; 0x2e
    11a4:	af a7       	std	Y+47, r26	; 0x2f
    11a6:	b8 ab       	std	Y+48, r27	; 0x30
	if (__tmp < 1.0)
    11a8:	6d a5       	ldd	r22, Y+45	; 0x2d
    11aa:	7e a5       	ldd	r23, Y+46	; 0x2e
    11ac:	8f a5       	ldd	r24, Y+47	; 0x2f
    11ae:	98 a9       	ldd	r25, Y+48	; 0x30
    11b0:	20 e0       	ldi	r18, 0x00	; 0
    11b2:	30 e0       	ldi	r19, 0x00	; 0
    11b4:	40 e8       	ldi	r20, 0x80	; 128
    11b6:	5f e3       	ldi	r21, 0x3F	; 63
    11b8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    11bc:	88 23       	and	r24, r24
    11be:	2c f4       	brge	.+10     	; 0x11ca <Lcd_vidinit+0xb6>
		__ticks = 1;
    11c0:	81 e0       	ldi	r24, 0x01	; 1
    11c2:	90 e0       	ldi	r25, 0x00	; 0
    11c4:	9c a7       	std	Y+44, r25	; 0x2c
    11c6:	8b a7       	std	Y+43, r24	; 0x2b
    11c8:	3f c0       	rjmp	.+126    	; 0x1248 <Lcd_vidinit+0x134>
	else if (__tmp > 65535)
    11ca:	6d a5       	ldd	r22, Y+45	; 0x2d
    11cc:	7e a5       	ldd	r23, Y+46	; 0x2e
    11ce:	8f a5       	ldd	r24, Y+47	; 0x2f
    11d0:	98 a9       	ldd	r25, Y+48	; 0x30
    11d2:	20 e0       	ldi	r18, 0x00	; 0
    11d4:	3f ef       	ldi	r19, 0xFF	; 255
    11d6:	4f e7       	ldi	r20, 0x7F	; 127
    11d8:	57 e4       	ldi	r21, 0x47	; 71
    11da:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    11de:	18 16       	cp	r1, r24
    11e0:	4c f5       	brge	.+82     	; 0x1234 <Lcd_vidinit+0x120>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11e2:	69 a9       	ldd	r22, Y+49	; 0x31
    11e4:	7a a9       	ldd	r23, Y+50	; 0x32
    11e6:	8b a9       	ldd	r24, Y+51	; 0x33
    11e8:	9c a9       	ldd	r25, Y+52	; 0x34
    11ea:	20 e0       	ldi	r18, 0x00	; 0
    11ec:	30 e0       	ldi	r19, 0x00	; 0
    11ee:	40 e2       	ldi	r20, 0x20	; 32
    11f0:	51 e4       	ldi	r21, 0x41	; 65
    11f2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    11f6:	dc 01       	movw	r26, r24
    11f8:	cb 01       	movw	r24, r22
    11fa:	bc 01       	movw	r22, r24
    11fc:	cd 01       	movw	r24, r26
    11fe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1202:	dc 01       	movw	r26, r24
    1204:	cb 01       	movw	r24, r22
    1206:	9c a7       	std	Y+44, r25	; 0x2c
    1208:	8b a7       	std	Y+43, r24	; 0x2b
    120a:	0f c0       	rjmp	.+30     	; 0x122a <Lcd_vidinit+0x116>
    120c:	80 e9       	ldi	r24, 0x90	; 144
    120e:	91 e0       	ldi	r25, 0x01	; 1
    1210:	9a a7       	std	Y+42, r25	; 0x2a
    1212:	89 a7       	std	Y+41, r24	; 0x29
    1214:	89 a5       	ldd	r24, Y+41	; 0x29
    1216:	9a a5       	ldd	r25, Y+42	; 0x2a
    1218:	01 97       	sbiw	r24, 0x01	; 1
    121a:	f1 f7       	brne	.-4      	; 0x1218 <Lcd_vidinit+0x104>
    121c:	9a a7       	std	Y+42, r25	; 0x2a
    121e:	89 a7       	std	Y+41, r24	; 0x29
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1220:	8b a5       	ldd	r24, Y+43	; 0x2b
    1222:	9c a5       	ldd	r25, Y+44	; 0x2c
    1224:	01 97       	sbiw	r24, 0x01	; 1
    1226:	9c a7       	std	Y+44, r25	; 0x2c
    1228:	8b a7       	std	Y+43, r24	; 0x2b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    122a:	8b a5       	ldd	r24, Y+43	; 0x2b
    122c:	9c a5       	ldd	r25, Y+44	; 0x2c
    122e:	00 97       	sbiw	r24, 0x00	; 0
    1230:	69 f7       	brne	.-38     	; 0x120c <Lcd_vidinit+0xf8>
    1232:	14 c0       	rjmp	.+40     	; 0x125c <Lcd_vidinit+0x148>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1234:	6d a5       	ldd	r22, Y+45	; 0x2d
    1236:	7e a5       	ldd	r23, Y+46	; 0x2e
    1238:	8f a5       	ldd	r24, Y+47	; 0x2f
    123a:	98 a9       	ldd	r25, Y+48	; 0x30
    123c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1240:	dc 01       	movw	r26, r24
    1242:	cb 01       	movw	r24, r22
    1244:	9c a7       	std	Y+44, r25	; 0x2c
    1246:	8b a7       	std	Y+43, r24	; 0x2b
    1248:	8b a5       	ldd	r24, Y+43	; 0x2b
    124a:	9c a5       	ldd	r25, Y+44	; 0x2c
    124c:	98 a7       	std	Y+40, r25	; 0x28
    124e:	8f a3       	std	Y+39, r24	; 0x27
    1250:	8f a1       	ldd	r24, Y+39	; 0x27
    1252:	98 a5       	ldd	r25, Y+40	; 0x28
    1254:	01 97       	sbiw	r24, 0x01	; 1
    1256:	f1 f7       	brne	.-4      	; 0x1254 <Lcd_vidinit+0x140>
    1258:	98 a7       	std	Y+40, r25	; 0x28
    125a:	8f a3       	std	Y+39, r24	; 0x27

	_delay_ms(15);

	Lcd_vidCmd(0x03);
    125c:	83 e0       	ldi	r24, 0x03	; 3
    125e:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <Lcd_vidCmd>
    1262:	80 e0       	ldi	r24, 0x00	; 0
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	a0 ea       	ldi	r26, 0xA0	; 160
    1268:	b0 e4       	ldi	r27, 0x40	; 64
    126a:	8b a3       	std	Y+35, r24	; 0x23
    126c:	9c a3       	std	Y+36, r25	; 0x24
    126e:	ad a3       	std	Y+37, r26	; 0x25
    1270:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1272:	6b a1       	ldd	r22, Y+35	; 0x23
    1274:	7c a1       	ldd	r23, Y+36	; 0x24
    1276:	8d a1       	ldd	r24, Y+37	; 0x25
    1278:	9e a1       	ldd	r25, Y+38	; 0x26
    127a:	20 e0       	ldi	r18, 0x00	; 0
    127c:	30 e0       	ldi	r19, 0x00	; 0
    127e:	4a e7       	ldi	r20, 0x7A	; 122
    1280:	55 e4       	ldi	r21, 0x45	; 69
    1282:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1286:	dc 01       	movw	r26, r24
    1288:	cb 01       	movw	r24, r22
    128a:	8f 8f       	std	Y+31, r24	; 0x1f
    128c:	98 a3       	std	Y+32, r25	; 0x20
    128e:	a9 a3       	std	Y+33, r26	; 0x21
    1290:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    1292:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1294:	78 a1       	ldd	r23, Y+32	; 0x20
    1296:	89 a1       	ldd	r24, Y+33	; 0x21
    1298:	9a a1       	ldd	r25, Y+34	; 0x22
    129a:	20 e0       	ldi	r18, 0x00	; 0
    129c:	30 e0       	ldi	r19, 0x00	; 0
    129e:	40 e8       	ldi	r20, 0x80	; 128
    12a0:	5f e3       	ldi	r21, 0x3F	; 63
    12a2:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    12a6:	88 23       	and	r24, r24
    12a8:	2c f4       	brge	.+10     	; 0x12b4 <Lcd_vidinit+0x1a0>
		__ticks = 1;
    12aa:	81 e0       	ldi	r24, 0x01	; 1
    12ac:	90 e0       	ldi	r25, 0x00	; 0
    12ae:	9e 8f       	std	Y+30, r25	; 0x1e
    12b0:	8d 8f       	std	Y+29, r24	; 0x1d
    12b2:	3f c0       	rjmp	.+126    	; 0x1332 <Lcd_vidinit+0x21e>
	else if (__tmp > 65535)
    12b4:	6f 8d       	ldd	r22, Y+31	; 0x1f
    12b6:	78 a1       	ldd	r23, Y+32	; 0x20
    12b8:	89 a1       	ldd	r24, Y+33	; 0x21
    12ba:	9a a1       	ldd	r25, Y+34	; 0x22
    12bc:	20 e0       	ldi	r18, 0x00	; 0
    12be:	3f ef       	ldi	r19, 0xFF	; 255
    12c0:	4f e7       	ldi	r20, 0x7F	; 127
    12c2:	57 e4       	ldi	r21, 0x47	; 71
    12c4:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    12c8:	18 16       	cp	r1, r24
    12ca:	4c f5       	brge	.+82     	; 0x131e <Lcd_vidinit+0x20a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12cc:	6b a1       	ldd	r22, Y+35	; 0x23
    12ce:	7c a1       	ldd	r23, Y+36	; 0x24
    12d0:	8d a1       	ldd	r24, Y+37	; 0x25
    12d2:	9e a1       	ldd	r25, Y+38	; 0x26
    12d4:	20 e0       	ldi	r18, 0x00	; 0
    12d6:	30 e0       	ldi	r19, 0x00	; 0
    12d8:	40 e2       	ldi	r20, 0x20	; 32
    12da:	51 e4       	ldi	r21, 0x41	; 65
    12dc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    12e0:	dc 01       	movw	r26, r24
    12e2:	cb 01       	movw	r24, r22
    12e4:	bc 01       	movw	r22, r24
    12e6:	cd 01       	movw	r24, r26
    12e8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    12ec:	dc 01       	movw	r26, r24
    12ee:	cb 01       	movw	r24, r22
    12f0:	9e 8f       	std	Y+30, r25	; 0x1e
    12f2:	8d 8f       	std	Y+29, r24	; 0x1d
    12f4:	0f c0       	rjmp	.+30     	; 0x1314 <Lcd_vidinit+0x200>
    12f6:	80 e9       	ldi	r24, 0x90	; 144
    12f8:	91 e0       	ldi	r25, 0x01	; 1
    12fa:	9c 8f       	std	Y+28, r25	; 0x1c
    12fc:	8b 8f       	std	Y+27, r24	; 0x1b
    12fe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1300:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1302:	01 97       	sbiw	r24, 0x01	; 1
    1304:	f1 f7       	brne	.-4      	; 0x1302 <Lcd_vidinit+0x1ee>
    1306:	9c 8f       	std	Y+28, r25	; 0x1c
    1308:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    130a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    130c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    130e:	01 97       	sbiw	r24, 0x01	; 1
    1310:	9e 8f       	std	Y+30, r25	; 0x1e
    1312:	8d 8f       	std	Y+29, r24	; 0x1d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1314:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1316:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1318:	00 97       	sbiw	r24, 0x00	; 0
    131a:	69 f7       	brne	.-38     	; 0x12f6 <Lcd_vidinit+0x1e2>
    131c:	14 c0       	rjmp	.+40     	; 0x1346 <Lcd_vidinit+0x232>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    131e:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1320:	78 a1       	ldd	r23, Y+32	; 0x20
    1322:	89 a1       	ldd	r24, Y+33	; 0x21
    1324:	9a a1       	ldd	r25, Y+34	; 0x22
    1326:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    132a:	dc 01       	movw	r26, r24
    132c:	cb 01       	movw	r24, r22
    132e:	9e 8f       	std	Y+30, r25	; 0x1e
    1330:	8d 8f       	std	Y+29, r24	; 0x1d
    1332:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1334:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1336:	9a 8f       	std	Y+26, r25	; 0x1a
    1338:	89 8f       	std	Y+25, r24	; 0x19
    133a:	89 8d       	ldd	r24, Y+25	; 0x19
    133c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    133e:	01 97       	sbiw	r24, 0x01	; 1
    1340:	f1 f7       	brne	.-4      	; 0x133e <Lcd_vidinit+0x22a>
    1342:	9a 8f       	std	Y+26, r25	; 0x1a
    1344:	89 8f       	std	Y+25, r24	; 0x19
	_delay_ms(5);
	Lcd_vidCmd(0x03);
    1346:	83 e0       	ldi	r24, 0x03	; 3
    1348:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <Lcd_vidCmd>
    134c:	80 e0       	ldi	r24, 0x00	; 0
    134e:	90 e0       	ldi	r25, 0x00	; 0
    1350:	a8 ec       	ldi	r26, 0xC8	; 200
    1352:	b2 e4       	ldi	r27, 0x42	; 66
    1354:	8d 8b       	std	Y+21, r24	; 0x15
    1356:	9e 8b       	std	Y+22, r25	; 0x16
    1358:	af 8b       	std	Y+23, r26	; 0x17
    135a:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    135c:	6d 89       	ldd	r22, Y+21	; 0x15
    135e:	7e 89       	ldd	r23, Y+22	; 0x16
    1360:	8f 89       	ldd	r24, Y+23	; 0x17
    1362:	98 8d       	ldd	r25, Y+24	; 0x18
    1364:	2b ea       	ldi	r18, 0xAB	; 171
    1366:	3a ea       	ldi	r19, 0xAA	; 170
    1368:	4a ea       	ldi	r20, 0xAA	; 170
    136a:	50 e4       	ldi	r21, 0x40	; 64
    136c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1370:	dc 01       	movw	r26, r24
    1372:	cb 01       	movw	r24, r22
    1374:	89 8b       	std	Y+17, r24	; 0x11
    1376:	9a 8b       	std	Y+18, r25	; 0x12
    1378:	ab 8b       	std	Y+19, r26	; 0x13
    137a:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    137c:	69 89       	ldd	r22, Y+17	; 0x11
    137e:	7a 89       	ldd	r23, Y+18	; 0x12
    1380:	8b 89       	ldd	r24, Y+19	; 0x13
    1382:	9c 89       	ldd	r25, Y+20	; 0x14
    1384:	20 e0       	ldi	r18, 0x00	; 0
    1386:	30 e0       	ldi	r19, 0x00	; 0
    1388:	40 e8       	ldi	r20, 0x80	; 128
    138a:	5f e3       	ldi	r21, 0x3F	; 63
    138c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1390:	88 23       	and	r24, r24
    1392:	1c f4       	brge	.+6      	; 0x139a <Lcd_vidinit+0x286>
		__ticks = 1;
    1394:	81 e0       	ldi	r24, 0x01	; 1
    1396:	88 8b       	std	Y+16, r24	; 0x10
    1398:	91 c0       	rjmp	.+290    	; 0x14bc <Lcd_vidinit+0x3a8>
	else if (__tmp > 255)
    139a:	69 89       	ldd	r22, Y+17	; 0x11
    139c:	7a 89       	ldd	r23, Y+18	; 0x12
    139e:	8b 89       	ldd	r24, Y+19	; 0x13
    13a0:	9c 89       	ldd	r25, Y+20	; 0x14
    13a2:	20 e0       	ldi	r18, 0x00	; 0
    13a4:	30 e0       	ldi	r19, 0x00	; 0
    13a6:	4f e7       	ldi	r20, 0x7F	; 127
    13a8:	53 e4       	ldi	r21, 0x43	; 67
    13aa:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    13ae:	18 16       	cp	r1, r24
    13b0:	0c f0       	brlt	.+2      	; 0x13b4 <Lcd_vidinit+0x2a0>
    13b2:	7b c0       	rjmp	.+246    	; 0x14aa <Lcd_vidinit+0x396>
	{
		_delay_ms(__us / 1000.0);
    13b4:	6d 89       	ldd	r22, Y+21	; 0x15
    13b6:	7e 89       	ldd	r23, Y+22	; 0x16
    13b8:	8f 89       	ldd	r24, Y+23	; 0x17
    13ba:	98 8d       	ldd	r25, Y+24	; 0x18
    13bc:	20 e0       	ldi	r18, 0x00	; 0
    13be:	30 e0       	ldi	r19, 0x00	; 0
    13c0:	4a e7       	ldi	r20, 0x7A	; 122
    13c2:	54 e4       	ldi	r21, 0x44	; 68
    13c4:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    13c8:	dc 01       	movw	r26, r24
    13ca:	cb 01       	movw	r24, r22
    13cc:	8c 87       	std	Y+12, r24	; 0x0c
    13ce:	9d 87       	std	Y+13, r25	; 0x0d
    13d0:	ae 87       	std	Y+14, r26	; 0x0e
    13d2:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13d4:	6c 85       	ldd	r22, Y+12	; 0x0c
    13d6:	7d 85       	ldd	r23, Y+13	; 0x0d
    13d8:	8e 85       	ldd	r24, Y+14	; 0x0e
    13da:	9f 85       	ldd	r25, Y+15	; 0x0f
    13dc:	20 e0       	ldi	r18, 0x00	; 0
    13de:	30 e0       	ldi	r19, 0x00	; 0
    13e0:	4a e7       	ldi	r20, 0x7A	; 122
    13e2:	55 e4       	ldi	r21, 0x45	; 69
    13e4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    13e8:	dc 01       	movw	r26, r24
    13ea:	cb 01       	movw	r24, r22
    13ec:	88 87       	std	Y+8, r24	; 0x08
    13ee:	99 87       	std	Y+9, r25	; 0x09
    13f0:	aa 87       	std	Y+10, r26	; 0x0a
    13f2:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    13f4:	68 85       	ldd	r22, Y+8	; 0x08
    13f6:	79 85       	ldd	r23, Y+9	; 0x09
    13f8:	8a 85       	ldd	r24, Y+10	; 0x0a
    13fa:	9b 85       	ldd	r25, Y+11	; 0x0b
    13fc:	20 e0       	ldi	r18, 0x00	; 0
    13fe:	30 e0       	ldi	r19, 0x00	; 0
    1400:	40 e8       	ldi	r20, 0x80	; 128
    1402:	5f e3       	ldi	r21, 0x3F	; 63
    1404:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1408:	88 23       	and	r24, r24
    140a:	2c f4       	brge	.+10     	; 0x1416 <Lcd_vidinit+0x302>
		__ticks = 1;
    140c:	81 e0       	ldi	r24, 0x01	; 1
    140e:	90 e0       	ldi	r25, 0x00	; 0
    1410:	9f 83       	std	Y+7, r25	; 0x07
    1412:	8e 83       	std	Y+6, r24	; 0x06
    1414:	3f c0       	rjmp	.+126    	; 0x1494 <Lcd_vidinit+0x380>
	else if (__tmp > 65535)
    1416:	68 85       	ldd	r22, Y+8	; 0x08
    1418:	79 85       	ldd	r23, Y+9	; 0x09
    141a:	8a 85       	ldd	r24, Y+10	; 0x0a
    141c:	9b 85       	ldd	r25, Y+11	; 0x0b
    141e:	20 e0       	ldi	r18, 0x00	; 0
    1420:	3f ef       	ldi	r19, 0xFF	; 255
    1422:	4f e7       	ldi	r20, 0x7F	; 127
    1424:	57 e4       	ldi	r21, 0x47	; 71
    1426:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    142a:	18 16       	cp	r1, r24
    142c:	4c f5       	brge	.+82     	; 0x1480 <Lcd_vidinit+0x36c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    142e:	6c 85       	ldd	r22, Y+12	; 0x0c
    1430:	7d 85       	ldd	r23, Y+13	; 0x0d
    1432:	8e 85       	ldd	r24, Y+14	; 0x0e
    1434:	9f 85       	ldd	r25, Y+15	; 0x0f
    1436:	20 e0       	ldi	r18, 0x00	; 0
    1438:	30 e0       	ldi	r19, 0x00	; 0
    143a:	40 e2       	ldi	r20, 0x20	; 32
    143c:	51 e4       	ldi	r21, 0x41	; 65
    143e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1442:	dc 01       	movw	r26, r24
    1444:	cb 01       	movw	r24, r22
    1446:	bc 01       	movw	r22, r24
    1448:	cd 01       	movw	r24, r26
    144a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    144e:	dc 01       	movw	r26, r24
    1450:	cb 01       	movw	r24, r22
    1452:	9f 83       	std	Y+7, r25	; 0x07
    1454:	8e 83       	std	Y+6, r24	; 0x06
    1456:	0f c0       	rjmp	.+30     	; 0x1476 <Lcd_vidinit+0x362>
    1458:	80 e9       	ldi	r24, 0x90	; 144
    145a:	91 e0       	ldi	r25, 0x01	; 1
    145c:	9d 83       	std	Y+5, r25	; 0x05
    145e:	8c 83       	std	Y+4, r24	; 0x04
    1460:	8c 81       	ldd	r24, Y+4	; 0x04
    1462:	9d 81       	ldd	r25, Y+5	; 0x05
    1464:	01 97       	sbiw	r24, 0x01	; 1
    1466:	f1 f7       	brne	.-4      	; 0x1464 <Lcd_vidinit+0x350>
    1468:	9d 83       	std	Y+5, r25	; 0x05
    146a:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    146c:	8e 81       	ldd	r24, Y+6	; 0x06
    146e:	9f 81       	ldd	r25, Y+7	; 0x07
    1470:	01 97       	sbiw	r24, 0x01	; 1
    1472:	9f 83       	std	Y+7, r25	; 0x07
    1474:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1476:	8e 81       	ldd	r24, Y+6	; 0x06
    1478:	9f 81       	ldd	r25, Y+7	; 0x07
    147a:	00 97       	sbiw	r24, 0x00	; 0
    147c:	69 f7       	brne	.-38     	; 0x1458 <Lcd_vidinit+0x344>
    147e:	24 c0       	rjmp	.+72     	; 0x14c8 <Lcd_vidinit+0x3b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1480:	68 85       	ldd	r22, Y+8	; 0x08
    1482:	79 85       	ldd	r23, Y+9	; 0x09
    1484:	8a 85       	ldd	r24, Y+10	; 0x0a
    1486:	9b 85       	ldd	r25, Y+11	; 0x0b
    1488:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    148c:	dc 01       	movw	r26, r24
    148e:	cb 01       	movw	r24, r22
    1490:	9f 83       	std	Y+7, r25	; 0x07
    1492:	8e 83       	std	Y+6, r24	; 0x06
    1494:	8e 81       	ldd	r24, Y+6	; 0x06
    1496:	9f 81       	ldd	r25, Y+7	; 0x07
    1498:	9b 83       	std	Y+3, r25	; 0x03
    149a:	8a 83       	std	Y+2, r24	; 0x02
    149c:	8a 81       	ldd	r24, Y+2	; 0x02
    149e:	9b 81       	ldd	r25, Y+3	; 0x03
    14a0:	01 97       	sbiw	r24, 0x01	; 1
    14a2:	f1 f7       	brne	.-4      	; 0x14a0 <Lcd_vidinit+0x38c>
    14a4:	9b 83       	std	Y+3, r25	; 0x03
    14a6:	8a 83       	std	Y+2, r24	; 0x02
    14a8:	0f c0       	rjmp	.+30     	; 0x14c8 <Lcd_vidinit+0x3b4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    14aa:	69 89       	ldd	r22, Y+17	; 0x11
    14ac:	7a 89       	ldd	r23, Y+18	; 0x12
    14ae:	8b 89       	ldd	r24, Y+19	; 0x13
    14b0:	9c 89       	ldd	r25, Y+20	; 0x14
    14b2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    14b6:	dc 01       	movw	r26, r24
    14b8:	cb 01       	movw	r24, r22
    14ba:	88 8b       	std	Y+16, r24	; 0x10
    14bc:	88 89       	ldd	r24, Y+16	; 0x10
    14be:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    14c0:	89 81       	ldd	r24, Y+1	; 0x01
    14c2:	8a 95       	dec	r24
    14c4:	f1 f7       	brne	.-4      	; 0x14c2 <Lcd_vidinit+0x3ae>
    14c6:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(100);
	Lcd_vidCmd(0x03);
    14c8:	83 e0       	ldi	r24, 0x03	; 3
    14ca:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <Lcd_vidCmd>
	Lcd_vidCmd(0x02);
    14ce:	82 e0       	ldi	r24, 0x02	; 2
    14d0:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <Lcd_vidCmd>
	Lcd_vidCmd(_LCD_4BIT_MODE);
    14d4:	88 e2       	ldi	r24, 0x28	; 40
    14d6:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <Lcd_vidCmd>
}
    14da:	e4 96       	adiw	r28, 0x34	; 52
    14dc:	0f b6       	in	r0, 0x3f	; 63
    14de:	f8 94       	cli
    14e0:	de bf       	out	0x3e, r29	; 62
    14e2:	0f be       	out	0x3f, r0	; 63
    14e4:	cd bf       	out	0x3d, r28	; 61
    14e6:	cf 91       	pop	r28
    14e8:	df 91       	pop	r29
    14ea:	08 95       	ret

000014ec <Lcd_videnablePulse>:

static void Lcd_videnablePulse(void)
{
    14ec:	df 93       	push	r29
    14ee:	cf 93       	push	r28
    14f0:	cd b7       	in	r28, 0x3d	; 61
    14f2:	de b7       	in	r29, 0x3e	; 62
    14f4:	a6 97       	sbiw	r28, 0x26	; 38
    14f6:	0f b6       	in	r0, 0x3f	; 63
    14f8:	f8 94       	cli
    14fa:	de bf       	out	0x3e, r29	; 62
    14fc:	0f be       	out	0x3f, r0	; 63
    14fe:	cd bf       	out	0x3d, r28	; 61
	//send Enable pulse
	Dio_vidwriteChanel(DIO_PORTB, DIO_PIN3, DIO_HIGH);
    1500:	81 e0       	ldi	r24, 0x01	; 1
    1502:	63 e0       	ldi	r22, 0x03	; 3
    1504:	41 e0       	ldi	r20, 0x01	; 1
    1506:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <Dio_vidwriteChanel>
    150a:	80 e0       	ldi	r24, 0x00	; 0
    150c:	90 e0       	ldi	r25, 0x00	; 0
    150e:	a0 e8       	ldi	r26, 0x80	; 128
    1510:	bf e3       	ldi	r27, 0x3F	; 63
    1512:	8b a3       	std	Y+35, r24	; 0x23
    1514:	9c a3       	std	Y+36, r25	; 0x24
    1516:	ad a3       	std	Y+37, r26	; 0x25
    1518:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    151a:	6b a1       	ldd	r22, Y+35	; 0x23
    151c:	7c a1       	ldd	r23, Y+36	; 0x24
    151e:	8d a1       	ldd	r24, Y+37	; 0x25
    1520:	9e a1       	ldd	r25, Y+38	; 0x26
    1522:	2b ea       	ldi	r18, 0xAB	; 171
    1524:	3a ea       	ldi	r19, 0xAA	; 170
    1526:	4a ea       	ldi	r20, 0xAA	; 170
    1528:	50 e4       	ldi	r21, 0x40	; 64
    152a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    152e:	dc 01       	movw	r26, r24
    1530:	cb 01       	movw	r24, r22
    1532:	8f 8f       	std	Y+31, r24	; 0x1f
    1534:	98 a3       	std	Y+32, r25	; 0x20
    1536:	a9 a3       	std	Y+33, r26	; 0x21
    1538:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    153a:	6f 8d       	ldd	r22, Y+31	; 0x1f
    153c:	78 a1       	ldd	r23, Y+32	; 0x20
    153e:	89 a1       	ldd	r24, Y+33	; 0x21
    1540:	9a a1       	ldd	r25, Y+34	; 0x22
    1542:	20 e0       	ldi	r18, 0x00	; 0
    1544:	30 e0       	ldi	r19, 0x00	; 0
    1546:	40 e8       	ldi	r20, 0x80	; 128
    1548:	5f e3       	ldi	r21, 0x3F	; 63
    154a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    154e:	88 23       	and	r24, r24
    1550:	1c f4       	brge	.+6      	; 0x1558 <Lcd_videnablePulse+0x6c>
		__ticks = 1;
    1552:	81 e0       	ldi	r24, 0x01	; 1
    1554:	8e 8f       	std	Y+30, r24	; 0x1e
    1556:	91 c0       	rjmp	.+290    	; 0x167a <Lcd_videnablePulse+0x18e>
	else if (__tmp > 255)
    1558:	6f 8d       	ldd	r22, Y+31	; 0x1f
    155a:	78 a1       	ldd	r23, Y+32	; 0x20
    155c:	89 a1       	ldd	r24, Y+33	; 0x21
    155e:	9a a1       	ldd	r25, Y+34	; 0x22
    1560:	20 e0       	ldi	r18, 0x00	; 0
    1562:	30 e0       	ldi	r19, 0x00	; 0
    1564:	4f e7       	ldi	r20, 0x7F	; 127
    1566:	53 e4       	ldi	r21, 0x43	; 67
    1568:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    156c:	18 16       	cp	r1, r24
    156e:	0c f0       	brlt	.+2      	; 0x1572 <Lcd_videnablePulse+0x86>
    1570:	7b c0       	rjmp	.+246    	; 0x1668 <Lcd_videnablePulse+0x17c>
	{
		_delay_ms(__us / 1000.0);
    1572:	6b a1       	ldd	r22, Y+35	; 0x23
    1574:	7c a1       	ldd	r23, Y+36	; 0x24
    1576:	8d a1       	ldd	r24, Y+37	; 0x25
    1578:	9e a1       	ldd	r25, Y+38	; 0x26
    157a:	20 e0       	ldi	r18, 0x00	; 0
    157c:	30 e0       	ldi	r19, 0x00	; 0
    157e:	4a e7       	ldi	r20, 0x7A	; 122
    1580:	54 e4       	ldi	r21, 0x44	; 68
    1582:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1586:	dc 01       	movw	r26, r24
    1588:	cb 01       	movw	r24, r22
    158a:	8a 8f       	std	Y+26, r24	; 0x1a
    158c:	9b 8f       	std	Y+27, r25	; 0x1b
    158e:	ac 8f       	std	Y+28, r26	; 0x1c
    1590:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1592:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1594:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1596:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1598:	9d 8d       	ldd	r25, Y+29	; 0x1d
    159a:	20 e0       	ldi	r18, 0x00	; 0
    159c:	30 e0       	ldi	r19, 0x00	; 0
    159e:	4a e7       	ldi	r20, 0x7A	; 122
    15a0:	55 e4       	ldi	r21, 0x45	; 69
    15a2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15a6:	dc 01       	movw	r26, r24
    15a8:	cb 01       	movw	r24, r22
    15aa:	8e 8b       	std	Y+22, r24	; 0x16
    15ac:	9f 8b       	std	Y+23, r25	; 0x17
    15ae:	a8 8f       	std	Y+24, r26	; 0x18
    15b0:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    15b2:	6e 89       	ldd	r22, Y+22	; 0x16
    15b4:	7f 89       	ldd	r23, Y+23	; 0x17
    15b6:	88 8d       	ldd	r24, Y+24	; 0x18
    15b8:	99 8d       	ldd	r25, Y+25	; 0x19
    15ba:	20 e0       	ldi	r18, 0x00	; 0
    15bc:	30 e0       	ldi	r19, 0x00	; 0
    15be:	40 e8       	ldi	r20, 0x80	; 128
    15c0:	5f e3       	ldi	r21, 0x3F	; 63
    15c2:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    15c6:	88 23       	and	r24, r24
    15c8:	2c f4       	brge	.+10     	; 0x15d4 <Lcd_videnablePulse+0xe8>
		__ticks = 1;
    15ca:	81 e0       	ldi	r24, 0x01	; 1
    15cc:	90 e0       	ldi	r25, 0x00	; 0
    15ce:	9d 8b       	std	Y+21, r25	; 0x15
    15d0:	8c 8b       	std	Y+20, r24	; 0x14
    15d2:	3f c0       	rjmp	.+126    	; 0x1652 <Lcd_videnablePulse+0x166>
	else if (__tmp > 65535)
    15d4:	6e 89       	ldd	r22, Y+22	; 0x16
    15d6:	7f 89       	ldd	r23, Y+23	; 0x17
    15d8:	88 8d       	ldd	r24, Y+24	; 0x18
    15da:	99 8d       	ldd	r25, Y+25	; 0x19
    15dc:	20 e0       	ldi	r18, 0x00	; 0
    15de:	3f ef       	ldi	r19, 0xFF	; 255
    15e0:	4f e7       	ldi	r20, 0x7F	; 127
    15e2:	57 e4       	ldi	r21, 0x47	; 71
    15e4:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    15e8:	18 16       	cp	r1, r24
    15ea:	4c f5       	brge	.+82     	; 0x163e <Lcd_videnablePulse+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15ec:	6a 8d       	ldd	r22, Y+26	; 0x1a
    15ee:	7b 8d       	ldd	r23, Y+27	; 0x1b
    15f0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    15f2:	9d 8d       	ldd	r25, Y+29	; 0x1d
    15f4:	20 e0       	ldi	r18, 0x00	; 0
    15f6:	30 e0       	ldi	r19, 0x00	; 0
    15f8:	40 e2       	ldi	r20, 0x20	; 32
    15fa:	51 e4       	ldi	r21, 0x41	; 65
    15fc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1600:	dc 01       	movw	r26, r24
    1602:	cb 01       	movw	r24, r22
    1604:	bc 01       	movw	r22, r24
    1606:	cd 01       	movw	r24, r26
    1608:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    160c:	dc 01       	movw	r26, r24
    160e:	cb 01       	movw	r24, r22
    1610:	9d 8b       	std	Y+21, r25	; 0x15
    1612:	8c 8b       	std	Y+20, r24	; 0x14
    1614:	0f c0       	rjmp	.+30     	; 0x1634 <Lcd_videnablePulse+0x148>
    1616:	80 e9       	ldi	r24, 0x90	; 144
    1618:	91 e0       	ldi	r25, 0x01	; 1
    161a:	9b 8b       	std	Y+19, r25	; 0x13
    161c:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    161e:	8a 89       	ldd	r24, Y+18	; 0x12
    1620:	9b 89       	ldd	r25, Y+19	; 0x13
    1622:	01 97       	sbiw	r24, 0x01	; 1
    1624:	f1 f7       	brne	.-4      	; 0x1622 <Lcd_videnablePulse+0x136>
    1626:	9b 8b       	std	Y+19, r25	; 0x13
    1628:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    162a:	8c 89       	ldd	r24, Y+20	; 0x14
    162c:	9d 89       	ldd	r25, Y+21	; 0x15
    162e:	01 97       	sbiw	r24, 0x01	; 1
    1630:	9d 8b       	std	Y+21, r25	; 0x15
    1632:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1634:	8c 89       	ldd	r24, Y+20	; 0x14
    1636:	9d 89       	ldd	r25, Y+21	; 0x15
    1638:	00 97       	sbiw	r24, 0x00	; 0
    163a:	69 f7       	brne	.-38     	; 0x1616 <Lcd_videnablePulse+0x12a>
    163c:	24 c0       	rjmp	.+72     	; 0x1686 <Lcd_videnablePulse+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    163e:	6e 89       	ldd	r22, Y+22	; 0x16
    1640:	7f 89       	ldd	r23, Y+23	; 0x17
    1642:	88 8d       	ldd	r24, Y+24	; 0x18
    1644:	99 8d       	ldd	r25, Y+25	; 0x19
    1646:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    164a:	dc 01       	movw	r26, r24
    164c:	cb 01       	movw	r24, r22
    164e:	9d 8b       	std	Y+21, r25	; 0x15
    1650:	8c 8b       	std	Y+20, r24	; 0x14
    1652:	8c 89       	ldd	r24, Y+20	; 0x14
    1654:	9d 89       	ldd	r25, Y+21	; 0x15
    1656:	99 8b       	std	Y+17, r25	; 0x11
    1658:	88 8b       	std	Y+16, r24	; 0x10
    165a:	88 89       	ldd	r24, Y+16	; 0x10
    165c:	99 89       	ldd	r25, Y+17	; 0x11
    165e:	01 97       	sbiw	r24, 0x01	; 1
    1660:	f1 f7       	brne	.-4      	; 0x165e <Lcd_videnablePulse+0x172>
    1662:	99 8b       	std	Y+17, r25	; 0x11
    1664:	88 8b       	std	Y+16, r24	; 0x10
    1666:	0f c0       	rjmp	.+30     	; 0x1686 <Lcd_videnablePulse+0x19a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1668:	6f 8d       	ldd	r22, Y+31	; 0x1f
    166a:	78 a1       	ldd	r23, Y+32	; 0x20
    166c:	89 a1       	ldd	r24, Y+33	; 0x21
    166e:	9a a1       	ldd	r25, Y+34	; 0x22
    1670:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1674:	dc 01       	movw	r26, r24
    1676:	cb 01       	movw	r24, r22
    1678:	8e 8f       	std	Y+30, r24	; 0x1e
    167a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    167c:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    167e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1680:	8a 95       	dec	r24
    1682:	f1 f7       	brne	.-4      	; 0x1680 <Lcd_videnablePulse+0x194>
    1684:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(1);
	Dio_vidwriteChanel(DIO_PORTB, DIO_PIN3, DIO_LOW);
    1686:	81 e0       	ldi	r24, 0x01	; 1
    1688:	63 e0       	ldi	r22, 0x03	; 3
    168a:	40 e0       	ldi	r20, 0x00	; 0
    168c:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <Dio_vidwriteChanel>
    1690:	80 e0       	ldi	r24, 0x00	; 0
    1692:	90 e0       	ldi	r25, 0x00	; 0
    1694:	a0 e0       	ldi	r26, 0x00	; 0
    1696:	b0 e4       	ldi	r27, 0x40	; 64
    1698:	8b 87       	std	Y+11, r24	; 0x0b
    169a:	9c 87       	std	Y+12, r25	; 0x0c
    169c:	ad 87       	std	Y+13, r26	; 0x0d
    169e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    16a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    16a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    16a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    16a8:	20 e0       	ldi	r18, 0x00	; 0
    16aa:	30 e0       	ldi	r19, 0x00	; 0
    16ac:	4a e7       	ldi	r20, 0x7A	; 122
    16ae:	55 e4       	ldi	r21, 0x45	; 69
    16b0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16b4:	dc 01       	movw	r26, r24
    16b6:	cb 01       	movw	r24, r22
    16b8:	8f 83       	std	Y+7, r24	; 0x07
    16ba:	98 87       	std	Y+8, r25	; 0x08
    16bc:	a9 87       	std	Y+9, r26	; 0x09
    16be:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    16c0:	6f 81       	ldd	r22, Y+7	; 0x07
    16c2:	78 85       	ldd	r23, Y+8	; 0x08
    16c4:	89 85       	ldd	r24, Y+9	; 0x09
    16c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    16c8:	20 e0       	ldi	r18, 0x00	; 0
    16ca:	30 e0       	ldi	r19, 0x00	; 0
    16cc:	40 e8       	ldi	r20, 0x80	; 128
    16ce:	5f e3       	ldi	r21, 0x3F	; 63
    16d0:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    16d4:	88 23       	and	r24, r24
    16d6:	2c f4       	brge	.+10     	; 0x16e2 <Lcd_videnablePulse+0x1f6>
		__ticks = 1;
    16d8:	81 e0       	ldi	r24, 0x01	; 1
    16da:	90 e0       	ldi	r25, 0x00	; 0
    16dc:	9e 83       	std	Y+6, r25	; 0x06
    16de:	8d 83       	std	Y+5, r24	; 0x05
    16e0:	3f c0       	rjmp	.+126    	; 0x1760 <Lcd_videnablePulse+0x274>
	else if (__tmp > 65535)
    16e2:	6f 81       	ldd	r22, Y+7	; 0x07
    16e4:	78 85       	ldd	r23, Y+8	; 0x08
    16e6:	89 85       	ldd	r24, Y+9	; 0x09
    16e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    16ea:	20 e0       	ldi	r18, 0x00	; 0
    16ec:	3f ef       	ldi	r19, 0xFF	; 255
    16ee:	4f e7       	ldi	r20, 0x7F	; 127
    16f0:	57 e4       	ldi	r21, 0x47	; 71
    16f2:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    16f6:	18 16       	cp	r1, r24
    16f8:	4c f5       	brge	.+82     	; 0x174c <Lcd_videnablePulse+0x260>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16fa:	6b 85       	ldd	r22, Y+11	; 0x0b
    16fc:	7c 85       	ldd	r23, Y+12	; 0x0c
    16fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    1700:	9e 85       	ldd	r25, Y+14	; 0x0e
    1702:	20 e0       	ldi	r18, 0x00	; 0
    1704:	30 e0       	ldi	r19, 0x00	; 0
    1706:	40 e2       	ldi	r20, 0x20	; 32
    1708:	51 e4       	ldi	r21, 0x41	; 65
    170a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    170e:	dc 01       	movw	r26, r24
    1710:	cb 01       	movw	r24, r22
    1712:	bc 01       	movw	r22, r24
    1714:	cd 01       	movw	r24, r26
    1716:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    171a:	dc 01       	movw	r26, r24
    171c:	cb 01       	movw	r24, r22
    171e:	9e 83       	std	Y+6, r25	; 0x06
    1720:	8d 83       	std	Y+5, r24	; 0x05
    1722:	0f c0       	rjmp	.+30     	; 0x1742 <Lcd_videnablePulse+0x256>
    1724:	80 e9       	ldi	r24, 0x90	; 144
    1726:	91 e0       	ldi	r25, 0x01	; 1
    1728:	9c 83       	std	Y+4, r25	; 0x04
    172a:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    172c:	8b 81       	ldd	r24, Y+3	; 0x03
    172e:	9c 81       	ldd	r25, Y+4	; 0x04
    1730:	01 97       	sbiw	r24, 0x01	; 1
    1732:	f1 f7       	brne	.-4      	; 0x1730 <Lcd_videnablePulse+0x244>
    1734:	9c 83       	std	Y+4, r25	; 0x04
    1736:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1738:	8d 81       	ldd	r24, Y+5	; 0x05
    173a:	9e 81       	ldd	r25, Y+6	; 0x06
    173c:	01 97       	sbiw	r24, 0x01	; 1
    173e:	9e 83       	std	Y+6, r25	; 0x06
    1740:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1742:	8d 81       	ldd	r24, Y+5	; 0x05
    1744:	9e 81       	ldd	r25, Y+6	; 0x06
    1746:	00 97       	sbiw	r24, 0x00	; 0
    1748:	69 f7       	brne	.-38     	; 0x1724 <Lcd_videnablePulse+0x238>
    174a:	14 c0       	rjmp	.+40     	; 0x1774 <Lcd_videnablePulse+0x288>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    174c:	6f 81       	ldd	r22, Y+7	; 0x07
    174e:	78 85       	ldd	r23, Y+8	; 0x08
    1750:	89 85       	ldd	r24, Y+9	; 0x09
    1752:	9a 85       	ldd	r25, Y+10	; 0x0a
    1754:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1758:	dc 01       	movw	r26, r24
    175a:	cb 01       	movw	r24, r22
    175c:	9e 83       	std	Y+6, r25	; 0x06
    175e:	8d 83       	std	Y+5, r24	; 0x05
    1760:	8d 81       	ldd	r24, Y+5	; 0x05
    1762:	9e 81       	ldd	r25, Y+6	; 0x06
    1764:	9a 83       	std	Y+2, r25	; 0x02
    1766:	89 83       	std	Y+1, r24	; 0x01
    1768:	89 81       	ldd	r24, Y+1	; 0x01
    176a:	9a 81       	ldd	r25, Y+2	; 0x02
    176c:	01 97       	sbiw	r24, 0x01	; 1
    176e:	f1 f7       	brne	.-4      	; 0x176c <Lcd_videnablePulse+0x280>
    1770:	9a 83       	std	Y+2, r25	; 0x02
    1772:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    1774:	a6 96       	adiw	r28, 0x26	; 38
    1776:	0f b6       	in	r0, 0x3f	; 63
    1778:	f8 94       	cli
    177a:	de bf       	out	0x3e, r29	; 62
    177c:	0f be       	out	0x3f, r0	; 63
    177e:	cd bf       	out	0x3d, r28	; 61
    1780:	cf 91       	pop	r28
    1782:	df 91       	pop	r29
    1784:	08 95       	ret

00001786 <Lcd_vidDisplayChar>:
void Lcd_vidDisplayChar(u8 chr)
{
    1786:	df 93       	push	r29
    1788:	cf 93       	push	r28
    178a:	00 d0       	rcall	.+0      	; 0x178c <Lcd_vidDisplayChar+0x6>
    178c:	0f 92       	push	r0
    178e:	cd b7       	in	r28, 0x3d	; 61
    1790:	de b7       	in	r29, 0x3e	; 62
    1792:	8b 83       	std	Y+3, r24	; 0x03
	0b1101  1001

	1101   0000
	1001   0000
*/
	u8 loc_MSB = (chr & ~LCD_MASK);
    1794:	8b 81       	ldd	r24, Y+3	; 0x03
    1796:	80 7f       	andi	r24, 0xF0	; 240
    1798:	8a 83       	std	Y+2, r24	; 0x02
	u8 loc_LSB = (chr<<4);
    179a:	8b 81       	ldd	r24, Y+3	; 0x03
    179c:	82 95       	swap	r24
    179e:	80 7f       	andi	r24, 0xF0	; 240
    17a0:	89 83       	std	Y+1, r24	; 0x01
	//RS->1
	Dio_vidwriteChanel(DIO_PORTB, DIO_PIN1, DIO_HIGH);
    17a2:	81 e0       	ldi	r24, 0x01	; 1
    17a4:	61 e0       	ldi	r22, 0x01	; 1
    17a6:	41 e0       	ldi	r20, 0x01	; 1
    17a8:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <Dio_vidwriteChanel>

	//write data MSB to LCD
	Dio_vidWriteChanelGroup(DIO_PORTA, loc_MSB, LCD_MASK);
    17ac:	80 e0       	ldi	r24, 0x00	; 0
    17ae:	6a 81       	ldd	r22, Y+2	; 0x02
    17b0:	4f e0       	ldi	r20, 0x0F	; 15
    17b2:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <Dio_vidWriteChanelGroup>
	//send Enable pulse
	Lcd_videnablePulse();
    17b6:	0e 94 76 0a 	call	0x14ec	; 0x14ec <Lcd_videnablePulse>

	//write data LSB to LCD
	Dio_vidWriteChanelGroup(DIO_PORTA, loc_LSB, LCD_MASK);
    17ba:	80 e0       	ldi	r24, 0x00	; 0
    17bc:	69 81       	ldd	r22, Y+1	; 0x01
    17be:	4f e0       	ldi	r20, 0x0F	; 15
    17c0:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <Dio_vidWriteChanelGroup>
	//send Enable pulse
	Lcd_videnablePulse();
    17c4:	0e 94 76 0a 	call	0x14ec	; 0x14ec <Lcd_videnablePulse>
}
    17c8:	0f 90       	pop	r0
    17ca:	0f 90       	pop	r0
    17cc:	0f 90       	pop	r0
    17ce:	cf 91       	pop	r28
    17d0:	df 91       	pop	r29
    17d2:	08 95       	ret

000017d4 <Lcd_vidCmd>:
void Lcd_vidCmd(lcd_Cmd_t cmd)
{
    17d4:	df 93       	push	r29
    17d6:	cf 93       	push	r28
    17d8:	00 d0       	rcall	.+0      	; 0x17da <Lcd_vidCmd+0x6>
    17da:	0f 92       	push	r0
    17dc:	cd b7       	in	r28, 0x3d	; 61
    17de:	de b7       	in	r29, 0x3e	; 62
    17e0:	8b 83       	std	Y+3, r24	; 0x03
	u8 loc_MSB = cmd & ~LCD_MASK;
    17e2:	8b 81       	ldd	r24, Y+3	; 0x03
    17e4:	80 7f       	andi	r24, 0xF0	; 240
    17e6:	8a 83       	std	Y+2, r24	; 0x02
	u8 loc_LSB = cmd<<4;
    17e8:	8b 81       	ldd	r24, Y+3	; 0x03
    17ea:	82 95       	swap	r24
    17ec:	80 7f       	andi	r24, 0xF0	; 240
    17ee:	89 83       	std	Y+1, r24	; 0x01
	//RS->0
	Dio_vidwriteChanel(DIO_PORTB, DIO_PIN1, DIO_LOW);
    17f0:	81 e0       	ldi	r24, 0x01	; 1
    17f2:	61 e0       	ldi	r22, 0x01	; 1
    17f4:	40 e0       	ldi	r20, 0x00	; 0
    17f6:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <Dio_vidwriteChanel>

	//write data MSB to LCD
	Dio_vidWriteChanelGroup(DIO_PORTA, loc_MSB, LCD_MASK);
    17fa:	80 e0       	ldi	r24, 0x00	; 0
    17fc:	6a 81       	ldd	r22, Y+2	; 0x02
    17fe:	4f e0       	ldi	r20, 0x0F	; 15
    1800:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <Dio_vidWriteChanelGroup>
	//send Enable pulse
	Lcd_videnablePulse();
    1804:	0e 94 76 0a 	call	0x14ec	; 0x14ec <Lcd_videnablePulse>

	//write data LSB to LCD
	Dio_vidWriteChanelGroup(DIO_PORTA, loc_LSB, LCD_MASK);
    1808:	80 e0       	ldi	r24, 0x00	; 0
    180a:	69 81       	ldd	r22, Y+1	; 0x01
    180c:	4f e0       	ldi	r20, 0x0F	; 15
    180e:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <Dio_vidWriteChanelGroup>
	//send Enable pulse
	Lcd_videnablePulse();
    1812:	0e 94 76 0a 	call	0x14ec	; 0x14ec <Lcd_videnablePulse>
}
    1816:	0f 90       	pop	r0
    1818:	0f 90       	pop	r0
    181a:	0f 90       	pop	r0
    181c:	cf 91       	pop	r28
    181e:	df 91       	pop	r29
    1820:	08 95       	ret

00001822 <Lcd_vidRowColumn>:

void Lcd_vidRowColumn(u8 row, u8 col)
{
    1822:	df 93       	push	r29
    1824:	cf 93       	push	r28
    1826:	00 d0       	rcall	.+0      	; 0x1828 <Lcd_vidRowColumn+0x6>
    1828:	00 d0       	rcall	.+0      	; 0x182a <Lcd_vidRowColumn+0x8>
    182a:	cd b7       	in	r28, 0x3d	; 61
    182c:	de b7       	in	r29, 0x3e	; 62
    182e:	89 83       	std	Y+1, r24	; 0x01
    1830:	6a 83       	std	Y+2, r22	; 0x02
	switch (row)
    1832:	89 81       	ldd	r24, Y+1	; 0x01
    1834:	28 2f       	mov	r18, r24
    1836:	30 e0       	ldi	r19, 0x00	; 0
    1838:	3c 83       	std	Y+4, r19	; 0x04
    183a:	2b 83       	std	Y+3, r18	; 0x03
    183c:	8b 81       	ldd	r24, Y+3	; 0x03
    183e:	9c 81       	ldd	r25, Y+4	; 0x04
    1840:	00 97       	sbiw	r24, 0x00	; 0
    1842:	31 f0       	breq	.+12     	; 0x1850 <Lcd_vidRowColumn+0x2e>
    1844:	2b 81       	ldd	r18, Y+3	; 0x03
    1846:	3c 81       	ldd	r19, Y+4	; 0x04
    1848:	21 30       	cpi	r18, 0x01	; 1
    184a:	31 05       	cpc	r19, r1
    184c:	31 f0       	breq	.+12     	; 0x185a <Lcd_vidRowColumn+0x38>
    184e:	09 c0       	rjmp	.+18     	; 0x1862 <Lcd_vidRowColumn+0x40>
	{
	case 0:
		Lcd_vidCmd(0x80 + col);
    1850:	8a 81       	ldd	r24, Y+2	; 0x02
    1852:	80 58       	subi	r24, 0x80	; 128
    1854:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <Lcd_vidCmd>
    1858:	04 c0       	rjmp	.+8      	; 0x1862 <Lcd_vidRowColumn+0x40>
		break;

	case 1:
		Lcd_vidCmd(0xC0 + col);
    185a:	8a 81       	ldd	r24, Y+2	; 0x02
    185c:	80 54       	subi	r24, 0x40	; 64
    185e:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <Lcd_vidCmd>
		break;
	}
}
    1862:	0f 90       	pop	r0
    1864:	0f 90       	pop	r0
    1866:	0f 90       	pop	r0
    1868:	0f 90       	pop	r0
    186a:	cf 91       	pop	r28
    186c:	df 91       	pop	r29
    186e:	08 95       	ret

00001870 <Lcd_vidDisplyStr>:
void Lcd_vidDisplyStr(u8* str)
{
    1870:	df 93       	push	r29
    1872:	cf 93       	push	r28
    1874:	00 d0       	rcall	.+0      	; 0x1876 <Lcd_vidDisplyStr+0x6>
    1876:	cd b7       	in	r28, 0x3d	; 61
    1878:	de b7       	in	r29, 0x3e	; 62
    187a:	9a 83       	std	Y+2, r25	; 0x02
    187c:	89 83       	std	Y+1, r24	; 0x01
    187e:	0a c0       	rjmp	.+20     	; 0x1894 <Lcd_vidDisplyStr+0x24>
	while (*str != '\0')
	{
		Lcd_vidDisplayChar(*str);
    1880:	e9 81       	ldd	r30, Y+1	; 0x01
    1882:	fa 81       	ldd	r31, Y+2	; 0x02
    1884:	80 81       	ld	r24, Z
    1886:	0e 94 c3 0b 	call	0x1786	; 0x1786 <Lcd_vidDisplayChar>
		str++;
    188a:	89 81       	ldd	r24, Y+1	; 0x01
    188c:	9a 81       	ldd	r25, Y+2	; 0x02
    188e:	01 96       	adiw	r24, 0x01	; 1
    1890:	9a 83       	std	Y+2, r25	; 0x02
    1892:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
}
void Lcd_vidDisplyStr(u8* str)
{
	while (*str != '\0')
    1894:	e9 81       	ldd	r30, Y+1	; 0x01
    1896:	fa 81       	ldd	r31, Y+2	; 0x02
    1898:	80 81       	ld	r24, Z
    189a:	88 23       	and	r24, r24
    189c:	89 f7       	brne	.-30     	; 0x1880 <Lcd_vidDisplyStr+0x10>
	{
		Lcd_vidDisplayChar(*str);
		str++;
	}
}
    189e:	0f 90       	pop	r0
    18a0:	0f 90       	pop	r0
    18a2:	cf 91       	pop	r28
    18a4:	df 91       	pop	r29
    18a6:	08 95       	ret

000018a8 <Lcd_vidDisplyInt>:

void Lcd_vidDisplyInt(u32 num)
{
    18a8:	df 93       	push	r29
    18aa:	cf 93       	push	r28
    18ac:	cd b7       	in	r28, 0x3d	; 61
    18ae:	de b7       	in	r29, 0x3e	; 62
    18b0:	29 97       	sbiw	r28, 0x09	; 9
    18b2:	0f b6       	in	r0, 0x3f	; 63
    18b4:	f8 94       	cli
    18b6:	de bf       	out	0x3e, r29	; 62
    18b8:	0f be       	out	0x3f, r0	; 63
    18ba:	cd bf       	out	0x3d, r28	; 61
    18bc:	6e 83       	std	Y+6, r22	; 0x06
    18be:	7f 83       	std	Y+7, r23	; 0x07
    18c0:	88 87       	std	Y+8, r24	; 0x08
    18c2:	99 87       	std	Y+9, r25	; 0x09
	u8 buffer[5];
	sprintf(buffer,"%d",num);
    18c4:	8d b7       	in	r24, 0x3d	; 61
    18c6:	9e b7       	in	r25, 0x3e	; 62
    18c8:	08 97       	sbiw	r24, 0x08	; 8
    18ca:	0f b6       	in	r0, 0x3f	; 63
    18cc:	f8 94       	cli
    18ce:	9e bf       	out	0x3e, r25	; 62
    18d0:	0f be       	out	0x3f, r0	; 63
    18d2:	8d bf       	out	0x3d, r24	; 61
    18d4:	ed b7       	in	r30, 0x3d	; 61
    18d6:	fe b7       	in	r31, 0x3e	; 62
    18d8:	31 96       	adiw	r30, 0x01	; 1
    18da:	ce 01       	movw	r24, r28
    18dc:	01 96       	adiw	r24, 0x01	; 1
    18de:	91 83       	std	Z+1, r25	; 0x01
    18e0:	80 83       	st	Z, r24
    18e2:	80 e6       	ldi	r24, 0x60	; 96
    18e4:	90 e0       	ldi	r25, 0x00	; 0
    18e6:	93 83       	std	Z+3, r25	; 0x03
    18e8:	82 83       	std	Z+2, r24	; 0x02
    18ea:	8e 81       	ldd	r24, Y+6	; 0x06
    18ec:	9f 81       	ldd	r25, Y+7	; 0x07
    18ee:	a8 85       	ldd	r26, Y+8	; 0x08
    18f0:	b9 85       	ldd	r27, Y+9	; 0x09
    18f2:	84 83       	std	Z+4, r24	; 0x04
    18f4:	95 83       	std	Z+5, r25	; 0x05
    18f6:	a6 83       	std	Z+6, r26	; 0x06
    18f8:	b7 83       	std	Z+7, r27	; 0x07
    18fa:	0e 94 86 10 	call	0x210c	; 0x210c <sprintf>
    18fe:	8d b7       	in	r24, 0x3d	; 61
    1900:	9e b7       	in	r25, 0x3e	; 62
    1902:	08 96       	adiw	r24, 0x08	; 8
    1904:	0f b6       	in	r0, 0x3f	; 63
    1906:	f8 94       	cli
    1908:	9e bf       	out	0x3e, r25	; 62
    190a:	0f be       	out	0x3f, r0	; 63
    190c:	8d bf       	out	0x3d, r24	; 61
	Lcd_vidDisplyStr(buffer);
    190e:	ce 01       	movw	r24, r28
    1910:	01 96       	adiw	r24, 0x01	; 1
    1912:	0e 94 38 0c 	call	0x1870	; 0x1870 <Lcd_vidDisplyStr>
}
    1916:	29 96       	adiw	r28, 0x09	; 9
    1918:	0f b6       	in	r0, 0x3f	; 63
    191a:	f8 94       	cli
    191c:	de bf       	out	0x3e, r29	; 62
    191e:	0f be       	out	0x3f, r0	; 63
    1920:	cd bf       	out	0x3d, r28	; 61
    1922:	cf 91       	pop	r28
    1924:	df 91       	pop	r29
    1926:	08 95       	ret

00001928 <Buzzer_vidinit>:
 *      Author: Eng_Fawzi
 */
#include "Dio.h"

void Buzzer_vidinit(void)
{
    1928:	df 93       	push	r29
    192a:	cf 93       	push	r28
    192c:	cd b7       	in	r28, 0x3d	; 61
    192e:	de b7       	in	r29, 0x3e	; 62
	Dio_vidconfigChanel(DIO_PORTA,DIO_PIN3,DIO_OUTPUT);
    1930:	80 e0       	ldi	r24, 0x00	; 0
    1932:	63 e0       	ldi	r22, 0x03	; 3
    1934:	41 e0       	ldi	r20, 0x01	; 1
    1936:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <Dio_vidconfigChanel>
}
    193a:	cf 91       	pop	r28
    193c:	df 91       	pop	r29
    193e:	08 95       	ret

00001940 <Buzzer_vidbuzzerOn>:
void Buzzer_vidbuzzerOn(void)
{
    1940:	df 93       	push	r29
    1942:	cf 93       	push	r28
    1944:	cd b7       	in	r28, 0x3d	; 61
    1946:	de b7       	in	r29, 0x3e	; 62
	Dio_vidwriteChanel(DIO_PORTA, DIO_PIN3, DIO_HIGH);
    1948:	80 e0       	ldi	r24, 0x00	; 0
    194a:	63 e0       	ldi	r22, 0x03	; 3
    194c:	41 e0       	ldi	r20, 0x01	; 1
    194e:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <Dio_vidwriteChanel>
}
    1952:	cf 91       	pop	r28
    1954:	df 91       	pop	r29
    1956:	08 95       	ret

00001958 <Buzzer_vidbuzzerOff>:
void Buzzer_vidbuzzerOff(void)
{
    1958:	df 93       	push	r29
    195a:	cf 93       	push	r28
    195c:	cd b7       	in	r28, 0x3d	; 61
    195e:	de b7       	in	r29, 0x3e	; 62
	Dio_vidwriteChanel(DIO_PORTA, DIO_PIN3, DIO_LOW);
    1960:	80 e0       	ldi	r24, 0x00	; 0
    1962:	63 e0       	ldi	r22, 0x03	; 3
    1964:	40 e0       	ldi	r20, 0x00	; 0
    1966:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <Dio_vidwriteChanel>
}
    196a:	cf 91       	pop	r28
    196c:	df 91       	pop	r29
    196e:	08 95       	ret

00001970 <Button_vidbuttonInit>:
 */
#include "Button.h"
#include "Dio.h"

void Button_vidbuttonInit(void)
{
    1970:	df 93       	push	r29
    1972:	cf 93       	push	r28
    1974:	cd b7       	in	r28, 0x3d	; 61
    1976:	de b7       	in	r29, 0x3e	; 62
	Dio_vidconfigChanel(DIO_PORTB, DIO_PIN0, DIO_INPUT);
    1978:	81 e0       	ldi	r24, 0x01	; 1
    197a:	60 e0       	ldi	r22, 0x00	; 0
    197c:	40 e0       	ldi	r20, 0x00	; 0
    197e:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTD, DIO_PIN6, DIO_INPUT);
    1982:	83 e0       	ldi	r24, 0x03	; 3
    1984:	66 e0       	ldi	r22, 0x06	; 6
    1986:	40 e0       	ldi	r20, 0x00	; 0
    1988:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTD, DIO_PIN2, DIO_INPUT);
    198c:	83 e0       	ldi	r24, 0x03	; 3
    198e:	62 e0       	ldi	r22, 0x02	; 2
    1990:	40 e0       	ldi	r20, 0x00	; 0
    1992:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <Dio_vidconfigChanel>
}
    1996:	cf 91       	pop	r28
    1998:	df 91       	pop	r29
    199a:	08 95       	ret

0000199c <Button_udtbuttonStatus>:


button_butStatus_t Button_udtbuttonStatus(button_buttonId_t butnId)
{
    199c:	df 93       	push	r29
    199e:	cf 93       	push	r28
    19a0:	00 d0       	rcall	.+0      	; 0x19a2 <Button_udtbuttonStatus+0x6>
    19a2:	00 d0       	rcall	.+0      	; 0x19a4 <Button_udtbuttonStatus+0x8>
    19a4:	cd b7       	in	r28, 0x3d	; 61
    19a6:	de b7       	in	r29, 0x3e	; 62
    19a8:	8a 83       	std	Y+2, r24	; 0x02
	button_butStatus_t locBtnStatus = RELAEASED;
    19aa:	19 82       	std	Y+1, r1	; 0x01
	switch (butnId)
    19ac:	8a 81       	ldd	r24, Y+2	; 0x02
    19ae:	28 2f       	mov	r18, r24
    19b0:	30 e0       	ldi	r19, 0x00	; 0
    19b2:	3c 83       	std	Y+4, r19	; 0x04
    19b4:	2b 83       	std	Y+3, r18	; 0x03
    19b6:	8b 81       	ldd	r24, Y+3	; 0x03
    19b8:	9c 81       	ldd	r25, Y+4	; 0x04
    19ba:	81 30       	cpi	r24, 0x01	; 1
    19bc:	91 05       	cpc	r25, r1
    19be:	a1 f0       	breq	.+40     	; 0x19e8 <Button_udtbuttonStatus+0x4c>
    19c0:	2b 81       	ldd	r18, Y+3	; 0x03
    19c2:	3c 81       	ldd	r19, Y+4	; 0x04
    19c4:	22 30       	cpi	r18, 0x02	; 2
    19c6:	31 05       	cpc	r19, r1
    19c8:	d1 f0       	breq	.+52     	; 0x19fe <Button_udtbuttonStatus+0x62>
    19ca:	8b 81       	ldd	r24, Y+3	; 0x03
    19cc:	9c 81       	ldd	r25, Y+4	; 0x04
    19ce:	00 97       	sbiw	r24, 0x00	; 0
    19d0:	01 f5       	brne	.+64     	; 0x1a12 <Button_udtbuttonStatus+0x76>
	{
		case BUTTON0:
			if (Dio_udtreadChanel(DIO_PORTB, DIO_PIN0) == DIO_HIGH)
    19d2:	81 e0       	ldi	r24, 0x01	; 1
    19d4:	60 e0       	ldi	r22, 0x00	; 0
    19d6:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <Dio_udtreadChanel>
    19da:	81 30       	cpi	r24, 0x01	; 1
    19dc:	19 f4       	brne	.+6      	; 0x19e4 <Button_udtbuttonStatus+0x48>
			{
				locBtnStatus = PRESSED;
    19de:	81 e0       	ldi	r24, 0x01	; 1
    19e0:	89 83       	std	Y+1, r24	; 0x01
    19e2:	17 c0       	rjmp	.+46     	; 0x1a12 <Button_udtbuttonStatus+0x76>
			}
			else
			{
				locBtnStatus = RELAEASED;
    19e4:	19 82       	std	Y+1, r1	; 0x01
    19e6:	15 c0       	rjmp	.+42     	; 0x1a12 <Button_udtbuttonStatus+0x76>
			}
			break;

		case BUTTON1:
			if (Dio_udtreadChanel(DIO_PORTD, DIO_PIN6) == DIO_HIGH)
    19e8:	83 e0       	ldi	r24, 0x03	; 3
    19ea:	66 e0       	ldi	r22, 0x06	; 6
    19ec:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <Dio_udtreadChanel>
    19f0:	81 30       	cpi	r24, 0x01	; 1
    19f2:	19 f4       	brne	.+6      	; 0x19fa <Button_udtbuttonStatus+0x5e>
			{
				locBtnStatus = PRESSED;
    19f4:	81 e0       	ldi	r24, 0x01	; 1
    19f6:	89 83       	std	Y+1, r24	; 0x01
    19f8:	0c c0       	rjmp	.+24     	; 0x1a12 <Button_udtbuttonStatus+0x76>
			}
			else
			{
				locBtnStatus = RELAEASED;
    19fa:	19 82       	std	Y+1, r1	; 0x01
    19fc:	0a c0       	rjmp	.+20     	; 0x1a12 <Button_udtbuttonStatus+0x76>
			}
			break;

		case BUTTON2:
			if (Dio_udtreadChanel(DIO_PORTD, DIO_PIN2) == DIO_HIGH)
    19fe:	83 e0       	ldi	r24, 0x03	; 3
    1a00:	62 e0       	ldi	r22, 0x02	; 2
    1a02:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <Dio_udtreadChanel>
    1a06:	81 30       	cpi	r24, 0x01	; 1
    1a08:	19 f4       	brne	.+6      	; 0x1a10 <Button_udtbuttonStatus+0x74>
			{
				locBtnStatus = PRESSED;
    1a0a:	81 e0       	ldi	r24, 0x01	; 1
    1a0c:	89 83       	std	Y+1, r24	; 0x01
    1a0e:	01 c0       	rjmp	.+2      	; 0x1a12 <Button_udtbuttonStatus+0x76>
			}
			else
			{
				locBtnStatus = RELAEASED;
    1a10:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
	}
	return locBtnStatus;
    1a12:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a14:	0f 90       	pop	r0
    1a16:	0f 90       	pop	r0
    1a18:	0f 90       	pop	r0
    1a1a:	0f 90       	pop	r0
    1a1c:	cf 91       	pop	r28
    1a1e:	df 91       	pop	r29
    1a20:	08 95       	ret

00001a22 <Dio_vidconfigChanel>:
 */
#include "Dio.h"
#include "Bit_Math.h"

void Dio_vidconfigChanel(dio_port_t port, dio_pin_t pin,dio_dir_t dir)
{
    1a22:	df 93       	push	r29
    1a24:	cf 93       	push	r28
    1a26:	00 d0       	rcall	.+0      	; 0x1a28 <Dio_vidconfigChanel+0x6>
    1a28:	00 d0       	rcall	.+0      	; 0x1a2a <Dio_vidconfigChanel+0x8>
    1a2a:	0f 92       	push	r0
    1a2c:	cd b7       	in	r28, 0x3d	; 61
    1a2e:	de b7       	in	r29, 0x3e	; 62
    1a30:	89 83       	std	Y+1, r24	; 0x01
    1a32:	6a 83       	std	Y+2, r22	; 0x02
    1a34:	4b 83       	std	Y+3, r20	; 0x03
	switch(port)
    1a36:	89 81       	ldd	r24, Y+1	; 0x01
    1a38:	28 2f       	mov	r18, r24
    1a3a:	30 e0       	ldi	r19, 0x00	; 0
    1a3c:	3d 83       	std	Y+5, r19	; 0x05
    1a3e:	2c 83       	std	Y+4, r18	; 0x04
    1a40:	8c 81       	ldd	r24, Y+4	; 0x04
    1a42:	9d 81       	ldd	r25, Y+5	; 0x05
    1a44:	81 30       	cpi	r24, 0x01	; 1
    1a46:	91 05       	cpc	r25, r1
    1a48:	09 f4       	brne	.+2      	; 0x1a4c <Dio_vidconfigChanel+0x2a>
    1a4a:	43 c0       	rjmp	.+134    	; 0x1ad2 <Dio_vidconfigChanel+0xb0>
    1a4c:	2c 81       	ldd	r18, Y+4	; 0x04
    1a4e:	3d 81       	ldd	r19, Y+5	; 0x05
    1a50:	22 30       	cpi	r18, 0x02	; 2
    1a52:	31 05       	cpc	r19, r1
    1a54:	2c f4       	brge	.+10     	; 0x1a60 <Dio_vidconfigChanel+0x3e>
    1a56:	8c 81       	ldd	r24, Y+4	; 0x04
    1a58:	9d 81       	ldd	r25, Y+5	; 0x05
    1a5a:	00 97       	sbiw	r24, 0x00	; 0
    1a5c:	71 f0       	breq	.+28     	; 0x1a7a <Dio_vidconfigChanel+0x58>
    1a5e:	bc c0       	rjmp	.+376    	; 0x1bd8 <Dio_vidconfigChanel+0x1b6>
    1a60:	2c 81       	ldd	r18, Y+4	; 0x04
    1a62:	3d 81       	ldd	r19, Y+5	; 0x05
    1a64:	22 30       	cpi	r18, 0x02	; 2
    1a66:	31 05       	cpc	r19, r1
    1a68:	09 f4       	brne	.+2      	; 0x1a6c <Dio_vidconfigChanel+0x4a>
    1a6a:	5f c0       	rjmp	.+190    	; 0x1b2a <Dio_vidconfigChanel+0x108>
    1a6c:	8c 81       	ldd	r24, Y+4	; 0x04
    1a6e:	9d 81       	ldd	r25, Y+5	; 0x05
    1a70:	83 30       	cpi	r24, 0x03	; 3
    1a72:	91 05       	cpc	r25, r1
    1a74:	09 f4       	brne	.+2      	; 0x1a78 <Dio_vidconfigChanel+0x56>
    1a76:	85 c0       	rjmp	.+266    	; 0x1b82 <Dio_vidconfigChanel+0x160>
    1a78:	af c0       	rjmp	.+350    	; 0x1bd8 <Dio_vidconfigChanel+0x1b6>
	{
	case DIO_PORTA:
		if (dir == DIO_INPUT)
    1a7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a7c:	88 23       	and	r24, r24
    1a7e:	a9 f4       	brne	.+42     	; 0x1aaa <Dio_vidconfigChanel+0x88>
		{
			CLEAR_BIT(DIO_DDRA_REG,pin);
    1a80:	aa e3       	ldi	r26, 0x3A	; 58
    1a82:	b0 e0       	ldi	r27, 0x00	; 0
    1a84:	ea e3       	ldi	r30, 0x3A	; 58
    1a86:	f0 e0       	ldi	r31, 0x00	; 0
    1a88:	80 81       	ld	r24, Z
    1a8a:	48 2f       	mov	r20, r24
    1a8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a8e:	28 2f       	mov	r18, r24
    1a90:	30 e0       	ldi	r19, 0x00	; 0
    1a92:	81 e0       	ldi	r24, 0x01	; 1
    1a94:	90 e0       	ldi	r25, 0x00	; 0
    1a96:	02 2e       	mov	r0, r18
    1a98:	02 c0       	rjmp	.+4      	; 0x1a9e <Dio_vidconfigChanel+0x7c>
    1a9a:	88 0f       	add	r24, r24
    1a9c:	99 1f       	adc	r25, r25
    1a9e:	0a 94       	dec	r0
    1aa0:	e2 f7       	brpl	.-8      	; 0x1a9a <Dio_vidconfigChanel+0x78>
    1aa2:	80 95       	com	r24
    1aa4:	84 23       	and	r24, r20
    1aa6:	8c 93       	st	X, r24
    1aa8:	97 c0       	rjmp	.+302    	; 0x1bd8 <Dio_vidconfigChanel+0x1b6>
		}
		else
		{
			SET_BIT(DIO_DDRA_REG,pin);
    1aaa:	aa e3       	ldi	r26, 0x3A	; 58
    1aac:	b0 e0       	ldi	r27, 0x00	; 0
    1aae:	ea e3       	ldi	r30, 0x3A	; 58
    1ab0:	f0 e0       	ldi	r31, 0x00	; 0
    1ab2:	80 81       	ld	r24, Z
    1ab4:	48 2f       	mov	r20, r24
    1ab6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ab8:	28 2f       	mov	r18, r24
    1aba:	30 e0       	ldi	r19, 0x00	; 0
    1abc:	81 e0       	ldi	r24, 0x01	; 1
    1abe:	90 e0       	ldi	r25, 0x00	; 0
    1ac0:	02 2e       	mov	r0, r18
    1ac2:	02 c0       	rjmp	.+4      	; 0x1ac8 <Dio_vidconfigChanel+0xa6>
    1ac4:	88 0f       	add	r24, r24
    1ac6:	99 1f       	adc	r25, r25
    1ac8:	0a 94       	dec	r0
    1aca:	e2 f7       	brpl	.-8      	; 0x1ac4 <Dio_vidconfigChanel+0xa2>
    1acc:	84 2b       	or	r24, r20
    1ace:	8c 93       	st	X, r24
    1ad0:	83 c0       	rjmp	.+262    	; 0x1bd8 <Dio_vidconfigChanel+0x1b6>
		}
		break;

	case DIO_PORTB:
		if (dir == DIO_INPUT)
    1ad2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad4:	88 23       	and	r24, r24
    1ad6:	a9 f4       	brne	.+42     	; 0x1b02 <Dio_vidconfigChanel+0xe0>
		{
			CLEAR_BIT(DIO_DDRB_REG,pin);
    1ad8:	a7 e3       	ldi	r26, 0x37	; 55
    1ada:	b0 e0       	ldi	r27, 0x00	; 0
    1adc:	e7 e3       	ldi	r30, 0x37	; 55
    1ade:	f0 e0       	ldi	r31, 0x00	; 0
    1ae0:	80 81       	ld	r24, Z
    1ae2:	48 2f       	mov	r20, r24
    1ae4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae6:	28 2f       	mov	r18, r24
    1ae8:	30 e0       	ldi	r19, 0x00	; 0
    1aea:	81 e0       	ldi	r24, 0x01	; 1
    1aec:	90 e0       	ldi	r25, 0x00	; 0
    1aee:	02 2e       	mov	r0, r18
    1af0:	02 c0       	rjmp	.+4      	; 0x1af6 <Dio_vidconfigChanel+0xd4>
    1af2:	88 0f       	add	r24, r24
    1af4:	99 1f       	adc	r25, r25
    1af6:	0a 94       	dec	r0
    1af8:	e2 f7       	brpl	.-8      	; 0x1af2 <Dio_vidconfigChanel+0xd0>
    1afa:	80 95       	com	r24
    1afc:	84 23       	and	r24, r20
    1afe:	8c 93       	st	X, r24
    1b00:	6b c0       	rjmp	.+214    	; 0x1bd8 <Dio_vidconfigChanel+0x1b6>
		}
		else
		{
			SET_BIT(DIO_DDRB_REG,pin);
    1b02:	a7 e3       	ldi	r26, 0x37	; 55
    1b04:	b0 e0       	ldi	r27, 0x00	; 0
    1b06:	e7 e3       	ldi	r30, 0x37	; 55
    1b08:	f0 e0       	ldi	r31, 0x00	; 0
    1b0a:	80 81       	ld	r24, Z
    1b0c:	48 2f       	mov	r20, r24
    1b0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b10:	28 2f       	mov	r18, r24
    1b12:	30 e0       	ldi	r19, 0x00	; 0
    1b14:	81 e0       	ldi	r24, 0x01	; 1
    1b16:	90 e0       	ldi	r25, 0x00	; 0
    1b18:	02 2e       	mov	r0, r18
    1b1a:	02 c0       	rjmp	.+4      	; 0x1b20 <Dio_vidconfigChanel+0xfe>
    1b1c:	88 0f       	add	r24, r24
    1b1e:	99 1f       	adc	r25, r25
    1b20:	0a 94       	dec	r0
    1b22:	e2 f7       	brpl	.-8      	; 0x1b1c <Dio_vidconfigChanel+0xfa>
    1b24:	84 2b       	or	r24, r20
    1b26:	8c 93       	st	X, r24
    1b28:	57 c0       	rjmp	.+174    	; 0x1bd8 <Dio_vidconfigChanel+0x1b6>
		}
		break;

	case DIO_PORTC:
		if (dir == DIO_INPUT)
    1b2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b2c:	88 23       	and	r24, r24
    1b2e:	a9 f4       	brne	.+42     	; 0x1b5a <Dio_vidconfigChanel+0x138>
		{
			CLEAR_BIT(DIO_DDRC_REG,pin);
    1b30:	a4 e3       	ldi	r26, 0x34	; 52
    1b32:	b0 e0       	ldi	r27, 0x00	; 0
    1b34:	e4 e3       	ldi	r30, 0x34	; 52
    1b36:	f0 e0       	ldi	r31, 0x00	; 0
    1b38:	80 81       	ld	r24, Z
    1b3a:	48 2f       	mov	r20, r24
    1b3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b3e:	28 2f       	mov	r18, r24
    1b40:	30 e0       	ldi	r19, 0x00	; 0
    1b42:	81 e0       	ldi	r24, 0x01	; 1
    1b44:	90 e0       	ldi	r25, 0x00	; 0
    1b46:	02 2e       	mov	r0, r18
    1b48:	02 c0       	rjmp	.+4      	; 0x1b4e <Dio_vidconfigChanel+0x12c>
    1b4a:	88 0f       	add	r24, r24
    1b4c:	99 1f       	adc	r25, r25
    1b4e:	0a 94       	dec	r0
    1b50:	e2 f7       	brpl	.-8      	; 0x1b4a <Dio_vidconfigChanel+0x128>
    1b52:	80 95       	com	r24
    1b54:	84 23       	and	r24, r20
    1b56:	8c 93       	st	X, r24
    1b58:	3f c0       	rjmp	.+126    	; 0x1bd8 <Dio_vidconfigChanel+0x1b6>
		}
		else
		{
			SET_BIT(DIO_DDRC_REG,pin);
    1b5a:	a4 e3       	ldi	r26, 0x34	; 52
    1b5c:	b0 e0       	ldi	r27, 0x00	; 0
    1b5e:	e4 e3       	ldi	r30, 0x34	; 52
    1b60:	f0 e0       	ldi	r31, 0x00	; 0
    1b62:	80 81       	ld	r24, Z
    1b64:	48 2f       	mov	r20, r24
    1b66:	8a 81       	ldd	r24, Y+2	; 0x02
    1b68:	28 2f       	mov	r18, r24
    1b6a:	30 e0       	ldi	r19, 0x00	; 0
    1b6c:	81 e0       	ldi	r24, 0x01	; 1
    1b6e:	90 e0       	ldi	r25, 0x00	; 0
    1b70:	02 2e       	mov	r0, r18
    1b72:	02 c0       	rjmp	.+4      	; 0x1b78 <Dio_vidconfigChanel+0x156>
    1b74:	88 0f       	add	r24, r24
    1b76:	99 1f       	adc	r25, r25
    1b78:	0a 94       	dec	r0
    1b7a:	e2 f7       	brpl	.-8      	; 0x1b74 <Dio_vidconfigChanel+0x152>
    1b7c:	84 2b       	or	r24, r20
    1b7e:	8c 93       	st	X, r24
    1b80:	2b c0       	rjmp	.+86     	; 0x1bd8 <Dio_vidconfigChanel+0x1b6>
		}
		break;

	case DIO_PORTD:
		if (dir == DIO_INPUT)
    1b82:	8b 81       	ldd	r24, Y+3	; 0x03
    1b84:	88 23       	and	r24, r24
    1b86:	a9 f4       	brne	.+42     	; 0x1bb2 <Dio_vidconfigChanel+0x190>
		{
			CLEAR_BIT(DIO_DDRD_REG,pin);
    1b88:	a1 e3       	ldi	r26, 0x31	; 49
    1b8a:	b0 e0       	ldi	r27, 0x00	; 0
    1b8c:	e1 e3       	ldi	r30, 0x31	; 49
    1b8e:	f0 e0       	ldi	r31, 0x00	; 0
    1b90:	80 81       	ld	r24, Z
    1b92:	48 2f       	mov	r20, r24
    1b94:	8a 81       	ldd	r24, Y+2	; 0x02
    1b96:	28 2f       	mov	r18, r24
    1b98:	30 e0       	ldi	r19, 0x00	; 0
    1b9a:	81 e0       	ldi	r24, 0x01	; 1
    1b9c:	90 e0       	ldi	r25, 0x00	; 0
    1b9e:	02 2e       	mov	r0, r18
    1ba0:	02 c0       	rjmp	.+4      	; 0x1ba6 <Dio_vidconfigChanel+0x184>
    1ba2:	88 0f       	add	r24, r24
    1ba4:	99 1f       	adc	r25, r25
    1ba6:	0a 94       	dec	r0
    1ba8:	e2 f7       	brpl	.-8      	; 0x1ba2 <Dio_vidconfigChanel+0x180>
    1baa:	80 95       	com	r24
    1bac:	84 23       	and	r24, r20
    1bae:	8c 93       	st	X, r24
    1bb0:	13 c0       	rjmp	.+38     	; 0x1bd8 <Dio_vidconfigChanel+0x1b6>
		}
		else
		{
			SET_BIT(DIO_DDRD_REG,pin);
    1bb2:	a1 e3       	ldi	r26, 0x31	; 49
    1bb4:	b0 e0       	ldi	r27, 0x00	; 0
    1bb6:	e1 e3       	ldi	r30, 0x31	; 49
    1bb8:	f0 e0       	ldi	r31, 0x00	; 0
    1bba:	80 81       	ld	r24, Z
    1bbc:	48 2f       	mov	r20, r24
    1bbe:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc0:	28 2f       	mov	r18, r24
    1bc2:	30 e0       	ldi	r19, 0x00	; 0
    1bc4:	81 e0       	ldi	r24, 0x01	; 1
    1bc6:	90 e0       	ldi	r25, 0x00	; 0
    1bc8:	02 2e       	mov	r0, r18
    1bca:	02 c0       	rjmp	.+4      	; 0x1bd0 <Dio_vidconfigChanel+0x1ae>
    1bcc:	88 0f       	add	r24, r24
    1bce:	99 1f       	adc	r25, r25
    1bd0:	0a 94       	dec	r0
    1bd2:	e2 f7       	brpl	.-8      	; 0x1bcc <Dio_vidconfigChanel+0x1aa>
    1bd4:	84 2b       	or	r24, r20
    1bd6:	8c 93       	st	X, r24
		}
		break;
	}
}
    1bd8:	0f 90       	pop	r0
    1bda:	0f 90       	pop	r0
    1bdc:	0f 90       	pop	r0
    1bde:	0f 90       	pop	r0
    1be0:	0f 90       	pop	r0
    1be2:	cf 91       	pop	r28
    1be4:	df 91       	pop	r29
    1be6:	08 95       	ret

00001be8 <Dio_vidwriteChanel>:

void Dio_vidwriteChanel(dio_port_t port, dio_pin_t pin,dio_level_t level)
{
    1be8:	df 93       	push	r29
    1bea:	cf 93       	push	r28
    1bec:	00 d0       	rcall	.+0      	; 0x1bee <Dio_vidwriteChanel+0x6>
    1bee:	00 d0       	rcall	.+0      	; 0x1bf0 <Dio_vidwriteChanel+0x8>
    1bf0:	0f 92       	push	r0
    1bf2:	cd b7       	in	r28, 0x3d	; 61
    1bf4:	de b7       	in	r29, 0x3e	; 62
    1bf6:	89 83       	std	Y+1, r24	; 0x01
    1bf8:	6a 83       	std	Y+2, r22	; 0x02
    1bfa:	4b 83       	std	Y+3, r20	; 0x03
	switch (port)
    1bfc:	89 81       	ldd	r24, Y+1	; 0x01
    1bfe:	28 2f       	mov	r18, r24
    1c00:	30 e0       	ldi	r19, 0x00	; 0
    1c02:	3d 83       	std	Y+5, r19	; 0x05
    1c04:	2c 83       	std	Y+4, r18	; 0x04
    1c06:	8c 81       	ldd	r24, Y+4	; 0x04
    1c08:	9d 81       	ldd	r25, Y+5	; 0x05
    1c0a:	81 30       	cpi	r24, 0x01	; 1
    1c0c:	91 05       	cpc	r25, r1
    1c0e:	09 f4       	brne	.+2      	; 0x1c12 <Dio_vidwriteChanel+0x2a>
    1c10:	43 c0       	rjmp	.+134    	; 0x1c98 <Dio_vidwriteChanel+0xb0>
    1c12:	2c 81       	ldd	r18, Y+4	; 0x04
    1c14:	3d 81       	ldd	r19, Y+5	; 0x05
    1c16:	22 30       	cpi	r18, 0x02	; 2
    1c18:	31 05       	cpc	r19, r1
    1c1a:	2c f4       	brge	.+10     	; 0x1c26 <Dio_vidwriteChanel+0x3e>
    1c1c:	8c 81       	ldd	r24, Y+4	; 0x04
    1c1e:	9d 81       	ldd	r25, Y+5	; 0x05
    1c20:	00 97       	sbiw	r24, 0x00	; 0
    1c22:	71 f0       	breq	.+28     	; 0x1c40 <Dio_vidwriteChanel+0x58>
    1c24:	bc c0       	rjmp	.+376    	; 0x1d9e <Dio_vidwriteChanel+0x1b6>
    1c26:	2c 81       	ldd	r18, Y+4	; 0x04
    1c28:	3d 81       	ldd	r19, Y+5	; 0x05
    1c2a:	22 30       	cpi	r18, 0x02	; 2
    1c2c:	31 05       	cpc	r19, r1
    1c2e:	09 f4       	brne	.+2      	; 0x1c32 <Dio_vidwriteChanel+0x4a>
    1c30:	5f c0       	rjmp	.+190    	; 0x1cf0 <Dio_vidwriteChanel+0x108>
    1c32:	8c 81       	ldd	r24, Y+4	; 0x04
    1c34:	9d 81       	ldd	r25, Y+5	; 0x05
    1c36:	83 30       	cpi	r24, 0x03	; 3
    1c38:	91 05       	cpc	r25, r1
    1c3a:	09 f4       	brne	.+2      	; 0x1c3e <Dio_vidwriteChanel+0x56>
    1c3c:	85 c0       	rjmp	.+266    	; 0x1d48 <Dio_vidwriteChanel+0x160>
    1c3e:	af c0       	rjmp	.+350    	; 0x1d9e <Dio_vidwriteChanel+0x1b6>
	{
	case DIO_PORTA:
		if (level == DIO_HIGH)
    1c40:	8b 81       	ldd	r24, Y+3	; 0x03
    1c42:	81 30       	cpi	r24, 0x01	; 1
    1c44:	a1 f4       	brne	.+40     	; 0x1c6e <Dio_vidwriteChanel+0x86>
		{
			SET_BIT(DIO_PORTA_REG,pin);
    1c46:	ab e3       	ldi	r26, 0x3B	; 59
    1c48:	b0 e0       	ldi	r27, 0x00	; 0
    1c4a:	eb e3       	ldi	r30, 0x3B	; 59
    1c4c:	f0 e0       	ldi	r31, 0x00	; 0
    1c4e:	80 81       	ld	r24, Z
    1c50:	48 2f       	mov	r20, r24
    1c52:	8a 81       	ldd	r24, Y+2	; 0x02
    1c54:	28 2f       	mov	r18, r24
    1c56:	30 e0       	ldi	r19, 0x00	; 0
    1c58:	81 e0       	ldi	r24, 0x01	; 1
    1c5a:	90 e0       	ldi	r25, 0x00	; 0
    1c5c:	02 2e       	mov	r0, r18
    1c5e:	02 c0       	rjmp	.+4      	; 0x1c64 <Dio_vidwriteChanel+0x7c>
    1c60:	88 0f       	add	r24, r24
    1c62:	99 1f       	adc	r25, r25
    1c64:	0a 94       	dec	r0
    1c66:	e2 f7       	brpl	.-8      	; 0x1c60 <Dio_vidwriteChanel+0x78>
    1c68:	84 2b       	or	r24, r20
    1c6a:	8c 93       	st	X, r24
    1c6c:	98 c0       	rjmp	.+304    	; 0x1d9e <Dio_vidwriteChanel+0x1b6>
		}
		else
		{
			CLEAR_BIT(DIO_PORTA_REG,pin);
    1c6e:	ab e3       	ldi	r26, 0x3B	; 59
    1c70:	b0 e0       	ldi	r27, 0x00	; 0
    1c72:	eb e3       	ldi	r30, 0x3B	; 59
    1c74:	f0 e0       	ldi	r31, 0x00	; 0
    1c76:	80 81       	ld	r24, Z
    1c78:	48 2f       	mov	r20, r24
    1c7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c7c:	28 2f       	mov	r18, r24
    1c7e:	30 e0       	ldi	r19, 0x00	; 0
    1c80:	81 e0       	ldi	r24, 0x01	; 1
    1c82:	90 e0       	ldi	r25, 0x00	; 0
    1c84:	02 2e       	mov	r0, r18
    1c86:	02 c0       	rjmp	.+4      	; 0x1c8c <Dio_vidwriteChanel+0xa4>
    1c88:	88 0f       	add	r24, r24
    1c8a:	99 1f       	adc	r25, r25
    1c8c:	0a 94       	dec	r0
    1c8e:	e2 f7       	brpl	.-8      	; 0x1c88 <Dio_vidwriteChanel+0xa0>
    1c90:	80 95       	com	r24
    1c92:	84 23       	and	r24, r20
    1c94:	8c 93       	st	X, r24
    1c96:	83 c0       	rjmp	.+262    	; 0x1d9e <Dio_vidwriteChanel+0x1b6>
		}
		break;

	case DIO_PORTB:
		if (level == DIO_HIGH)
    1c98:	8b 81       	ldd	r24, Y+3	; 0x03
    1c9a:	81 30       	cpi	r24, 0x01	; 1
    1c9c:	a1 f4       	brne	.+40     	; 0x1cc6 <Dio_vidwriteChanel+0xde>
		{
			SET_BIT(DIO_PORTB_REG,pin);
    1c9e:	a8 e3       	ldi	r26, 0x38	; 56
    1ca0:	b0 e0       	ldi	r27, 0x00	; 0
    1ca2:	e8 e3       	ldi	r30, 0x38	; 56
    1ca4:	f0 e0       	ldi	r31, 0x00	; 0
    1ca6:	80 81       	ld	r24, Z
    1ca8:	48 2f       	mov	r20, r24
    1caa:	8a 81       	ldd	r24, Y+2	; 0x02
    1cac:	28 2f       	mov	r18, r24
    1cae:	30 e0       	ldi	r19, 0x00	; 0
    1cb0:	81 e0       	ldi	r24, 0x01	; 1
    1cb2:	90 e0       	ldi	r25, 0x00	; 0
    1cb4:	02 2e       	mov	r0, r18
    1cb6:	02 c0       	rjmp	.+4      	; 0x1cbc <Dio_vidwriteChanel+0xd4>
    1cb8:	88 0f       	add	r24, r24
    1cba:	99 1f       	adc	r25, r25
    1cbc:	0a 94       	dec	r0
    1cbe:	e2 f7       	brpl	.-8      	; 0x1cb8 <Dio_vidwriteChanel+0xd0>
    1cc0:	84 2b       	or	r24, r20
    1cc2:	8c 93       	st	X, r24
    1cc4:	6c c0       	rjmp	.+216    	; 0x1d9e <Dio_vidwriteChanel+0x1b6>
		}
		else
		{
			CLEAR_BIT(DIO_PORTB_REG,pin);
    1cc6:	a8 e3       	ldi	r26, 0x38	; 56
    1cc8:	b0 e0       	ldi	r27, 0x00	; 0
    1cca:	e8 e3       	ldi	r30, 0x38	; 56
    1ccc:	f0 e0       	ldi	r31, 0x00	; 0
    1cce:	80 81       	ld	r24, Z
    1cd0:	48 2f       	mov	r20, r24
    1cd2:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd4:	28 2f       	mov	r18, r24
    1cd6:	30 e0       	ldi	r19, 0x00	; 0
    1cd8:	81 e0       	ldi	r24, 0x01	; 1
    1cda:	90 e0       	ldi	r25, 0x00	; 0
    1cdc:	02 2e       	mov	r0, r18
    1cde:	02 c0       	rjmp	.+4      	; 0x1ce4 <Dio_vidwriteChanel+0xfc>
    1ce0:	88 0f       	add	r24, r24
    1ce2:	99 1f       	adc	r25, r25
    1ce4:	0a 94       	dec	r0
    1ce6:	e2 f7       	brpl	.-8      	; 0x1ce0 <Dio_vidwriteChanel+0xf8>
    1ce8:	80 95       	com	r24
    1cea:	84 23       	and	r24, r20
    1cec:	8c 93       	st	X, r24
    1cee:	57 c0       	rjmp	.+174    	; 0x1d9e <Dio_vidwriteChanel+0x1b6>
		}
		break;

	case DIO_PORTC:
		if (level == DIO_HIGH)
    1cf0:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf2:	81 30       	cpi	r24, 0x01	; 1
    1cf4:	a1 f4       	brne	.+40     	; 0x1d1e <Dio_vidwriteChanel+0x136>
		{
			SET_BIT(DIO_PORTC_REG,pin);
    1cf6:	a5 e3       	ldi	r26, 0x35	; 53
    1cf8:	b0 e0       	ldi	r27, 0x00	; 0
    1cfa:	e5 e3       	ldi	r30, 0x35	; 53
    1cfc:	f0 e0       	ldi	r31, 0x00	; 0
    1cfe:	80 81       	ld	r24, Z
    1d00:	48 2f       	mov	r20, r24
    1d02:	8a 81       	ldd	r24, Y+2	; 0x02
    1d04:	28 2f       	mov	r18, r24
    1d06:	30 e0       	ldi	r19, 0x00	; 0
    1d08:	81 e0       	ldi	r24, 0x01	; 1
    1d0a:	90 e0       	ldi	r25, 0x00	; 0
    1d0c:	02 2e       	mov	r0, r18
    1d0e:	02 c0       	rjmp	.+4      	; 0x1d14 <Dio_vidwriteChanel+0x12c>
    1d10:	88 0f       	add	r24, r24
    1d12:	99 1f       	adc	r25, r25
    1d14:	0a 94       	dec	r0
    1d16:	e2 f7       	brpl	.-8      	; 0x1d10 <Dio_vidwriteChanel+0x128>
    1d18:	84 2b       	or	r24, r20
    1d1a:	8c 93       	st	X, r24
    1d1c:	40 c0       	rjmp	.+128    	; 0x1d9e <Dio_vidwriteChanel+0x1b6>
		}
		else
		{
			CLEAR_BIT(DIO_PORTC_REG,pin);
    1d1e:	a5 e3       	ldi	r26, 0x35	; 53
    1d20:	b0 e0       	ldi	r27, 0x00	; 0
    1d22:	e5 e3       	ldi	r30, 0x35	; 53
    1d24:	f0 e0       	ldi	r31, 0x00	; 0
    1d26:	80 81       	ld	r24, Z
    1d28:	48 2f       	mov	r20, r24
    1d2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d2c:	28 2f       	mov	r18, r24
    1d2e:	30 e0       	ldi	r19, 0x00	; 0
    1d30:	81 e0       	ldi	r24, 0x01	; 1
    1d32:	90 e0       	ldi	r25, 0x00	; 0
    1d34:	02 2e       	mov	r0, r18
    1d36:	02 c0       	rjmp	.+4      	; 0x1d3c <Dio_vidwriteChanel+0x154>
    1d38:	88 0f       	add	r24, r24
    1d3a:	99 1f       	adc	r25, r25
    1d3c:	0a 94       	dec	r0
    1d3e:	e2 f7       	brpl	.-8      	; 0x1d38 <Dio_vidwriteChanel+0x150>
    1d40:	80 95       	com	r24
    1d42:	84 23       	and	r24, r20
    1d44:	8c 93       	st	X, r24
    1d46:	2b c0       	rjmp	.+86     	; 0x1d9e <Dio_vidwriteChanel+0x1b6>
		}
		break;

	case DIO_PORTD:
		if (level == DIO_HIGH)
    1d48:	8b 81       	ldd	r24, Y+3	; 0x03
    1d4a:	81 30       	cpi	r24, 0x01	; 1
    1d4c:	a1 f4       	brne	.+40     	; 0x1d76 <Dio_vidwriteChanel+0x18e>
		{
			SET_BIT(DIO_PORTD_REG,pin);
    1d4e:	a2 e3       	ldi	r26, 0x32	; 50
    1d50:	b0 e0       	ldi	r27, 0x00	; 0
    1d52:	e2 e3       	ldi	r30, 0x32	; 50
    1d54:	f0 e0       	ldi	r31, 0x00	; 0
    1d56:	80 81       	ld	r24, Z
    1d58:	48 2f       	mov	r20, r24
    1d5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d5c:	28 2f       	mov	r18, r24
    1d5e:	30 e0       	ldi	r19, 0x00	; 0
    1d60:	81 e0       	ldi	r24, 0x01	; 1
    1d62:	90 e0       	ldi	r25, 0x00	; 0
    1d64:	02 2e       	mov	r0, r18
    1d66:	02 c0       	rjmp	.+4      	; 0x1d6c <Dio_vidwriteChanel+0x184>
    1d68:	88 0f       	add	r24, r24
    1d6a:	99 1f       	adc	r25, r25
    1d6c:	0a 94       	dec	r0
    1d6e:	e2 f7       	brpl	.-8      	; 0x1d68 <Dio_vidwriteChanel+0x180>
    1d70:	84 2b       	or	r24, r20
    1d72:	8c 93       	st	X, r24
    1d74:	14 c0       	rjmp	.+40     	; 0x1d9e <Dio_vidwriteChanel+0x1b6>
		}
		else
		{
			CLEAR_BIT(DIO_PORTD_REG,pin);
    1d76:	a2 e3       	ldi	r26, 0x32	; 50
    1d78:	b0 e0       	ldi	r27, 0x00	; 0
    1d7a:	e2 e3       	ldi	r30, 0x32	; 50
    1d7c:	f0 e0       	ldi	r31, 0x00	; 0
    1d7e:	80 81       	ld	r24, Z
    1d80:	48 2f       	mov	r20, r24
    1d82:	8a 81       	ldd	r24, Y+2	; 0x02
    1d84:	28 2f       	mov	r18, r24
    1d86:	30 e0       	ldi	r19, 0x00	; 0
    1d88:	81 e0       	ldi	r24, 0x01	; 1
    1d8a:	90 e0       	ldi	r25, 0x00	; 0
    1d8c:	02 2e       	mov	r0, r18
    1d8e:	02 c0       	rjmp	.+4      	; 0x1d94 <Dio_vidwriteChanel+0x1ac>
    1d90:	88 0f       	add	r24, r24
    1d92:	99 1f       	adc	r25, r25
    1d94:	0a 94       	dec	r0
    1d96:	e2 f7       	brpl	.-8      	; 0x1d90 <Dio_vidwriteChanel+0x1a8>
    1d98:	80 95       	com	r24
    1d9a:	84 23       	and	r24, r20
    1d9c:	8c 93       	st	X, r24
		}
		break;
	}
}
    1d9e:	0f 90       	pop	r0
    1da0:	0f 90       	pop	r0
    1da2:	0f 90       	pop	r0
    1da4:	0f 90       	pop	r0
    1da6:	0f 90       	pop	r0
    1da8:	cf 91       	pop	r28
    1daa:	df 91       	pop	r29
    1dac:	08 95       	ret

00001dae <Dio_vidWriteChanelGroup>:

void Dio_vidWriteChanelGroup(dio_port_t port, u8 data, u8 mask)
{
    1dae:	df 93       	push	r29
    1db0:	cf 93       	push	r28
    1db2:	00 d0       	rcall	.+0      	; 0x1db4 <Dio_vidWriteChanelGroup+0x6>
    1db4:	00 d0       	rcall	.+0      	; 0x1db6 <Dio_vidWriteChanelGroup+0x8>
    1db6:	0f 92       	push	r0
    1db8:	cd b7       	in	r28, 0x3d	; 61
    1dba:	de b7       	in	r29, 0x3e	; 62
    1dbc:	89 83       	std	Y+1, r24	; 0x01
    1dbe:	6a 83       	std	Y+2, r22	; 0x02
    1dc0:	4b 83       	std	Y+3, r20	; 0x03
	switch(port)
    1dc2:	89 81       	ldd	r24, Y+1	; 0x01
    1dc4:	28 2f       	mov	r18, r24
    1dc6:	30 e0       	ldi	r19, 0x00	; 0
    1dc8:	3d 83       	std	Y+5, r19	; 0x05
    1dca:	2c 83       	std	Y+4, r18	; 0x04
    1dcc:	8c 81       	ldd	r24, Y+4	; 0x04
    1dce:	9d 81       	ldd	r25, Y+5	; 0x05
    1dd0:	81 30       	cpi	r24, 0x01	; 1
    1dd2:	91 05       	cpc	r25, r1
    1dd4:	01 f1       	breq	.+64     	; 0x1e16 <Dio_vidWriteChanelGroup+0x68>
    1dd6:	2c 81       	ldd	r18, Y+4	; 0x04
    1dd8:	3d 81       	ldd	r19, Y+5	; 0x05
    1dda:	22 30       	cpi	r18, 0x02	; 2
    1ddc:	31 05       	cpc	r19, r1
    1dde:	2c f4       	brge	.+10     	; 0x1dea <Dio_vidWriteChanelGroup+0x3c>
    1de0:	8c 81       	ldd	r24, Y+4	; 0x04
    1de2:	9d 81       	ldd	r25, Y+5	; 0x05
    1de4:	00 97       	sbiw	r24, 0x00	; 0
    1de6:	61 f0       	breq	.+24     	; 0x1e00 <Dio_vidWriteChanelGroup+0x52>
    1de8:	36 c0       	rjmp	.+108    	; 0x1e56 <Dio_vidWriteChanelGroup+0xa8>
    1dea:	2c 81       	ldd	r18, Y+4	; 0x04
    1dec:	3d 81       	ldd	r19, Y+5	; 0x05
    1dee:	22 30       	cpi	r18, 0x02	; 2
    1df0:	31 05       	cpc	r19, r1
    1df2:	e1 f0       	breq	.+56     	; 0x1e2c <Dio_vidWriteChanelGroup+0x7e>
    1df4:	8c 81       	ldd	r24, Y+4	; 0x04
    1df6:	9d 81       	ldd	r25, Y+5	; 0x05
    1df8:	83 30       	cpi	r24, 0x03	; 3
    1dfa:	91 05       	cpc	r25, r1
    1dfc:	11 f1       	breq	.+68     	; 0x1e42 <Dio_vidWriteChanelGroup+0x94>
    1dfe:	2b c0       	rjmp	.+86     	; 0x1e56 <Dio_vidWriteChanelGroup+0xa8>
	{
	case DIO_PORTA:
		DIO_PORTA_REG = (DIO_PORTA_REG & mask)|(data);
    1e00:	ab e3       	ldi	r26, 0x3B	; 59
    1e02:	b0 e0       	ldi	r27, 0x00	; 0
    1e04:	eb e3       	ldi	r30, 0x3B	; 59
    1e06:	f0 e0       	ldi	r31, 0x00	; 0
    1e08:	90 81       	ld	r25, Z
    1e0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e0c:	98 23       	and	r25, r24
    1e0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e10:	89 2b       	or	r24, r25
    1e12:	8c 93       	st	X, r24
    1e14:	20 c0       	rjmp	.+64     	; 0x1e56 <Dio_vidWriteChanelGroup+0xa8>
		break;

	case DIO_PORTB:
		DIO_PORTB_REG = (DIO_PORTB_REG & mask)|(data);
    1e16:	a8 e3       	ldi	r26, 0x38	; 56
    1e18:	b0 e0       	ldi	r27, 0x00	; 0
    1e1a:	e8 e3       	ldi	r30, 0x38	; 56
    1e1c:	f0 e0       	ldi	r31, 0x00	; 0
    1e1e:	90 81       	ld	r25, Z
    1e20:	8b 81       	ldd	r24, Y+3	; 0x03
    1e22:	98 23       	and	r25, r24
    1e24:	8a 81       	ldd	r24, Y+2	; 0x02
    1e26:	89 2b       	or	r24, r25
    1e28:	8c 93       	st	X, r24
    1e2a:	15 c0       	rjmp	.+42     	; 0x1e56 <Dio_vidWriteChanelGroup+0xa8>
		break;

	case DIO_PORTC:
		DIO_PORTC_REG = (DIO_PORTC_REG & mask)|(data);
    1e2c:	a5 e3       	ldi	r26, 0x35	; 53
    1e2e:	b0 e0       	ldi	r27, 0x00	; 0
    1e30:	e5 e3       	ldi	r30, 0x35	; 53
    1e32:	f0 e0       	ldi	r31, 0x00	; 0
    1e34:	90 81       	ld	r25, Z
    1e36:	8b 81       	ldd	r24, Y+3	; 0x03
    1e38:	98 23       	and	r25, r24
    1e3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e3c:	89 2b       	or	r24, r25
    1e3e:	8c 93       	st	X, r24
    1e40:	0a c0       	rjmp	.+20     	; 0x1e56 <Dio_vidWriteChanelGroup+0xa8>
		break;

	case DIO_PORTD:
		DIO_PORTD_REG = (DIO_PORTD_REG & mask)|(data);
    1e42:	a2 e3       	ldi	r26, 0x32	; 50
    1e44:	b0 e0       	ldi	r27, 0x00	; 0
    1e46:	e2 e3       	ldi	r30, 0x32	; 50
    1e48:	f0 e0       	ldi	r31, 0x00	; 0
    1e4a:	90 81       	ld	r25, Z
    1e4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e4e:	98 23       	and	r25, r24
    1e50:	8a 81       	ldd	r24, Y+2	; 0x02
    1e52:	89 2b       	or	r24, r25
    1e54:	8c 93       	st	X, r24
		break;
	}
}
    1e56:	0f 90       	pop	r0
    1e58:	0f 90       	pop	r0
    1e5a:	0f 90       	pop	r0
    1e5c:	0f 90       	pop	r0
    1e5e:	0f 90       	pop	r0
    1e60:	cf 91       	pop	r28
    1e62:	df 91       	pop	r29
    1e64:	08 95       	ret

00001e66 <Dio_udtreadChanel>:

dio_level_t Dio_udtreadChanel(dio_port_t port, dio_pin_t pin)
{
    1e66:	df 93       	push	r29
    1e68:	cf 93       	push	r28
    1e6a:	00 d0       	rcall	.+0      	; 0x1e6c <Dio_udtreadChanel+0x6>
    1e6c:	00 d0       	rcall	.+0      	; 0x1e6e <Dio_udtreadChanel+0x8>
    1e6e:	0f 92       	push	r0
    1e70:	cd b7       	in	r28, 0x3d	; 61
    1e72:	de b7       	in	r29, 0x3e	; 62
    1e74:	8a 83       	std	Y+2, r24	; 0x02
    1e76:	6b 83       	std	Y+3, r22	; 0x03
	dio_level_t loc_result = DIO_LOW;
    1e78:	19 82       	std	Y+1, r1	; 0x01

	switch (port)
    1e7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e7c:	28 2f       	mov	r18, r24
    1e7e:	30 e0       	ldi	r19, 0x00	; 0
    1e80:	3d 83       	std	Y+5, r19	; 0x05
    1e82:	2c 83       	std	Y+4, r18	; 0x04
    1e84:	4c 81       	ldd	r20, Y+4	; 0x04
    1e86:	5d 81       	ldd	r21, Y+5	; 0x05
    1e88:	41 30       	cpi	r20, 0x01	; 1
    1e8a:	51 05       	cpc	r21, r1
    1e8c:	79 f1       	breq	.+94     	; 0x1eec <Dio_udtreadChanel+0x86>
    1e8e:	8c 81       	ldd	r24, Y+4	; 0x04
    1e90:	9d 81       	ldd	r25, Y+5	; 0x05
    1e92:	82 30       	cpi	r24, 0x02	; 2
    1e94:	91 05       	cpc	r25, r1
    1e96:	34 f4       	brge	.+12     	; 0x1ea4 <Dio_udtreadChanel+0x3e>
    1e98:	2c 81       	ldd	r18, Y+4	; 0x04
    1e9a:	3d 81       	ldd	r19, Y+5	; 0x05
    1e9c:	21 15       	cp	r18, r1
    1e9e:	31 05       	cpc	r19, r1
    1ea0:	69 f0       	breq	.+26     	; 0x1ebc <Dio_udtreadChanel+0x56>
    1ea2:	6b c0       	rjmp	.+214    	; 0x1f7a <Dio_udtreadChanel+0x114>
    1ea4:	4c 81       	ldd	r20, Y+4	; 0x04
    1ea6:	5d 81       	ldd	r21, Y+5	; 0x05
    1ea8:	42 30       	cpi	r20, 0x02	; 2
    1eaa:	51 05       	cpc	r21, r1
    1eac:	b9 f1       	breq	.+110    	; 0x1f1c <Dio_udtreadChanel+0xb6>
    1eae:	8c 81       	ldd	r24, Y+4	; 0x04
    1eb0:	9d 81       	ldd	r25, Y+5	; 0x05
    1eb2:	83 30       	cpi	r24, 0x03	; 3
    1eb4:	91 05       	cpc	r25, r1
    1eb6:	09 f4       	brne	.+2      	; 0x1eba <Dio_udtreadChanel+0x54>
    1eb8:	49 c0       	rjmp	.+146    	; 0x1f4c <Dio_udtreadChanel+0xe6>
    1eba:	5f c0       	rjmp	.+190    	; 0x1f7a <Dio_udtreadChanel+0x114>
	{
	case DIO_PORTA:
		if (CHECK_BIT(DIO_PINA_REG,pin) == 1)
    1ebc:	e9 e3       	ldi	r30, 0x39	; 57
    1ebe:	f0 e0       	ldi	r31, 0x00	; 0
    1ec0:	80 81       	ld	r24, Z
    1ec2:	28 2f       	mov	r18, r24
    1ec4:	30 e0       	ldi	r19, 0x00	; 0
    1ec6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ec8:	88 2f       	mov	r24, r24
    1eca:	90 e0       	ldi	r25, 0x00	; 0
    1ecc:	a9 01       	movw	r20, r18
    1ece:	02 c0       	rjmp	.+4      	; 0x1ed4 <Dio_udtreadChanel+0x6e>
    1ed0:	55 95       	asr	r21
    1ed2:	47 95       	ror	r20
    1ed4:	8a 95       	dec	r24
    1ed6:	e2 f7       	brpl	.-8      	; 0x1ed0 <Dio_udtreadChanel+0x6a>
    1ed8:	ca 01       	movw	r24, r20
    1eda:	81 70       	andi	r24, 0x01	; 1
    1edc:	90 70       	andi	r25, 0x00	; 0
    1ede:	88 23       	and	r24, r24
    1ee0:	19 f0       	breq	.+6      	; 0x1ee8 <Dio_udtreadChanel+0x82>
		{
			loc_result = DIO_HIGH;
    1ee2:	81 e0       	ldi	r24, 0x01	; 1
    1ee4:	89 83       	std	Y+1, r24	; 0x01
    1ee6:	49 c0       	rjmp	.+146    	; 0x1f7a <Dio_udtreadChanel+0x114>
		}
		else
		{
			loc_result = DIO_LOW;
    1ee8:	19 82       	std	Y+1, r1	; 0x01
    1eea:	47 c0       	rjmp	.+142    	; 0x1f7a <Dio_udtreadChanel+0x114>
		}
		break;

	case DIO_PORTB:
		if (CHECK_BIT(DIO_PINB_REG,pin) == 1)
    1eec:	e6 e3       	ldi	r30, 0x36	; 54
    1eee:	f0 e0       	ldi	r31, 0x00	; 0
    1ef0:	80 81       	ld	r24, Z
    1ef2:	28 2f       	mov	r18, r24
    1ef4:	30 e0       	ldi	r19, 0x00	; 0
    1ef6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ef8:	88 2f       	mov	r24, r24
    1efa:	90 e0       	ldi	r25, 0x00	; 0
    1efc:	a9 01       	movw	r20, r18
    1efe:	02 c0       	rjmp	.+4      	; 0x1f04 <Dio_udtreadChanel+0x9e>
    1f00:	55 95       	asr	r21
    1f02:	47 95       	ror	r20
    1f04:	8a 95       	dec	r24
    1f06:	e2 f7       	brpl	.-8      	; 0x1f00 <Dio_udtreadChanel+0x9a>
    1f08:	ca 01       	movw	r24, r20
    1f0a:	81 70       	andi	r24, 0x01	; 1
    1f0c:	90 70       	andi	r25, 0x00	; 0
    1f0e:	88 23       	and	r24, r24
    1f10:	19 f0       	breq	.+6      	; 0x1f18 <Dio_udtreadChanel+0xb2>
		{
			loc_result = DIO_HIGH;
    1f12:	81 e0       	ldi	r24, 0x01	; 1
    1f14:	89 83       	std	Y+1, r24	; 0x01
    1f16:	31 c0       	rjmp	.+98     	; 0x1f7a <Dio_udtreadChanel+0x114>
		}
		else
		{
			loc_result = DIO_LOW;
    1f18:	19 82       	std	Y+1, r1	; 0x01
    1f1a:	2f c0       	rjmp	.+94     	; 0x1f7a <Dio_udtreadChanel+0x114>
		}
		break;

	case DIO_PORTC:
		if (CHECK_BIT(DIO_PINC_REG,pin) == 1)
    1f1c:	e3 e3       	ldi	r30, 0x33	; 51
    1f1e:	f0 e0       	ldi	r31, 0x00	; 0
    1f20:	80 81       	ld	r24, Z
    1f22:	28 2f       	mov	r18, r24
    1f24:	30 e0       	ldi	r19, 0x00	; 0
    1f26:	8b 81       	ldd	r24, Y+3	; 0x03
    1f28:	88 2f       	mov	r24, r24
    1f2a:	90 e0       	ldi	r25, 0x00	; 0
    1f2c:	a9 01       	movw	r20, r18
    1f2e:	02 c0       	rjmp	.+4      	; 0x1f34 <Dio_udtreadChanel+0xce>
    1f30:	55 95       	asr	r21
    1f32:	47 95       	ror	r20
    1f34:	8a 95       	dec	r24
    1f36:	e2 f7       	brpl	.-8      	; 0x1f30 <Dio_udtreadChanel+0xca>
    1f38:	ca 01       	movw	r24, r20
    1f3a:	81 70       	andi	r24, 0x01	; 1
    1f3c:	90 70       	andi	r25, 0x00	; 0
    1f3e:	88 23       	and	r24, r24
    1f40:	19 f0       	breq	.+6      	; 0x1f48 <Dio_udtreadChanel+0xe2>
		{
			loc_result = DIO_HIGH;
    1f42:	81 e0       	ldi	r24, 0x01	; 1
    1f44:	89 83       	std	Y+1, r24	; 0x01
    1f46:	19 c0       	rjmp	.+50     	; 0x1f7a <Dio_udtreadChanel+0x114>
		}
		else
		{
			loc_result = DIO_LOW;
    1f48:	19 82       	std	Y+1, r1	; 0x01
    1f4a:	17 c0       	rjmp	.+46     	; 0x1f7a <Dio_udtreadChanel+0x114>
		}
		break;

	case DIO_PORTD:
		if (CHECK_BIT(DIO_PIND_REG,pin) == 1)
    1f4c:	e0 e3       	ldi	r30, 0x30	; 48
    1f4e:	f0 e0       	ldi	r31, 0x00	; 0
    1f50:	80 81       	ld	r24, Z
    1f52:	28 2f       	mov	r18, r24
    1f54:	30 e0       	ldi	r19, 0x00	; 0
    1f56:	8b 81       	ldd	r24, Y+3	; 0x03
    1f58:	88 2f       	mov	r24, r24
    1f5a:	90 e0       	ldi	r25, 0x00	; 0
    1f5c:	a9 01       	movw	r20, r18
    1f5e:	02 c0       	rjmp	.+4      	; 0x1f64 <Dio_udtreadChanel+0xfe>
    1f60:	55 95       	asr	r21
    1f62:	47 95       	ror	r20
    1f64:	8a 95       	dec	r24
    1f66:	e2 f7       	brpl	.-8      	; 0x1f60 <Dio_udtreadChanel+0xfa>
    1f68:	ca 01       	movw	r24, r20
    1f6a:	81 70       	andi	r24, 0x01	; 1
    1f6c:	90 70       	andi	r25, 0x00	; 0
    1f6e:	88 23       	and	r24, r24
    1f70:	19 f0       	breq	.+6      	; 0x1f78 <Dio_udtreadChanel+0x112>
		{
			loc_result = DIO_HIGH;
    1f72:	81 e0       	ldi	r24, 0x01	; 1
    1f74:	89 83       	std	Y+1, r24	; 0x01
    1f76:	01 c0       	rjmp	.+2      	; 0x1f7a <Dio_udtreadChanel+0x114>
		}
		else
		{
			loc_result = DIO_LOW;
    1f78:	19 82       	std	Y+1, r1	; 0x01
		}
		break;
	}
	return loc_result;
    1f7a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f7c:	0f 90       	pop	r0
    1f7e:	0f 90       	pop	r0
    1f80:	0f 90       	pop	r0
    1f82:	0f 90       	pop	r0
    1f84:	0f 90       	pop	r0
    1f86:	cf 91       	pop	r28
    1f88:	df 91       	pop	r29
    1f8a:	08 95       	ret

00001f8c <Dio_vidflipChanel>:

void Dio_vidflipChanel(dio_port_t port, dio_pin_t pin)
{
    1f8c:	df 93       	push	r29
    1f8e:	cf 93       	push	r28
    1f90:	00 d0       	rcall	.+0      	; 0x1f92 <Dio_vidflipChanel+0x6>
    1f92:	00 d0       	rcall	.+0      	; 0x1f94 <Dio_vidflipChanel+0x8>
    1f94:	cd b7       	in	r28, 0x3d	; 61
    1f96:	de b7       	in	r29, 0x3e	; 62
    1f98:	89 83       	std	Y+1, r24	; 0x01
    1f9a:	6a 83       	std	Y+2, r22	; 0x02
	switch (port)
    1f9c:	89 81       	ldd	r24, Y+1	; 0x01
    1f9e:	28 2f       	mov	r18, r24
    1fa0:	30 e0       	ldi	r19, 0x00	; 0
    1fa2:	3c 83       	std	Y+4, r19	; 0x04
    1fa4:	2b 83       	std	Y+3, r18	; 0x03
    1fa6:	8b 81       	ldd	r24, Y+3	; 0x03
    1fa8:	9c 81       	ldd	r25, Y+4	; 0x04
    1faa:	81 30       	cpi	r24, 0x01	; 1
    1fac:	91 05       	cpc	r25, r1
    1fae:	49 f1       	breq	.+82     	; 0x2002 <Dio_vidflipChanel+0x76>
    1fb0:	2b 81       	ldd	r18, Y+3	; 0x03
    1fb2:	3c 81       	ldd	r19, Y+4	; 0x04
    1fb4:	22 30       	cpi	r18, 0x02	; 2
    1fb6:	31 05       	cpc	r19, r1
    1fb8:	2c f4       	brge	.+10     	; 0x1fc4 <Dio_vidflipChanel+0x38>
    1fba:	8b 81       	ldd	r24, Y+3	; 0x03
    1fbc:	9c 81       	ldd	r25, Y+4	; 0x04
    1fbe:	00 97       	sbiw	r24, 0x00	; 0
    1fc0:	61 f0       	breq	.+24     	; 0x1fda <Dio_vidflipChanel+0x4e>
    1fc2:	5a c0       	rjmp	.+180    	; 0x2078 <Dio_vidflipChanel+0xec>
    1fc4:	2b 81       	ldd	r18, Y+3	; 0x03
    1fc6:	3c 81       	ldd	r19, Y+4	; 0x04
    1fc8:	22 30       	cpi	r18, 0x02	; 2
    1fca:	31 05       	cpc	r19, r1
    1fcc:	71 f1       	breq	.+92     	; 0x202a <Dio_vidflipChanel+0x9e>
    1fce:	8b 81       	ldd	r24, Y+3	; 0x03
    1fd0:	9c 81       	ldd	r25, Y+4	; 0x04
    1fd2:	83 30       	cpi	r24, 0x03	; 3
    1fd4:	91 05       	cpc	r25, r1
    1fd6:	e9 f1       	breq	.+122    	; 0x2052 <Dio_vidflipChanel+0xc6>
    1fd8:	4f c0       	rjmp	.+158    	; 0x2078 <Dio_vidflipChanel+0xec>
	{
	case DIO_PORTA:
		FLIP_BIT(DIO_PORTA_REG,pin);
    1fda:	ab e3       	ldi	r26, 0x3B	; 59
    1fdc:	b0 e0       	ldi	r27, 0x00	; 0
    1fde:	eb e3       	ldi	r30, 0x3B	; 59
    1fe0:	f0 e0       	ldi	r31, 0x00	; 0
    1fe2:	80 81       	ld	r24, Z
    1fe4:	48 2f       	mov	r20, r24
    1fe6:	8a 81       	ldd	r24, Y+2	; 0x02
    1fe8:	28 2f       	mov	r18, r24
    1fea:	30 e0       	ldi	r19, 0x00	; 0
    1fec:	81 e0       	ldi	r24, 0x01	; 1
    1fee:	90 e0       	ldi	r25, 0x00	; 0
    1ff0:	02 2e       	mov	r0, r18
    1ff2:	02 c0       	rjmp	.+4      	; 0x1ff8 <Dio_vidflipChanel+0x6c>
    1ff4:	88 0f       	add	r24, r24
    1ff6:	99 1f       	adc	r25, r25
    1ff8:	0a 94       	dec	r0
    1ffa:	e2 f7       	brpl	.-8      	; 0x1ff4 <Dio_vidflipChanel+0x68>
    1ffc:	84 27       	eor	r24, r20
    1ffe:	8c 93       	st	X, r24
    2000:	3b c0       	rjmp	.+118    	; 0x2078 <Dio_vidflipChanel+0xec>
		break;

	case DIO_PORTB:
		FLIP_BIT(DIO_PORTB_REG,pin);
    2002:	a8 e3       	ldi	r26, 0x38	; 56
    2004:	b0 e0       	ldi	r27, 0x00	; 0
    2006:	e8 e3       	ldi	r30, 0x38	; 56
    2008:	f0 e0       	ldi	r31, 0x00	; 0
    200a:	80 81       	ld	r24, Z
    200c:	48 2f       	mov	r20, r24
    200e:	8a 81       	ldd	r24, Y+2	; 0x02
    2010:	28 2f       	mov	r18, r24
    2012:	30 e0       	ldi	r19, 0x00	; 0
    2014:	81 e0       	ldi	r24, 0x01	; 1
    2016:	90 e0       	ldi	r25, 0x00	; 0
    2018:	02 2e       	mov	r0, r18
    201a:	02 c0       	rjmp	.+4      	; 0x2020 <Dio_vidflipChanel+0x94>
    201c:	88 0f       	add	r24, r24
    201e:	99 1f       	adc	r25, r25
    2020:	0a 94       	dec	r0
    2022:	e2 f7       	brpl	.-8      	; 0x201c <Dio_vidflipChanel+0x90>
    2024:	84 27       	eor	r24, r20
    2026:	8c 93       	st	X, r24
    2028:	27 c0       	rjmp	.+78     	; 0x2078 <Dio_vidflipChanel+0xec>
		break;

	case DIO_PORTC:
		FLIP_BIT(DIO_PORTC_REG,pin);
    202a:	a5 e3       	ldi	r26, 0x35	; 53
    202c:	b0 e0       	ldi	r27, 0x00	; 0
    202e:	e5 e3       	ldi	r30, 0x35	; 53
    2030:	f0 e0       	ldi	r31, 0x00	; 0
    2032:	80 81       	ld	r24, Z
    2034:	48 2f       	mov	r20, r24
    2036:	8a 81       	ldd	r24, Y+2	; 0x02
    2038:	28 2f       	mov	r18, r24
    203a:	30 e0       	ldi	r19, 0x00	; 0
    203c:	81 e0       	ldi	r24, 0x01	; 1
    203e:	90 e0       	ldi	r25, 0x00	; 0
    2040:	02 2e       	mov	r0, r18
    2042:	02 c0       	rjmp	.+4      	; 0x2048 <Dio_vidflipChanel+0xbc>
    2044:	88 0f       	add	r24, r24
    2046:	99 1f       	adc	r25, r25
    2048:	0a 94       	dec	r0
    204a:	e2 f7       	brpl	.-8      	; 0x2044 <Dio_vidflipChanel+0xb8>
    204c:	84 27       	eor	r24, r20
    204e:	8c 93       	st	X, r24
    2050:	13 c0       	rjmp	.+38     	; 0x2078 <Dio_vidflipChanel+0xec>
		break;

	case DIO_PORTD:
		FLIP_BIT(DIO_PORTD_REG,pin);
    2052:	a2 e3       	ldi	r26, 0x32	; 50
    2054:	b0 e0       	ldi	r27, 0x00	; 0
    2056:	e2 e3       	ldi	r30, 0x32	; 50
    2058:	f0 e0       	ldi	r31, 0x00	; 0
    205a:	80 81       	ld	r24, Z
    205c:	48 2f       	mov	r20, r24
    205e:	8a 81       	ldd	r24, Y+2	; 0x02
    2060:	28 2f       	mov	r18, r24
    2062:	30 e0       	ldi	r19, 0x00	; 0
    2064:	81 e0       	ldi	r24, 0x01	; 1
    2066:	90 e0       	ldi	r25, 0x00	; 0
    2068:	02 2e       	mov	r0, r18
    206a:	02 c0       	rjmp	.+4      	; 0x2070 <Dio_vidflipChanel+0xe4>
    206c:	88 0f       	add	r24, r24
    206e:	99 1f       	adc	r25, r25
    2070:	0a 94       	dec	r0
    2072:	e2 f7       	brpl	.-8      	; 0x206c <Dio_vidflipChanel+0xe0>
    2074:	84 27       	eor	r24, r20
    2076:	8c 93       	st	X, r24
		break;
	}
}
    2078:	0f 90       	pop	r0
    207a:	0f 90       	pop	r0
    207c:	0f 90       	pop	r0
    207e:	0f 90       	pop	r0
    2080:	cf 91       	pop	r28
    2082:	df 91       	pop	r29
    2084:	08 95       	ret

00002086 <__udivmodqi4>:
    2086:	99 1b       	sub	r25, r25
    2088:	79 e0       	ldi	r23, 0x09	; 9
    208a:	04 c0       	rjmp	.+8      	; 0x2094 <__udivmodqi4_ep>

0000208c <__udivmodqi4_loop>:
    208c:	99 1f       	adc	r25, r25
    208e:	96 17       	cp	r25, r22
    2090:	08 f0       	brcs	.+2      	; 0x2094 <__udivmodqi4_ep>
    2092:	96 1b       	sub	r25, r22

00002094 <__udivmodqi4_ep>:
    2094:	88 1f       	adc	r24, r24
    2096:	7a 95       	dec	r23
    2098:	c9 f7       	brne	.-14     	; 0x208c <__udivmodqi4_loop>
    209a:	80 95       	com	r24
    209c:	08 95       	ret

0000209e <__prologue_saves__>:
    209e:	2f 92       	push	r2
    20a0:	3f 92       	push	r3
    20a2:	4f 92       	push	r4
    20a4:	5f 92       	push	r5
    20a6:	6f 92       	push	r6
    20a8:	7f 92       	push	r7
    20aa:	8f 92       	push	r8
    20ac:	9f 92       	push	r9
    20ae:	af 92       	push	r10
    20b0:	bf 92       	push	r11
    20b2:	cf 92       	push	r12
    20b4:	df 92       	push	r13
    20b6:	ef 92       	push	r14
    20b8:	ff 92       	push	r15
    20ba:	0f 93       	push	r16
    20bc:	1f 93       	push	r17
    20be:	cf 93       	push	r28
    20c0:	df 93       	push	r29
    20c2:	cd b7       	in	r28, 0x3d	; 61
    20c4:	de b7       	in	r29, 0x3e	; 62
    20c6:	ca 1b       	sub	r28, r26
    20c8:	db 0b       	sbc	r29, r27
    20ca:	0f b6       	in	r0, 0x3f	; 63
    20cc:	f8 94       	cli
    20ce:	de bf       	out	0x3e, r29	; 62
    20d0:	0f be       	out	0x3f, r0	; 63
    20d2:	cd bf       	out	0x3d, r28	; 61
    20d4:	09 94       	ijmp

000020d6 <__epilogue_restores__>:
    20d6:	2a 88       	ldd	r2, Y+18	; 0x12
    20d8:	39 88       	ldd	r3, Y+17	; 0x11
    20da:	48 88       	ldd	r4, Y+16	; 0x10
    20dc:	5f 84       	ldd	r5, Y+15	; 0x0f
    20de:	6e 84       	ldd	r6, Y+14	; 0x0e
    20e0:	7d 84       	ldd	r7, Y+13	; 0x0d
    20e2:	8c 84       	ldd	r8, Y+12	; 0x0c
    20e4:	9b 84       	ldd	r9, Y+11	; 0x0b
    20e6:	aa 84       	ldd	r10, Y+10	; 0x0a
    20e8:	b9 84       	ldd	r11, Y+9	; 0x09
    20ea:	c8 84       	ldd	r12, Y+8	; 0x08
    20ec:	df 80       	ldd	r13, Y+7	; 0x07
    20ee:	ee 80       	ldd	r14, Y+6	; 0x06
    20f0:	fd 80       	ldd	r15, Y+5	; 0x05
    20f2:	0c 81       	ldd	r16, Y+4	; 0x04
    20f4:	1b 81       	ldd	r17, Y+3	; 0x03
    20f6:	aa 81       	ldd	r26, Y+2	; 0x02
    20f8:	b9 81       	ldd	r27, Y+1	; 0x01
    20fa:	ce 0f       	add	r28, r30
    20fc:	d1 1d       	adc	r29, r1
    20fe:	0f b6       	in	r0, 0x3f	; 63
    2100:	f8 94       	cli
    2102:	de bf       	out	0x3e, r29	; 62
    2104:	0f be       	out	0x3f, r0	; 63
    2106:	cd bf       	out	0x3d, r28	; 61
    2108:	ed 01       	movw	r28, r26
    210a:	08 95       	ret

0000210c <sprintf>:
    210c:	ae e0       	ldi	r26, 0x0E	; 14
    210e:	b0 e0       	ldi	r27, 0x00	; 0
    2110:	ec e8       	ldi	r30, 0x8C	; 140
    2112:	f0 e1       	ldi	r31, 0x10	; 16
    2114:	0c 94 5d 10 	jmp	0x20ba	; 0x20ba <__prologue_saves__+0x1c>
    2118:	0d 89       	ldd	r16, Y+21	; 0x15
    211a:	1e 89       	ldd	r17, Y+22	; 0x16
    211c:	86 e0       	ldi	r24, 0x06	; 6
    211e:	8c 83       	std	Y+4, r24	; 0x04
    2120:	1a 83       	std	Y+2, r17	; 0x02
    2122:	09 83       	std	Y+1, r16	; 0x01
    2124:	8f ef       	ldi	r24, 0xFF	; 255
    2126:	9f e7       	ldi	r25, 0x7F	; 127
    2128:	9e 83       	std	Y+6, r25	; 0x06
    212a:	8d 83       	std	Y+5, r24	; 0x05
    212c:	9e 01       	movw	r18, r28
    212e:	27 5e       	subi	r18, 0xE7	; 231
    2130:	3f 4f       	sbci	r19, 0xFF	; 255
    2132:	ce 01       	movw	r24, r28
    2134:	01 96       	adiw	r24, 0x01	; 1
    2136:	6f 89       	ldd	r22, Y+23	; 0x17
    2138:	78 8d       	ldd	r23, Y+24	; 0x18
    213a:	a9 01       	movw	r20, r18
    213c:	0e 94 aa 10 	call	0x2154	; 0x2154 <vfprintf>
    2140:	2f 81       	ldd	r18, Y+7	; 0x07
    2142:	38 85       	ldd	r19, Y+8	; 0x08
    2144:	02 0f       	add	r16, r18
    2146:	13 1f       	adc	r17, r19
    2148:	f8 01       	movw	r30, r16
    214a:	10 82       	st	Z, r1
    214c:	2e 96       	adiw	r28, 0x0e	; 14
    214e:	e4 e0       	ldi	r30, 0x04	; 4
    2150:	0c 94 79 10 	jmp	0x20f2	; 0x20f2 <__epilogue_restores__+0x1c>

00002154 <vfprintf>:
    2154:	ab e0       	ldi	r26, 0x0B	; 11
    2156:	b0 e0       	ldi	r27, 0x00	; 0
    2158:	e0 eb       	ldi	r30, 0xB0	; 176
    215a:	f0 e1       	ldi	r31, 0x10	; 16
    215c:	0c 94 4f 10 	jmp	0x209e	; 0x209e <__prologue_saves__>
    2160:	3c 01       	movw	r6, r24
    2162:	2b 01       	movw	r4, r22
    2164:	5a 01       	movw	r10, r20
    2166:	fc 01       	movw	r30, r24
    2168:	17 82       	std	Z+7, r1	; 0x07
    216a:	16 82       	std	Z+6, r1	; 0x06
    216c:	83 81       	ldd	r24, Z+3	; 0x03
    216e:	81 fd       	sbrc	r24, 1
    2170:	03 c0       	rjmp	.+6      	; 0x2178 <vfprintf+0x24>
    2172:	6f ef       	ldi	r22, 0xFF	; 255
    2174:	7f ef       	ldi	r23, 0xFF	; 255
    2176:	c6 c1       	rjmp	.+908    	; 0x2504 <vfprintf+0x3b0>
    2178:	9a e0       	ldi	r25, 0x0A	; 10
    217a:	89 2e       	mov	r8, r25
    217c:	1e 01       	movw	r2, r28
    217e:	08 94       	sec
    2180:	21 1c       	adc	r2, r1
    2182:	31 1c       	adc	r3, r1
    2184:	f3 01       	movw	r30, r6
    2186:	23 81       	ldd	r18, Z+3	; 0x03
    2188:	f2 01       	movw	r30, r4
    218a:	23 fd       	sbrc	r18, 3
    218c:	85 91       	lpm	r24, Z+
    218e:	23 ff       	sbrs	r18, 3
    2190:	81 91       	ld	r24, Z+
    2192:	2f 01       	movw	r4, r30
    2194:	88 23       	and	r24, r24
    2196:	09 f4       	brne	.+2      	; 0x219a <vfprintf+0x46>
    2198:	b2 c1       	rjmp	.+868    	; 0x24fe <vfprintf+0x3aa>
    219a:	85 32       	cpi	r24, 0x25	; 37
    219c:	39 f4       	brne	.+14     	; 0x21ac <vfprintf+0x58>
    219e:	23 fd       	sbrc	r18, 3
    21a0:	85 91       	lpm	r24, Z+
    21a2:	23 ff       	sbrs	r18, 3
    21a4:	81 91       	ld	r24, Z+
    21a6:	2f 01       	movw	r4, r30
    21a8:	85 32       	cpi	r24, 0x25	; 37
    21aa:	29 f4       	brne	.+10     	; 0x21b6 <vfprintf+0x62>
    21ac:	90 e0       	ldi	r25, 0x00	; 0
    21ae:	b3 01       	movw	r22, r6
    21b0:	0e 94 9d 12 	call	0x253a	; 0x253a <fputc>
    21b4:	e7 cf       	rjmp	.-50     	; 0x2184 <vfprintf+0x30>
    21b6:	98 2f       	mov	r25, r24
    21b8:	ff 24       	eor	r15, r15
    21ba:	ee 24       	eor	r14, r14
    21bc:	99 24       	eor	r9, r9
    21be:	ff e1       	ldi	r31, 0x1F	; 31
    21c0:	ff 15       	cp	r31, r15
    21c2:	d0 f0       	brcs	.+52     	; 0x21f8 <vfprintf+0xa4>
    21c4:	9b 32       	cpi	r25, 0x2B	; 43
    21c6:	69 f0       	breq	.+26     	; 0x21e2 <vfprintf+0x8e>
    21c8:	9c 32       	cpi	r25, 0x2C	; 44
    21ca:	28 f4       	brcc	.+10     	; 0x21d6 <vfprintf+0x82>
    21cc:	90 32       	cpi	r25, 0x20	; 32
    21ce:	59 f0       	breq	.+22     	; 0x21e6 <vfprintf+0x92>
    21d0:	93 32       	cpi	r25, 0x23	; 35
    21d2:	91 f4       	brne	.+36     	; 0x21f8 <vfprintf+0xa4>
    21d4:	0e c0       	rjmp	.+28     	; 0x21f2 <vfprintf+0x9e>
    21d6:	9d 32       	cpi	r25, 0x2D	; 45
    21d8:	49 f0       	breq	.+18     	; 0x21ec <vfprintf+0x98>
    21da:	90 33       	cpi	r25, 0x30	; 48
    21dc:	69 f4       	brne	.+26     	; 0x21f8 <vfprintf+0xa4>
    21de:	41 e0       	ldi	r20, 0x01	; 1
    21e0:	24 c0       	rjmp	.+72     	; 0x222a <vfprintf+0xd6>
    21e2:	52 e0       	ldi	r21, 0x02	; 2
    21e4:	f5 2a       	or	r15, r21
    21e6:	84 e0       	ldi	r24, 0x04	; 4
    21e8:	f8 2a       	or	r15, r24
    21ea:	28 c0       	rjmp	.+80     	; 0x223c <vfprintf+0xe8>
    21ec:	98 e0       	ldi	r25, 0x08	; 8
    21ee:	f9 2a       	or	r15, r25
    21f0:	25 c0       	rjmp	.+74     	; 0x223c <vfprintf+0xe8>
    21f2:	e0 e1       	ldi	r30, 0x10	; 16
    21f4:	fe 2a       	or	r15, r30
    21f6:	22 c0       	rjmp	.+68     	; 0x223c <vfprintf+0xe8>
    21f8:	f7 fc       	sbrc	r15, 7
    21fa:	29 c0       	rjmp	.+82     	; 0x224e <vfprintf+0xfa>
    21fc:	89 2f       	mov	r24, r25
    21fe:	80 53       	subi	r24, 0x30	; 48
    2200:	8a 30       	cpi	r24, 0x0A	; 10
    2202:	70 f4       	brcc	.+28     	; 0x2220 <vfprintf+0xcc>
    2204:	f6 fe       	sbrs	r15, 6
    2206:	05 c0       	rjmp	.+10     	; 0x2212 <vfprintf+0xbe>
    2208:	98 9c       	mul	r9, r8
    220a:	90 2c       	mov	r9, r0
    220c:	11 24       	eor	r1, r1
    220e:	98 0e       	add	r9, r24
    2210:	15 c0       	rjmp	.+42     	; 0x223c <vfprintf+0xe8>
    2212:	e8 9c       	mul	r14, r8
    2214:	e0 2c       	mov	r14, r0
    2216:	11 24       	eor	r1, r1
    2218:	e8 0e       	add	r14, r24
    221a:	f0 e2       	ldi	r31, 0x20	; 32
    221c:	ff 2a       	or	r15, r31
    221e:	0e c0       	rjmp	.+28     	; 0x223c <vfprintf+0xe8>
    2220:	9e 32       	cpi	r25, 0x2E	; 46
    2222:	29 f4       	brne	.+10     	; 0x222e <vfprintf+0xda>
    2224:	f6 fc       	sbrc	r15, 6
    2226:	6b c1       	rjmp	.+726    	; 0x24fe <vfprintf+0x3aa>
    2228:	40 e4       	ldi	r20, 0x40	; 64
    222a:	f4 2a       	or	r15, r20
    222c:	07 c0       	rjmp	.+14     	; 0x223c <vfprintf+0xe8>
    222e:	9c 36       	cpi	r25, 0x6C	; 108
    2230:	19 f4       	brne	.+6      	; 0x2238 <vfprintf+0xe4>
    2232:	50 e8       	ldi	r21, 0x80	; 128
    2234:	f5 2a       	or	r15, r21
    2236:	02 c0       	rjmp	.+4      	; 0x223c <vfprintf+0xe8>
    2238:	98 36       	cpi	r25, 0x68	; 104
    223a:	49 f4       	brne	.+18     	; 0x224e <vfprintf+0xfa>
    223c:	f2 01       	movw	r30, r4
    223e:	23 fd       	sbrc	r18, 3
    2240:	95 91       	lpm	r25, Z+
    2242:	23 ff       	sbrs	r18, 3
    2244:	91 91       	ld	r25, Z+
    2246:	2f 01       	movw	r4, r30
    2248:	99 23       	and	r25, r25
    224a:	09 f0       	breq	.+2      	; 0x224e <vfprintf+0xfa>
    224c:	b8 cf       	rjmp	.-144    	; 0x21be <vfprintf+0x6a>
    224e:	89 2f       	mov	r24, r25
    2250:	85 54       	subi	r24, 0x45	; 69
    2252:	83 30       	cpi	r24, 0x03	; 3
    2254:	18 f0       	brcs	.+6      	; 0x225c <vfprintf+0x108>
    2256:	80 52       	subi	r24, 0x20	; 32
    2258:	83 30       	cpi	r24, 0x03	; 3
    225a:	38 f4       	brcc	.+14     	; 0x226a <vfprintf+0x116>
    225c:	44 e0       	ldi	r20, 0x04	; 4
    225e:	50 e0       	ldi	r21, 0x00	; 0
    2260:	a4 0e       	add	r10, r20
    2262:	b5 1e       	adc	r11, r21
    2264:	5f e3       	ldi	r21, 0x3F	; 63
    2266:	59 83       	std	Y+1, r21	; 0x01
    2268:	0f c0       	rjmp	.+30     	; 0x2288 <vfprintf+0x134>
    226a:	93 36       	cpi	r25, 0x63	; 99
    226c:	31 f0       	breq	.+12     	; 0x227a <vfprintf+0x126>
    226e:	93 37       	cpi	r25, 0x73	; 115
    2270:	79 f0       	breq	.+30     	; 0x2290 <vfprintf+0x13c>
    2272:	93 35       	cpi	r25, 0x53	; 83
    2274:	09 f0       	breq	.+2      	; 0x2278 <vfprintf+0x124>
    2276:	56 c0       	rjmp	.+172    	; 0x2324 <vfprintf+0x1d0>
    2278:	20 c0       	rjmp	.+64     	; 0x22ba <vfprintf+0x166>
    227a:	f5 01       	movw	r30, r10
    227c:	80 81       	ld	r24, Z
    227e:	89 83       	std	Y+1, r24	; 0x01
    2280:	42 e0       	ldi	r20, 0x02	; 2
    2282:	50 e0       	ldi	r21, 0x00	; 0
    2284:	a4 0e       	add	r10, r20
    2286:	b5 1e       	adc	r11, r21
    2288:	61 01       	movw	r12, r2
    228a:	01 e0       	ldi	r16, 0x01	; 1
    228c:	10 e0       	ldi	r17, 0x00	; 0
    228e:	12 c0       	rjmp	.+36     	; 0x22b4 <vfprintf+0x160>
    2290:	f5 01       	movw	r30, r10
    2292:	c0 80       	ld	r12, Z
    2294:	d1 80       	ldd	r13, Z+1	; 0x01
    2296:	f6 fc       	sbrc	r15, 6
    2298:	03 c0       	rjmp	.+6      	; 0x22a0 <vfprintf+0x14c>
    229a:	6f ef       	ldi	r22, 0xFF	; 255
    229c:	7f ef       	ldi	r23, 0xFF	; 255
    229e:	02 c0       	rjmp	.+4      	; 0x22a4 <vfprintf+0x150>
    22a0:	69 2d       	mov	r22, r9
    22a2:	70 e0       	ldi	r23, 0x00	; 0
    22a4:	42 e0       	ldi	r20, 0x02	; 2
    22a6:	50 e0       	ldi	r21, 0x00	; 0
    22a8:	a4 0e       	add	r10, r20
    22aa:	b5 1e       	adc	r11, r21
    22ac:	c6 01       	movw	r24, r12
    22ae:	0e 94 92 12 	call	0x2524	; 0x2524 <strnlen>
    22b2:	8c 01       	movw	r16, r24
    22b4:	5f e7       	ldi	r21, 0x7F	; 127
    22b6:	f5 22       	and	r15, r21
    22b8:	14 c0       	rjmp	.+40     	; 0x22e2 <vfprintf+0x18e>
    22ba:	f5 01       	movw	r30, r10
    22bc:	c0 80       	ld	r12, Z
    22be:	d1 80       	ldd	r13, Z+1	; 0x01
    22c0:	f6 fc       	sbrc	r15, 6
    22c2:	03 c0       	rjmp	.+6      	; 0x22ca <vfprintf+0x176>
    22c4:	6f ef       	ldi	r22, 0xFF	; 255
    22c6:	7f ef       	ldi	r23, 0xFF	; 255
    22c8:	02 c0       	rjmp	.+4      	; 0x22ce <vfprintf+0x17a>
    22ca:	69 2d       	mov	r22, r9
    22cc:	70 e0       	ldi	r23, 0x00	; 0
    22ce:	42 e0       	ldi	r20, 0x02	; 2
    22d0:	50 e0       	ldi	r21, 0x00	; 0
    22d2:	a4 0e       	add	r10, r20
    22d4:	b5 1e       	adc	r11, r21
    22d6:	c6 01       	movw	r24, r12
    22d8:	0e 94 87 12 	call	0x250e	; 0x250e <strnlen_P>
    22dc:	8c 01       	movw	r16, r24
    22de:	50 e8       	ldi	r21, 0x80	; 128
    22e0:	f5 2a       	or	r15, r21
    22e2:	f3 fe       	sbrs	r15, 3
    22e4:	07 c0       	rjmp	.+14     	; 0x22f4 <vfprintf+0x1a0>
    22e6:	1a c0       	rjmp	.+52     	; 0x231c <vfprintf+0x1c8>
    22e8:	80 e2       	ldi	r24, 0x20	; 32
    22ea:	90 e0       	ldi	r25, 0x00	; 0
    22ec:	b3 01       	movw	r22, r6
    22ee:	0e 94 9d 12 	call	0x253a	; 0x253a <fputc>
    22f2:	ea 94       	dec	r14
    22f4:	8e 2d       	mov	r24, r14
    22f6:	90 e0       	ldi	r25, 0x00	; 0
    22f8:	08 17       	cp	r16, r24
    22fa:	19 07       	cpc	r17, r25
    22fc:	a8 f3       	brcs	.-22     	; 0x22e8 <vfprintf+0x194>
    22fe:	0e c0       	rjmp	.+28     	; 0x231c <vfprintf+0x1c8>
    2300:	f6 01       	movw	r30, r12
    2302:	f7 fc       	sbrc	r15, 7
    2304:	85 91       	lpm	r24, Z+
    2306:	f7 fe       	sbrs	r15, 7
    2308:	81 91       	ld	r24, Z+
    230a:	6f 01       	movw	r12, r30
    230c:	90 e0       	ldi	r25, 0x00	; 0
    230e:	b3 01       	movw	r22, r6
    2310:	0e 94 9d 12 	call	0x253a	; 0x253a <fputc>
    2314:	e1 10       	cpse	r14, r1
    2316:	ea 94       	dec	r14
    2318:	01 50       	subi	r16, 0x01	; 1
    231a:	10 40       	sbci	r17, 0x00	; 0
    231c:	01 15       	cp	r16, r1
    231e:	11 05       	cpc	r17, r1
    2320:	79 f7       	brne	.-34     	; 0x2300 <vfprintf+0x1ac>
    2322:	ea c0       	rjmp	.+468    	; 0x24f8 <vfprintf+0x3a4>
    2324:	94 36       	cpi	r25, 0x64	; 100
    2326:	11 f0       	breq	.+4      	; 0x232c <vfprintf+0x1d8>
    2328:	99 36       	cpi	r25, 0x69	; 105
    232a:	69 f5       	brne	.+90     	; 0x2386 <vfprintf+0x232>
    232c:	f7 fe       	sbrs	r15, 7
    232e:	08 c0       	rjmp	.+16     	; 0x2340 <vfprintf+0x1ec>
    2330:	f5 01       	movw	r30, r10
    2332:	20 81       	ld	r18, Z
    2334:	31 81       	ldd	r19, Z+1	; 0x01
    2336:	42 81       	ldd	r20, Z+2	; 0x02
    2338:	53 81       	ldd	r21, Z+3	; 0x03
    233a:	84 e0       	ldi	r24, 0x04	; 4
    233c:	90 e0       	ldi	r25, 0x00	; 0
    233e:	0a c0       	rjmp	.+20     	; 0x2354 <vfprintf+0x200>
    2340:	f5 01       	movw	r30, r10
    2342:	80 81       	ld	r24, Z
    2344:	91 81       	ldd	r25, Z+1	; 0x01
    2346:	9c 01       	movw	r18, r24
    2348:	44 27       	eor	r20, r20
    234a:	37 fd       	sbrc	r19, 7
    234c:	40 95       	com	r20
    234e:	54 2f       	mov	r21, r20
    2350:	82 e0       	ldi	r24, 0x02	; 2
    2352:	90 e0       	ldi	r25, 0x00	; 0
    2354:	a8 0e       	add	r10, r24
    2356:	b9 1e       	adc	r11, r25
    2358:	9f e6       	ldi	r25, 0x6F	; 111
    235a:	f9 22       	and	r15, r25
    235c:	57 ff       	sbrs	r21, 7
    235e:	09 c0       	rjmp	.+18     	; 0x2372 <vfprintf+0x21e>
    2360:	50 95       	com	r21
    2362:	40 95       	com	r20
    2364:	30 95       	com	r19
    2366:	21 95       	neg	r18
    2368:	3f 4f       	sbci	r19, 0xFF	; 255
    236a:	4f 4f       	sbci	r20, 0xFF	; 255
    236c:	5f 4f       	sbci	r21, 0xFF	; 255
    236e:	e0 e8       	ldi	r30, 0x80	; 128
    2370:	fe 2a       	or	r15, r30
    2372:	ca 01       	movw	r24, r20
    2374:	b9 01       	movw	r22, r18
    2376:	a1 01       	movw	r20, r2
    2378:	2a e0       	ldi	r18, 0x0A	; 10
    237a:	30 e0       	ldi	r19, 0x00	; 0
    237c:	0e 94 c9 12 	call	0x2592	; 0x2592 <__ultoa_invert>
    2380:	d8 2e       	mov	r13, r24
    2382:	d2 18       	sub	r13, r2
    2384:	40 c0       	rjmp	.+128    	; 0x2406 <vfprintf+0x2b2>
    2386:	95 37       	cpi	r25, 0x75	; 117
    2388:	29 f4       	brne	.+10     	; 0x2394 <vfprintf+0x240>
    238a:	1f 2d       	mov	r17, r15
    238c:	1f 7e       	andi	r17, 0xEF	; 239
    238e:	2a e0       	ldi	r18, 0x0A	; 10
    2390:	30 e0       	ldi	r19, 0x00	; 0
    2392:	1d c0       	rjmp	.+58     	; 0x23ce <vfprintf+0x27a>
    2394:	1f 2d       	mov	r17, r15
    2396:	19 7f       	andi	r17, 0xF9	; 249
    2398:	9f 36       	cpi	r25, 0x6F	; 111
    239a:	61 f0       	breq	.+24     	; 0x23b4 <vfprintf+0x260>
    239c:	90 37       	cpi	r25, 0x70	; 112
    239e:	20 f4       	brcc	.+8      	; 0x23a8 <vfprintf+0x254>
    23a0:	98 35       	cpi	r25, 0x58	; 88
    23a2:	09 f0       	breq	.+2      	; 0x23a6 <vfprintf+0x252>
    23a4:	ac c0       	rjmp	.+344    	; 0x24fe <vfprintf+0x3aa>
    23a6:	0f c0       	rjmp	.+30     	; 0x23c6 <vfprintf+0x272>
    23a8:	90 37       	cpi	r25, 0x70	; 112
    23aa:	39 f0       	breq	.+14     	; 0x23ba <vfprintf+0x266>
    23ac:	98 37       	cpi	r25, 0x78	; 120
    23ae:	09 f0       	breq	.+2      	; 0x23b2 <vfprintf+0x25e>
    23b0:	a6 c0       	rjmp	.+332    	; 0x24fe <vfprintf+0x3aa>
    23b2:	04 c0       	rjmp	.+8      	; 0x23bc <vfprintf+0x268>
    23b4:	28 e0       	ldi	r18, 0x08	; 8
    23b6:	30 e0       	ldi	r19, 0x00	; 0
    23b8:	0a c0       	rjmp	.+20     	; 0x23ce <vfprintf+0x27a>
    23ba:	10 61       	ori	r17, 0x10	; 16
    23bc:	14 fd       	sbrc	r17, 4
    23be:	14 60       	ori	r17, 0x04	; 4
    23c0:	20 e1       	ldi	r18, 0x10	; 16
    23c2:	30 e0       	ldi	r19, 0x00	; 0
    23c4:	04 c0       	rjmp	.+8      	; 0x23ce <vfprintf+0x27a>
    23c6:	14 fd       	sbrc	r17, 4
    23c8:	16 60       	ori	r17, 0x06	; 6
    23ca:	20 e1       	ldi	r18, 0x10	; 16
    23cc:	32 e0       	ldi	r19, 0x02	; 2
    23ce:	17 ff       	sbrs	r17, 7
    23d0:	08 c0       	rjmp	.+16     	; 0x23e2 <vfprintf+0x28e>
    23d2:	f5 01       	movw	r30, r10
    23d4:	60 81       	ld	r22, Z
    23d6:	71 81       	ldd	r23, Z+1	; 0x01
    23d8:	82 81       	ldd	r24, Z+2	; 0x02
    23da:	93 81       	ldd	r25, Z+3	; 0x03
    23dc:	44 e0       	ldi	r20, 0x04	; 4
    23de:	50 e0       	ldi	r21, 0x00	; 0
    23e0:	08 c0       	rjmp	.+16     	; 0x23f2 <vfprintf+0x29e>
    23e2:	f5 01       	movw	r30, r10
    23e4:	80 81       	ld	r24, Z
    23e6:	91 81       	ldd	r25, Z+1	; 0x01
    23e8:	bc 01       	movw	r22, r24
    23ea:	80 e0       	ldi	r24, 0x00	; 0
    23ec:	90 e0       	ldi	r25, 0x00	; 0
    23ee:	42 e0       	ldi	r20, 0x02	; 2
    23f0:	50 e0       	ldi	r21, 0x00	; 0
    23f2:	a4 0e       	add	r10, r20
    23f4:	b5 1e       	adc	r11, r21
    23f6:	a1 01       	movw	r20, r2
    23f8:	0e 94 c9 12 	call	0x2592	; 0x2592 <__ultoa_invert>
    23fc:	d8 2e       	mov	r13, r24
    23fe:	d2 18       	sub	r13, r2
    2400:	8f e7       	ldi	r24, 0x7F	; 127
    2402:	f8 2e       	mov	r15, r24
    2404:	f1 22       	and	r15, r17
    2406:	f6 fe       	sbrs	r15, 6
    2408:	0b c0       	rjmp	.+22     	; 0x2420 <vfprintf+0x2cc>
    240a:	5e ef       	ldi	r21, 0xFE	; 254
    240c:	f5 22       	and	r15, r21
    240e:	d9 14       	cp	r13, r9
    2410:	38 f4       	brcc	.+14     	; 0x2420 <vfprintf+0x2cc>
    2412:	f4 fe       	sbrs	r15, 4
    2414:	07 c0       	rjmp	.+14     	; 0x2424 <vfprintf+0x2d0>
    2416:	f2 fc       	sbrc	r15, 2
    2418:	05 c0       	rjmp	.+10     	; 0x2424 <vfprintf+0x2d0>
    241a:	8f ee       	ldi	r24, 0xEF	; 239
    241c:	f8 22       	and	r15, r24
    241e:	02 c0       	rjmp	.+4      	; 0x2424 <vfprintf+0x2d0>
    2420:	1d 2d       	mov	r17, r13
    2422:	01 c0       	rjmp	.+2      	; 0x2426 <vfprintf+0x2d2>
    2424:	19 2d       	mov	r17, r9
    2426:	f4 fe       	sbrs	r15, 4
    2428:	0d c0       	rjmp	.+26     	; 0x2444 <vfprintf+0x2f0>
    242a:	fe 01       	movw	r30, r28
    242c:	ed 0d       	add	r30, r13
    242e:	f1 1d       	adc	r31, r1
    2430:	80 81       	ld	r24, Z
    2432:	80 33       	cpi	r24, 0x30	; 48
    2434:	19 f4       	brne	.+6      	; 0x243c <vfprintf+0x2e8>
    2436:	99 ee       	ldi	r25, 0xE9	; 233
    2438:	f9 22       	and	r15, r25
    243a:	08 c0       	rjmp	.+16     	; 0x244c <vfprintf+0x2f8>
    243c:	1f 5f       	subi	r17, 0xFF	; 255
    243e:	f2 fe       	sbrs	r15, 2
    2440:	05 c0       	rjmp	.+10     	; 0x244c <vfprintf+0x2f8>
    2442:	03 c0       	rjmp	.+6      	; 0x244a <vfprintf+0x2f6>
    2444:	8f 2d       	mov	r24, r15
    2446:	86 78       	andi	r24, 0x86	; 134
    2448:	09 f0       	breq	.+2      	; 0x244c <vfprintf+0x2f8>
    244a:	1f 5f       	subi	r17, 0xFF	; 255
    244c:	0f 2d       	mov	r16, r15
    244e:	f3 fc       	sbrc	r15, 3
    2450:	14 c0       	rjmp	.+40     	; 0x247a <vfprintf+0x326>
    2452:	f0 fe       	sbrs	r15, 0
    2454:	0f c0       	rjmp	.+30     	; 0x2474 <vfprintf+0x320>
    2456:	1e 15       	cp	r17, r14
    2458:	10 f0       	brcs	.+4      	; 0x245e <vfprintf+0x30a>
    245a:	9d 2c       	mov	r9, r13
    245c:	0b c0       	rjmp	.+22     	; 0x2474 <vfprintf+0x320>
    245e:	9d 2c       	mov	r9, r13
    2460:	9e 0c       	add	r9, r14
    2462:	91 1a       	sub	r9, r17
    2464:	1e 2d       	mov	r17, r14
    2466:	06 c0       	rjmp	.+12     	; 0x2474 <vfprintf+0x320>
    2468:	80 e2       	ldi	r24, 0x20	; 32
    246a:	90 e0       	ldi	r25, 0x00	; 0
    246c:	b3 01       	movw	r22, r6
    246e:	0e 94 9d 12 	call	0x253a	; 0x253a <fputc>
    2472:	1f 5f       	subi	r17, 0xFF	; 255
    2474:	1e 15       	cp	r17, r14
    2476:	c0 f3       	brcs	.-16     	; 0x2468 <vfprintf+0x314>
    2478:	04 c0       	rjmp	.+8      	; 0x2482 <vfprintf+0x32e>
    247a:	1e 15       	cp	r17, r14
    247c:	10 f4       	brcc	.+4      	; 0x2482 <vfprintf+0x32e>
    247e:	e1 1a       	sub	r14, r17
    2480:	01 c0       	rjmp	.+2      	; 0x2484 <vfprintf+0x330>
    2482:	ee 24       	eor	r14, r14
    2484:	04 ff       	sbrs	r16, 4
    2486:	0f c0       	rjmp	.+30     	; 0x24a6 <vfprintf+0x352>
    2488:	80 e3       	ldi	r24, 0x30	; 48
    248a:	90 e0       	ldi	r25, 0x00	; 0
    248c:	b3 01       	movw	r22, r6
    248e:	0e 94 9d 12 	call	0x253a	; 0x253a <fputc>
    2492:	02 ff       	sbrs	r16, 2
    2494:	1d c0       	rjmp	.+58     	; 0x24d0 <vfprintf+0x37c>
    2496:	01 fd       	sbrc	r16, 1
    2498:	03 c0       	rjmp	.+6      	; 0x24a0 <vfprintf+0x34c>
    249a:	88 e7       	ldi	r24, 0x78	; 120
    249c:	90 e0       	ldi	r25, 0x00	; 0
    249e:	0e c0       	rjmp	.+28     	; 0x24bc <vfprintf+0x368>
    24a0:	88 e5       	ldi	r24, 0x58	; 88
    24a2:	90 e0       	ldi	r25, 0x00	; 0
    24a4:	0b c0       	rjmp	.+22     	; 0x24bc <vfprintf+0x368>
    24a6:	80 2f       	mov	r24, r16
    24a8:	86 78       	andi	r24, 0x86	; 134
    24aa:	91 f0       	breq	.+36     	; 0x24d0 <vfprintf+0x37c>
    24ac:	01 ff       	sbrs	r16, 1
    24ae:	02 c0       	rjmp	.+4      	; 0x24b4 <vfprintf+0x360>
    24b0:	8b e2       	ldi	r24, 0x2B	; 43
    24b2:	01 c0       	rjmp	.+2      	; 0x24b6 <vfprintf+0x362>
    24b4:	80 e2       	ldi	r24, 0x20	; 32
    24b6:	f7 fc       	sbrc	r15, 7
    24b8:	8d e2       	ldi	r24, 0x2D	; 45
    24ba:	90 e0       	ldi	r25, 0x00	; 0
    24bc:	b3 01       	movw	r22, r6
    24be:	0e 94 9d 12 	call	0x253a	; 0x253a <fputc>
    24c2:	06 c0       	rjmp	.+12     	; 0x24d0 <vfprintf+0x37c>
    24c4:	80 e3       	ldi	r24, 0x30	; 48
    24c6:	90 e0       	ldi	r25, 0x00	; 0
    24c8:	b3 01       	movw	r22, r6
    24ca:	0e 94 9d 12 	call	0x253a	; 0x253a <fputc>
    24ce:	9a 94       	dec	r9
    24d0:	d9 14       	cp	r13, r9
    24d2:	c0 f3       	brcs	.-16     	; 0x24c4 <vfprintf+0x370>
    24d4:	da 94       	dec	r13
    24d6:	f1 01       	movw	r30, r2
    24d8:	ed 0d       	add	r30, r13
    24da:	f1 1d       	adc	r31, r1
    24dc:	80 81       	ld	r24, Z
    24de:	90 e0       	ldi	r25, 0x00	; 0
    24e0:	b3 01       	movw	r22, r6
    24e2:	0e 94 9d 12 	call	0x253a	; 0x253a <fputc>
    24e6:	dd 20       	and	r13, r13
    24e8:	a9 f7       	brne	.-22     	; 0x24d4 <vfprintf+0x380>
    24ea:	06 c0       	rjmp	.+12     	; 0x24f8 <vfprintf+0x3a4>
    24ec:	80 e2       	ldi	r24, 0x20	; 32
    24ee:	90 e0       	ldi	r25, 0x00	; 0
    24f0:	b3 01       	movw	r22, r6
    24f2:	0e 94 9d 12 	call	0x253a	; 0x253a <fputc>
    24f6:	ea 94       	dec	r14
    24f8:	ee 20       	and	r14, r14
    24fa:	c1 f7       	brne	.-16     	; 0x24ec <vfprintf+0x398>
    24fc:	43 ce       	rjmp	.-890    	; 0x2184 <vfprintf+0x30>
    24fe:	f3 01       	movw	r30, r6
    2500:	66 81       	ldd	r22, Z+6	; 0x06
    2502:	77 81       	ldd	r23, Z+7	; 0x07
    2504:	cb 01       	movw	r24, r22
    2506:	2b 96       	adiw	r28, 0x0b	; 11
    2508:	e2 e1       	ldi	r30, 0x12	; 18
    250a:	0c 94 6b 10 	jmp	0x20d6	; 0x20d6 <__epilogue_restores__>

0000250e <strnlen_P>:
    250e:	fc 01       	movw	r30, r24
    2510:	05 90       	lpm	r0, Z+
    2512:	61 50       	subi	r22, 0x01	; 1
    2514:	70 40       	sbci	r23, 0x00	; 0
    2516:	01 10       	cpse	r0, r1
    2518:	d8 f7       	brcc	.-10     	; 0x2510 <strnlen_P+0x2>
    251a:	80 95       	com	r24
    251c:	90 95       	com	r25
    251e:	8e 0f       	add	r24, r30
    2520:	9f 1f       	adc	r25, r31
    2522:	08 95       	ret

00002524 <strnlen>:
    2524:	fc 01       	movw	r30, r24
    2526:	61 50       	subi	r22, 0x01	; 1
    2528:	70 40       	sbci	r23, 0x00	; 0
    252a:	01 90       	ld	r0, Z+
    252c:	01 10       	cpse	r0, r1
    252e:	d8 f7       	brcc	.-10     	; 0x2526 <strnlen+0x2>
    2530:	80 95       	com	r24
    2532:	90 95       	com	r25
    2534:	8e 0f       	add	r24, r30
    2536:	9f 1f       	adc	r25, r31
    2538:	08 95       	ret

0000253a <fputc>:
    253a:	0f 93       	push	r16
    253c:	1f 93       	push	r17
    253e:	cf 93       	push	r28
    2540:	df 93       	push	r29
    2542:	8c 01       	movw	r16, r24
    2544:	eb 01       	movw	r28, r22
    2546:	8b 81       	ldd	r24, Y+3	; 0x03
    2548:	81 ff       	sbrs	r24, 1
    254a:	1b c0       	rjmp	.+54     	; 0x2582 <fputc+0x48>
    254c:	82 ff       	sbrs	r24, 2
    254e:	0d c0       	rjmp	.+26     	; 0x256a <fputc+0x30>
    2550:	2e 81       	ldd	r18, Y+6	; 0x06
    2552:	3f 81       	ldd	r19, Y+7	; 0x07
    2554:	8c 81       	ldd	r24, Y+4	; 0x04
    2556:	9d 81       	ldd	r25, Y+5	; 0x05
    2558:	28 17       	cp	r18, r24
    255a:	39 07       	cpc	r19, r25
    255c:	64 f4       	brge	.+24     	; 0x2576 <fputc+0x3c>
    255e:	e8 81       	ld	r30, Y
    2560:	f9 81       	ldd	r31, Y+1	; 0x01
    2562:	01 93       	st	Z+, r16
    2564:	f9 83       	std	Y+1, r31	; 0x01
    2566:	e8 83       	st	Y, r30
    2568:	06 c0       	rjmp	.+12     	; 0x2576 <fputc+0x3c>
    256a:	e8 85       	ldd	r30, Y+8	; 0x08
    256c:	f9 85       	ldd	r31, Y+9	; 0x09
    256e:	80 2f       	mov	r24, r16
    2570:	09 95       	icall
    2572:	89 2b       	or	r24, r25
    2574:	31 f4       	brne	.+12     	; 0x2582 <fputc+0x48>
    2576:	8e 81       	ldd	r24, Y+6	; 0x06
    2578:	9f 81       	ldd	r25, Y+7	; 0x07
    257a:	01 96       	adiw	r24, 0x01	; 1
    257c:	9f 83       	std	Y+7, r25	; 0x07
    257e:	8e 83       	std	Y+6, r24	; 0x06
    2580:	02 c0       	rjmp	.+4      	; 0x2586 <fputc+0x4c>
    2582:	0f ef       	ldi	r16, 0xFF	; 255
    2584:	1f ef       	ldi	r17, 0xFF	; 255
    2586:	c8 01       	movw	r24, r16
    2588:	df 91       	pop	r29
    258a:	cf 91       	pop	r28
    258c:	1f 91       	pop	r17
    258e:	0f 91       	pop	r16
    2590:	08 95       	ret

00002592 <__ultoa_invert>:
    2592:	fa 01       	movw	r30, r20
    2594:	aa 27       	eor	r26, r26
    2596:	28 30       	cpi	r18, 0x08	; 8
    2598:	51 f1       	breq	.+84     	; 0x25ee <__ultoa_invert+0x5c>
    259a:	20 31       	cpi	r18, 0x10	; 16
    259c:	81 f1       	breq	.+96     	; 0x25fe <__ultoa_invert+0x6c>
    259e:	e8 94       	clt
    25a0:	6f 93       	push	r22
    25a2:	6e 7f       	andi	r22, 0xFE	; 254
    25a4:	6e 5f       	subi	r22, 0xFE	; 254
    25a6:	7f 4f       	sbci	r23, 0xFF	; 255
    25a8:	8f 4f       	sbci	r24, 0xFF	; 255
    25aa:	9f 4f       	sbci	r25, 0xFF	; 255
    25ac:	af 4f       	sbci	r26, 0xFF	; 255
    25ae:	b1 e0       	ldi	r27, 0x01	; 1
    25b0:	3e d0       	rcall	.+124    	; 0x262e <__ultoa_invert+0x9c>
    25b2:	b4 e0       	ldi	r27, 0x04	; 4
    25b4:	3c d0       	rcall	.+120    	; 0x262e <__ultoa_invert+0x9c>
    25b6:	67 0f       	add	r22, r23
    25b8:	78 1f       	adc	r23, r24
    25ba:	89 1f       	adc	r24, r25
    25bc:	9a 1f       	adc	r25, r26
    25be:	a1 1d       	adc	r26, r1
    25c0:	68 0f       	add	r22, r24
    25c2:	79 1f       	adc	r23, r25
    25c4:	8a 1f       	adc	r24, r26
    25c6:	91 1d       	adc	r25, r1
    25c8:	a1 1d       	adc	r26, r1
    25ca:	6a 0f       	add	r22, r26
    25cc:	71 1d       	adc	r23, r1
    25ce:	81 1d       	adc	r24, r1
    25d0:	91 1d       	adc	r25, r1
    25d2:	a1 1d       	adc	r26, r1
    25d4:	20 d0       	rcall	.+64     	; 0x2616 <__ultoa_invert+0x84>
    25d6:	09 f4       	brne	.+2      	; 0x25da <__ultoa_invert+0x48>
    25d8:	68 94       	set
    25da:	3f 91       	pop	r19
    25dc:	2a e0       	ldi	r18, 0x0A	; 10
    25de:	26 9f       	mul	r18, r22
    25e0:	11 24       	eor	r1, r1
    25e2:	30 19       	sub	r19, r0
    25e4:	30 5d       	subi	r19, 0xD0	; 208
    25e6:	31 93       	st	Z+, r19
    25e8:	de f6       	brtc	.-74     	; 0x25a0 <__ultoa_invert+0xe>
    25ea:	cf 01       	movw	r24, r30
    25ec:	08 95       	ret
    25ee:	46 2f       	mov	r20, r22
    25f0:	47 70       	andi	r20, 0x07	; 7
    25f2:	40 5d       	subi	r20, 0xD0	; 208
    25f4:	41 93       	st	Z+, r20
    25f6:	b3 e0       	ldi	r27, 0x03	; 3
    25f8:	0f d0       	rcall	.+30     	; 0x2618 <__ultoa_invert+0x86>
    25fa:	c9 f7       	brne	.-14     	; 0x25ee <__ultoa_invert+0x5c>
    25fc:	f6 cf       	rjmp	.-20     	; 0x25ea <__ultoa_invert+0x58>
    25fe:	46 2f       	mov	r20, r22
    2600:	4f 70       	andi	r20, 0x0F	; 15
    2602:	40 5d       	subi	r20, 0xD0	; 208
    2604:	4a 33       	cpi	r20, 0x3A	; 58
    2606:	18 f0       	brcs	.+6      	; 0x260e <__ultoa_invert+0x7c>
    2608:	49 5d       	subi	r20, 0xD9	; 217
    260a:	31 fd       	sbrc	r19, 1
    260c:	40 52       	subi	r20, 0x20	; 32
    260e:	41 93       	st	Z+, r20
    2610:	02 d0       	rcall	.+4      	; 0x2616 <__ultoa_invert+0x84>
    2612:	a9 f7       	brne	.-22     	; 0x25fe <__ultoa_invert+0x6c>
    2614:	ea cf       	rjmp	.-44     	; 0x25ea <__ultoa_invert+0x58>
    2616:	b4 e0       	ldi	r27, 0x04	; 4
    2618:	a6 95       	lsr	r26
    261a:	97 95       	ror	r25
    261c:	87 95       	ror	r24
    261e:	77 95       	ror	r23
    2620:	67 95       	ror	r22
    2622:	ba 95       	dec	r27
    2624:	c9 f7       	brne	.-14     	; 0x2618 <__ultoa_invert+0x86>
    2626:	00 97       	sbiw	r24, 0x00	; 0
    2628:	61 05       	cpc	r22, r1
    262a:	71 05       	cpc	r23, r1
    262c:	08 95       	ret
    262e:	9b 01       	movw	r18, r22
    2630:	ac 01       	movw	r20, r24
    2632:	0a 2e       	mov	r0, r26
    2634:	06 94       	lsr	r0
    2636:	57 95       	ror	r21
    2638:	47 95       	ror	r20
    263a:	37 95       	ror	r19
    263c:	27 95       	ror	r18
    263e:	ba 95       	dec	r27
    2640:	c9 f7       	brne	.-14     	; 0x2634 <__ultoa_invert+0xa2>
    2642:	62 0f       	add	r22, r18
    2644:	73 1f       	adc	r23, r19
    2646:	84 1f       	adc	r24, r20
    2648:	95 1f       	adc	r25, r21
    264a:	a0 1d       	adc	r26, r0
    264c:	08 95       	ret

0000264e <_exit>:
    264e:	f8 94       	cli

00002650 <__stop_program>:
    2650:	ff cf       	rjmp	.-2      	; 0x2650 <__stop_program>
