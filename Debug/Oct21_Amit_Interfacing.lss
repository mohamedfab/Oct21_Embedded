
Oct21_Amit_Interfacing.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002b84  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00800060  00002b84  00002bf8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000026b8  00000000  00000000  00002c14  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00001621  00000000  00000000  000052cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000160  00000000  00000000  000068ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000018f  00000000  00000000  00006a4d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002045  00000000  00000000  00006bdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001101  00000000  00000000  00008c21  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f82  00000000  00000000  00009d22  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  0000aca4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002c2  00000000  00000000  0000ae24  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000088e  00000000  00000000  0000b0e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000b974  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 06 	jmp	0xc8e	; 0xc8e <__vector_1>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e8       	ldi	r30, 0x84	; 132
      68:	fb e2       	ldi	r31, 0x2B	; 43
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 37       	cpi	r26, 0x7C	; 124
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 57 06 	call	0xcae	; 0xcae <main>
      7a:	0c 94 c0 15 	jmp	0x2b80	; 0x2b80 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 e8 12 	jmp	0x25d0	; 0x25d0 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a3 e6       	ldi	r26, 0x63	; 99
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 04 13 	jmp	0x2608	; 0x2608 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 f4 12 	jmp	0x25e8	; 0x25e8 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 10 13 	jmp	0x2620	; 0x2620 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 f4 12 	jmp	0x25e8	; 0x25e8 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 10 13 	jmp	0x2620	; 0x2620 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 e8 12 	jmp	0x25d0	; 0x25d0 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	83 e6       	ldi	r24, 0x63	; 99
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 04 13 	jmp	0x2608	; 0x2608 <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 f0 12 	jmp	0x25e0	; 0x25e0 <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	63 e6       	ldi	r22, 0x63	; 99
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 0c 13 	jmp	0x2618	; 0x2618 <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 f4 12 	jmp	0x25e8	; 0x25e8 <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 10 13 	jmp	0x2620	; 0x2620 <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 f4 12 	jmp	0x25e8	; 0x25e8 <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 10 13 	jmp	0x2620	; 0x2620 <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 f4 12 	jmp	0x25e8	; 0x25e8 <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 10 13 	jmp	0x2620	; 0x2620 <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 f8 12 	jmp	0x25f0	; 0x25f0 <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 14 13 	jmp	0x2628	; 0x2628 <__epilogue_restores__+0x20>

00000942 <__pack_f>:
     942:	df 92       	push	r13
     944:	ef 92       	push	r14
     946:	ff 92       	push	r15
     948:	0f 93       	push	r16
     94a:	1f 93       	push	r17
     94c:	fc 01       	movw	r30, r24
     94e:	e4 80       	ldd	r14, Z+4	; 0x04
     950:	f5 80       	ldd	r15, Z+5	; 0x05
     952:	06 81       	ldd	r16, Z+6	; 0x06
     954:	17 81       	ldd	r17, Z+7	; 0x07
     956:	d1 80       	ldd	r13, Z+1	; 0x01
     958:	80 81       	ld	r24, Z
     95a:	82 30       	cpi	r24, 0x02	; 2
     95c:	48 f4       	brcc	.+18     	; 0x970 <__pack_f+0x2e>
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	a0 e1       	ldi	r26, 0x10	; 16
     964:	b0 e0       	ldi	r27, 0x00	; 0
     966:	e8 2a       	or	r14, r24
     968:	f9 2a       	or	r15, r25
     96a:	0a 2b       	or	r16, r26
     96c:	1b 2b       	or	r17, r27
     96e:	a5 c0       	rjmp	.+330    	; 0xaba <__pack_f+0x178>
     970:	84 30       	cpi	r24, 0x04	; 4
     972:	09 f4       	brne	.+2      	; 0x976 <__pack_f+0x34>
     974:	9f c0       	rjmp	.+318    	; 0xab4 <__pack_f+0x172>
     976:	82 30       	cpi	r24, 0x02	; 2
     978:	21 f4       	brne	.+8      	; 0x982 <__pack_f+0x40>
     97a:	ee 24       	eor	r14, r14
     97c:	ff 24       	eor	r15, r15
     97e:	87 01       	movw	r16, r14
     980:	05 c0       	rjmp	.+10     	; 0x98c <__pack_f+0x4a>
     982:	e1 14       	cp	r14, r1
     984:	f1 04       	cpc	r15, r1
     986:	01 05       	cpc	r16, r1
     988:	11 05       	cpc	r17, r1
     98a:	19 f4       	brne	.+6      	; 0x992 <__pack_f+0x50>
     98c:	e0 e0       	ldi	r30, 0x00	; 0
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	96 c0       	rjmp	.+300    	; 0xabe <__pack_f+0x17c>
     992:	62 81       	ldd	r22, Z+2	; 0x02
     994:	73 81       	ldd	r23, Z+3	; 0x03
     996:	9f ef       	ldi	r25, 0xFF	; 255
     998:	62 38       	cpi	r22, 0x82	; 130
     99a:	79 07       	cpc	r23, r25
     99c:	0c f0       	brlt	.+2      	; 0x9a0 <__pack_f+0x5e>
     99e:	5b c0       	rjmp	.+182    	; 0xa56 <__pack_f+0x114>
     9a0:	22 e8       	ldi	r18, 0x82	; 130
     9a2:	3f ef       	ldi	r19, 0xFF	; 255
     9a4:	26 1b       	sub	r18, r22
     9a6:	37 0b       	sbc	r19, r23
     9a8:	2a 31       	cpi	r18, 0x1A	; 26
     9aa:	31 05       	cpc	r19, r1
     9ac:	2c f0       	brlt	.+10     	; 0x9b8 <__pack_f+0x76>
     9ae:	20 e0       	ldi	r18, 0x00	; 0
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	40 e0       	ldi	r20, 0x00	; 0
     9b4:	50 e0       	ldi	r21, 0x00	; 0
     9b6:	2a c0       	rjmp	.+84     	; 0xa0c <__pack_f+0xca>
     9b8:	b8 01       	movw	r22, r16
     9ba:	a7 01       	movw	r20, r14
     9bc:	02 2e       	mov	r0, r18
     9be:	04 c0       	rjmp	.+8      	; 0x9c8 <__pack_f+0x86>
     9c0:	76 95       	lsr	r23
     9c2:	67 95       	ror	r22
     9c4:	57 95       	ror	r21
     9c6:	47 95       	ror	r20
     9c8:	0a 94       	dec	r0
     9ca:	d2 f7       	brpl	.-12     	; 0x9c0 <__pack_f+0x7e>
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	a0 e0       	ldi	r26, 0x00	; 0
     9d2:	b0 e0       	ldi	r27, 0x00	; 0
     9d4:	04 c0       	rjmp	.+8      	; 0x9de <__pack_f+0x9c>
     9d6:	88 0f       	add	r24, r24
     9d8:	99 1f       	adc	r25, r25
     9da:	aa 1f       	adc	r26, r26
     9dc:	bb 1f       	adc	r27, r27
     9de:	2a 95       	dec	r18
     9e0:	d2 f7       	brpl	.-12     	; 0x9d6 <__pack_f+0x94>
     9e2:	01 97       	sbiw	r24, 0x01	; 1
     9e4:	a1 09       	sbc	r26, r1
     9e6:	b1 09       	sbc	r27, r1
     9e8:	8e 21       	and	r24, r14
     9ea:	9f 21       	and	r25, r15
     9ec:	a0 23       	and	r26, r16
     9ee:	b1 23       	and	r27, r17
     9f0:	00 97       	sbiw	r24, 0x00	; 0
     9f2:	a1 05       	cpc	r26, r1
     9f4:	b1 05       	cpc	r27, r1
     9f6:	21 f0       	breq	.+8      	; 0xa00 <__pack_f+0xbe>
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	a0 e0       	ldi	r26, 0x00	; 0
     9fe:	b0 e0       	ldi	r27, 0x00	; 0
     a00:	9a 01       	movw	r18, r20
     a02:	ab 01       	movw	r20, r22
     a04:	28 2b       	or	r18, r24
     a06:	39 2b       	or	r19, r25
     a08:	4a 2b       	or	r20, r26
     a0a:	5b 2b       	or	r21, r27
     a0c:	da 01       	movw	r26, r20
     a0e:	c9 01       	movw	r24, r18
     a10:	8f 77       	andi	r24, 0x7F	; 127
     a12:	90 70       	andi	r25, 0x00	; 0
     a14:	a0 70       	andi	r26, 0x00	; 0
     a16:	b0 70       	andi	r27, 0x00	; 0
     a18:	80 34       	cpi	r24, 0x40	; 64
     a1a:	91 05       	cpc	r25, r1
     a1c:	a1 05       	cpc	r26, r1
     a1e:	b1 05       	cpc	r27, r1
     a20:	39 f4       	brne	.+14     	; 0xa30 <__pack_f+0xee>
     a22:	27 ff       	sbrs	r18, 7
     a24:	09 c0       	rjmp	.+18     	; 0xa38 <__pack_f+0xf6>
     a26:	20 5c       	subi	r18, 0xC0	; 192
     a28:	3f 4f       	sbci	r19, 0xFF	; 255
     a2a:	4f 4f       	sbci	r20, 0xFF	; 255
     a2c:	5f 4f       	sbci	r21, 0xFF	; 255
     a2e:	04 c0       	rjmp	.+8      	; 0xa38 <__pack_f+0xf6>
     a30:	21 5c       	subi	r18, 0xC1	; 193
     a32:	3f 4f       	sbci	r19, 0xFF	; 255
     a34:	4f 4f       	sbci	r20, 0xFF	; 255
     a36:	5f 4f       	sbci	r21, 0xFF	; 255
     a38:	e0 e0       	ldi	r30, 0x00	; 0
     a3a:	f0 e0       	ldi	r31, 0x00	; 0
     a3c:	20 30       	cpi	r18, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	3a 07       	cpc	r19, r26
     a42:	a0 e0       	ldi	r26, 0x00	; 0
     a44:	4a 07       	cpc	r20, r26
     a46:	a0 e4       	ldi	r26, 0x40	; 64
     a48:	5a 07       	cpc	r21, r26
     a4a:	10 f0       	brcs	.+4      	; 0xa50 <__pack_f+0x10e>
     a4c:	e1 e0       	ldi	r30, 0x01	; 1
     a4e:	f0 e0       	ldi	r31, 0x00	; 0
     a50:	79 01       	movw	r14, r18
     a52:	8a 01       	movw	r16, r20
     a54:	27 c0       	rjmp	.+78     	; 0xaa4 <__pack_f+0x162>
     a56:	60 38       	cpi	r22, 0x80	; 128
     a58:	71 05       	cpc	r23, r1
     a5a:	64 f5       	brge	.+88     	; 0xab4 <__pack_f+0x172>
     a5c:	fb 01       	movw	r30, r22
     a5e:	e1 58       	subi	r30, 0x81	; 129
     a60:	ff 4f       	sbci	r31, 0xFF	; 255
     a62:	d8 01       	movw	r26, r16
     a64:	c7 01       	movw	r24, r14
     a66:	8f 77       	andi	r24, 0x7F	; 127
     a68:	90 70       	andi	r25, 0x00	; 0
     a6a:	a0 70       	andi	r26, 0x00	; 0
     a6c:	b0 70       	andi	r27, 0x00	; 0
     a6e:	80 34       	cpi	r24, 0x40	; 64
     a70:	91 05       	cpc	r25, r1
     a72:	a1 05       	cpc	r26, r1
     a74:	b1 05       	cpc	r27, r1
     a76:	39 f4       	brne	.+14     	; 0xa86 <__pack_f+0x144>
     a78:	e7 fe       	sbrs	r14, 7
     a7a:	0d c0       	rjmp	.+26     	; 0xa96 <__pack_f+0x154>
     a7c:	80 e4       	ldi	r24, 0x40	; 64
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	a0 e0       	ldi	r26, 0x00	; 0
     a82:	b0 e0       	ldi	r27, 0x00	; 0
     a84:	04 c0       	rjmp	.+8      	; 0xa8e <__pack_f+0x14c>
     a86:	8f e3       	ldi	r24, 0x3F	; 63
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	e8 0e       	add	r14, r24
     a90:	f9 1e       	adc	r15, r25
     a92:	0a 1f       	adc	r16, r26
     a94:	1b 1f       	adc	r17, r27
     a96:	17 ff       	sbrs	r17, 7
     a98:	05 c0       	rjmp	.+10     	; 0xaa4 <__pack_f+0x162>
     a9a:	16 95       	lsr	r17
     a9c:	07 95       	ror	r16
     a9e:	f7 94       	ror	r15
     aa0:	e7 94       	ror	r14
     aa2:	31 96       	adiw	r30, 0x01	; 1
     aa4:	87 e0       	ldi	r24, 0x07	; 7
     aa6:	16 95       	lsr	r17
     aa8:	07 95       	ror	r16
     aaa:	f7 94       	ror	r15
     aac:	e7 94       	ror	r14
     aae:	8a 95       	dec	r24
     ab0:	d1 f7       	brne	.-12     	; 0xaa6 <__pack_f+0x164>
     ab2:	05 c0       	rjmp	.+10     	; 0xabe <__pack_f+0x17c>
     ab4:	ee 24       	eor	r14, r14
     ab6:	ff 24       	eor	r15, r15
     ab8:	87 01       	movw	r16, r14
     aba:	ef ef       	ldi	r30, 0xFF	; 255
     abc:	f0 e0       	ldi	r31, 0x00	; 0
     abe:	6e 2f       	mov	r22, r30
     ac0:	67 95       	ror	r22
     ac2:	66 27       	eor	r22, r22
     ac4:	67 95       	ror	r22
     ac6:	90 2f       	mov	r25, r16
     ac8:	9f 77       	andi	r25, 0x7F	; 127
     aca:	d7 94       	ror	r13
     acc:	dd 24       	eor	r13, r13
     ace:	d7 94       	ror	r13
     ad0:	8e 2f       	mov	r24, r30
     ad2:	86 95       	lsr	r24
     ad4:	49 2f       	mov	r20, r25
     ad6:	46 2b       	or	r20, r22
     ad8:	58 2f       	mov	r21, r24
     ada:	5d 29       	or	r21, r13
     adc:	b7 01       	movw	r22, r14
     ade:	ca 01       	movw	r24, r20
     ae0:	1f 91       	pop	r17
     ae2:	0f 91       	pop	r16
     ae4:	ff 90       	pop	r15
     ae6:	ef 90       	pop	r14
     ae8:	df 90       	pop	r13
     aea:	08 95       	ret

00000aec <__unpack_f>:
     aec:	fc 01       	movw	r30, r24
     aee:	db 01       	movw	r26, r22
     af0:	40 81       	ld	r20, Z
     af2:	51 81       	ldd	r21, Z+1	; 0x01
     af4:	22 81       	ldd	r18, Z+2	; 0x02
     af6:	62 2f       	mov	r22, r18
     af8:	6f 77       	andi	r22, 0x7F	; 127
     afa:	70 e0       	ldi	r23, 0x00	; 0
     afc:	22 1f       	adc	r18, r18
     afe:	22 27       	eor	r18, r18
     b00:	22 1f       	adc	r18, r18
     b02:	93 81       	ldd	r25, Z+3	; 0x03
     b04:	89 2f       	mov	r24, r25
     b06:	88 0f       	add	r24, r24
     b08:	82 2b       	or	r24, r18
     b0a:	28 2f       	mov	r18, r24
     b0c:	30 e0       	ldi	r19, 0x00	; 0
     b0e:	99 1f       	adc	r25, r25
     b10:	99 27       	eor	r25, r25
     b12:	99 1f       	adc	r25, r25
     b14:	11 96       	adiw	r26, 0x01	; 1
     b16:	9c 93       	st	X, r25
     b18:	11 97       	sbiw	r26, 0x01	; 1
     b1a:	21 15       	cp	r18, r1
     b1c:	31 05       	cpc	r19, r1
     b1e:	a9 f5       	brne	.+106    	; 0xb8a <__unpack_f+0x9e>
     b20:	41 15       	cp	r20, r1
     b22:	51 05       	cpc	r21, r1
     b24:	61 05       	cpc	r22, r1
     b26:	71 05       	cpc	r23, r1
     b28:	11 f4       	brne	.+4      	; 0xb2e <__unpack_f+0x42>
     b2a:	82 e0       	ldi	r24, 0x02	; 2
     b2c:	37 c0       	rjmp	.+110    	; 0xb9c <__unpack_f+0xb0>
     b2e:	82 e8       	ldi	r24, 0x82	; 130
     b30:	9f ef       	ldi	r25, 0xFF	; 255
     b32:	13 96       	adiw	r26, 0x03	; 3
     b34:	9c 93       	st	X, r25
     b36:	8e 93       	st	-X, r24
     b38:	12 97       	sbiw	r26, 0x02	; 2
     b3a:	9a 01       	movw	r18, r20
     b3c:	ab 01       	movw	r20, r22
     b3e:	67 e0       	ldi	r22, 0x07	; 7
     b40:	22 0f       	add	r18, r18
     b42:	33 1f       	adc	r19, r19
     b44:	44 1f       	adc	r20, r20
     b46:	55 1f       	adc	r21, r21
     b48:	6a 95       	dec	r22
     b4a:	d1 f7       	brne	.-12     	; 0xb40 <__unpack_f+0x54>
     b4c:	83 e0       	ldi	r24, 0x03	; 3
     b4e:	8c 93       	st	X, r24
     b50:	0d c0       	rjmp	.+26     	; 0xb6c <__unpack_f+0x80>
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	44 1f       	adc	r20, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	12 96       	adiw	r26, 0x02	; 2
     b5c:	8d 91       	ld	r24, X+
     b5e:	9c 91       	ld	r25, X
     b60:	13 97       	sbiw	r26, 0x03	; 3
     b62:	01 97       	sbiw	r24, 0x01	; 1
     b64:	13 96       	adiw	r26, 0x03	; 3
     b66:	9c 93       	st	X, r25
     b68:	8e 93       	st	-X, r24
     b6a:	12 97       	sbiw	r26, 0x02	; 2
     b6c:	20 30       	cpi	r18, 0x00	; 0
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	38 07       	cpc	r19, r24
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	48 07       	cpc	r20, r24
     b76:	80 e4       	ldi	r24, 0x40	; 64
     b78:	58 07       	cpc	r21, r24
     b7a:	58 f3       	brcs	.-42     	; 0xb52 <__unpack_f+0x66>
     b7c:	14 96       	adiw	r26, 0x04	; 4
     b7e:	2d 93       	st	X+, r18
     b80:	3d 93       	st	X+, r19
     b82:	4d 93       	st	X+, r20
     b84:	5c 93       	st	X, r21
     b86:	17 97       	sbiw	r26, 0x07	; 7
     b88:	08 95       	ret
     b8a:	2f 3f       	cpi	r18, 0xFF	; 255
     b8c:	31 05       	cpc	r19, r1
     b8e:	79 f4       	brne	.+30     	; 0xbae <__unpack_f+0xc2>
     b90:	41 15       	cp	r20, r1
     b92:	51 05       	cpc	r21, r1
     b94:	61 05       	cpc	r22, r1
     b96:	71 05       	cpc	r23, r1
     b98:	19 f4       	brne	.+6      	; 0xba0 <__unpack_f+0xb4>
     b9a:	84 e0       	ldi	r24, 0x04	; 4
     b9c:	8c 93       	st	X, r24
     b9e:	08 95       	ret
     ba0:	64 ff       	sbrs	r22, 4
     ba2:	03 c0       	rjmp	.+6      	; 0xbaa <__unpack_f+0xbe>
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	8c 93       	st	X, r24
     ba8:	12 c0       	rjmp	.+36     	; 0xbce <__unpack_f+0xe2>
     baa:	1c 92       	st	X, r1
     bac:	10 c0       	rjmp	.+32     	; 0xbce <__unpack_f+0xe2>
     bae:	2f 57       	subi	r18, 0x7F	; 127
     bb0:	30 40       	sbci	r19, 0x00	; 0
     bb2:	13 96       	adiw	r26, 0x03	; 3
     bb4:	3c 93       	st	X, r19
     bb6:	2e 93       	st	-X, r18
     bb8:	12 97       	sbiw	r26, 0x02	; 2
     bba:	83 e0       	ldi	r24, 0x03	; 3
     bbc:	8c 93       	st	X, r24
     bbe:	87 e0       	ldi	r24, 0x07	; 7
     bc0:	44 0f       	add	r20, r20
     bc2:	55 1f       	adc	r21, r21
     bc4:	66 1f       	adc	r22, r22
     bc6:	77 1f       	adc	r23, r23
     bc8:	8a 95       	dec	r24
     bca:	d1 f7       	brne	.-12     	; 0xbc0 <__unpack_f+0xd4>
     bcc:	70 64       	ori	r23, 0x40	; 64
     bce:	14 96       	adiw	r26, 0x04	; 4
     bd0:	4d 93       	st	X+, r20
     bd2:	5d 93       	st	X+, r21
     bd4:	6d 93       	st	X+, r22
     bd6:	7c 93       	st	X, r23
     bd8:	17 97       	sbiw	r26, 0x07	; 7
     bda:	08 95       	ret

00000bdc <__fpcmp_parts_f>:
     bdc:	1f 93       	push	r17
     bde:	dc 01       	movw	r26, r24
     be0:	fb 01       	movw	r30, r22
     be2:	9c 91       	ld	r25, X
     be4:	92 30       	cpi	r25, 0x02	; 2
     be6:	08 f4       	brcc	.+2      	; 0xbea <__fpcmp_parts_f+0xe>
     be8:	47 c0       	rjmp	.+142    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bea:	80 81       	ld	r24, Z
     bec:	82 30       	cpi	r24, 0x02	; 2
     bee:	08 f4       	brcc	.+2      	; 0xbf2 <__fpcmp_parts_f+0x16>
     bf0:	43 c0       	rjmp	.+134    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bf2:	94 30       	cpi	r25, 0x04	; 4
     bf4:	51 f4       	brne	.+20     	; 0xc0a <__fpcmp_parts_f+0x2e>
     bf6:	11 96       	adiw	r26, 0x01	; 1
     bf8:	1c 91       	ld	r17, X
     bfa:	84 30       	cpi	r24, 0x04	; 4
     bfc:	99 f5       	brne	.+102    	; 0xc64 <__fpcmp_parts_f+0x88>
     bfe:	81 81       	ldd	r24, Z+1	; 0x01
     c00:	68 2f       	mov	r22, r24
     c02:	70 e0       	ldi	r23, 0x00	; 0
     c04:	61 1b       	sub	r22, r17
     c06:	71 09       	sbc	r23, r1
     c08:	3f c0       	rjmp	.+126    	; 0xc88 <__fpcmp_parts_f+0xac>
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	21 f0       	breq	.+8      	; 0xc16 <__fpcmp_parts_f+0x3a>
     c0e:	92 30       	cpi	r25, 0x02	; 2
     c10:	31 f4       	brne	.+12     	; 0xc1e <__fpcmp_parts_f+0x42>
     c12:	82 30       	cpi	r24, 0x02	; 2
     c14:	b9 f1       	breq	.+110    	; 0xc84 <__fpcmp_parts_f+0xa8>
     c16:	81 81       	ldd	r24, Z+1	; 0x01
     c18:	88 23       	and	r24, r24
     c1a:	89 f1       	breq	.+98     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c1c:	2d c0       	rjmp	.+90     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c1e:	11 96       	adiw	r26, 0x01	; 1
     c20:	1c 91       	ld	r17, X
     c22:	11 97       	sbiw	r26, 0x01	; 1
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	f1 f0       	breq	.+60     	; 0xc64 <__fpcmp_parts_f+0x88>
     c28:	81 81       	ldd	r24, Z+1	; 0x01
     c2a:	18 17       	cp	r17, r24
     c2c:	d9 f4       	brne	.+54     	; 0xc64 <__fpcmp_parts_f+0x88>
     c2e:	12 96       	adiw	r26, 0x02	; 2
     c30:	2d 91       	ld	r18, X+
     c32:	3c 91       	ld	r19, X
     c34:	13 97       	sbiw	r26, 0x03	; 3
     c36:	82 81       	ldd	r24, Z+2	; 0x02
     c38:	93 81       	ldd	r25, Z+3	; 0x03
     c3a:	82 17       	cp	r24, r18
     c3c:	93 07       	cpc	r25, r19
     c3e:	94 f0       	brlt	.+36     	; 0xc64 <__fpcmp_parts_f+0x88>
     c40:	28 17       	cp	r18, r24
     c42:	39 07       	cpc	r19, r25
     c44:	bc f0       	brlt	.+46     	; 0xc74 <__fpcmp_parts_f+0x98>
     c46:	14 96       	adiw	r26, 0x04	; 4
     c48:	8d 91       	ld	r24, X+
     c4a:	9d 91       	ld	r25, X+
     c4c:	0d 90       	ld	r0, X+
     c4e:	bc 91       	ld	r27, X
     c50:	a0 2d       	mov	r26, r0
     c52:	24 81       	ldd	r18, Z+4	; 0x04
     c54:	35 81       	ldd	r19, Z+5	; 0x05
     c56:	46 81       	ldd	r20, Z+6	; 0x06
     c58:	57 81       	ldd	r21, Z+7	; 0x07
     c5a:	28 17       	cp	r18, r24
     c5c:	39 07       	cpc	r19, r25
     c5e:	4a 07       	cpc	r20, r26
     c60:	5b 07       	cpc	r21, r27
     c62:	18 f4       	brcc	.+6      	; 0xc6a <__fpcmp_parts_f+0x8e>
     c64:	11 23       	and	r17, r17
     c66:	41 f0       	breq	.+16     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c68:	0a c0       	rjmp	.+20     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c6a:	82 17       	cp	r24, r18
     c6c:	93 07       	cpc	r25, r19
     c6e:	a4 07       	cpc	r26, r20
     c70:	b5 07       	cpc	r27, r21
     c72:	40 f4       	brcc	.+16     	; 0xc84 <__fpcmp_parts_f+0xa8>
     c74:	11 23       	and	r17, r17
     c76:	19 f0       	breq	.+6      	; 0xc7e <__fpcmp_parts_f+0xa2>
     c78:	61 e0       	ldi	r22, 0x01	; 1
     c7a:	70 e0       	ldi	r23, 0x00	; 0
     c7c:	05 c0       	rjmp	.+10     	; 0xc88 <__fpcmp_parts_f+0xac>
     c7e:	6f ef       	ldi	r22, 0xFF	; 255
     c80:	7f ef       	ldi	r23, 0xFF	; 255
     c82:	02 c0       	rjmp	.+4      	; 0xc88 <__fpcmp_parts_f+0xac>
     c84:	60 e0       	ldi	r22, 0x00	; 0
     c86:	70 e0       	ldi	r23, 0x00	; 0
     c88:	cb 01       	movw	r24, r22
     c8a:	1f 91       	pop	r17
     c8c:	08 95       	ret

00000c8e <__vector_1>:
#include "GINT.h"
#include <avr/interrupt.h>


ISR(INT0_vect)
{
     c8e:	1f 92       	push	r1
     c90:	0f 92       	push	r0
     c92:	0f b6       	in	r0, 0x3f	; 63
     c94:	0f 92       	push	r0
     c96:	11 24       	eor	r1, r1
     c98:	df 93       	push	r29
     c9a:	cf 93       	push	r28
     c9c:	cd b7       	in	r28, 0x3d	; 61
     c9e:	de b7       	in	r29, 0x3e	; 62

}
     ca0:	cf 91       	pop	r28
     ca2:	df 91       	pop	r29
     ca4:	0f 90       	pop	r0
     ca6:	0f be       	out	0x3f, r0	; 63
     ca8:	0f 90       	pop	r0
     caa:	1f 90       	pop	r1
     cac:	18 95       	reti

00000cae <main>:


int main()
{
     cae:	df 93       	push	r29
     cb0:	cf 93       	push	r28
     cb2:	cd b7       	in	r28, 0x3d	; 61
     cb4:	de b7       	in	r29, 0x3e	; 62
	GINT_vidEnableAllInterrupts();
     cb6:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <GINT_vidEnableAllInterrupts>
     cba:	ff cf       	rjmp	.-2      	; 0xcba <main+0xc>

00000cbc <SSD_vidinit>:
#include "SSD.h"
#include "Dio.h"
#include <util/delay.h>

void SSD_vidinit(void)
{
     cbc:	df 93       	push	r29
     cbe:	cf 93       	push	r28
     cc0:	cd b7       	in	r28, 0x3d	; 61
     cc2:	de b7       	in	r29, 0x3e	; 62
	Dio_vidconfigChanel(DIO_PORTB, DIO_PIN1, DIO_OUTPUT);
     cc4:	81 e0       	ldi	r24, 0x01	; 1
     cc6:	61 e0       	ldi	r22, 0x01	; 1
     cc8:	41 e0       	ldi	r20, 0x01	; 1
     cca:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTB, DIO_PIN2, DIO_OUTPUT);
     cce:	81 e0       	ldi	r24, 0x01	; 1
     cd0:	62 e0       	ldi	r22, 0x02	; 2
     cd2:	41 e0       	ldi	r20, 0x01	; 1
     cd4:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <Dio_vidconfigChanel>

	Dio_vidconfigChanel(DIO_PORTA, DIO_PIN4, DIO_OUTPUT);
     cd8:	80 e0       	ldi	r24, 0x00	; 0
     cda:	64 e0       	ldi	r22, 0x04	; 4
     cdc:	41 e0       	ldi	r20, 0x01	; 1
     cde:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTA, DIO_PIN5, DIO_OUTPUT);
     ce2:	80 e0       	ldi	r24, 0x00	; 0
     ce4:	65 e0       	ldi	r22, 0x05	; 5
     ce6:	41 e0       	ldi	r20, 0x01	; 1
     ce8:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTA, DIO_PIN6, DIO_OUTPUT);
     cec:	80 e0       	ldi	r24, 0x00	; 0
     cee:	66 e0       	ldi	r22, 0x06	; 6
     cf0:	41 e0       	ldi	r20, 0x01	; 1
     cf2:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTA, DIO_PIN7, DIO_OUTPUT);
     cf6:	80 e0       	ldi	r24, 0x00	; 0
     cf8:	67 e0       	ldi	r22, 0x07	; 7
     cfa:	41 e0       	ldi	r20, 0x01	; 1
     cfc:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <Dio_vidconfigChanel>
}
     d00:	cf 91       	pop	r28
     d02:	df 91       	pop	r29
     d04:	08 95       	ret

00000d06 <SSD_viddisplyNum>:

void SSD_viddisplyNum(u8 num)
{
     d06:	df 93       	push	r29
     d08:	cf 93       	push	r28
     d0a:	cd b7       	in	r28, 0x3d	; 61
     d0c:	de b7       	in	r29, 0x3e	; 62
     d0e:	e3 97       	sbiw	r28, 0x33	; 51
     d10:	0f b6       	in	r0, 0x3f	; 63
     d12:	f8 94       	cli
     d14:	de bf       	out	0x3e, r29	; 62
     d16:	0f be       	out	0x3f, r0	; 63
     d18:	cd bf       	out	0x3d, r28	; 61
     d1a:	8b ab       	std	Y+51, r24	; 0x33
	u8 loc_secondDigit =  (num%10)<<4;
     d1c:	8b a9       	ldd	r24, Y+51	; 0x33
     d1e:	9a e0       	ldi	r25, 0x0A	; 10
     d20:	69 2f       	mov	r22, r25
     d22:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <__udivmodqi4>
     d26:	89 2f       	mov	r24, r25
     d28:	82 95       	swap	r24
     d2a:	80 7f       	andi	r24, 0xF0	; 240
     d2c:	8a ab       	std	Y+50, r24	; 0x32
	u8 loc_firstDigit = (num/10)<<4;
     d2e:	8b a9       	ldd	r24, Y+51	; 0x33
     d30:	9a e0       	ldi	r25, 0x0A	; 10
     d32:	69 2f       	mov	r22, r25
     d34:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <__udivmodqi4>
     d38:	82 95       	swap	r24
     d3a:	80 7f       	andi	r24, 0xF0	; 240
     d3c:	89 ab       	std	Y+49, r24	; 0x31

	/* Enable SSD 1	-> EN1 = High	*/
	Dio_vidwriteChanel(DIO_PORTB, DIO_PIN2, DIO_HIGH);
     d3e:	81 e0       	ldi	r24, 0x01	; 1
     d40:	62 e0       	ldi	r22, 0x02	; 2
     d42:	41 e0       	ldi	r20, 0x01	; 1
     d44:	0e 94 10 10 	call	0x2020	; 0x2020 <Dio_vidwriteChanel>
	/* Disable SSD 2 -> EN2 =Low	*/
	Dio_vidwriteChanel(DIO_PORTB, DIO_PIN1, DIO_LOW);
     d48:	81 e0       	ldi	r24, 0x01	; 1
     d4a:	61 e0       	ldi	r22, 0x01	; 1
     d4c:	40 e0       	ldi	r20, 0x00	; 0
     d4e:	0e 94 10 10 	call	0x2020	; 0x2020 <Dio_vidwriteChanel>
	/* Write first digit */
	Dio_vidWriteChanelGroup(DIO_PORTA, loc_firstDigit, SSD_MASK);
     d52:	80 e0       	ldi	r24, 0x00	; 0
     d54:	69 a9       	ldd	r22, Y+49	; 0x31
     d56:	4f e0       	ldi	r20, 0x0F	; 15
     d58:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <Dio_vidWriteChanelGroup>
     d5c:	80 e0       	ldi	r24, 0x00	; 0
     d5e:	90 e0       	ldi	r25, 0x00	; 0
     d60:	aa ef       	ldi	r26, 0xFA	; 250
     d62:	b3 e4       	ldi	r27, 0x43	; 67
     d64:	8d a7       	std	Y+45, r24	; 0x2d
     d66:	9e a7       	std	Y+46, r25	; 0x2e
     d68:	af a7       	std	Y+47, r26	; 0x2f
     d6a:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     d6c:	6d a5       	ldd	r22, Y+45	; 0x2d
     d6e:	7e a5       	ldd	r23, Y+46	; 0x2e
     d70:	8f a5       	ldd	r24, Y+47	; 0x2f
     d72:	98 a9       	ldd	r25, Y+48	; 0x30
     d74:	2b ea       	ldi	r18, 0xAB	; 171
     d76:	3a ea       	ldi	r19, 0xAA	; 170
     d78:	4a ea       	ldi	r20, 0xAA	; 170
     d7a:	50 e4       	ldi	r21, 0x40	; 64
     d7c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     d80:	dc 01       	movw	r26, r24
     d82:	cb 01       	movw	r24, r22
     d84:	89 a7       	std	Y+41, r24	; 0x29
     d86:	9a a7       	std	Y+42, r25	; 0x2a
     d88:	ab a7       	std	Y+43, r26	; 0x2b
     d8a:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
     d8c:	69 a5       	ldd	r22, Y+41	; 0x29
     d8e:	7a a5       	ldd	r23, Y+42	; 0x2a
     d90:	8b a5       	ldd	r24, Y+43	; 0x2b
     d92:	9c a5       	ldd	r25, Y+44	; 0x2c
     d94:	20 e0       	ldi	r18, 0x00	; 0
     d96:	30 e0       	ldi	r19, 0x00	; 0
     d98:	40 e8       	ldi	r20, 0x80	; 128
     d9a:	5f e3       	ldi	r21, 0x3F	; 63
     d9c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
     da0:	88 23       	and	r24, r24
     da2:	1c f4       	brge	.+6      	; 0xdaa <SSD_viddisplyNum+0xa4>
		__ticks = 1;
     da4:	81 e0       	ldi	r24, 0x01	; 1
     da6:	88 a7       	std	Y+40, r24	; 0x28
     da8:	91 c0       	rjmp	.+290    	; 0xecc <SSD_viddisplyNum+0x1c6>
	else if (__tmp > 255)
     daa:	69 a5       	ldd	r22, Y+41	; 0x29
     dac:	7a a5       	ldd	r23, Y+42	; 0x2a
     dae:	8b a5       	ldd	r24, Y+43	; 0x2b
     db0:	9c a5       	ldd	r25, Y+44	; 0x2c
     db2:	20 e0       	ldi	r18, 0x00	; 0
     db4:	30 e0       	ldi	r19, 0x00	; 0
     db6:	4f e7       	ldi	r20, 0x7F	; 127
     db8:	53 e4       	ldi	r21, 0x43	; 67
     dba:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
     dbe:	18 16       	cp	r1, r24
     dc0:	0c f0       	brlt	.+2      	; 0xdc4 <SSD_viddisplyNum+0xbe>
     dc2:	7b c0       	rjmp	.+246    	; 0xeba <SSD_viddisplyNum+0x1b4>
	{
		_delay_ms(__us / 1000.0);
     dc4:	6d a5       	ldd	r22, Y+45	; 0x2d
     dc6:	7e a5       	ldd	r23, Y+46	; 0x2e
     dc8:	8f a5       	ldd	r24, Y+47	; 0x2f
     dca:	98 a9       	ldd	r25, Y+48	; 0x30
     dcc:	20 e0       	ldi	r18, 0x00	; 0
     dce:	30 e0       	ldi	r19, 0x00	; 0
     dd0:	4a e7       	ldi	r20, 0x7A	; 122
     dd2:	54 e4       	ldi	r21, 0x44	; 68
     dd4:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
     dd8:	dc 01       	movw	r26, r24
     dda:	cb 01       	movw	r24, r22
     ddc:	8c a3       	std	Y+36, r24	; 0x24
     dde:	9d a3       	std	Y+37, r25	; 0x25
     de0:	ae a3       	std	Y+38, r26	; 0x26
     de2:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     de4:	6c a1       	ldd	r22, Y+36	; 0x24
     de6:	7d a1       	ldd	r23, Y+37	; 0x25
     de8:	8e a1       	ldd	r24, Y+38	; 0x26
     dea:	9f a1       	ldd	r25, Y+39	; 0x27
     dec:	20 e0       	ldi	r18, 0x00	; 0
     dee:	30 e0       	ldi	r19, 0x00	; 0
     df0:	4a e7       	ldi	r20, 0x7A	; 122
     df2:	55 e4       	ldi	r21, 0x45	; 69
     df4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     df8:	dc 01       	movw	r26, r24
     dfa:	cb 01       	movw	r24, r22
     dfc:	88 a3       	std	Y+32, r24	; 0x20
     dfe:	99 a3       	std	Y+33, r25	; 0x21
     e00:	aa a3       	std	Y+34, r26	; 0x22
     e02:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
     e04:	68 a1       	ldd	r22, Y+32	; 0x20
     e06:	79 a1       	ldd	r23, Y+33	; 0x21
     e08:	8a a1       	ldd	r24, Y+34	; 0x22
     e0a:	9b a1       	ldd	r25, Y+35	; 0x23
     e0c:	20 e0       	ldi	r18, 0x00	; 0
     e0e:	30 e0       	ldi	r19, 0x00	; 0
     e10:	40 e8       	ldi	r20, 0x80	; 128
     e12:	5f e3       	ldi	r21, 0x3F	; 63
     e14:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
     e18:	88 23       	and	r24, r24
     e1a:	2c f4       	brge	.+10     	; 0xe26 <SSD_viddisplyNum+0x120>
		__ticks = 1;
     e1c:	81 e0       	ldi	r24, 0x01	; 1
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	9f 8f       	std	Y+31, r25	; 0x1f
     e22:	8e 8f       	std	Y+30, r24	; 0x1e
     e24:	3f c0       	rjmp	.+126    	; 0xea4 <SSD_viddisplyNum+0x19e>
	else if (__tmp > 65535)
     e26:	68 a1       	ldd	r22, Y+32	; 0x20
     e28:	79 a1       	ldd	r23, Y+33	; 0x21
     e2a:	8a a1       	ldd	r24, Y+34	; 0x22
     e2c:	9b a1       	ldd	r25, Y+35	; 0x23
     e2e:	20 e0       	ldi	r18, 0x00	; 0
     e30:	3f ef       	ldi	r19, 0xFF	; 255
     e32:	4f e7       	ldi	r20, 0x7F	; 127
     e34:	57 e4       	ldi	r21, 0x47	; 71
     e36:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
     e3a:	18 16       	cp	r1, r24
     e3c:	4c f5       	brge	.+82     	; 0xe90 <SSD_viddisplyNum+0x18a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e3e:	6c a1       	ldd	r22, Y+36	; 0x24
     e40:	7d a1       	ldd	r23, Y+37	; 0x25
     e42:	8e a1       	ldd	r24, Y+38	; 0x26
     e44:	9f a1       	ldd	r25, Y+39	; 0x27
     e46:	20 e0       	ldi	r18, 0x00	; 0
     e48:	30 e0       	ldi	r19, 0x00	; 0
     e4a:	40 e2       	ldi	r20, 0x20	; 32
     e4c:	51 e4       	ldi	r21, 0x41	; 65
     e4e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     e52:	dc 01       	movw	r26, r24
     e54:	cb 01       	movw	r24, r22
     e56:	bc 01       	movw	r22, r24
     e58:	cd 01       	movw	r24, r26
     e5a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     e5e:	dc 01       	movw	r26, r24
     e60:	cb 01       	movw	r24, r22
     e62:	9f 8f       	std	Y+31, r25	; 0x1f
     e64:	8e 8f       	std	Y+30, r24	; 0x1e
     e66:	0f c0       	rjmp	.+30     	; 0xe86 <SSD_viddisplyNum+0x180>
     e68:	80 e9       	ldi	r24, 0x90	; 144
     e6a:	91 e0       	ldi	r25, 0x01	; 1
     e6c:	9d 8f       	std	Y+29, r25	; 0x1d
     e6e:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     e70:	8c 8d       	ldd	r24, Y+28	; 0x1c
     e72:	9d 8d       	ldd	r25, Y+29	; 0x1d
     e74:	01 97       	sbiw	r24, 0x01	; 1
     e76:	f1 f7       	brne	.-4      	; 0xe74 <SSD_viddisplyNum+0x16e>
     e78:	9d 8f       	std	Y+29, r25	; 0x1d
     e7a:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e7c:	8e 8d       	ldd	r24, Y+30	; 0x1e
     e7e:	9f 8d       	ldd	r25, Y+31	; 0x1f
     e80:	01 97       	sbiw	r24, 0x01	; 1
     e82:	9f 8f       	std	Y+31, r25	; 0x1f
     e84:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e86:	8e 8d       	ldd	r24, Y+30	; 0x1e
     e88:	9f 8d       	ldd	r25, Y+31	; 0x1f
     e8a:	00 97       	sbiw	r24, 0x00	; 0
     e8c:	69 f7       	brne	.-38     	; 0xe68 <SSD_viddisplyNum+0x162>
     e8e:	24 c0       	rjmp	.+72     	; 0xed8 <SSD_viddisplyNum+0x1d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e90:	68 a1       	ldd	r22, Y+32	; 0x20
     e92:	79 a1       	ldd	r23, Y+33	; 0x21
     e94:	8a a1       	ldd	r24, Y+34	; 0x22
     e96:	9b a1       	ldd	r25, Y+35	; 0x23
     e98:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     e9c:	dc 01       	movw	r26, r24
     e9e:	cb 01       	movw	r24, r22
     ea0:	9f 8f       	std	Y+31, r25	; 0x1f
     ea2:	8e 8f       	std	Y+30, r24	; 0x1e
     ea4:	8e 8d       	ldd	r24, Y+30	; 0x1e
     ea6:	9f 8d       	ldd	r25, Y+31	; 0x1f
     ea8:	9b 8f       	std	Y+27, r25	; 0x1b
     eaa:	8a 8f       	std	Y+26, r24	; 0x1a
     eac:	8a 8d       	ldd	r24, Y+26	; 0x1a
     eae:	9b 8d       	ldd	r25, Y+27	; 0x1b
     eb0:	01 97       	sbiw	r24, 0x01	; 1
     eb2:	f1 f7       	brne	.-4      	; 0xeb0 <SSD_viddisplyNum+0x1aa>
     eb4:	9b 8f       	std	Y+27, r25	; 0x1b
     eb6:	8a 8f       	std	Y+26, r24	; 0x1a
     eb8:	0f c0       	rjmp	.+30     	; 0xed8 <SSD_viddisplyNum+0x1d2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     eba:	69 a5       	ldd	r22, Y+41	; 0x29
     ebc:	7a a5       	ldd	r23, Y+42	; 0x2a
     ebe:	8b a5       	ldd	r24, Y+43	; 0x2b
     ec0:	9c a5       	ldd	r25, Y+44	; 0x2c
     ec2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     ec6:	dc 01       	movw	r26, r24
     ec8:	cb 01       	movw	r24, r22
     eca:	88 a7       	std	Y+40, r24	; 0x28
     ecc:	88 a5       	ldd	r24, Y+40	; 0x28
     ece:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     ed0:	89 8d       	ldd	r24, Y+25	; 0x19
     ed2:	8a 95       	dec	r24
     ed4:	f1 f7       	brne	.-4      	; 0xed2 <SSD_viddisplyNum+0x1cc>
     ed6:	89 8f       	std	Y+25, r24	; 0x19

	_delay_us(500);

	/* Disable SSD 1	-> EN1 = Low	*/
	Dio_vidwriteChanel(DIO_PORTB, DIO_PIN2, DIO_LOW);
     ed8:	81 e0       	ldi	r24, 0x01	; 1
     eda:	62 e0       	ldi	r22, 0x02	; 2
     edc:	40 e0       	ldi	r20, 0x00	; 0
     ede:	0e 94 10 10 	call	0x2020	; 0x2020 <Dio_vidwriteChanel>
	/* Enable SSD 2 -> EN2 = High	*/
	Dio_vidwriteChanel(DIO_PORTB, DIO_PIN1, DIO_HIGH);
     ee2:	81 e0       	ldi	r24, 0x01	; 1
     ee4:	61 e0       	ldi	r22, 0x01	; 1
     ee6:	41 e0       	ldi	r20, 0x01	; 1
     ee8:	0e 94 10 10 	call	0x2020	; 0x2020 <Dio_vidwriteChanel>
	/* Write second digit */
	Dio_vidWriteChanelGroup(DIO_PORTA, loc_secondDigit, SSD_MASK);
     eec:	80 e0       	ldi	r24, 0x00	; 0
     eee:	6a a9       	ldd	r22, Y+50	; 0x32
     ef0:	4f e0       	ldi	r20, 0x0F	; 15
     ef2:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <Dio_vidWriteChanelGroup>
     ef6:	80 e0       	ldi	r24, 0x00	; 0
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	aa ef       	ldi	r26, 0xFA	; 250
     efc:	b3 e4       	ldi	r27, 0x43	; 67
     efe:	8d 8b       	std	Y+21, r24	; 0x15
     f00:	9e 8b       	std	Y+22, r25	; 0x16
     f02:	af 8b       	std	Y+23, r26	; 0x17
     f04:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     f06:	6d 89       	ldd	r22, Y+21	; 0x15
     f08:	7e 89       	ldd	r23, Y+22	; 0x16
     f0a:	8f 89       	ldd	r24, Y+23	; 0x17
     f0c:	98 8d       	ldd	r25, Y+24	; 0x18
     f0e:	2b ea       	ldi	r18, 0xAB	; 171
     f10:	3a ea       	ldi	r19, 0xAA	; 170
     f12:	4a ea       	ldi	r20, 0xAA	; 170
     f14:	50 e4       	ldi	r21, 0x40	; 64
     f16:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f1a:	dc 01       	movw	r26, r24
     f1c:	cb 01       	movw	r24, r22
     f1e:	89 8b       	std	Y+17, r24	; 0x11
     f20:	9a 8b       	std	Y+18, r25	; 0x12
     f22:	ab 8b       	std	Y+19, r26	; 0x13
     f24:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
     f26:	69 89       	ldd	r22, Y+17	; 0x11
     f28:	7a 89       	ldd	r23, Y+18	; 0x12
     f2a:	8b 89       	ldd	r24, Y+19	; 0x13
     f2c:	9c 89       	ldd	r25, Y+20	; 0x14
     f2e:	20 e0       	ldi	r18, 0x00	; 0
     f30:	30 e0       	ldi	r19, 0x00	; 0
     f32:	40 e8       	ldi	r20, 0x80	; 128
     f34:	5f e3       	ldi	r21, 0x3F	; 63
     f36:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
     f3a:	88 23       	and	r24, r24
     f3c:	1c f4       	brge	.+6      	; 0xf44 <SSD_viddisplyNum+0x23e>
		__ticks = 1;
     f3e:	81 e0       	ldi	r24, 0x01	; 1
     f40:	88 8b       	std	Y+16, r24	; 0x10
     f42:	91 c0       	rjmp	.+290    	; 0x1066 <SSD_viddisplyNum+0x360>
	else if (__tmp > 255)
     f44:	69 89       	ldd	r22, Y+17	; 0x11
     f46:	7a 89       	ldd	r23, Y+18	; 0x12
     f48:	8b 89       	ldd	r24, Y+19	; 0x13
     f4a:	9c 89       	ldd	r25, Y+20	; 0x14
     f4c:	20 e0       	ldi	r18, 0x00	; 0
     f4e:	30 e0       	ldi	r19, 0x00	; 0
     f50:	4f e7       	ldi	r20, 0x7F	; 127
     f52:	53 e4       	ldi	r21, 0x43	; 67
     f54:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
     f58:	18 16       	cp	r1, r24
     f5a:	0c f0       	brlt	.+2      	; 0xf5e <SSD_viddisplyNum+0x258>
     f5c:	7b c0       	rjmp	.+246    	; 0x1054 <SSD_viddisplyNum+0x34e>
	{
		_delay_ms(__us / 1000.0);
     f5e:	6d 89       	ldd	r22, Y+21	; 0x15
     f60:	7e 89       	ldd	r23, Y+22	; 0x16
     f62:	8f 89       	ldd	r24, Y+23	; 0x17
     f64:	98 8d       	ldd	r25, Y+24	; 0x18
     f66:	20 e0       	ldi	r18, 0x00	; 0
     f68:	30 e0       	ldi	r19, 0x00	; 0
     f6a:	4a e7       	ldi	r20, 0x7A	; 122
     f6c:	54 e4       	ldi	r21, 0x44	; 68
     f6e:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
     f72:	dc 01       	movw	r26, r24
     f74:	cb 01       	movw	r24, r22
     f76:	8c 87       	std	Y+12, r24	; 0x0c
     f78:	9d 87       	std	Y+13, r25	; 0x0d
     f7a:	ae 87       	std	Y+14, r26	; 0x0e
     f7c:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f7e:	6c 85       	ldd	r22, Y+12	; 0x0c
     f80:	7d 85       	ldd	r23, Y+13	; 0x0d
     f82:	8e 85       	ldd	r24, Y+14	; 0x0e
     f84:	9f 85       	ldd	r25, Y+15	; 0x0f
     f86:	20 e0       	ldi	r18, 0x00	; 0
     f88:	30 e0       	ldi	r19, 0x00	; 0
     f8a:	4a e7       	ldi	r20, 0x7A	; 122
     f8c:	55 e4       	ldi	r21, 0x45	; 69
     f8e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f92:	dc 01       	movw	r26, r24
     f94:	cb 01       	movw	r24, r22
     f96:	88 87       	std	Y+8, r24	; 0x08
     f98:	99 87       	std	Y+9, r25	; 0x09
     f9a:	aa 87       	std	Y+10, r26	; 0x0a
     f9c:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
     f9e:	68 85       	ldd	r22, Y+8	; 0x08
     fa0:	79 85       	ldd	r23, Y+9	; 0x09
     fa2:	8a 85       	ldd	r24, Y+10	; 0x0a
     fa4:	9b 85       	ldd	r25, Y+11	; 0x0b
     fa6:	20 e0       	ldi	r18, 0x00	; 0
     fa8:	30 e0       	ldi	r19, 0x00	; 0
     faa:	40 e8       	ldi	r20, 0x80	; 128
     fac:	5f e3       	ldi	r21, 0x3F	; 63
     fae:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
     fb2:	88 23       	and	r24, r24
     fb4:	2c f4       	brge	.+10     	; 0xfc0 <SSD_viddisplyNum+0x2ba>
		__ticks = 1;
     fb6:	81 e0       	ldi	r24, 0x01	; 1
     fb8:	90 e0       	ldi	r25, 0x00	; 0
     fba:	9f 83       	std	Y+7, r25	; 0x07
     fbc:	8e 83       	std	Y+6, r24	; 0x06
     fbe:	3f c0       	rjmp	.+126    	; 0x103e <SSD_viddisplyNum+0x338>
	else if (__tmp > 65535)
     fc0:	68 85       	ldd	r22, Y+8	; 0x08
     fc2:	79 85       	ldd	r23, Y+9	; 0x09
     fc4:	8a 85       	ldd	r24, Y+10	; 0x0a
     fc6:	9b 85       	ldd	r25, Y+11	; 0x0b
     fc8:	20 e0       	ldi	r18, 0x00	; 0
     fca:	3f ef       	ldi	r19, 0xFF	; 255
     fcc:	4f e7       	ldi	r20, 0x7F	; 127
     fce:	57 e4       	ldi	r21, 0x47	; 71
     fd0:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
     fd4:	18 16       	cp	r1, r24
     fd6:	4c f5       	brge	.+82     	; 0x102a <SSD_viddisplyNum+0x324>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fd8:	6c 85       	ldd	r22, Y+12	; 0x0c
     fda:	7d 85       	ldd	r23, Y+13	; 0x0d
     fdc:	8e 85       	ldd	r24, Y+14	; 0x0e
     fde:	9f 85       	ldd	r25, Y+15	; 0x0f
     fe0:	20 e0       	ldi	r18, 0x00	; 0
     fe2:	30 e0       	ldi	r19, 0x00	; 0
     fe4:	40 e2       	ldi	r20, 0x20	; 32
     fe6:	51 e4       	ldi	r21, 0x41	; 65
     fe8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     fec:	dc 01       	movw	r26, r24
     fee:	cb 01       	movw	r24, r22
     ff0:	bc 01       	movw	r22, r24
     ff2:	cd 01       	movw	r24, r26
     ff4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     ff8:	dc 01       	movw	r26, r24
     ffa:	cb 01       	movw	r24, r22
     ffc:	9f 83       	std	Y+7, r25	; 0x07
     ffe:	8e 83       	std	Y+6, r24	; 0x06
    1000:	0f c0       	rjmp	.+30     	; 0x1020 <SSD_viddisplyNum+0x31a>
    1002:	80 e9       	ldi	r24, 0x90	; 144
    1004:	91 e0       	ldi	r25, 0x01	; 1
    1006:	9d 83       	std	Y+5, r25	; 0x05
    1008:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    100a:	8c 81       	ldd	r24, Y+4	; 0x04
    100c:	9d 81       	ldd	r25, Y+5	; 0x05
    100e:	01 97       	sbiw	r24, 0x01	; 1
    1010:	f1 f7       	brne	.-4      	; 0x100e <SSD_viddisplyNum+0x308>
    1012:	9d 83       	std	Y+5, r25	; 0x05
    1014:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1016:	8e 81       	ldd	r24, Y+6	; 0x06
    1018:	9f 81       	ldd	r25, Y+7	; 0x07
    101a:	01 97       	sbiw	r24, 0x01	; 1
    101c:	9f 83       	std	Y+7, r25	; 0x07
    101e:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1020:	8e 81       	ldd	r24, Y+6	; 0x06
    1022:	9f 81       	ldd	r25, Y+7	; 0x07
    1024:	00 97       	sbiw	r24, 0x00	; 0
    1026:	69 f7       	brne	.-38     	; 0x1002 <SSD_viddisplyNum+0x2fc>
    1028:	24 c0       	rjmp	.+72     	; 0x1072 <SSD_viddisplyNum+0x36c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    102a:	68 85       	ldd	r22, Y+8	; 0x08
    102c:	79 85       	ldd	r23, Y+9	; 0x09
    102e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1030:	9b 85       	ldd	r25, Y+11	; 0x0b
    1032:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1036:	dc 01       	movw	r26, r24
    1038:	cb 01       	movw	r24, r22
    103a:	9f 83       	std	Y+7, r25	; 0x07
    103c:	8e 83       	std	Y+6, r24	; 0x06
    103e:	8e 81       	ldd	r24, Y+6	; 0x06
    1040:	9f 81       	ldd	r25, Y+7	; 0x07
    1042:	9b 83       	std	Y+3, r25	; 0x03
    1044:	8a 83       	std	Y+2, r24	; 0x02
    1046:	8a 81       	ldd	r24, Y+2	; 0x02
    1048:	9b 81       	ldd	r25, Y+3	; 0x03
    104a:	01 97       	sbiw	r24, 0x01	; 1
    104c:	f1 f7       	brne	.-4      	; 0x104a <SSD_viddisplyNum+0x344>
    104e:	9b 83       	std	Y+3, r25	; 0x03
    1050:	8a 83       	std	Y+2, r24	; 0x02
    1052:	0f c0       	rjmp	.+30     	; 0x1072 <SSD_viddisplyNum+0x36c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1054:	69 89       	ldd	r22, Y+17	; 0x11
    1056:	7a 89       	ldd	r23, Y+18	; 0x12
    1058:	8b 89       	ldd	r24, Y+19	; 0x13
    105a:	9c 89       	ldd	r25, Y+20	; 0x14
    105c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1060:	dc 01       	movw	r26, r24
    1062:	cb 01       	movw	r24, r22
    1064:	88 8b       	std	Y+16, r24	; 0x10
    1066:	88 89       	ldd	r24, Y+16	; 0x10
    1068:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    106a:	89 81       	ldd	r24, Y+1	; 0x01
    106c:	8a 95       	dec	r24
    106e:	f1 f7       	brne	.-4      	; 0x106c <SSD_viddisplyNum+0x366>
    1070:	89 83       	std	Y+1, r24	; 0x01

	_delay_us(500);
}
    1072:	e3 96       	adiw	r28, 0x33	; 51
    1074:	0f b6       	in	r0, 0x3f	; 63
    1076:	f8 94       	cli
    1078:	de bf       	out	0x3e, r29	; 62
    107a:	0f be       	out	0x3f, r0	; 63
    107c:	cd bf       	out	0x3d, r28	; 61
    107e:	cf 91       	pop	r28
    1080:	df 91       	pop	r29
    1082:	08 95       	ret

00001084 <SSD_viddelayWithDisplay_ms>:

void SSD_viddelayWithDisplay_ms(u8 num,u32 delay)
{
    1084:	df 93       	push	r29
    1086:	cf 93       	push	r28
    1088:	cd b7       	in	r28, 0x3d	; 61
    108a:	de b7       	in	r29, 0x3e	; 62
    108c:	29 97       	sbiw	r28, 0x09	; 9
    108e:	0f b6       	in	r0, 0x3f	; 63
    1090:	f8 94       	cli
    1092:	de bf       	out	0x3e, r29	; 62
    1094:	0f be       	out	0x3f, r0	; 63
    1096:	cd bf       	out	0x3d, r28	; 61
    1098:	8d 83       	std	Y+5, r24	; 0x05
    109a:	4e 83       	std	Y+6, r20	; 0x06
    109c:	5f 83       	std	Y+7, r21	; 0x07
    109e:	68 87       	std	Y+8, r22	; 0x08
    10a0:	79 87       	std	Y+9, r23	; 0x09
	u32 loc_iter =0;
    10a2:	19 82       	std	Y+1, r1	; 0x01
    10a4:	1a 82       	std	Y+2, r1	; 0x02
    10a6:	1b 82       	std	Y+3, r1	; 0x03
    10a8:	1c 82       	std	Y+4, r1	; 0x04

	for(loc_iter=0; loc_iter<delay; loc_iter++)
    10aa:	19 82       	std	Y+1, r1	; 0x01
    10ac:	1a 82       	std	Y+2, r1	; 0x02
    10ae:	1b 82       	std	Y+3, r1	; 0x03
    10b0:	1c 82       	std	Y+4, r1	; 0x04
    10b2:	0e c0       	rjmp	.+28     	; 0x10d0 <SSD_viddelayWithDisplay_ms+0x4c>
	{
		SSD_viddisplyNum(num);
    10b4:	8d 81       	ldd	r24, Y+5	; 0x05
    10b6:	0e 94 83 06 	call	0xd06	; 0xd06 <SSD_viddisplyNum>

void SSD_viddelayWithDisplay_ms(u8 num,u32 delay)
{
	u32 loc_iter =0;

	for(loc_iter=0; loc_iter<delay; loc_iter++)
    10ba:	89 81       	ldd	r24, Y+1	; 0x01
    10bc:	9a 81       	ldd	r25, Y+2	; 0x02
    10be:	ab 81       	ldd	r26, Y+3	; 0x03
    10c0:	bc 81       	ldd	r27, Y+4	; 0x04
    10c2:	01 96       	adiw	r24, 0x01	; 1
    10c4:	a1 1d       	adc	r26, r1
    10c6:	b1 1d       	adc	r27, r1
    10c8:	89 83       	std	Y+1, r24	; 0x01
    10ca:	9a 83       	std	Y+2, r25	; 0x02
    10cc:	ab 83       	std	Y+3, r26	; 0x03
    10ce:	bc 83       	std	Y+4, r27	; 0x04
    10d0:	29 81       	ldd	r18, Y+1	; 0x01
    10d2:	3a 81       	ldd	r19, Y+2	; 0x02
    10d4:	4b 81       	ldd	r20, Y+3	; 0x03
    10d6:	5c 81       	ldd	r21, Y+4	; 0x04
    10d8:	8e 81       	ldd	r24, Y+6	; 0x06
    10da:	9f 81       	ldd	r25, Y+7	; 0x07
    10dc:	a8 85       	ldd	r26, Y+8	; 0x08
    10de:	b9 85       	ldd	r27, Y+9	; 0x09
    10e0:	28 17       	cp	r18, r24
    10e2:	39 07       	cpc	r19, r25
    10e4:	4a 07       	cpc	r20, r26
    10e6:	5b 07       	cpc	r21, r27
    10e8:	28 f3       	brcs	.-54     	; 0x10b4 <SSD_viddelayWithDisplay_ms+0x30>
	{
		SSD_viddisplyNum(num);
	}
}
    10ea:	29 96       	adiw	r28, 0x09	; 9
    10ec:	0f b6       	in	r0, 0x3f	; 63
    10ee:	f8 94       	cli
    10f0:	de bf       	out	0x3e, r29	; 62
    10f2:	0f be       	out	0x3f, r0	; 63
    10f4:	cd bf       	out	0x3d, r28	; 61
    10f6:	cf 91       	pop	r28
    10f8:	df 91       	pop	r29
    10fa:	08 95       	ret

000010fc <Led_vidinit>:

#include "Dio.h"
#include "Led.h"

void Led_vidinit(void)
{
    10fc:	df 93       	push	r29
    10fe:	cf 93       	push	r28
    1100:	cd b7       	in	r28, 0x3d	; 61
    1102:	de b7       	in	r29, 0x3e	; 62
	Dio_vidconfigChanel(DIO_PORTC, DIO_PIN2,DIO_OUTPUT);
    1104:	82 e0       	ldi	r24, 0x02	; 2
    1106:	62 e0       	ldi	r22, 0x02	; 2
    1108:	41 e0       	ldi	r20, 0x01	; 1
    110a:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTC, DIO_PIN7,DIO_OUTPUT);
    110e:	82 e0       	ldi	r24, 0x02	; 2
    1110:	67 e0       	ldi	r22, 0x07	; 7
    1112:	41 e0       	ldi	r20, 0x01	; 1
    1114:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTD, DIO_PIN3,DIO_OUTPUT);
    1118:	83 e0       	ldi	r24, 0x03	; 3
    111a:	63 e0       	ldi	r22, 0x03	; 3
    111c:	41 e0       	ldi	r20, 0x01	; 1
    111e:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <Dio_vidconfigChanel>
}
    1122:	cf 91       	pop	r28
    1124:	df 91       	pop	r29
    1126:	08 95       	ret

00001128 <Led_vidledOn>:

void Led_vidledOn(led_ledId_t ledId)
{
    1128:	df 93       	push	r29
    112a:	cf 93       	push	r28
    112c:	00 d0       	rcall	.+0      	; 0x112e <Led_vidledOn+0x6>
    112e:	0f 92       	push	r0
    1130:	cd b7       	in	r28, 0x3d	; 61
    1132:	de b7       	in	r29, 0x3e	; 62
    1134:	89 83       	std	Y+1, r24	; 0x01
	switch (ledId)
    1136:	89 81       	ldd	r24, Y+1	; 0x01
    1138:	28 2f       	mov	r18, r24
    113a:	30 e0       	ldi	r19, 0x00	; 0
    113c:	3b 83       	std	Y+3, r19	; 0x03
    113e:	2a 83       	std	Y+2, r18	; 0x02
    1140:	8a 81       	ldd	r24, Y+2	; 0x02
    1142:	9b 81       	ldd	r25, Y+3	; 0x03
    1144:	81 30       	cpi	r24, 0x01	; 1
    1146:	91 05       	cpc	r25, r1
    1148:	79 f0       	breq	.+30     	; 0x1168 <Led_vidledOn+0x40>
    114a:	2a 81       	ldd	r18, Y+2	; 0x02
    114c:	3b 81       	ldd	r19, Y+3	; 0x03
    114e:	22 30       	cpi	r18, 0x02	; 2
    1150:	31 05       	cpc	r19, r1
    1152:	81 f0       	breq	.+32     	; 0x1174 <Led_vidledOn+0x4c>
    1154:	8a 81       	ldd	r24, Y+2	; 0x02
    1156:	9b 81       	ldd	r25, Y+3	; 0x03
    1158:	00 97       	sbiw	r24, 0x00	; 0
    115a:	89 f4       	brne	.+34     	; 0x117e <Led_vidledOn+0x56>
	{
	case LED0:
		Dio_vidwriteChanel(DIO_PORTC, DIO_PIN2, DIO_HIGH);
    115c:	82 e0       	ldi	r24, 0x02	; 2
    115e:	62 e0       	ldi	r22, 0x02	; 2
    1160:	41 e0       	ldi	r20, 0x01	; 1
    1162:	0e 94 10 10 	call	0x2020	; 0x2020 <Dio_vidwriteChanel>
    1166:	0b c0       	rjmp	.+22     	; 0x117e <Led_vidledOn+0x56>
		break;

	case LED1:
		Dio_vidwriteChanel(DIO_PORTC, DIO_PIN7, DIO_HIGH);
    1168:	82 e0       	ldi	r24, 0x02	; 2
    116a:	67 e0       	ldi	r22, 0x07	; 7
    116c:	41 e0       	ldi	r20, 0x01	; 1
    116e:	0e 94 10 10 	call	0x2020	; 0x2020 <Dio_vidwriteChanel>
    1172:	05 c0       	rjmp	.+10     	; 0x117e <Led_vidledOn+0x56>
		break;

	case LED2:
		Dio_vidwriteChanel(DIO_PORTD, DIO_PIN3, DIO_HIGH);
    1174:	83 e0       	ldi	r24, 0x03	; 3
    1176:	63 e0       	ldi	r22, 0x03	; 3
    1178:	41 e0       	ldi	r20, 0x01	; 1
    117a:	0e 94 10 10 	call	0x2020	; 0x2020 <Dio_vidwriteChanel>
		break;
	}
}
    117e:	0f 90       	pop	r0
    1180:	0f 90       	pop	r0
    1182:	0f 90       	pop	r0
    1184:	cf 91       	pop	r28
    1186:	df 91       	pop	r29
    1188:	08 95       	ret

0000118a <Led_vidledOff>:

void Led_vidledOff(led_ledId_t ledId)
{
    118a:	df 93       	push	r29
    118c:	cf 93       	push	r28
    118e:	00 d0       	rcall	.+0      	; 0x1190 <Led_vidledOff+0x6>
    1190:	0f 92       	push	r0
    1192:	cd b7       	in	r28, 0x3d	; 61
    1194:	de b7       	in	r29, 0x3e	; 62
    1196:	89 83       	std	Y+1, r24	; 0x01
	switch (ledId)
    1198:	89 81       	ldd	r24, Y+1	; 0x01
    119a:	28 2f       	mov	r18, r24
    119c:	30 e0       	ldi	r19, 0x00	; 0
    119e:	3b 83       	std	Y+3, r19	; 0x03
    11a0:	2a 83       	std	Y+2, r18	; 0x02
    11a2:	8a 81       	ldd	r24, Y+2	; 0x02
    11a4:	9b 81       	ldd	r25, Y+3	; 0x03
    11a6:	81 30       	cpi	r24, 0x01	; 1
    11a8:	91 05       	cpc	r25, r1
    11aa:	79 f0       	breq	.+30     	; 0x11ca <Led_vidledOff+0x40>
    11ac:	2a 81       	ldd	r18, Y+2	; 0x02
    11ae:	3b 81       	ldd	r19, Y+3	; 0x03
    11b0:	22 30       	cpi	r18, 0x02	; 2
    11b2:	31 05       	cpc	r19, r1
    11b4:	81 f0       	breq	.+32     	; 0x11d6 <Led_vidledOff+0x4c>
    11b6:	8a 81       	ldd	r24, Y+2	; 0x02
    11b8:	9b 81       	ldd	r25, Y+3	; 0x03
    11ba:	00 97       	sbiw	r24, 0x00	; 0
    11bc:	89 f4       	brne	.+34     	; 0x11e0 <Led_vidledOff+0x56>
	{
	case LED0:
		Dio_vidwriteChanel(DIO_PORTC, DIO_PIN2, DIO_LOW);
    11be:	82 e0       	ldi	r24, 0x02	; 2
    11c0:	62 e0       	ldi	r22, 0x02	; 2
    11c2:	40 e0       	ldi	r20, 0x00	; 0
    11c4:	0e 94 10 10 	call	0x2020	; 0x2020 <Dio_vidwriteChanel>
    11c8:	0b c0       	rjmp	.+22     	; 0x11e0 <Led_vidledOff+0x56>
		break;

	case LED1:
		Dio_vidwriteChanel(DIO_PORTC, DIO_PIN7, DIO_LOW);
    11ca:	82 e0       	ldi	r24, 0x02	; 2
    11cc:	67 e0       	ldi	r22, 0x07	; 7
    11ce:	40 e0       	ldi	r20, 0x00	; 0
    11d0:	0e 94 10 10 	call	0x2020	; 0x2020 <Dio_vidwriteChanel>
    11d4:	05 c0       	rjmp	.+10     	; 0x11e0 <Led_vidledOff+0x56>
		break;

	case LED2:
		Dio_vidwriteChanel(DIO_PORTD, DIO_PIN3, DIO_LOW);
    11d6:	83 e0       	ldi	r24, 0x03	; 3
    11d8:	63 e0       	ldi	r22, 0x03	; 3
    11da:	40 e0       	ldi	r20, 0x00	; 0
    11dc:	0e 94 10 10 	call	0x2020	; 0x2020 <Dio_vidwriteChanel>
		break;
	}
}
    11e0:	0f 90       	pop	r0
    11e2:	0f 90       	pop	r0
    11e4:	0f 90       	pop	r0
    11e6:	cf 91       	pop	r28
    11e8:	df 91       	pop	r29
    11ea:	08 95       	ret

000011ec <Led_vidledToggle>:
void Led_vidledToggle(led_ledId_t ledId)
{
    11ec:	df 93       	push	r29
    11ee:	cf 93       	push	r28
    11f0:	00 d0       	rcall	.+0      	; 0x11f2 <Led_vidledToggle+0x6>
    11f2:	0f 92       	push	r0
    11f4:	cd b7       	in	r28, 0x3d	; 61
    11f6:	de b7       	in	r29, 0x3e	; 62
    11f8:	89 83       	std	Y+1, r24	; 0x01
	switch (ledId)
    11fa:	89 81       	ldd	r24, Y+1	; 0x01
    11fc:	28 2f       	mov	r18, r24
    11fe:	30 e0       	ldi	r19, 0x00	; 0
    1200:	3b 83       	std	Y+3, r19	; 0x03
    1202:	2a 83       	std	Y+2, r18	; 0x02
    1204:	8a 81       	ldd	r24, Y+2	; 0x02
    1206:	9b 81       	ldd	r25, Y+3	; 0x03
    1208:	81 30       	cpi	r24, 0x01	; 1
    120a:	91 05       	cpc	r25, r1
    120c:	71 f0       	breq	.+28     	; 0x122a <Led_vidledToggle+0x3e>
    120e:	2a 81       	ldd	r18, Y+2	; 0x02
    1210:	3b 81       	ldd	r19, Y+3	; 0x03
    1212:	22 30       	cpi	r18, 0x02	; 2
    1214:	31 05       	cpc	r19, r1
    1216:	71 f0       	breq	.+28     	; 0x1234 <Led_vidledToggle+0x48>
    1218:	8a 81       	ldd	r24, Y+2	; 0x02
    121a:	9b 81       	ldd	r25, Y+3	; 0x03
    121c:	00 97       	sbiw	r24, 0x00	; 0
    121e:	71 f4       	brne	.+28     	; 0x123c <Led_vidledToggle+0x50>
	{
	case LED0:
		Dio_vidflipChanel(DIO_PORTC, DIO_PIN2);
    1220:	82 e0       	ldi	r24, 0x02	; 2
    1222:	62 e0       	ldi	r22, 0x02	; 2
    1224:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <Dio_vidflipChanel>
    1228:	09 c0       	rjmp	.+18     	; 0x123c <Led_vidledToggle+0x50>
		break;

	case LED1:
		Dio_vidflipChanel(DIO_PORTC, DIO_PIN7);
    122a:	82 e0       	ldi	r24, 0x02	; 2
    122c:	67 e0       	ldi	r22, 0x07	; 7
    122e:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <Dio_vidflipChanel>
    1232:	04 c0       	rjmp	.+8      	; 0x123c <Led_vidledToggle+0x50>
		break;

	case LED2:
		Dio_vidflipChanel(DIO_PORTD, DIO_PIN3);
    1234:	83 e0       	ldi	r24, 0x03	; 3
    1236:	63 e0       	ldi	r22, 0x03	; 3
    1238:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <Dio_vidflipChanel>
		break;
	}
}
    123c:	0f 90       	pop	r0
    123e:	0f 90       	pop	r0
    1240:	0f 90       	pop	r0
    1242:	cf 91       	pop	r28
    1244:	df 91       	pop	r29
    1246:	08 95       	ret

00001248 <Lcd_vidinit>:
#include "util/delay.h"
#include <stdio.h>


void Lcd_vidinit(void)
{
    1248:	df 93       	push	r29
    124a:	cf 93       	push	r28
    124c:	cd b7       	in	r28, 0x3d	; 61
    124e:	de b7       	in	r29, 0x3e	; 62
    1250:	e4 97       	sbiw	r28, 0x34	; 52
    1252:	0f b6       	in	r0, 0x3f	; 63
    1254:	f8 94       	cli
    1256:	de bf       	out	0x3e, r29	; 62
    1258:	0f be       	out	0x3f, r0	; 63
    125a:	cd bf       	out	0x3d, r28	; 61
	/*	configure control pins as output	*/
	Dio_vidconfigChanel(DIO_PORTB, DIO_PIN1, DIO_OUTPUT);
    125c:	81 e0       	ldi	r24, 0x01	; 1
    125e:	61 e0       	ldi	r22, 0x01	; 1
    1260:	41 e0       	ldi	r20, 0x01	; 1
    1262:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTB, DIO_PIN2, DIO_OUTPUT);
    1266:	81 e0       	ldi	r24, 0x01	; 1
    1268:	62 e0       	ldi	r22, 0x02	; 2
    126a:	41 e0       	ldi	r20, 0x01	; 1
    126c:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTB, DIO_PIN3, DIO_OUTPUT);
    1270:	81 e0       	ldi	r24, 0x01	; 1
    1272:	63 e0       	ldi	r22, 0x03	; 3
    1274:	41 e0       	ldi	r20, 0x01	; 1
    1276:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <Dio_vidconfigChanel>

	/*	configure data pins as output	*/
	Dio_vidconfigChanel(DIO_PORTA, DIO_PIN4, DIO_OUTPUT);
    127a:	80 e0       	ldi	r24, 0x00	; 0
    127c:	64 e0       	ldi	r22, 0x04	; 4
    127e:	41 e0       	ldi	r20, 0x01	; 1
    1280:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTA, DIO_PIN5, DIO_OUTPUT);
    1284:	80 e0       	ldi	r24, 0x00	; 0
    1286:	65 e0       	ldi	r22, 0x05	; 5
    1288:	41 e0       	ldi	r20, 0x01	; 1
    128a:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTA, DIO_PIN6, DIO_OUTPUT);
    128e:	80 e0       	ldi	r24, 0x00	; 0
    1290:	66 e0       	ldi	r22, 0x06	; 6
    1292:	41 e0       	ldi	r20, 0x01	; 1
    1294:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTA, DIO_PIN7, DIO_OUTPUT);
    1298:	80 e0       	ldi	r24, 0x00	; 0
    129a:	67 e0       	ldi	r22, 0x07	; 7
    129c:	41 e0       	ldi	r20, 0x01	; 1
    129e:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <Dio_vidconfigChanel>

	Dio_vidwriteChanel(DIO_PORTB, DIO_PIN2, DIO_LOW);
    12a2:	81 e0       	ldi	r24, 0x01	; 1
    12a4:	62 e0       	ldi	r22, 0x02	; 2
    12a6:	40 e0       	ldi	r20, 0x00	; 0
    12a8:	0e 94 10 10 	call	0x2020	; 0x2020 <Dio_vidwriteChanel>
    12ac:	80 e0       	ldi	r24, 0x00	; 0
    12ae:	90 e0       	ldi	r25, 0x00	; 0
    12b0:	a0 e7       	ldi	r26, 0x70	; 112
    12b2:	b1 e4       	ldi	r27, 0x41	; 65
    12b4:	89 ab       	std	Y+49, r24	; 0x31
    12b6:	9a ab       	std	Y+50, r25	; 0x32
    12b8:	ab ab       	std	Y+51, r26	; 0x33
    12ba:	bc ab       	std	Y+52, r27	; 0x34
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12bc:	69 a9       	ldd	r22, Y+49	; 0x31
    12be:	7a a9       	ldd	r23, Y+50	; 0x32
    12c0:	8b a9       	ldd	r24, Y+51	; 0x33
    12c2:	9c a9       	ldd	r25, Y+52	; 0x34
    12c4:	20 e0       	ldi	r18, 0x00	; 0
    12c6:	30 e0       	ldi	r19, 0x00	; 0
    12c8:	4a e7       	ldi	r20, 0x7A	; 122
    12ca:	55 e4       	ldi	r21, 0x45	; 69
    12cc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    12d0:	dc 01       	movw	r26, r24
    12d2:	cb 01       	movw	r24, r22
    12d4:	8d a7       	std	Y+45, r24	; 0x2d
    12d6:	9e a7       	std	Y+46, r25	; 0x2e
    12d8:	af a7       	std	Y+47, r26	; 0x2f
    12da:	b8 ab       	std	Y+48, r27	; 0x30
	if (__tmp < 1.0)
    12dc:	6d a5       	ldd	r22, Y+45	; 0x2d
    12de:	7e a5       	ldd	r23, Y+46	; 0x2e
    12e0:	8f a5       	ldd	r24, Y+47	; 0x2f
    12e2:	98 a9       	ldd	r25, Y+48	; 0x30
    12e4:	20 e0       	ldi	r18, 0x00	; 0
    12e6:	30 e0       	ldi	r19, 0x00	; 0
    12e8:	40 e8       	ldi	r20, 0x80	; 128
    12ea:	5f e3       	ldi	r21, 0x3F	; 63
    12ec:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    12f0:	88 23       	and	r24, r24
    12f2:	2c f4       	brge	.+10     	; 0x12fe <Lcd_vidinit+0xb6>
		__ticks = 1;
    12f4:	81 e0       	ldi	r24, 0x01	; 1
    12f6:	90 e0       	ldi	r25, 0x00	; 0
    12f8:	9c a7       	std	Y+44, r25	; 0x2c
    12fa:	8b a7       	std	Y+43, r24	; 0x2b
    12fc:	3f c0       	rjmp	.+126    	; 0x137c <Lcd_vidinit+0x134>
	else if (__tmp > 65535)
    12fe:	6d a5       	ldd	r22, Y+45	; 0x2d
    1300:	7e a5       	ldd	r23, Y+46	; 0x2e
    1302:	8f a5       	ldd	r24, Y+47	; 0x2f
    1304:	98 a9       	ldd	r25, Y+48	; 0x30
    1306:	20 e0       	ldi	r18, 0x00	; 0
    1308:	3f ef       	ldi	r19, 0xFF	; 255
    130a:	4f e7       	ldi	r20, 0x7F	; 127
    130c:	57 e4       	ldi	r21, 0x47	; 71
    130e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1312:	18 16       	cp	r1, r24
    1314:	4c f5       	brge	.+82     	; 0x1368 <Lcd_vidinit+0x120>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1316:	69 a9       	ldd	r22, Y+49	; 0x31
    1318:	7a a9       	ldd	r23, Y+50	; 0x32
    131a:	8b a9       	ldd	r24, Y+51	; 0x33
    131c:	9c a9       	ldd	r25, Y+52	; 0x34
    131e:	20 e0       	ldi	r18, 0x00	; 0
    1320:	30 e0       	ldi	r19, 0x00	; 0
    1322:	40 e2       	ldi	r20, 0x20	; 32
    1324:	51 e4       	ldi	r21, 0x41	; 65
    1326:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    132a:	dc 01       	movw	r26, r24
    132c:	cb 01       	movw	r24, r22
    132e:	bc 01       	movw	r22, r24
    1330:	cd 01       	movw	r24, r26
    1332:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1336:	dc 01       	movw	r26, r24
    1338:	cb 01       	movw	r24, r22
    133a:	9c a7       	std	Y+44, r25	; 0x2c
    133c:	8b a7       	std	Y+43, r24	; 0x2b
    133e:	0f c0       	rjmp	.+30     	; 0x135e <Lcd_vidinit+0x116>
    1340:	80 e9       	ldi	r24, 0x90	; 144
    1342:	91 e0       	ldi	r25, 0x01	; 1
    1344:	9a a7       	std	Y+42, r25	; 0x2a
    1346:	89 a7       	std	Y+41, r24	; 0x29
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1348:	89 a5       	ldd	r24, Y+41	; 0x29
    134a:	9a a5       	ldd	r25, Y+42	; 0x2a
    134c:	01 97       	sbiw	r24, 0x01	; 1
    134e:	f1 f7       	brne	.-4      	; 0x134c <Lcd_vidinit+0x104>
    1350:	9a a7       	std	Y+42, r25	; 0x2a
    1352:	89 a7       	std	Y+41, r24	; 0x29
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1354:	8b a5       	ldd	r24, Y+43	; 0x2b
    1356:	9c a5       	ldd	r25, Y+44	; 0x2c
    1358:	01 97       	sbiw	r24, 0x01	; 1
    135a:	9c a7       	std	Y+44, r25	; 0x2c
    135c:	8b a7       	std	Y+43, r24	; 0x2b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    135e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1360:	9c a5       	ldd	r25, Y+44	; 0x2c
    1362:	00 97       	sbiw	r24, 0x00	; 0
    1364:	69 f7       	brne	.-38     	; 0x1340 <Lcd_vidinit+0xf8>
    1366:	14 c0       	rjmp	.+40     	; 0x1390 <Lcd_vidinit+0x148>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1368:	6d a5       	ldd	r22, Y+45	; 0x2d
    136a:	7e a5       	ldd	r23, Y+46	; 0x2e
    136c:	8f a5       	ldd	r24, Y+47	; 0x2f
    136e:	98 a9       	ldd	r25, Y+48	; 0x30
    1370:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1374:	dc 01       	movw	r26, r24
    1376:	cb 01       	movw	r24, r22
    1378:	9c a7       	std	Y+44, r25	; 0x2c
    137a:	8b a7       	std	Y+43, r24	; 0x2b
    137c:	8b a5       	ldd	r24, Y+43	; 0x2b
    137e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1380:	98 a7       	std	Y+40, r25	; 0x28
    1382:	8f a3       	std	Y+39, r24	; 0x27
    1384:	8f a1       	ldd	r24, Y+39	; 0x27
    1386:	98 a5       	ldd	r25, Y+40	; 0x28
    1388:	01 97       	sbiw	r24, 0x01	; 1
    138a:	f1 f7       	brne	.-4      	; 0x1388 <Lcd_vidinit+0x140>
    138c:	98 a7       	std	Y+40, r25	; 0x28
    138e:	8f a3       	std	Y+39, r24	; 0x27

	_delay_ms(15);

	Lcd_vidCmd(0x03);
    1390:	83 e0       	ldi	r24, 0x03	; 3
    1392:	0e 94 84 0c 	call	0x1908	; 0x1908 <Lcd_vidCmd>
    1396:	80 e0       	ldi	r24, 0x00	; 0
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	a0 ea       	ldi	r26, 0xA0	; 160
    139c:	b0 e4       	ldi	r27, 0x40	; 64
    139e:	8b a3       	std	Y+35, r24	; 0x23
    13a0:	9c a3       	std	Y+36, r25	; 0x24
    13a2:	ad a3       	std	Y+37, r26	; 0x25
    13a4:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13a6:	6b a1       	ldd	r22, Y+35	; 0x23
    13a8:	7c a1       	ldd	r23, Y+36	; 0x24
    13aa:	8d a1       	ldd	r24, Y+37	; 0x25
    13ac:	9e a1       	ldd	r25, Y+38	; 0x26
    13ae:	20 e0       	ldi	r18, 0x00	; 0
    13b0:	30 e0       	ldi	r19, 0x00	; 0
    13b2:	4a e7       	ldi	r20, 0x7A	; 122
    13b4:	55 e4       	ldi	r21, 0x45	; 69
    13b6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    13ba:	dc 01       	movw	r26, r24
    13bc:	cb 01       	movw	r24, r22
    13be:	8f 8f       	std	Y+31, r24	; 0x1f
    13c0:	98 a3       	std	Y+32, r25	; 0x20
    13c2:	a9 a3       	std	Y+33, r26	; 0x21
    13c4:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    13c6:	6f 8d       	ldd	r22, Y+31	; 0x1f
    13c8:	78 a1       	ldd	r23, Y+32	; 0x20
    13ca:	89 a1       	ldd	r24, Y+33	; 0x21
    13cc:	9a a1       	ldd	r25, Y+34	; 0x22
    13ce:	20 e0       	ldi	r18, 0x00	; 0
    13d0:	30 e0       	ldi	r19, 0x00	; 0
    13d2:	40 e8       	ldi	r20, 0x80	; 128
    13d4:	5f e3       	ldi	r21, 0x3F	; 63
    13d6:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    13da:	88 23       	and	r24, r24
    13dc:	2c f4       	brge	.+10     	; 0x13e8 <Lcd_vidinit+0x1a0>
		__ticks = 1;
    13de:	81 e0       	ldi	r24, 0x01	; 1
    13e0:	90 e0       	ldi	r25, 0x00	; 0
    13e2:	9e 8f       	std	Y+30, r25	; 0x1e
    13e4:	8d 8f       	std	Y+29, r24	; 0x1d
    13e6:	3f c0       	rjmp	.+126    	; 0x1466 <Lcd_vidinit+0x21e>
	else if (__tmp > 65535)
    13e8:	6f 8d       	ldd	r22, Y+31	; 0x1f
    13ea:	78 a1       	ldd	r23, Y+32	; 0x20
    13ec:	89 a1       	ldd	r24, Y+33	; 0x21
    13ee:	9a a1       	ldd	r25, Y+34	; 0x22
    13f0:	20 e0       	ldi	r18, 0x00	; 0
    13f2:	3f ef       	ldi	r19, 0xFF	; 255
    13f4:	4f e7       	ldi	r20, 0x7F	; 127
    13f6:	57 e4       	ldi	r21, 0x47	; 71
    13f8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    13fc:	18 16       	cp	r1, r24
    13fe:	4c f5       	brge	.+82     	; 0x1452 <Lcd_vidinit+0x20a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1400:	6b a1       	ldd	r22, Y+35	; 0x23
    1402:	7c a1       	ldd	r23, Y+36	; 0x24
    1404:	8d a1       	ldd	r24, Y+37	; 0x25
    1406:	9e a1       	ldd	r25, Y+38	; 0x26
    1408:	20 e0       	ldi	r18, 0x00	; 0
    140a:	30 e0       	ldi	r19, 0x00	; 0
    140c:	40 e2       	ldi	r20, 0x20	; 32
    140e:	51 e4       	ldi	r21, 0x41	; 65
    1410:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1414:	dc 01       	movw	r26, r24
    1416:	cb 01       	movw	r24, r22
    1418:	bc 01       	movw	r22, r24
    141a:	cd 01       	movw	r24, r26
    141c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1420:	dc 01       	movw	r26, r24
    1422:	cb 01       	movw	r24, r22
    1424:	9e 8f       	std	Y+30, r25	; 0x1e
    1426:	8d 8f       	std	Y+29, r24	; 0x1d
    1428:	0f c0       	rjmp	.+30     	; 0x1448 <Lcd_vidinit+0x200>
    142a:	80 e9       	ldi	r24, 0x90	; 144
    142c:	91 e0       	ldi	r25, 0x01	; 1
    142e:	9c 8f       	std	Y+28, r25	; 0x1c
    1430:	8b 8f       	std	Y+27, r24	; 0x1b
    1432:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1434:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1436:	01 97       	sbiw	r24, 0x01	; 1
    1438:	f1 f7       	brne	.-4      	; 0x1436 <Lcd_vidinit+0x1ee>
    143a:	9c 8f       	std	Y+28, r25	; 0x1c
    143c:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    143e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1440:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1442:	01 97       	sbiw	r24, 0x01	; 1
    1444:	9e 8f       	std	Y+30, r25	; 0x1e
    1446:	8d 8f       	std	Y+29, r24	; 0x1d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1448:	8d 8d       	ldd	r24, Y+29	; 0x1d
    144a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    144c:	00 97       	sbiw	r24, 0x00	; 0
    144e:	69 f7       	brne	.-38     	; 0x142a <Lcd_vidinit+0x1e2>
    1450:	14 c0       	rjmp	.+40     	; 0x147a <Lcd_vidinit+0x232>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1452:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1454:	78 a1       	ldd	r23, Y+32	; 0x20
    1456:	89 a1       	ldd	r24, Y+33	; 0x21
    1458:	9a a1       	ldd	r25, Y+34	; 0x22
    145a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    145e:	dc 01       	movw	r26, r24
    1460:	cb 01       	movw	r24, r22
    1462:	9e 8f       	std	Y+30, r25	; 0x1e
    1464:	8d 8f       	std	Y+29, r24	; 0x1d
    1466:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1468:	9e 8d       	ldd	r25, Y+30	; 0x1e
    146a:	9a 8f       	std	Y+26, r25	; 0x1a
    146c:	89 8f       	std	Y+25, r24	; 0x19
    146e:	89 8d       	ldd	r24, Y+25	; 0x19
    1470:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1472:	01 97       	sbiw	r24, 0x01	; 1
    1474:	f1 f7       	brne	.-4      	; 0x1472 <Lcd_vidinit+0x22a>
    1476:	9a 8f       	std	Y+26, r25	; 0x1a
    1478:	89 8f       	std	Y+25, r24	; 0x19
	_delay_ms(5);
	Lcd_vidCmd(0x03);
    147a:	83 e0       	ldi	r24, 0x03	; 3
    147c:	0e 94 84 0c 	call	0x1908	; 0x1908 <Lcd_vidCmd>
    1480:	80 e0       	ldi	r24, 0x00	; 0
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	a8 ec       	ldi	r26, 0xC8	; 200
    1486:	b2 e4       	ldi	r27, 0x42	; 66
    1488:	8d 8b       	std	Y+21, r24	; 0x15
    148a:	9e 8b       	std	Y+22, r25	; 0x16
    148c:	af 8b       	std	Y+23, r26	; 0x17
    148e:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1490:	6d 89       	ldd	r22, Y+21	; 0x15
    1492:	7e 89       	ldd	r23, Y+22	; 0x16
    1494:	8f 89       	ldd	r24, Y+23	; 0x17
    1496:	98 8d       	ldd	r25, Y+24	; 0x18
    1498:	2b ea       	ldi	r18, 0xAB	; 171
    149a:	3a ea       	ldi	r19, 0xAA	; 170
    149c:	4a ea       	ldi	r20, 0xAA	; 170
    149e:	50 e4       	ldi	r21, 0x40	; 64
    14a0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    14a4:	dc 01       	movw	r26, r24
    14a6:	cb 01       	movw	r24, r22
    14a8:	89 8b       	std	Y+17, r24	; 0x11
    14aa:	9a 8b       	std	Y+18, r25	; 0x12
    14ac:	ab 8b       	std	Y+19, r26	; 0x13
    14ae:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    14b0:	69 89       	ldd	r22, Y+17	; 0x11
    14b2:	7a 89       	ldd	r23, Y+18	; 0x12
    14b4:	8b 89       	ldd	r24, Y+19	; 0x13
    14b6:	9c 89       	ldd	r25, Y+20	; 0x14
    14b8:	20 e0       	ldi	r18, 0x00	; 0
    14ba:	30 e0       	ldi	r19, 0x00	; 0
    14bc:	40 e8       	ldi	r20, 0x80	; 128
    14be:	5f e3       	ldi	r21, 0x3F	; 63
    14c0:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    14c4:	88 23       	and	r24, r24
    14c6:	1c f4       	brge	.+6      	; 0x14ce <Lcd_vidinit+0x286>
		__ticks = 1;
    14c8:	81 e0       	ldi	r24, 0x01	; 1
    14ca:	88 8b       	std	Y+16, r24	; 0x10
    14cc:	91 c0       	rjmp	.+290    	; 0x15f0 <Lcd_vidinit+0x3a8>
	else if (__tmp > 255)
    14ce:	69 89       	ldd	r22, Y+17	; 0x11
    14d0:	7a 89       	ldd	r23, Y+18	; 0x12
    14d2:	8b 89       	ldd	r24, Y+19	; 0x13
    14d4:	9c 89       	ldd	r25, Y+20	; 0x14
    14d6:	20 e0       	ldi	r18, 0x00	; 0
    14d8:	30 e0       	ldi	r19, 0x00	; 0
    14da:	4f e7       	ldi	r20, 0x7F	; 127
    14dc:	53 e4       	ldi	r21, 0x43	; 67
    14de:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    14e2:	18 16       	cp	r1, r24
    14e4:	0c f0       	brlt	.+2      	; 0x14e8 <Lcd_vidinit+0x2a0>
    14e6:	7b c0       	rjmp	.+246    	; 0x15de <Lcd_vidinit+0x396>
	{
		_delay_ms(__us / 1000.0);
    14e8:	6d 89       	ldd	r22, Y+21	; 0x15
    14ea:	7e 89       	ldd	r23, Y+22	; 0x16
    14ec:	8f 89       	ldd	r24, Y+23	; 0x17
    14ee:	98 8d       	ldd	r25, Y+24	; 0x18
    14f0:	20 e0       	ldi	r18, 0x00	; 0
    14f2:	30 e0       	ldi	r19, 0x00	; 0
    14f4:	4a e7       	ldi	r20, 0x7A	; 122
    14f6:	54 e4       	ldi	r21, 0x44	; 68
    14f8:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    14fc:	dc 01       	movw	r26, r24
    14fe:	cb 01       	movw	r24, r22
    1500:	8c 87       	std	Y+12, r24	; 0x0c
    1502:	9d 87       	std	Y+13, r25	; 0x0d
    1504:	ae 87       	std	Y+14, r26	; 0x0e
    1506:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1508:	6c 85       	ldd	r22, Y+12	; 0x0c
    150a:	7d 85       	ldd	r23, Y+13	; 0x0d
    150c:	8e 85       	ldd	r24, Y+14	; 0x0e
    150e:	9f 85       	ldd	r25, Y+15	; 0x0f
    1510:	20 e0       	ldi	r18, 0x00	; 0
    1512:	30 e0       	ldi	r19, 0x00	; 0
    1514:	4a e7       	ldi	r20, 0x7A	; 122
    1516:	55 e4       	ldi	r21, 0x45	; 69
    1518:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    151c:	dc 01       	movw	r26, r24
    151e:	cb 01       	movw	r24, r22
    1520:	88 87       	std	Y+8, r24	; 0x08
    1522:	99 87       	std	Y+9, r25	; 0x09
    1524:	aa 87       	std	Y+10, r26	; 0x0a
    1526:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1528:	68 85       	ldd	r22, Y+8	; 0x08
    152a:	79 85       	ldd	r23, Y+9	; 0x09
    152c:	8a 85       	ldd	r24, Y+10	; 0x0a
    152e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1530:	20 e0       	ldi	r18, 0x00	; 0
    1532:	30 e0       	ldi	r19, 0x00	; 0
    1534:	40 e8       	ldi	r20, 0x80	; 128
    1536:	5f e3       	ldi	r21, 0x3F	; 63
    1538:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    153c:	88 23       	and	r24, r24
    153e:	2c f4       	brge	.+10     	; 0x154a <Lcd_vidinit+0x302>
		__ticks = 1;
    1540:	81 e0       	ldi	r24, 0x01	; 1
    1542:	90 e0       	ldi	r25, 0x00	; 0
    1544:	9f 83       	std	Y+7, r25	; 0x07
    1546:	8e 83       	std	Y+6, r24	; 0x06
    1548:	3f c0       	rjmp	.+126    	; 0x15c8 <Lcd_vidinit+0x380>
	else if (__tmp > 65535)
    154a:	68 85       	ldd	r22, Y+8	; 0x08
    154c:	79 85       	ldd	r23, Y+9	; 0x09
    154e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1550:	9b 85       	ldd	r25, Y+11	; 0x0b
    1552:	20 e0       	ldi	r18, 0x00	; 0
    1554:	3f ef       	ldi	r19, 0xFF	; 255
    1556:	4f e7       	ldi	r20, 0x7F	; 127
    1558:	57 e4       	ldi	r21, 0x47	; 71
    155a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    155e:	18 16       	cp	r1, r24
    1560:	4c f5       	brge	.+82     	; 0x15b4 <Lcd_vidinit+0x36c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1562:	6c 85       	ldd	r22, Y+12	; 0x0c
    1564:	7d 85       	ldd	r23, Y+13	; 0x0d
    1566:	8e 85       	ldd	r24, Y+14	; 0x0e
    1568:	9f 85       	ldd	r25, Y+15	; 0x0f
    156a:	20 e0       	ldi	r18, 0x00	; 0
    156c:	30 e0       	ldi	r19, 0x00	; 0
    156e:	40 e2       	ldi	r20, 0x20	; 32
    1570:	51 e4       	ldi	r21, 0x41	; 65
    1572:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1576:	dc 01       	movw	r26, r24
    1578:	cb 01       	movw	r24, r22
    157a:	bc 01       	movw	r22, r24
    157c:	cd 01       	movw	r24, r26
    157e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1582:	dc 01       	movw	r26, r24
    1584:	cb 01       	movw	r24, r22
    1586:	9f 83       	std	Y+7, r25	; 0x07
    1588:	8e 83       	std	Y+6, r24	; 0x06
    158a:	0f c0       	rjmp	.+30     	; 0x15aa <Lcd_vidinit+0x362>
    158c:	80 e9       	ldi	r24, 0x90	; 144
    158e:	91 e0       	ldi	r25, 0x01	; 1
    1590:	9d 83       	std	Y+5, r25	; 0x05
    1592:	8c 83       	std	Y+4, r24	; 0x04
    1594:	8c 81       	ldd	r24, Y+4	; 0x04
    1596:	9d 81       	ldd	r25, Y+5	; 0x05
    1598:	01 97       	sbiw	r24, 0x01	; 1
    159a:	f1 f7       	brne	.-4      	; 0x1598 <Lcd_vidinit+0x350>
    159c:	9d 83       	std	Y+5, r25	; 0x05
    159e:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15a0:	8e 81       	ldd	r24, Y+6	; 0x06
    15a2:	9f 81       	ldd	r25, Y+7	; 0x07
    15a4:	01 97       	sbiw	r24, 0x01	; 1
    15a6:	9f 83       	std	Y+7, r25	; 0x07
    15a8:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15aa:	8e 81       	ldd	r24, Y+6	; 0x06
    15ac:	9f 81       	ldd	r25, Y+7	; 0x07
    15ae:	00 97       	sbiw	r24, 0x00	; 0
    15b0:	69 f7       	brne	.-38     	; 0x158c <Lcd_vidinit+0x344>
    15b2:	24 c0       	rjmp	.+72     	; 0x15fc <Lcd_vidinit+0x3b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15b4:	68 85       	ldd	r22, Y+8	; 0x08
    15b6:	79 85       	ldd	r23, Y+9	; 0x09
    15b8:	8a 85       	ldd	r24, Y+10	; 0x0a
    15ba:	9b 85       	ldd	r25, Y+11	; 0x0b
    15bc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    15c0:	dc 01       	movw	r26, r24
    15c2:	cb 01       	movw	r24, r22
    15c4:	9f 83       	std	Y+7, r25	; 0x07
    15c6:	8e 83       	std	Y+6, r24	; 0x06
    15c8:	8e 81       	ldd	r24, Y+6	; 0x06
    15ca:	9f 81       	ldd	r25, Y+7	; 0x07
    15cc:	9b 83       	std	Y+3, r25	; 0x03
    15ce:	8a 83       	std	Y+2, r24	; 0x02
    15d0:	8a 81       	ldd	r24, Y+2	; 0x02
    15d2:	9b 81       	ldd	r25, Y+3	; 0x03
    15d4:	01 97       	sbiw	r24, 0x01	; 1
    15d6:	f1 f7       	brne	.-4      	; 0x15d4 <Lcd_vidinit+0x38c>
    15d8:	9b 83       	std	Y+3, r25	; 0x03
    15da:	8a 83       	std	Y+2, r24	; 0x02
    15dc:	0f c0       	rjmp	.+30     	; 0x15fc <Lcd_vidinit+0x3b4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    15de:	69 89       	ldd	r22, Y+17	; 0x11
    15e0:	7a 89       	ldd	r23, Y+18	; 0x12
    15e2:	8b 89       	ldd	r24, Y+19	; 0x13
    15e4:	9c 89       	ldd	r25, Y+20	; 0x14
    15e6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    15ea:	dc 01       	movw	r26, r24
    15ec:	cb 01       	movw	r24, r22
    15ee:	88 8b       	std	Y+16, r24	; 0x10
    15f0:	88 89       	ldd	r24, Y+16	; 0x10
    15f2:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    15f4:	89 81       	ldd	r24, Y+1	; 0x01
    15f6:	8a 95       	dec	r24
    15f8:	f1 f7       	brne	.-4      	; 0x15f6 <Lcd_vidinit+0x3ae>
    15fa:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(100);
	Lcd_vidCmd(0x03);
    15fc:	83 e0       	ldi	r24, 0x03	; 3
    15fe:	0e 94 84 0c 	call	0x1908	; 0x1908 <Lcd_vidCmd>
	Lcd_vidCmd(0x02);
    1602:	82 e0       	ldi	r24, 0x02	; 2
    1604:	0e 94 84 0c 	call	0x1908	; 0x1908 <Lcd_vidCmd>
	Lcd_vidCmd(_LCD_4BIT_MODE);
    1608:	88 e2       	ldi	r24, 0x28	; 40
    160a:	0e 94 84 0c 	call	0x1908	; 0x1908 <Lcd_vidCmd>
}
    160e:	e4 96       	adiw	r28, 0x34	; 52
    1610:	0f b6       	in	r0, 0x3f	; 63
    1612:	f8 94       	cli
    1614:	de bf       	out	0x3e, r29	; 62
    1616:	0f be       	out	0x3f, r0	; 63
    1618:	cd bf       	out	0x3d, r28	; 61
    161a:	cf 91       	pop	r28
    161c:	df 91       	pop	r29
    161e:	08 95       	ret

00001620 <Lcd_videnablePulse>:

static void Lcd_videnablePulse(void)
{
    1620:	df 93       	push	r29
    1622:	cf 93       	push	r28
    1624:	cd b7       	in	r28, 0x3d	; 61
    1626:	de b7       	in	r29, 0x3e	; 62
    1628:	a6 97       	sbiw	r28, 0x26	; 38
    162a:	0f b6       	in	r0, 0x3f	; 63
    162c:	f8 94       	cli
    162e:	de bf       	out	0x3e, r29	; 62
    1630:	0f be       	out	0x3f, r0	; 63
    1632:	cd bf       	out	0x3d, r28	; 61
	//send Enable pulse
	Dio_vidwriteChanel(DIO_PORTB, DIO_PIN3, DIO_HIGH);
    1634:	81 e0       	ldi	r24, 0x01	; 1
    1636:	63 e0       	ldi	r22, 0x03	; 3
    1638:	41 e0       	ldi	r20, 0x01	; 1
    163a:	0e 94 10 10 	call	0x2020	; 0x2020 <Dio_vidwriteChanel>
    163e:	80 e0       	ldi	r24, 0x00	; 0
    1640:	90 e0       	ldi	r25, 0x00	; 0
    1642:	a0 e8       	ldi	r26, 0x80	; 128
    1644:	bf e3       	ldi	r27, 0x3F	; 63
    1646:	8b a3       	std	Y+35, r24	; 0x23
    1648:	9c a3       	std	Y+36, r25	; 0x24
    164a:	ad a3       	std	Y+37, r26	; 0x25
    164c:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    164e:	6b a1       	ldd	r22, Y+35	; 0x23
    1650:	7c a1       	ldd	r23, Y+36	; 0x24
    1652:	8d a1       	ldd	r24, Y+37	; 0x25
    1654:	9e a1       	ldd	r25, Y+38	; 0x26
    1656:	2b ea       	ldi	r18, 0xAB	; 171
    1658:	3a ea       	ldi	r19, 0xAA	; 170
    165a:	4a ea       	ldi	r20, 0xAA	; 170
    165c:	50 e4       	ldi	r21, 0x40	; 64
    165e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1662:	dc 01       	movw	r26, r24
    1664:	cb 01       	movw	r24, r22
    1666:	8f 8f       	std	Y+31, r24	; 0x1f
    1668:	98 a3       	std	Y+32, r25	; 0x20
    166a:	a9 a3       	std	Y+33, r26	; 0x21
    166c:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    166e:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1670:	78 a1       	ldd	r23, Y+32	; 0x20
    1672:	89 a1       	ldd	r24, Y+33	; 0x21
    1674:	9a a1       	ldd	r25, Y+34	; 0x22
    1676:	20 e0       	ldi	r18, 0x00	; 0
    1678:	30 e0       	ldi	r19, 0x00	; 0
    167a:	40 e8       	ldi	r20, 0x80	; 128
    167c:	5f e3       	ldi	r21, 0x3F	; 63
    167e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1682:	88 23       	and	r24, r24
    1684:	1c f4       	brge	.+6      	; 0x168c <Lcd_videnablePulse+0x6c>
		__ticks = 1;
    1686:	81 e0       	ldi	r24, 0x01	; 1
    1688:	8e 8f       	std	Y+30, r24	; 0x1e
    168a:	91 c0       	rjmp	.+290    	; 0x17ae <Lcd_videnablePulse+0x18e>
	else if (__tmp > 255)
    168c:	6f 8d       	ldd	r22, Y+31	; 0x1f
    168e:	78 a1       	ldd	r23, Y+32	; 0x20
    1690:	89 a1       	ldd	r24, Y+33	; 0x21
    1692:	9a a1       	ldd	r25, Y+34	; 0x22
    1694:	20 e0       	ldi	r18, 0x00	; 0
    1696:	30 e0       	ldi	r19, 0x00	; 0
    1698:	4f e7       	ldi	r20, 0x7F	; 127
    169a:	53 e4       	ldi	r21, 0x43	; 67
    169c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    16a0:	18 16       	cp	r1, r24
    16a2:	0c f0       	brlt	.+2      	; 0x16a6 <Lcd_videnablePulse+0x86>
    16a4:	7b c0       	rjmp	.+246    	; 0x179c <Lcd_videnablePulse+0x17c>
	{
		_delay_ms(__us / 1000.0);
    16a6:	6b a1       	ldd	r22, Y+35	; 0x23
    16a8:	7c a1       	ldd	r23, Y+36	; 0x24
    16aa:	8d a1       	ldd	r24, Y+37	; 0x25
    16ac:	9e a1       	ldd	r25, Y+38	; 0x26
    16ae:	20 e0       	ldi	r18, 0x00	; 0
    16b0:	30 e0       	ldi	r19, 0x00	; 0
    16b2:	4a e7       	ldi	r20, 0x7A	; 122
    16b4:	54 e4       	ldi	r21, 0x44	; 68
    16b6:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    16ba:	dc 01       	movw	r26, r24
    16bc:	cb 01       	movw	r24, r22
    16be:	8a 8f       	std	Y+26, r24	; 0x1a
    16c0:	9b 8f       	std	Y+27, r25	; 0x1b
    16c2:	ac 8f       	std	Y+28, r26	; 0x1c
    16c4:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16c6:	6a 8d       	ldd	r22, Y+26	; 0x1a
    16c8:	7b 8d       	ldd	r23, Y+27	; 0x1b
    16ca:	8c 8d       	ldd	r24, Y+28	; 0x1c
    16cc:	9d 8d       	ldd	r25, Y+29	; 0x1d
    16ce:	20 e0       	ldi	r18, 0x00	; 0
    16d0:	30 e0       	ldi	r19, 0x00	; 0
    16d2:	4a e7       	ldi	r20, 0x7A	; 122
    16d4:	55 e4       	ldi	r21, 0x45	; 69
    16d6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16da:	dc 01       	movw	r26, r24
    16dc:	cb 01       	movw	r24, r22
    16de:	8e 8b       	std	Y+22, r24	; 0x16
    16e0:	9f 8b       	std	Y+23, r25	; 0x17
    16e2:	a8 8f       	std	Y+24, r26	; 0x18
    16e4:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    16e6:	6e 89       	ldd	r22, Y+22	; 0x16
    16e8:	7f 89       	ldd	r23, Y+23	; 0x17
    16ea:	88 8d       	ldd	r24, Y+24	; 0x18
    16ec:	99 8d       	ldd	r25, Y+25	; 0x19
    16ee:	20 e0       	ldi	r18, 0x00	; 0
    16f0:	30 e0       	ldi	r19, 0x00	; 0
    16f2:	40 e8       	ldi	r20, 0x80	; 128
    16f4:	5f e3       	ldi	r21, 0x3F	; 63
    16f6:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    16fa:	88 23       	and	r24, r24
    16fc:	2c f4       	brge	.+10     	; 0x1708 <Lcd_videnablePulse+0xe8>
		__ticks = 1;
    16fe:	81 e0       	ldi	r24, 0x01	; 1
    1700:	90 e0       	ldi	r25, 0x00	; 0
    1702:	9d 8b       	std	Y+21, r25	; 0x15
    1704:	8c 8b       	std	Y+20, r24	; 0x14
    1706:	3f c0       	rjmp	.+126    	; 0x1786 <Lcd_videnablePulse+0x166>
	else if (__tmp > 65535)
    1708:	6e 89       	ldd	r22, Y+22	; 0x16
    170a:	7f 89       	ldd	r23, Y+23	; 0x17
    170c:	88 8d       	ldd	r24, Y+24	; 0x18
    170e:	99 8d       	ldd	r25, Y+25	; 0x19
    1710:	20 e0       	ldi	r18, 0x00	; 0
    1712:	3f ef       	ldi	r19, 0xFF	; 255
    1714:	4f e7       	ldi	r20, 0x7F	; 127
    1716:	57 e4       	ldi	r21, 0x47	; 71
    1718:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    171c:	18 16       	cp	r1, r24
    171e:	4c f5       	brge	.+82     	; 0x1772 <Lcd_videnablePulse+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1720:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1722:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1724:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1726:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1728:	20 e0       	ldi	r18, 0x00	; 0
    172a:	30 e0       	ldi	r19, 0x00	; 0
    172c:	40 e2       	ldi	r20, 0x20	; 32
    172e:	51 e4       	ldi	r21, 0x41	; 65
    1730:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1734:	dc 01       	movw	r26, r24
    1736:	cb 01       	movw	r24, r22
    1738:	bc 01       	movw	r22, r24
    173a:	cd 01       	movw	r24, r26
    173c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1740:	dc 01       	movw	r26, r24
    1742:	cb 01       	movw	r24, r22
    1744:	9d 8b       	std	Y+21, r25	; 0x15
    1746:	8c 8b       	std	Y+20, r24	; 0x14
    1748:	0f c0       	rjmp	.+30     	; 0x1768 <Lcd_videnablePulse+0x148>
    174a:	80 e9       	ldi	r24, 0x90	; 144
    174c:	91 e0       	ldi	r25, 0x01	; 1
    174e:	9b 8b       	std	Y+19, r25	; 0x13
    1750:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1752:	8a 89       	ldd	r24, Y+18	; 0x12
    1754:	9b 89       	ldd	r25, Y+19	; 0x13
    1756:	01 97       	sbiw	r24, 0x01	; 1
    1758:	f1 f7       	brne	.-4      	; 0x1756 <Lcd_videnablePulse+0x136>
    175a:	9b 8b       	std	Y+19, r25	; 0x13
    175c:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    175e:	8c 89       	ldd	r24, Y+20	; 0x14
    1760:	9d 89       	ldd	r25, Y+21	; 0x15
    1762:	01 97       	sbiw	r24, 0x01	; 1
    1764:	9d 8b       	std	Y+21, r25	; 0x15
    1766:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1768:	8c 89       	ldd	r24, Y+20	; 0x14
    176a:	9d 89       	ldd	r25, Y+21	; 0x15
    176c:	00 97       	sbiw	r24, 0x00	; 0
    176e:	69 f7       	brne	.-38     	; 0x174a <Lcd_videnablePulse+0x12a>
    1770:	24 c0       	rjmp	.+72     	; 0x17ba <Lcd_videnablePulse+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1772:	6e 89       	ldd	r22, Y+22	; 0x16
    1774:	7f 89       	ldd	r23, Y+23	; 0x17
    1776:	88 8d       	ldd	r24, Y+24	; 0x18
    1778:	99 8d       	ldd	r25, Y+25	; 0x19
    177a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    177e:	dc 01       	movw	r26, r24
    1780:	cb 01       	movw	r24, r22
    1782:	9d 8b       	std	Y+21, r25	; 0x15
    1784:	8c 8b       	std	Y+20, r24	; 0x14
    1786:	8c 89       	ldd	r24, Y+20	; 0x14
    1788:	9d 89       	ldd	r25, Y+21	; 0x15
    178a:	99 8b       	std	Y+17, r25	; 0x11
    178c:	88 8b       	std	Y+16, r24	; 0x10
    178e:	88 89       	ldd	r24, Y+16	; 0x10
    1790:	99 89       	ldd	r25, Y+17	; 0x11
    1792:	01 97       	sbiw	r24, 0x01	; 1
    1794:	f1 f7       	brne	.-4      	; 0x1792 <Lcd_videnablePulse+0x172>
    1796:	99 8b       	std	Y+17, r25	; 0x11
    1798:	88 8b       	std	Y+16, r24	; 0x10
    179a:	0f c0       	rjmp	.+30     	; 0x17ba <Lcd_videnablePulse+0x19a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    179c:	6f 8d       	ldd	r22, Y+31	; 0x1f
    179e:	78 a1       	ldd	r23, Y+32	; 0x20
    17a0:	89 a1       	ldd	r24, Y+33	; 0x21
    17a2:	9a a1       	ldd	r25, Y+34	; 0x22
    17a4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17a8:	dc 01       	movw	r26, r24
    17aa:	cb 01       	movw	r24, r22
    17ac:	8e 8f       	std	Y+30, r24	; 0x1e
    17ae:	8e 8d       	ldd	r24, Y+30	; 0x1e
    17b0:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    17b2:	8f 85       	ldd	r24, Y+15	; 0x0f
    17b4:	8a 95       	dec	r24
    17b6:	f1 f7       	brne	.-4      	; 0x17b4 <Lcd_videnablePulse+0x194>
    17b8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(1);
	Dio_vidwriteChanel(DIO_PORTB, DIO_PIN3, DIO_LOW);
    17ba:	81 e0       	ldi	r24, 0x01	; 1
    17bc:	63 e0       	ldi	r22, 0x03	; 3
    17be:	40 e0       	ldi	r20, 0x00	; 0
    17c0:	0e 94 10 10 	call	0x2020	; 0x2020 <Dio_vidwriteChanel>
    17c4:	80 e0       	ldi	r24, 0x00	; 0
    17c6:	90 e0       	ldi	r25, 0x00	; 0
    17c8:	a0 e0       	ldi	r26, 0x00	; 0
    17ca:	b0 e4       	ldi	r27, 0x40	; 64
    17cc:	8b 87       	std	Y+11, r24	; 0x0b
    17ce:	9c 87       	std	Y+12, r25	; 0x0c
    17d0:	ad 87       	std	Y+13, r26	; 0x0d
    17d2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    17d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    17d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    17da:	9e 85       	ldd	r25, Y+14	; 0x0e
    17dc:	20 e0       	ldi	r18, 0x00	; 0
    17de:	30 e0       	ldi	r19, 0x00	; 0
    17e0:	4a e7       	ldi	r20, 0x7A	; 122
    17e2:	55 e4       	ldi	r21, 0x45	; 69
    17e4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17e8:	dc 01       	movw	r26, r24
    17ea:	cb 01       	movw	r24, r22
    17ec:	8f 83       	std	Y+7, r24	; 0x07
    17ee:	98 87       	std	Y+8, r25	; 0x08
    17f0:	a9 87       	std	Y+9, r26	; 0x09
    17f2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    17f4:	6f 81       	ldd	r22, Y+7	; 0x07
    17f6:	78 85       	ldd	r23, Y+8	; 0x08
    17f8:	89 85       	ldd	r24, Y+9	; 0x09
    17fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    17fc:	20 e0       	ldi	r18, 0x00	; 0
    17fe:	30 e0       	ldi	r19, 0x00	; 0
    1800:	40 e8       	ldi	r20, 0x80	; 128
    1802:	5f e3       	ldi	r21, 0x3F	; 63
    1804:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1808:	88 23       	and	r24, r24
    180a:	2c f4       	brge	.+10     	; 0x1816 <Lcd_videnablePulse+0x1f6>
		__ticks = 1;
    180c:	81 e0       	ldi	r24, 0x01	; 1
    180e:	90 e0       	ldi	r25, 0x00	; 0
    1810:	9e 83       	std	Y+6, r25	; 0x06
    1812:	8d 83       	std	Y+5, r24	; 0x05
    1814:	3f c0       	rjmp	.+126    	; 0x1894 <Lcd_videnablePulse+0x274>
	else if (__tmp > 65535)
    1816:	6f 81       	ldd	r22, Y+7	; 0x07
    1818:	78 85       	ldd	r23, Y+8	; 0x08
    181a:	89 85       	ldd	r24, Y+9	; 0x09
    181c:	9a 85       	ldd	r25, Y+10	; 0x0a
    181e:	20 e0       	ldi	r18, 0x00	; 0
    1820:	3f ef       	ldi	r19, 0xFF	; 255
    1822:	4f e7       	ldi	r20, 0x7F	; 127
    1824:	57 e4       	ldi	r21, 0x47	; 71
    1826:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    182a:	18 16       	cp	r1, r24
    182c:	4c f5       	brge	.+82     	; 0x1880 <Lcd_videnablePulse+0x260>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    182e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1830:	7c 85       	ldd	r23, Y+12	; 0x0c
    1832:	8d 85       	ldd	r24, Y+13	; 0x0d
    1834:	9e 85       	ldd	r25, Y+14	; 0x0e
    1836:	20 e0       	ldi	r18, 0x00	; 0
    1838:	30 e0       	ldi	r19, 0x00	; 0
    183a:	40 e2       	ldi	r20, 0x20	; 32
    183c:	51 e4       	ldi	r21, 0x41	; 65
    183e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1842:	dc 01       	movw	r26, r24
    1844:	cb 01       	movw	r24, r22
    1846:	bc 01       	movw	r22, r24
    1848:	cd 01       	movw	r24, r26
    184a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    184e:	dc 01       	movw	r26, r24
    1850:	cb 01       	movw	r24, r22
    1852:	9e 83       	std	Y+6, r25	; 0x06
    1854:	8d 83       	std	Y+5, r24	; 0x05
    1856:	0f c0       	rjmp	.+30     	; 0x1876 <Lcd_videnablePulse+0x256>
    1858:	80 e9       	ldi	r24, 0x90	; 144
    185a:	91 e0       	ldi	r25, 0x01	; 1
    185c:	9c 83       	std	Y+4, r25	; 0x04
    185e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1860:	8b 81       	ldd	r24, Y+3	; 0x03
    1862:	9c 81       	ldd	r25, Y+4	; 0x04
    1864:	01 97       	sbiw	r24, 0x01	; 1
    1866:	f1 f7       	brne	.-4      	; 0x1864 <Lcd_videnablePulse+0x244>
    1868:	9c 83       	std	Y+4, r25	; 0x04
    186a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    186c:	8d 81       	ldd	r24, Y+5	; 0x05
    186e:	9e 81       	ldd	r25, Y+6	; 0x06
    1870:	01 97       	sbiw	r24, 0x01	; 1
    1872:	9e 83       	std	Y+6, r25	; 0x06
    1874:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1876:	8d 81       	ldd	r24, Y+5	; 0x05
    1878:	9e 81       	ldd	r25, Y+6	; 0x06
    187a:	00 97       	sbiw	r24, 0x00	; 0
    187c:	69 f7       	brne	.-38     	; 0x1858 <Lcd_videnablePulse+0x238>
    187e:	14 c0       	rjmp	.+40     	; 0x18a8 <Lcd_videnablePulse+0x288>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1880:	6f 81       	ldd	r22, Y+7	; 0x07
    1882:	78 85       	ldd	r23, Y+8	; 0x08
    1884:	89 85       	ldd	r24, Y+9	; 0x09
    1886:	9a 85       	ldd	r25, Y+10	; 0x0a
    1888:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    188c:	dc 01       	movw	r26, r24
    188e:	cb 01       	movw	r24, r22
    1890:	9e 83       	std	Y+6, r25	; 0x06
    1892:	8d 83       	std	Y+5, r24	; 0x05
    1894:	8d 81       	ldd	r24, Y+5	; 0x05
    1896:	9e 81       	ldd	r25, Y+6	; 0x06
    1898:	9a 83       	std	Y+2, r25	; 0x02
    189a:	89 83       	std	Y+1, r24	; 0x01
    189c:	89 81       	ldd	r24, Y+1	; 0x01
    189e:	9a 81       	ldd	r25, Y+2	; 0x02
    18a0:	01 97       	sbiw	r24, 0x01	; 1
    18a2:	f1 f7       	brne	.-4      	; 0x18a0 <Lcd_videnablePulse+0x280>
    18a4:	9a 83       	std	Y+2, r25	; 0x02
    18a6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    18a8:	a6 96       	adiw	r28, 0x26	; 38
    18aa:	0f b6       	in	r0, 0x3f	; 63
    18ac:	f8 94       	cli
    18ae:	de bf       	out	0x3e, r29	; 62
    18b0:	0f be       	out	0x3f, r0	; 63
    18b2:	cd bf       	out	0x3d, r28	; 61
    18b4:	cf 91       	pop	r28
    18b6:	df 91       	pop	r29
    18b8:	08 95       	ret

000018ba <Lcd_vidDisplayChar>:
void Lcd_vidDisplayChar(u8 chr)
{
    18ba:	df 93       	push	r29
    18bc:	cf 93       	push	r28
    18be:	00 d0       	rcall	.+0      	; 0x18c0 <Lcd_vidDisplayChar+0x6>
    18c0:	0f 92       	push	r0
    18c2:	cd b7       	in	r28, 0x3d	; 61
    18c4:	de b7       	in	r29, 0x3e	; 62
    18c6:	8b 83       	std	Y+3, r24	; 0x03
	0b1101  1001

	1101   0000
	1001   0000
*/
	u8 loc_MSB = (chr & ~LCD_MASK);
    18c8:	8b 81       	ldd	r24, Y+3	; 0x03
    18ca:	80 7f       	andi	r24, 0xF0	; 240
    18cc:	8a 83       	std	Y+2, r24	; 0x02
	u8 loc_LSB = (chr<<4);
    18ce:	8b 81       	ldd	r24, Y+3	; 0x03
    18d0:	82 95       	swap	r24
    18d2:	80 7f       	andi	r24, 0xF0	; 240
    18d4:	89 83       	std	Y+1, r24	; 0x01
	//RS->1
	Dio_vidwriteChanel(DIO_PORTB, DIO_PIN1, DIO_HIGH);
    18d6:	81 e0       	ldi	r24, 0x01	; 1
    18d8:	61 e0       	ldi	r22, 0x01	; 1
    18da:	41 e0       	ldi	r20, 0x01	; 1
    18dc:	0e 94 10 10 	call	0x2020	; 0x2020 <Dio_vidwriteChanel>

	//write data MSB to LCD
	Dio_vidWriteChanelGroup(DIO_PORTA, loc_MSB, LCD_MASK);
    18e0:	80 e0       	ldi	r24, 0x00	; 0
    18e2:	6a 81       	ldd	r22, Y+2	; 0x02
    18e4:	4f e0       	ldi	r20, 0x0F	; 15
    18e6:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <Dio_vidWriteChanelGroup>
	//send Enable pulse
	Lcd_videnablePulse();
    18ea:	0e 94 10 0b 	call	0x1620	; 0x1620 <Lcd_videnablePulse>

	//write data LSB to LCD
	Dio_vidWriteChanelGroup(DIO_PORTA, loc_LSB, LCD_MASK);
    18ee:	80 e0       	ldi	r24, 0x00	; 0
    18f0:	69 81       	ldd	r22, Y+1	; 0x01
    18f2:	4f e0       	ldi	r20, 0x0F	; 15
    18f4:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <Dio_vidWriteChanelGroup>
	//send Enable pulse
	Lcd_videnablePulse();
    18f8:	0e 94 10 0b 	call	0x1620	; 0x1620 <Lcd_videnablePulse>
}
    18fc:	0f 90       	pop	r0
    18fe:	0f 90       	pop	r0
    1900:	0f 90       	pop	r0
    1902:	cf 91       	pop	r28
    1904:	df 91       	pop	r29
    1906:	08 95       	ret

00001908 <Lcd_vidCmd>:
void Lcd_vidCmd(lcd_Cmd_t cmd)
{
    1908:	df 93       	push	r29
    190a:	cf 93       	push	r28
    190c:	00 d0       	rcall	.+0      	; 0x190e <Lcd_vidCmd+0x6>
    190e:	0f 92       	push	r0
    1910:	cd b7       	in	r28, 0x3d	; 61
    1912:	de b7       	in	r29, 0x3e	; 62
    1914:	8b 83       	std	Y+3, r24	; 0x03
	u8 loc_MSB = cmd & ~LCD_MASK;
    1916:	8b 81       	ldd	r24, Y+3	; 0x03
    1918:	80 7f       	andi	r24, 0xF0	; 240
    191a:	8a 83       	std	Y+2, r24	; 0x02
	u8 loc_LSB = cmd<<4;
    191c:	8b 81       	ldd	r24, Y+3	; 0x03
    191e:	82 95       	swap	r24
    1920:	80 7f       	andi	r24, 0xF0	; 240
    1922:	89 83       	std	Y+1, r24	; 0x01
	//RS->0
	Dio_vidwriteChanel(DIO_PORTB, DIO_PIN1, DIO_LOW);
    1924:	81 e0       	ldi	r24, 0x01	; 1
    1926:	61 e0       	ldi	r22, 0x01	; 1
    1928:	40 e0       	ldi	r20, 0x00	; 0
    192a:	0e 94 10 10 	call	0x2020	; 0x2020 <Dio_vidwriteChanel>

	//write data MSB to LCD
	Dio_vidWriteChanelGroup(DIO_PORTA, loc_MSB, LCD_MASK);
    192e:	80 e0       	ldi	r24, 0x00	; 0
    1930:	6a 81       	ldd	r22, Y+2	; 0x02
    1932:	4f e0       	ldi	r20, 0x0F	; 15
    1934:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <Dio_vidWriteChanelGroup>
	//send Enable pulse
	Lcd_videnablePulse();
    1938:	0e 94 10 0b 	call	0x1620	; 0x1620 <Lcd_videnablePulse>

	//write data LSB to LCD
	Dio_vidWriteChanelGroup(DIO_PORTA, loc_LSB, LCD_MASK);
    193c:	80 e0       	ldi	r24, 0x00	; 0
    193e:	69 81       	ldd	r22, Y+1	; 0x01
    1940:	4f e0       	ldi	r20, 0x0F	; 15
    1942:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <Dio_vidWriteChanelGroup>
	//send Enable pulse
	Lcd_videnablePulse();
    1946:	0e 94 10 0b 	call	0x1620	; 0x1620 <Lcd_videnablePulse>
}
    194a:	0f 90       	pop	r0
    194c:	0f 90       	pop	r0
    194e:	0f 90       	pop	r0
    1950:	cf 91       	pop	r28
    1952:	df 91       	pop	r29
    1954:	08 95       	ret

00001956 <Lcd_vidRowColumn>:

void Lcd_vidRowColumn(u8 row, u8 col)
{
    1956:	df 93       	push	r29
    1958:	cf 93       	push	r28
    195a:	00 d0       	rcall	.+0      	; 0x195c <Lcd_vidRowColumn+0x6>
    195c:	00 d0       	rcall	.+0      	; 0x195e <Lcd_vidRowColumn+0x8>
    195e:	cd b7       	in	r28, 0x3d	; 61
    1960:	de b7       	in	r29, 0x3e	; 62
    1962:	89 83       	std	Y+1, r24	; 0x01
    1964:	6a 83       	std	Y+2, r22	; 0x02
	switch (row)
    1966:	89 81       	ldd	r24, Y+1	; 0x01
    1968:	28 2f       	mov	r18, r24
    196a:	30 e0       	ldi	r19, 0x00	; 0
    196c:	3c 83       	std	Y+4, r19	; 0x04
    196e:	2b 83       	std	Y+3, r18	; 0x03
    1970:	8b 81       	ldd	r24, Y+3	; 0x03
    1972:	9c 81       	ldd	r25, Y+4	; 0x04
    1974:	00 97       	sbiw	r24, 0x00	; 0
    1976:	31 f0       	breq	.+12     	; 0x1984 <Lcd_vidRowColumn+0x2e>
    1978:	2b 81       	ldd	r18, Y+3	; 0x03
    197a:	3c 81       	ldd	r19, Y+4	; 0x04
    197c:	21 30       	cpi	r18, 0x01	; 1
    197e:	31 05       	cpc	r19, r1
    1980:	31 f0       	breq	.+12     	; 0x198e <Lcd_vidRowColumn+0x38>
    1982:	09 c0       	rjmp	.+18     	; 0x1996 <Lcd_vidRowColumn+0x40>
	{
	case 0:
		Lcd_vidCmd(0x80 + col);
    1984:	8a 81       	ldd	r24, Y+2	; 0x02
    1986:	80 58       	subi	r24, 0x80	; 128
    1988:	0e 94 84 0c 	call	0x1908	; 0x1908 <Lcd_vidCmd>
    198c:	04 c0       	rjmp	.+8      	; 0x1996 <Lcd_vidRowColumn+0x40>
		break;

	case 1:
		Lcd_vidCmd(0xC0 + col);
    198e:	8a 81       	ldd	r24, Y+2	; 0x02
    1990:	80 54       	subi	r24, 0x40	; 64
    1992:	0e 94 84 0c 	call	0x1908	; 0x1908 <Lcd_vidCmd>
		break;
	}
}
    1996:	0f 90       	pop	r0
    1998:	0f 90       	pop	r0
    199a:	0f 90       	pop	r0
    199c:	0f 90       	pop	r0
    199e:	cf 91       	pop	r28
    19a0:	df 91       	pop	r29
    19a2:	08 95       	ret

000019a4 <Lcd_vidDisplyStr>:
void Lcd_vidDisplyStr(u8* str)
{
    19a4:	df 93       	push	r29
    19a6:	cf 93       	push	r28
    19a8:	00 d0       	rcall	.+0      	; 0x19aa <Lcd_vidDisplyStr+0x6>
    19aa:	cd b7       	in	r28, 0x3d	; 61
    19ac:	de b7       	in	r29, 0x3e	; 62
    19ae:	9a 83       	std	Y+2, r25	; 0x02
    19b0:	89 83       	std	Y+1, r24	; 0x01
    19b2:	0a c0       	rjmp	.+20     	; 0x19c8 <Lcd_vidDisplyStr+0x24>
	while (*str != '\0')
	{
		Lcd_vidDisplayChar(*str);
    19b4:	e9 81       	ldd	r30, Y+1	; 0x01
    19b6:	fa 81       	ldd	r31, Y+2	; 0x02
    19b8:	80 81       	ld	r24, Z
    19ba:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <Lcd_vidDisplayChar>
		str++;
    19be:	89 81       	ldd	r24, Y+1	; 0x01
    19c0:	9a 81       	ldd	r25, Y+2	; 0x02
    19c2:	01 96       	adiw	r24, 0x01	; 1
    19c4:	9a 83       	std	Y+2, r25	; 0x02
    19c6:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
}
void Lcd_vidDisplyStr(u8* str)
{
	while (*str != '\0')
    19c8:	e9 81       	ldd	r30, Y+1	; 0x01
    19ca:	fa 81       	ldd	r31, Y+2	; 0x02
    19cc:	80 81       	ld	r24, Z
    19ce:	88 23       	and	r24, r24
    19d0:	89 f7       	brne	.-30     	; 0x19b4 <Lcd_vidDisplyStr+0x10>
	{
		Lcd_vidDisplayChar(*str);
		str++;
	}
}
    19d2:	0f 90       	pop	r0
    19d4:	0f 90       	pop	r0
    19d6:	cf 91       	pop	r28
    19d8:	df 91       	pop	r29
    19da:	08 95       	ret

000019dc <Lcd_vidDisplyInt>:

void Lcd_vidDisplyInt(u32 num)
{
    19dc:	df 93       	push	r29
    19de:	cf 93       	push	r28
    19e0:	cd b7       	in	r28, 0x3d	; 61
    19e2:	de b7       	in	r29, 0x3e	; 62
    19e4:	29 97       	sbiw	r28, 0x09	; 9
    19e6:	0f b6       	in	r0, 0x3f	; 63
    19e8:	f8 94       	cli
    19ea:	de bf       	out	0x3e, r29	; 62
    19ec:	0f be       	out	0x3f, r0	; 63
    19ee:	cd bf       	out	0x3d, r28	; 61
    19f0:	6e 83       	std	Y+6, r22	; 0x06
    19f2:	7f 83       	std	Y+7, r23	; 0x07
    19f4:	88 87       	std	Y+8, r24	; 0x08
    19f6:	99 87       	std	Y+9, r25	; 0x09
	u8 buffer[5];
	sprintf(buffer,"%d",num);
    19f8:	8d b7       	in	r24, 0x3d	; 61
    19fa:	9e b7       	in	r25, 0x3e	; 62
    19fc:	08 97       	sbiw	r24, 0x08	; 8
    19fe:	0f b6       	in	r0, 0x3f	; 63
    1a00:	f8 94       	cli
    1a02:	9e bf       	out	0x3e, r25	; 62
    1a04:	0f be       	out	0x3f, r0	; 63
    1a06:	8d bf       	out	0x3d, r24	; 61
    1a08:	ed b7       	in	r30, 0x3d	; 61
    1a0a:	fe b7       	in	r31, 0x3e	; 62
    1a0c:	31 96       	adiw	r30, 0x01	; 1
    1a0e:	ce 01       	movw	r24, r28
    1a10:	01 96       	adiw	r24, 0x01	; 1
    1a12:	91 83       	std	Z+1, r25	; 0x01
    1a14:	80 83       	st	Z, r24
    1a16:	80 e6       	ldi	r24, 0x60	; 96
    1a18:	90 e0       	ldi	r25, 0x00	; 0
    1a1a:	93 83       	std	Z+3, r25	; 0x03
    1a1c:	82 83       	std	Z+2, r24	; 0x02
    1a1e:	8e 81       	ldd	r24, Y+6	; 0x06
    1a20:	9f 81       	ldd	r25, Y+7	; 0x07
    1a22:	a8 85       	ldd	r26, Y+8	; 0x08
    1a24:	b9 85       	ldd	r27, Y+9	; 0x09
    1a26:	84 83       	std	Z+4, r24	; 0x04
    1a28:	95 83       	std	Z+5, r25	; 0x05
    1a2a:	a6 83       	std	Z+6, r26	; 0x06
    1a2c:	b7 83       	std	Z+7, r27	; 0x07
    1a2e:	0e 94 1f 13 	call	0x263e	; 0x263e <sprintf>
    1a32:	8d b7       	in	r24, 0x3d	; 61
    1a34:	9e b7       	in	r25, 0x3e	; 62
    1a36:	08 96       	adiw	r24, 0x08	; 8
    1a38:	0f b6       	in	r0, 0x3f	; 63
    1a3a:	f8 94       	cli
    1a3c:	9e bf       	out	0x3e, r25	; 62
    1a3e:	0f be       	out	0x3f, r0	; 63
    1a40:	8d bf       	out	0x3d, r24	; 61
	Lcd_vidDisplyStr(buffer);
    1a42:	ce 01       	movw	r24, r28
    1a44:	01 96       	adiw	r24, 0x01	; 1
    1a46:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <Lcd_vidDisplyStr>
}
    1a4a:	29 96       	adiw	r28, 0x09	; 9
    1a4c:	0f b6       	in	r0, 0x3f	; 63
    1a4e:	f8 94       	cli
    1a50:	de bf       	out	0x3e, r29	; 62
    1a52:	0f be       	out	0x3f, r0	; 63
    1a54:	cd bf       	out	0x3d, r28	; 61
    1a56:	cf 91       	pop	r28
    1a58:	df 91       	pop	r29
    1a5a:	08 95       	ret

00001a5c <Keypad_vidInit>:
		{'7','8','9','C'},
		{'*','0','#','D'}
};

void Keypad_vidInit(void)
{
    1a5c:	df 93       	push	r29
    1a5e:	cf 93       	push	r28
    1a60:	cd b7       	in	r28, 0x3d	; 61
    1a62:	de b7       	in	r29, 0x3e	; 62
	/*	Configure Rows Pins as input	*/
	Dio_vidconfigChanel(DIO_PORTC, DIO_PIN0, DIO_INPUT);/* ROW0	*/
    1a64:	82 e0       	ldi	r24, 0x02	; 2
    1a66:	60 e0       	ldi	r22, 0x00	; 0
    1a68:	40 e0       	ldi	r20, 0x00	; 0
    1a6a:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTC, DIO_PIN1, DIO_INPUT);/* ROW1	*/
    1a6e:	82 e0       	ldi	r24, 0x02	; 2
    1a70:	61 e0       	ldi	r22, 0x01	; 1
    1a72:	40 e0       	ldi	r20, 0x00	; 0
    1a74:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTC, DIO_PIN2, DIO_INPUT);/* ROW2	*/
    1a78:	82 e0       	ldi	r24, 0x02	; 2
    1a7a:	62 e0       	ldi	r22, 0x02	; 2
    1a7c:	40 e0       	ldi	r20, 0x00	; 0
    1a7e:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTC, DIO_PIN3, DIO_INPUT);/* ROW3 */
    1a82:	82 e0       	ldi	r24, 0x02	; 2
    1a84:	63 e0       	ldi	r22, 0x03	; 3
    1a86:	40 e0       	ldi	r20, 0x00	; 0
    1a88:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <Dio_vidconfigChanel>

	/*	Configure Columns Pins as output	*/
	Dio_vidconfigChanel(DIO_PORTC, DIO_PIN4, DIO_OUTPUT);/*	COL0 */
    1a8c:	82 e0       	ldi	r24, 0x02	; 2
    1a8e:	64 e0       	ldi	r22, 0x04	; 4
    1a90:	41 e0       	ldi	r20, 0x01	; 1
    1a92:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTC, DIO_PIN5, DIO_OUTPUT);/* COL1 */
    1a96:	82 e0       	ldi	r24, 0x02	; 2
    1a98:	65 e0       	ldi	r22, 0x05	; 5
    1a9a:	41 e0       	ldi	r20, 0x01	; 1
    1a9c:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTC, DIO_PIN6, DIO_OUTPUT);/* COL2 */
    1aa0:	82 e0       	ldi	r24, 0x02	; 2
    1aa2:	66 e0       	ldi	r22, 0x06	; 6
    1aa4:	41 e0       	ldi	r20, 0x01	; 1
    1aa6:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTC, DIO_PIN7, DIO_OUTPUT);/* COL3 */
    1aaa:	82 e0       	ldi	r24, 0x02	; 2
    1aac:	67 e0       	ldi	r22, 0x07	; 7
    1aae:	41 e0       	ldi	r20, 0x01	; 1
    1ab0:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <Dio_vidconfigChanel>

	Dio_vidPullUpEn(DIO_PORTC, DIO_PIN0);
    1ab4:	82 e0       	ldi	r24, 0x02	; 2
    1ab6:	60 e0       	ldi	r22, 0x00	; 0
    1ab8:	0e 94 5f 12 	call	0x24be	; 0x24be <Dio_vidPullUpEn>
	Dio_vidPullUpEn(DIO_PORTC, DIO_PIN1);
    1abc:	82 e0       	ldi	r24, 0x02	; 2
    1abe:	61 e0       	ldi	r22, 0x01	; 1
    1ac0:	0e 94 5f 12 	call	0x24be	; 0x24be <Dio_vidPullUpEn>
	Dio_vidPullUpEn(DIO_PORTC, DIO_PIN2);
    1ac4:	82 e0       	ldi	r24, 0x02	; 2
    1ac6:	62 e0       	ldi	r22, 0x02	; 2
    1ac8:	0e 94 5f 12 	call	0x24be	; 0x24be <Dio_vidPullUpEn>
	Dio_vidPullUpEn(DIO_PORTC, DIO_PIN3);
    1acc:	82 e0       	ldi	r24, 0x02	; 2
    1ace:	63 e0       	ldi	r22, 0x03	; 3
    1ad0:	0e 94 5f 12 	call	0x24be	; 0x24be <Dio_vidPullUpEn>


	Dio_vidwriteChanel(DIO_PORTC, DIO_PIN4, DIO_LOW);
    1ad4:	82 e0       	ldi	r24, 0x02	; 2
    1ad6:	64 e0       	ldi	r22, 0x04	; 4
    1ad8:	40 e0       	ldi	r20, 0x00	; 0
    1ada:	0e 94 10 10 	call	0x2020	; 0x2020 <Dio_vidwriteChanel>
	Dio_vidwriteChanel(DIO_PORTC, DIO_PIN5, DIO_LOW);
    1ade:	82 e0       	ldi	r24, 0x02	; 2
    1ae0:	65 e0       	ldi	r22, 0x05	; 5
    1ae2:	40 e0       	ldi	r20, 0x00	; 0
    1ae4:	0e 94 10 10 	call	0x2020	; 0x2020 <Dio_vidwriteChanel>
	Dio_vidwriteChanel(DIO_PORTC, DIO_PIN6, DIO_LOW);
    1ae8:	82 e0       	ldi	r24, 0x02	; 2
    1aea:	66 e0       	ldi	r22, 0x06	; 6
    1aec:	40 e0       	ldi	r20, 0x00	; 0
    1aee:	0e 94 10 10 	call	0x2020	; 0x2020 <Dio_vidwriteChanel>
	Dio_vidwriteChanel(DIO_PORTC, DIO_PIN7, DIO_LOW);
    1af2:	82 e0       	ldi	r24, 0x02	; 2
    1af4:	67 e0       	ldi	r22, 0x07	; 7
    1af6:	40 e0       	ldi	r20, 0x00	; 0
    1af8:	0e 94 10 10 	call	0x2020	; 0x2020 <Dio_vidwriteChanel>
}
    1afc:	cf 91       	pop	r28
    1afe:	df 91       	pop	r29
    1b00:	08 95       	ret

00001b02 <Keypad_IsPressed>:

static boolean Keypad_IsPressed(void)
{
    1b02:	df 93       	push	r29
    1b04:	cf 93       	push	r28
    1b06:	0f 92       	push	r0
    1b08:	cd b7       	in	r28, 0x3d	; 61
    1b0a:	de b7       	in	r29, 0x3e	; 62
	if (
    1b0c:	82 e0       	ldi	r24, 0x02	; 2
    1b0e:	60 e0       	ldi	r22, 0x00	; 0
    1b10:	0e 94 4f 11 	call	0x229e	; 0x229e <Dio_udtreadChanel>
    1b14:	88 23       	and	r24, r24
    1b16:	91 f0       	breq	.+36     	; 0x1b3c <Keypad_IsPressed+0x3a>
    1b18:	82 e0       	ldi	r24, 0x02	; 2
    1b1a:	61 e0       	ldi	r22, 0x01	; 1
    1b1c:	0e 94 4f 11 	call	0x229e	; 0x229e <Dio_udtreadChanel>
    1b20:	88 23       	and	r24, r24
    1b22:	61 f0       	breq	.+24     	; 0x1b3c <Keypad_IsPressed+0x3a>
    1b24:	82 e0       	ldi	r24, 0x02	; 2
    1b26:	62 e0       	ldi	r22, 0x02	; 2
    1b28:	0e 94 4f 11 	call	0x229e	; 0x229e <Dio_udtreadChanel>
    1b2c:	88 23       	and	r24, r24
    1b2e:	31 f0       	breq	.+12     	; 0x1b3c <Keypad_IsPressed+0x3a>
    1b30:	82 e0       	ldi	r24, 0x02	; 2
    1b32:	63 e0       	ldi	r22, 0x03	; 3
    1b34:	0e 94 4f 11 	call	0x229e	; 0x229e <Dio_udtreadChanel>
    1b38:	88 23       	and	r24, r24
    1b3a:	19 f4       	brne	.+6      	; 0x1b42 <Keypad_IsPressed+0x40>
			Dio_udtreadChanel(DIO_PORTC, DIO_PIN1) == DIO_LOW ||
			Dio_udtreadChanel(DIO_PORTC, DIO_PIN2) == DIO_LOW ||
			Dio_udtreadChanel(DIO_PORTC, DIO_PIN3) == DIO_LOW
	)
	{
		return TRUE;
    1b3c:	81 e0       	ldi	r24, 0x01	; 1
    1b3e:	89 83       	std	Y+1, r24	; 0x01
    1b40:	01 c0       	rjmp	.+2      	; 0x1b44 <Keypad_IsPressed+0x42>
	}
	else
	{
		return FALSE;
    1b42:	19 82       	std	Y+1, r1	; 0x01
    1b44:	89 81       	ldd	r24, Y+1	; 0x01
	}
}
    1b46:	0f 90       	pop	r0
    1b48:	cf 91       	pop	r28
    1b4a:	df 91       	pop	r29
    1b4c:	08 95       	ret

00001b4e <Keypad_GetRow>:


static kp_row_t Keypad_GetRow(void)
{
    1b4e:	df 93       	push	r29
    1b50:	cf 93       	push	r28
    1b52:	0f 92       	push	r0
    1b54:	cd b7       	in	r28, 0x3d	; 61
    1b56:	de b7       	in	r29, 0x3e	; 62
	kp_row_t loc_ButtonRow = KP_NOROW;
    1b58:	8f ef       	ldi	r24, 0xFF	; 255
    1b5a:	89 83       	std	Y+1, r24	; 0x01
	if (Dio_udtreadChanel(DIO_PORTC, DIO_PIN0) == DIO_LOW)
    1b5c:	82 e0       	ldi	r24, 0x02	; 2
    1b5e:	60 e0       	ldi	r22, 0x00	; 0
    1b60:	0e 94 4f 11 	call	0x229e	; 0x229e <Dio_udtreadChanel>
    1b64:	88 23       	and	r24, r24
    1b66:	11 f4       	brne	.+4      	; 0x1b6c <Keypad_GetRow+0x1e>
	{
		loc_ButtonRow = KP_ROW0;
    1b68:	19 82       	std	Y+1, r1	; 0x01
    1b6a:	1d c0       	rjmp	.+58     	; 0x1ba6 <Keypad_GetRow+0x58>
	}
	else if (Dio_udtreadChanel(DIO_PORTC, DIO_PIN1) == DIO_LOW)
    1b6c:	82 e0       	ldi	r24, 0x02	; 2
    1b6e:	61 e0       	ldi	r22, 0x01	; 1
    1b70:	0e 94 4f 11 	call	0x229e	; 0x229e <Dio_udtreadChanel>
    1b74:	88 23       	and	r24, r24
    1b76:	19 f4       	brne	.+6      	; 0x1b7e <Keypad_GetRow+0x30>
	{
		loc_ButtonRow = KP_ROW1;
    1b78:	81 e0       	ldi	r24, 0x01	; 1
    1b7a:	89 83       	std	Y+1, r24	; 0x01
    1b7c:	14 c0       	rjmp	.+40     	; 0x1ba6 <Keypad_GetRow+0x58>
	}
	else if (Dio_udtreadChanel(DIO_PORTC, DIO_PIN2) == DIO_LOW)
    1b7e:	82 e0       	ldi	r24, 0x02	; 2
    1b80:	62 e0       	ldi	r22, 0x02	; 2
    1b82:	0e 94 4f 11 	call	0x229e	; 0x229e <Dio_udtreadChanel>
    1b86:	88 23       	and	r24, r24
    1b88:	19 f4       	brne	.+6      	; 0x1b90 <Keypad_GetRow+0x42>
	{
		loc_ButtonRow = KP_ROW2;
    1b8a:	82 e0       	ldi	r24, 0x02	; 2
    1b8c:	89 83       	std	Y+1, r24	; 0x01
    1b8e:	0b c0       	rjmp	.+22     	; 0x1ba6 <Keypad_GetRow+0x58>
	}
	else if (Dio_udtreadChanel(DIO_PORTC, DIO_PIN3) == DIO_LOW)
    1b90:	82 e0       	ldi	r24, 0x02	; 2
    1b92:	63 e0       	ldi	r22, 0x03	; 3
    1b94:	0e 94 4f 11 	call	0x229e	; 0x229e <Dio_udtreadChanel>
    1b98:	88 23       	and	r24, r24
    1b9a:	19 f4       	brne	.+6      	; 0x1ba2 <Keypad_GetRow+0x54>
	{
		loc_ButtonRow = KP_ROW3;
    1b9c:	83 e0       	ldi	r24, 0x03	; 3
    1b9e:	89 83       	std	Y+1, r24	; 0x01
    1ba0:	02 c0       	rjmp	.+4      	; 0x1ba6 <Keypad_GetRow+0x58>
	}
	else
	{
		loc_ButtonRow = KP_NOROW;
    1ba2:	8f ef       	ldi	r24, 0xFF	; 255
    1ba4:	89 83       	std	Y+1, r24	; 0x01
	}
	return loc_ButtonRow;
    1ba6:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ba8:	0f 90       	pop	r0
    1baa:	cf 91       	pop	r28
    1bac:	df 91       	pop	r29
    1bae:	08 95       	ret

00001bb0 <Keypad_GetCol>:

static kp_col_t Keypad_GetCol(kp_row_t current_row)
{
    1bb0:	df 93       	push	r29
    1bb2:	cf 93       	push	r28
    1bb4:	00 d0       	rcall	.+0      	; 0x1bb6 <Keypad_GetCol+0x6>
    1bb6:	cd b7       	in	r28, 0x3d	; 61
    1bb8:	de b7       	in	r29, 0x3e	; 62
    1bba:	8a 83       	std	Y+2, r24	; 0x02
	kp_col_t loc_ButtonCol = KP_NOCOL;
    1bbc:	8f ef       	ldi	r24, 0xFF	; 255
    1bbe:	89 83       	std	Y+1, r24	; 0x01

	Dio_vidwriteChanel(DIO_PORTC, DIO_PIN4, DIO_LOW);
    1bc0:	82 e0       	ldi	r24, 0x02	; 2
    1bc2:	64 e0       	ldi	r22, 0x04	; 4
    1bc4:	40 e0       	ldi	r20, 0x00	; 0
    1bc6:	0e 94 10 10 	call	0x2020	; 0x2020 <Dio_vidwriteChanel>
	Dio_vidwriteChanel(DIO_PORTC, DIO_PIN5, DIO_HIGH);
    1bca:	82 e0       	ldi	r24, 0x02	; 2
    1bcc:	65 e0       	ldi	r22, 0x05	; 5
    1bce:	41 e0       	ldi	r20, 0x01	; 1
    1bd0:	0e 94 10 10 	call	0x2020	; 0x2020 <Dio_vidwriteChanel>
	Dio_vidwriteChanel(DIO_PORTC, DIO_PIN6, DIO_HIGH);
    1bd4:	82 e0       	ldi	r24, 0x02	; 2
    1bd6:	66 e0       	ldi	r22, 0x06	; 6
    1bd8:	41 e0       	ldi	r20, 0x01	; 1
    1bda:	0e 94 10 10 	call	0x2020	; 0x2020 <Dio_vidwriteChanel>
	Dio_vidwriteChanel(DIO_PORTC, DIO_PIN7, DIO_HIGH);
    1bde:	82 e0       	ldi	r24, 0x02	; 2
    1be0:	67 e0       	ldi	r22, 0x07	; 7
    1be2:	41 e0       	ldi	r20, 0x01	; 1
    1be4:	0e 94 10 10 	call	0x2020	; 0x2020 <Dio_vidwriteChanel>

	if (Keypad_GetRow() == current_row)
    1be8:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <Keypad_GetRow>
    1bec:	98 2f       	mov	r25, r24
    1bee:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf0:	98 17       	cp	r25, r24
    1bf2:	11 f4       	brne	.+4      	; 0x1bf8 <Keypad_GetCol+0x48>
	{
		loc_ButtonCol = KP_COL0;
    1bf4:	19 82       	std	Y+1, r1	; 0x01
    1bf6:	59 c0       	rjmp	.+178    	; 0x1caa <Keypad_GetCol+0xfa>
	}
	else
	{
		Dio_vidwriteChanel(DIO_PORTC, DIO_PIN4, DIO_HIGH);
    1bf8:	82 e0       	ldi	r24, 0x02	; 2
    1bfa:	64 e0       	ldi	r22, 0x04	; 4
    1bfc:	41 e0       	ldi	r20, 0x01	; 1
    1bfe:	0e 94 10 10 	call	0x2020	; 0x2020 <Dio_vidwriteChanel>
		Dio_vidwriteChanel(DIO_PORTC, DIO_PIN5, DIO_LOW);
    1c02:	82 e0       	ldi	r24, 0x02	; 2
    1c04:	65 e0       	ldi	r22, 0x05	; 5
    1c06:	40 e0       	ldi	r20, 0x00	; 0
    1c08:	0e 94 10 10 	call	0x2020	; 0x2020 <Dio_vidwriteChanel>
		Dio_vidwriteChanel(DIO_PORTC, DIO_PIN6, DIO_HIGH);
    1c0c:	82 e0       	ldi	r24, 0x02	; 2
    1c0e:	66 e0       	ldi	r22, 0x06	; 6
    1c10:	41 e0       	ldi	r20, 0x01	; 1
    1c12:	0e 94 10 10 	call	0x2020	; 0x2020 <Dio_vidwriteChanel>
		Dio_vidwriteChanel(DIO_PORTC, DIO_PIN7, DIO_HIGH);
    1c16:	82 e0       	ldi	r24, 0x02	; 2
    1c18:	67 e0       	ldi	r22, 0x07	; 7
    1c1a:	41 e0       	ldi	r20, 0x01	; 1
    1c1c:	0e 94 10 10 	call	0x2020	; 0x2020 <Dio_vidwriteChanel>

		if (Keypad_GetRow() == current_row)
    1c20:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <Keypad_GetRow>
    1c24:	98 2f       	mov	r25, r24
    1c26:	8a 81       	ldd	r24, Y+2	; 0x02
    1c28:	98 17       	cp	r25, r24
    1c2a:	19 f4       	brne	.+6      	; 0x1c32 <Keypad_GetCol+0x82>
		{
			loc_ButtonCol = KP_COL1;
    1c2c:	81 e0       	ldi	r24, 0x01	; 1
    1c2e:	89 83       	std	Y+1, r24	; 0x01
    1c30:	3c c0       	rjmp	.+120    	; 0x1caa <Keypad_GetCol+0xfa>
		}
		else
		{
			Dio_vidwriteChanel(DIO_PORTC, DIO_PIN4, DIO_HIGH);
    1c32:	82 e0       	ldi	r24, 0x02	; 2
    1c34:	64 e0       	ldi	r22, 0x04	; 4
    1c36:	41 e0       	ldi	r20, 0x01	; 1
    1c38:	0e 94 10 10 	call	0x2020	; 0x2020 <Dio_vidwriteChanel>
			Dio_vidwriteChanel(DIO_PORTC, DIO_PIN5, DIO_HIGH);
    1c3c:	82 e0       	ldi	r24, 0x02	; 2
    1c3e:	65 e0       	ldi	r22, 0x05	; 5
    1c40:	41 e0       	ldi	r20, 0x01	; 1
    1c42:	0e 94 10 10 	call	0x2020	; 0x2020 <Dio_vidwriteChanel>
			Dio_vidwriteChanel(DIO_PORTC, DIO_PIN6, DIO_LOW);
    1c46:	82 e0       	ldi	r24, 0x02	; 2
    1c48:	66 e0       	ldi	r22, 0x06	; 6
    1c4a:	40 e0       	ldi	r20, 0x00	; 0
    1c4c:	0e 94 10 10 	call	0x2020	; 0x2020 <Dio_vidwriteChanel>
			Dio_vidwriteChanel(DIO_PORTC, DIO_PIN7, DIO_HIGH);
    1c50:	82 e0       	ldi	r24, 0x02	; 2
    1c52:	67 e0       	ldi	r22, 0x07	; 7
    1c54:	41 e0       	ldi	r20, 0x01	; 1
    1c56:	0e 94 10 10 	call	0x2020	; 0x2020 <Dio_vidwriteChanel>

			if (Keypad_GetRow() == current_row)
    1c5a:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <Keypad_GetRow>
    1c5e:	98 2f       	mov	r25, r24
    1c60:	8a 81       	ldd	r24, Y+2	; 0x02
    1c62:	98 17       	cp	r25, r24
    1c64:	19 f4       	brne	.+6      	; 0x1c6c <Keypad_GetCol+0xbc>
			{
				loc_ButtonCol = KP_COL2;
    1c66:	82 e0       	ldi	r24, 0x02	; 2
    1c68:	89 83       	std	Y+1, r24	; 0x01
    1c6a:	1f c0       	rjmp	.+62     	; 0x1caa <Keypad_GetCol+0xfa>
			}
			else
			{
				Dio_vidwriteChanel(DIO_PORTC, DIO_PIN4, DIO_HIGH);
    1c6c:	82 e0       	ldi	r24, 0x02	; 2
    1c6e:	64 e0       	ldi	r22, 0x04	; 4
    1c70:	41 e0       	ldi	r20, 0x01	; 1
    1c72:	0e 94 10 10 	call	0x2020	; 0x2020 <Dio_vidwriteChanel>
				Dio_vidwriteChanel(DIO_PORTC, DIO_PIN5, DIO_HIGH);
    1c76:	82 e0       	ldi	r24, 0x02	; 2
    1c78:	65 e0       	ldi	r22, 0x05	; 5
    1c7a:	41 e0       	ldi	r20, 0x01	; 1
    1c7c:	0e 94 10 10 	call	0x2020	; 0x2020 <Dio_vidwriteChanel>
				Dio_vidwriteChanel(DIO_PORTC, DIO_PIN6, DIO_HIGH);
    1c80:	82 e0       	ldi	r24, 0x02	; 2
    1c82:	66 e0       	ldi	r22, 0x06	; 6
    1c84:	41 e0       	ldi	r20, 0x01	; 1
    1c86:	0e 94 10 10 	call	0x2020	; 0x2020 <Dio_vidwriteChanel>
				Dio_vidwriteChanel(DIO_PORTC, DIO_PIN7, DIO_LOW);
    1c8a:	82 e0       	ldi	r24, 0x02	; 2
    1c8c:	67 e0       	ldi	r22, 0x07	; 7
    1c8e:	40 e0       	ldi	r20, 0x00	; 0
    1c90:	0e 94 10 10 	call	0x2020	; 0x2020 <Dio_vidwriteChanel>

				if (Keypad_GetRow() == current_row)
    1c94:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <Keypad_GetRow>
    1c98:	98 2f       	mov	r25, r24
    1c9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c9c:	98 17       	cp	r25, r24
    1c9e:	19 f4       	brne	.+6      	; 0x1ca6 <Keypad_GetCol+0xf6>
				{
					loc_ButtonCol = KP_COL3;
    1ca0:	83 e0       	ldi	r24, 0x03	; 3
    1ca2:	89 83       	std	Y+1, r24	; 0x01
    1ca4:	02 c0       	rjmp	.+4      	; 0x1caa <Keypad_GetCol+0xfa>
				}
				else
				{
					loc_ButtonCol = KP_NOCOL;
    1ca6:	8f ef       	ldi	r24, 0xFF	; 255
    1ca8:	89 83       	std	Y+1, r24	; 0x01
				}
			}
		}
	}
	return loc_ButtonCol;
    1caa:	89 81       	ldd	r24, Y+1	; 0x01
}
    1cac:	0f 90       	pop	r0
    1cae:	0f 90       	pop	r0
    1cb0:	cf 91       	pop	r28
    1cb2:	df 91       	pop	r29
    1cb4:	08 95       	ret

00001cb6 <Keypad_u8GetKey>:

u8 Keypad_u8GetKey(void)
{
    1cb6:	df 93       	push	r29
    1cb8:	cf 93       	push	r28
    1cba:	00 d0       	rcall	.+0      	; 0x1cbc <Keypad_u8GetKey+0x6>
    1cbc:	0f 92       	push	r0
    1cbe:	cd b7       	in	r28, 0x3d	; 61
    1cc0:	de b7       	in	r29, 0x3e	; 62
	u8 loc_key = 0xFF;
    1cc2:	8f ef       	ldi	r24, 0xFF	; 255
    1cc4:	8b 83       	std	Y+3, r24	; 0x03
	kp_row_t loc_Row = KP_NOROW;
    1cc6:	8f ef       	ldi	r24, 0xFF	; 255
    1cc8:	8a 83       	std	Y+2, r24	; 0x02
	kp_row_t loc_Col = KP_NOCOL;
    1cca:	8f ef       	ldi	r24, 0xFF	; 255
    1ccc:	89 83       	std	Y+1, r24	; 0x01

	Keypad_vidInit();
    1cce:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <Keypad_vidInit>
	/*	Check If Keypad Pressed*/
	if (Keypad_IsPressed() == TRUE)
    1cd2:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <Keypad_IsPressed>
    1cd6:	81 30       	cpi	r24, 0x01	; 1
    1cd8:	f1 f4       	brne	.+60     	; 0x1d16 <Keypad_u8GetKey+0x60>
	{
		/*	Get pressed key ROW*/
		loc_Row = Keypad_GetRow();
    1cda:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <Keypad_GetRow>
    1cde:	8a 83       	std	Y+2, r24	; 0x02
		/*	Get pressed key COLUMN	*/
		loc_Col = Keypad_GetCol(loc_Row);
    1ce0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ce2:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <Keypad_GetCol>
    1ce6:	89 83       	std	Y+1, r24	; 0x01
		/* loc_key = Keypad_layout[ROW][COLUMN]	*/
		loc_key = Keypad_layout[loc_Row][loc_Col];
    1ce8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cea:	48 2f       	mov	r20, r24
    1cec:	55 27       	eor	r21, r21
    1cee:	47 fd       	sbrc	r20, 7
    1cf0:	50 95       	com	r21
    1cf2:	89 81       	ldd	r24, Y+1	; 0x01
    1cf4:	28 2f       	mov	r18, r24
    1cf6:	33 27       	eor	r19, r19
    1cf8:	27 fd       	sbrc	r18, 7
    1cfa:	30 95       	com	r19
    1cfc:	ca 01       	movw	r24, r20
    1cfe:	88 0f       	add	r24, r24
    1d00:	99 1f       	adc	r25, r25
    1d02:	88 0f       	add	r24, r24
    1d04:	99 1f       	adc	r25, r25
    1d06:	82 0f       	add	r24, r18
    1d08:	93 1f       	adc	r25, r19
    1d0a:	fc 01       	movw	r30, r24
    1d0c:	e5 59       	subi	r30, 0x95	; 149
    1d0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d10:	80 81       	ld	r24, Z
    1d12:	8b 83       	std	Y+3, r24	; 0x03
    1d14:	02 c0       	rjmp	.+4      	; 0x1d1a <Keypad_u8GetKey+0x64>
	}
	else
	{
		/*	Do Nothing	*/
		loc_key = 0xFF;
    1d16:	8f ef       	ldi	r24, 0xFF	; 255
    1d18:	8b 83       	std	Y+3, r24	; 0x03
	}
	return loc_key;
    1d1a:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1d1c:	0f 90       	pop	r0
    1d1e:	0f 90       	pop	r0
    1d20:	0f 90       	pop	r0
    1d22:	cf 91       	pop	r28
    1d24:	df 91       	pop	r29
    1d26:	08 95       	ret

00001d28 <Buzzer_vidinit>:
 *      Author: Eng_Fawzi
 */
#include "Dio.h"

void Buzzer_vidinit(void)
{
    1d28:	df 93       	push	r29
    1d2a:	cf 93       	push	r28
    1d2c:	cd b7       	in	r28, 0x3d	; 61
    1d2e:	de b7       	in	r29, 0x3e	; 62
	Dio_vidconfigChanel(DIO_PORTA,DIO_PIN3,DIO_OUTPUT);
    1d30:	80 e0       	ldi	r24, 0x00	; 0
    1d32:	63 e0       	ldi	r22, 0x03	; 3
    1d34:	41 e0       	ldi	r20, 0x01	; 1
    1d36:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <Dio_vidconfigChanel>
}
    1d3a:	cf 91       	pop	r28
    1d3c:	df 91       	pop	r29
    1d3e:	08 95       	ret

00001d40 <Buzzer_vidbuzzerOn>:
void Buzzer_vidbuzzerOn(void)
{
    1d40:	df 93       	push	r29
    1d42:	cf 93       	push	r28
    1d44:	cd b7       	in	r28, 0x3d	; 61
    1d46:	de b7       	in	r29, 0x3e	; 62
	Dio_vidwriteChanel(DIO_PORTA, DIO_PIN3, DIO_HIGH);
    1d48:	80 e0       	ldi	r24, 0x00	; 0
    1d4a:	63 e0       	ldi	r22, 0x03	; 3
    1d4c:	41 e0       	ldi	r20, 0x01	; 1
    1d4e:	0e 94 10 10 	call	0x2020	; 0x2020 <Dio_vidwriteChanel>
}
    1d52:	cf 91       	pop	r28
    1d54:	df 91       	pop	r29
    1d56:	08 95       	ret

00001d58 <Buzzer_vidbuzzerOff>:
void Buzzer_vidbuzzerOff(void)
{
    1d58:	df 93       	push	r29
    1d5a:	cf 93       	push	r28
    1d5c:	cd b7       	in	r28, 0x3d	; 61
    1d5e:	de b7       	in	r29, 0x3e	; 62
	Dio_vidwriteChanel(DIO_PORTA, DIO_PIN3, DIO_LOW);
    1d60:	80 e0       	ldi	r24, 0x00	; 0
    1d62:	63 e0       	ldi	r22, 0x03	; 3
    1d64:	40 e0       	ldi	r20, 0x00	; 0
    1d66:	0e 94 10 10 	call	0x2020	; 0x2020 <Dio_vidwriteChanel>
}
    1d6a:	cf 91       	pop	r28
    1d6c:	df 91       	pop	r29
    1d6e:	08 95       	ret

00001d70 <Button_vidbuttonInit>:
 */
#include "Button.h"
#include "Dio.h"

void Button_vidbuttonInit(void)
{
    1d70:	df 93       	push	r29
    1d72:	cf 93       	push	r28
    1d74:	cd b7       	in	r28, 0x3d	; 61
    1d76:	de b7       	in	r29, 0x3e	; 62
	Dio_vidconfigChanel(DIO_PORTB, DIO_PIN0, DIO_INPUT);
    1d78:	81 e0       	ldi	r24, 0x01	; 1
    1d7a:	60 e0       	ldi	r22, 0x00	; 0
    1d7c:	40 e0       	ldi	r20, 0x00	; 0
    1d7e:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTD, DIO_PIN6, DIO_INPUT);
    1d82:	83 e0       	ldi	r24, 0x03	; 3
    1d84:	66 e0       	ldi	r22, 0x06	; 6
    1d86:	40 e0       	ldi	r20, 0x00	; 0
    1d88:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTD, DIO_PIN2, DIO_INPUT);
    1d8c:	83 e0       	ldi	r24, 0x03	; 3
    1d8e:	62 e0       	ldi	r22, 0x02	; 2
    1d90:	40 e0       	ldi	r20, 0x00	; 0
    1d92:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <Dio_vidconfigChanel>
}
    1d96:	cf 91       	pop	r28
    1d98:	df 91       	pop	r29
    1d9a:	08 95       	ret

00001d9c <Button_udtbuttonStatus>:


button_butStatus_t Button_udtbuttonStatus(button_buttonId_t butnId)
{
    1d9c:	df 93       	push	r29
    1d9e:	cf 93       	push	r28
    1da0:	00 d0       	rcall	.+0      	; 0x1da2 <Button_udtbuttonStatus+0x6>
    1da2:	00 d0       	rcall	.+0      	; 0x1da4 <Button_udtbuttonStatus+0x8>
    1da4:	cd b7       	in	r28, 0x3d	; 61
    1da6:	de b7       	in	r29, 0x3e	; 62
    1da8:	8a 83       	std	Y+2, r24	; 0x02
	button_butStatus_t locBtnStatus = RELAEASED;
    1daa:	19 82       	std	Y+1, r1	; 0x01
	switch (butnId)
    1dac:	8a 81       	ldd	r24, Y+2	; 0x02
    1dae:	28 2f       	mov	r18, r24
    1db0:	30 e0       	ldi	r19, 0x00	; 0
    1db2:	3c 83       	std	Y+4, r19	; 0x04
    1db4:	2b 83       	std	Y+3, r18	; 0x03
    1db6:	8b 81       	ldd	r24, Y+3	; 0x03
    1db8:	9c 81       	ldd	r25, Y+4	; 0x04
    1dba:	81 30       	cpi	r24, 0x01	; 1
    1dbc:	91 05       	cpc	r25, r1
    1dbe:	a1 f0       	breq	.+40     	; 0x1de8 <Button_udtbuttonStatus+0x4c>
    1dc0:	2b 81       	ldd	r18, Y+3	; 0x03
    1dc2:	3c 81       	ldd	r19, Y+4	; 0x04
    1dc4:	22 30       	cpi	r18, 0x02	; 2
    1dc6:	31 05       	cpc	r19, r1
    1dc8:	d1 f0       	breq	.+52     	; 0x1dfe <Button_udtbuttonStatus+0x62>
    1dca:	8b 81       	ldd	r24, Y+3	; 0x03
    1dcc:	9c 81       	ldd	r25, Y+4	; 0x04
    1dce:	00 97       	sbiw	r24, 0x00	; 0
    1dd0:	01 f5       	brne	.+64     	; 0x1e12 <Button_udtbuttonStatus+0x76>
	{
		case BUTTON0:
			if (Dio_udtreadChanel(DIO_PORTB, DIO_PIN0) == DIO_HIGH)
    1dd2:	81 e0       	ldi	r24, 0x01	; 1
    1dd4:	60 e0       	ldi	r22, 0x00	; 0
    1dd6:	0e 94 4f 11 	call	0x229e	; 0x229e <Dio_udtreadChanel>
    1dda:	81 30       	cpi	r24, 0x01	; 1
    1ddc:	19 f4       	brne	.+6      	; 0x1de4 <Button_udtbuttonStatus+0x48>
			{
				locBtnStatus = PRESSED;
    1dde:	81 e0       	ldi	r24, 0x01	; 1
    1de0:	89 83       	std	Y+1, r24	; 0x01
    1de2:	17 c0       	rjmp	.+46     	; 0x1e12 <Button_udtbuttonStatus+0x76>
			}
			else
			{
				locBtnStatus = RELAEASED;
    1de4:	19 82       	std	Y+1, r1	; 0x01
    1de6:	15 c0       	rjmp	.+42     	; 0x1e12 <Button_udtbuttonStatus+0x76>
			}
			break;

		case BUTTON1:
			if (Dio_udtreadChanel(DIO_PORTD, DIO_PIN6) == DIO_HIGH)
    1de8:	83 e0       	ldi	r24, 0x03	; 3
    1dea:	66 e0       	ldi	r22, 0x06	; 6
    1dec:	0e 94 4f 11 	call	0x229e	; 0x229e <Dio_udtreadChanel>
    1df0:	81 30       	cpi	r24, 0x01	; 1
    1df2:	19 f4       	brne	.+6      	; 0x1dfa <Button_udtbuttonStatus+0x5e>
			{
				locBtnStatus = PRESSED;
    1df4:	81 e0       	ldi	r24, 0x01	; 1
    1df6:	89 83       	std	Y+1, r24	; 0x01
    1df8:	0c c0       	rjmp	.+24     	; 0x1e12 <Button_udtbuttonStatus+0x76>
			}
			else
			{
				locBtnStatus = RELAEASED;
    1dfa:	19 82       	std	Y+1, r1	; 0x01
    1dfc:	0a c0       	rjmp	.+20     	; 0x1e12 <Button_udtbuttonStatus+0x76>
			}
			break;

		case BUTTON2:
			if (Dio_udtreadChanel(DIO_PORTD, DIO_PIN2) == DIO_HIGH)
    1dfe:	83 e0       	ldi	r24, 0x03	; 3
    1e00:	62 e0       	ldi	r22, 0x02	; 2
    1e02:	0e 94 4f 11 	call	0x229e	; 0x229e <Dio_udtreadChanel>
    1e06:	81 30       	cpi	r24, 0x01	; 1
    1e08:	19 f4       	brne	.+6      	; 0x1e10 <Button_udtbuttonStatus+0x74>
			{
				locBtnStatus = PRESSED;
    1e0a:	81 e0       	ldi	r24, 0x01	; 1
    1e0c:	89 83       	std	Y+1, r24	; 0x01
    1e0e:	01 c0       	rjmp	.+2      	; 0x1e12 <Button_udtbuttonStatus+0x76>
			}
			else
			{
				locBtnStatus = RELAEASED;
    1e10:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
	}
	return locBtnStatus;
    1e12:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e14:	0f 90       	pop	r0
    1e16:	0f 90       	pop	r0
    1e18:	0f 90       	pop	r0
    1e1a:	0f 90       	pop	r0
    1e1c:	cf 91       	pop	r28
    1e1e:	df 91       	pop	r29
    1e20:	08 95       	ret

00001e22 <GINT_vidEnableAllInterrupts>:

#include "GINT_Reg.h"
#include "Bit_Math.h"

void GINT_vidEnableAllInterrupts(void)
{
    1e22:	df 93       	push	r29
    1e24:	cf 93       	push	r28
    1e26:	cd b7       	in	r28, 0x3d	; 61
    1e28:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GINT_SREG_REG,7);
    1e2a:	af e5       	ldi	r26, 0x5F	; 95
    1e2c:	b0 e0       	ldi	r27, 0x00	; 0
    1e2e:	ef e5       	ldi	r30, 0x5F	; 95
    1e30:	f0 e0       	ldi	r31, 0x00	; 0
    1e32:	80 81       	ld	r24, Z
    1e34:	80 68       	ori	r24, 0x80	; 128
    1e36:	8c 93       	st	X, r24
}
    1e38:	cf 91       	pop	r28
    1e3a:	df 91       	pop	r29
    1e3c:	08 95       	ret

00001e3e <GINT_vidDisableAllInterrupts>:

void GINT_vidDisableAllInterrupts(void)
{
    1e3e:	df 93       	push	r29
    1e40:	cf 93       	push	r28
    1e42:	cd b7       	in	r28, 0x3d	; 61
    1e44:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(GINT_SREG_REG,7);
    1e46:	af e5       	ldi	r26, 0x5F	; 95
    1e48:	b0 e0       	ldi	r27, 0x00	; 0
    1e4a:	ef e5       	ldi	r30, 0x5F	; 95
    1e4c:	f0 e0       	ldi	r31, 0x00	; 0
    1e4e:	80 81       	ld	r24, Z
    1e50:	8f 77       	andi	r24, 0x7F	; 127
    1e52:	8c 93       	st	X, r24
}
    1e54:	cf 91       	pop	r28
    1e56:	df 91       	pop	r29
    1e58:	08 95       	ret

00001e5a <Dio_vidconfigChanel>:
 */
#include "Dio.h"
#include "Bit_Math.h"

void Dio_vidconfigChanel(dio_port_t port, dio_pin_t pin,dio_dir_t dir)
{
    1e5a:	df 93       	push	r29
    1e5c:	cf 93       	push	r28
    1e5e:	00 d0       	rcall	.+0      	; 0x1e60 <Dio_vidconfigChanel+0x6>
    1e60:	00 d0       	rcall	.+0      	; 0x1e62 <Dio_vidconfigChanel+0x8>
    1e62:	0f 92       	push	r0
    1e64:	cd b7       	in	r28, 0x3d	; 61
    1e66:	de b7       	in	r29, 0x3e	; 62
    1e68:	89 83       	std	Y+1, r24	; 0x01
    1e6a:	6a 83       	std	Y+2, r22	; 0x02
    1e6c:	4b 83       	std	Y+3, r20	; 0x03
	switch(port)
    1e6e:	89 81       	ldd	r24, Y+1	; 0x01
    1e70:	28 2f       	mov	r18, r24
    1e72:	30 e0       	ldi	r19, 0x00	; 0
    1e74:	3d 83       	std	Y+5, r19	; 0x05
    1e76:	2c 83       	std	Y+4, r18	; 0x04
    1e78:	8c 81       	ldd	r24, Y+4	; 0x04
    1e7a:	9d 81       	ldd	r25, Y+5	; 0x05
    1e7c:	81 30       	cpi	r24, 0x01	; 1
    1e7e:	91 05       	cpc	r25, r1
    1e80:	09 f4       	brne	.+2      	; 0x1e84 <Dio_vidconfigChanel+0x2a>
    1e82:	43 c0       	rjmp	.+134    	; 0x1f0a <Dio_vidconfigChanel+0xb0>
    1e84:	2c 81       	ldd	r18, Y+4	; 0x04
    1e86:	3d 81       	ldd	r19, Y+5	; 0x05
    1e88:	22 30       	cpi	r18, 0x02	; 2
    1e8a:	31 05       	cpc	r19, r1
    1e8c:	2c f4       	brge	.+10     	; 0x1e98 <Dio_vidconfigChanel+0x3e>
    1e8e:	8c 81       	ldd	r24, Y+4	; 0x04
    1e90:	9d 81       	ldd	r25, Y+5	; 0x05
    1e92:	00 97       	sbiw	r24, 0x00	; 0
    1e94:	71 f0       	breq	.+28     	; 0x1eb2 <Dio_vidconfigChanel+0x58>
    1e96:	bc c0       	rjmp	.+376    	; 0x2010 <Dio_vidconfigChanel+0x1b6>
    1e98:	2c 81       	ldd	r18, Y+4	; 0x04
    1e9a:	3d 81       	ldd	r19, Y+5	; 0x05
    1e9c:	22 30       	cpi	r18, 0x02	; 2
    1e9e:	31 05       	cpc	r19, r1
    1ea0:	09 f4       	brne	.+2      	; 0x1ea4 <Dio_vidconfigChanel+0x4a>
    1ea2:	5f c0       	rjmp	.+190    	; 0x1f62 <Dio_vidconfigChanel+0x108>
    1ea4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ea6:	9d 81       	ldd	r25, Y+5	; 0x05
    1ea8:	83 30       	cpi	r24, 0x03	; 3
    1eaa:	91 05       	cpc	r25, r1
    1eac:	09 f4       	brne	.+2      	; 0x1eb0 <Dio_vidconfigChanel+0x56>
    1eae:	85 c0       	rjmp	.+266    	; 0x1fba <Dio_vidconfigChanel+0x160>
    1eb0:	af c0       	rjmp	.+350    	; 0x2010 <Dio_vidconfigChanel+0x1b6>
	{
	case DIO_PORTA:
		if (dir == DIO_INPUT)
    1eb2:	8b 81       	ldd	r24, Y+3	; 0x03
    1eb4:	88 23       	and	r24, r24
    1eb6:	a9 f4       	brne	.+42     	; 0x1ee2 <Dio_vidconfigChanel+0x88>
		{
			CLEAR_BIT(DIO_DDRA_REG,pin);
    1eb8:	aa e3       	ldi	r26, 0x3A	; 58
    1eba:	b0 e0       	ldi	r27, 0x00	; 0
    1ebc:	ea e3       	ldi	r30, 0x3A	; 58
    1ebe:	f0 e0       	ldi	r31, 0x00	; 0
    1ec0:	80 81       	ld	r24, Z
    1ec2:	48 2f       	mov	r20, r24
    1ec4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ec6:	28 2f       	mov	r18, r24
    1ec8:	30 e0       	ldi	r19, 0x00	; 0
    1eca:	81 e0       	ldi	r24, 0x01	; 1
    1ecc:	90 e0       	ldi	r25, 0x00	; 0
    1ece:	02 2e       	mov	r0, r18
    1ed0:	02 c0       	rjmp	.+4      	; 0x1ed6 <Dio_vidconfigChanel+0x7c>
    1ed2:	88 0f       	add	r24, r24
    1ed4:	99 1f       	adc	r25, r25
    1ed6:	0a 94       	dec	r0
    1ed8:	e2 f7       	brpl	.-8      	; 0x1ed2 <Dio_vidconfigChanel+0x78>
    1eda:	80 95       	com	r24
    1edc:	84 23       	and	r24, r20
    1ede:	8c 93       	st	X, r24
    1ee0:	97 c0       	rjmp	.+302    	; 0x2010 <Dio_vidconfigChanel+0x1b6>
		}
		else
		{
			SET_BIT(DIO_DDRA_REG,pin);
    1ee2:	aa e3       	ldi	r26, 0x3A	; 58
    1ee4:	b0 e0       	ldi	r27, 0x00	; 0
    1ee6:	ea e3       	ldi	r30, 0x3A	; 58
    1ee8:	f0 e0       	ldi	r31, 0x00	; 0
    1eea:	80 81       	ld	r24, Z
    1eec:	48 2f       	mov	r20, r24
    1eee:	8a 81       	ldd	r24, Y+2	; 0x02
    1ef0:	28 2f       	mov	r18, r24
    1ef2:	30 e0       	ldi	r19, 0x00	; 0
    1ef4:	81 e0       	ldi	r24, 0x01	; 1
    1ef6:	90 e0       	ldi	r25, 0x00	; 0
    1ef8:	02 2e       	mov	r0, r18
    1efa:	02 c0       	rjmp	.+4      	; 0x1f00 <Dio_vidconfigChanel+0xa6>
    1efc:	88 0f       	add	r24, r24
    1efe:	99 1f       	adc	r25, r25
    1f00:	0a 94       	dec	r0
    1f02:	e2 f7       	brpl	.-8      	; 0x1efc <Dio_vidconfigChanel+0xa2>
    1f04:	84 2b       	or	r24, r20
    1f06:	8c 93       	st	X, r24
    1f08:	83 c0       	rjmp	.+262    	; 0x2010 <Dio_vidconfigChanel+0x1b6>
		}
		break;

	case DIO_PORTB:
		if (dir == DIO_INPUT)
    1f0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f0c:	88 23       	and	r24, r24
    1f0e:	a9 f4       	brne	.+42     	; 0x1f3a <Dio_vidconfigChanel+0xe0>
		{
			CLEAR_BIT(DIO_DDRB_REG,pin);
    1f10:	a7 e3       	ldi	r26, 0x37	; 55
    1f12:	b0 e0       	ldi	r27, 0x00	; 0
    1f14:	e7 e3       	ldi	r30, 0x37	; 55
    1f16:	f0 e0       	ldi	r31, 0x00	; 0
    1f18:	80 81       	ld	r24, Z
    1f1a:	48 2f       	mov	r20, r24
    1f1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f1e:	28 2f       	mov	r18, r24
    1f20:	30 e0       	ldi	r19, 0x00	; 0
    1f22:	81 e0       	ldi	r24, 0x01	; 1
    1f24:	90 e0       	ldi	r25, 0x00	; 0
    1f26:	02 2e       	mov	r0, r18
    1f28:	02 c0       	rjmp	.+4      	; 0x1f2e <Dio_vidconfigChanel+0xd4>
    1f2a:	88 0f       	add	r24, r24
    1f2c:	99 1f       	adc	r25, r25
    1f2e:	0a 94       	dec	r0
    1f30:	e2 f7       	brpl	.-8      	; 0x1f2a <Dio_vidconfigChanel+0xd0>
    1f32:	80 95       	com	r24
    1f34:	84 23       	and	r24, r20
    1f36:	8c 93       	st	X, r24
    1f38:	6b c0       	rjmp	.+214    	; 0x2010 <Dio_vidconfigChanel+0x1b6>
		}
		else
		{
			SET_BIT(DIO_DDRB_REG,pin);
    1f3a:	a7 e3       	ldi	r26, 0x37	; 55
    1f3c:	b0 e0       	ldi	r27, 0x00	; 0
    1f3e:	e7 e3       	ldi	r30, 0x37	; 55
    1f40:	f0 e0       	ldi	r31, 0x00	; 0
    1f42:	80 81       	ld	r24, Z
    1f44:	48 2f       	mov	r20, r24
    1f46:	8a 81       	ldd	r24, Y+2	; 0x02
    1f48:	28 2f       	mov	r18, r24
    1f4a:	30 e0       	ldi	r19, 0x00	; 0
    1f4c:	81 e0       	ldi	r24, 0x01	; 1
    1f4e:	90 e0       	ldi	r25, 0x00	; 0
    1f50:	02 2e       	mov	r0, r18
    1f52:	02 c0       	rjmp	.+4      	; 0x1f58 <Dio_vidconfigChanel+0xfe>
    1f54:	88 0f       	add	r24, r24
    1f56:	99 1f       	adc	r25, r25
    1f58:	0a 94       	dec	r0
    1f5a:	e2 f7       	brpl	.-8      	; 0x1f54 <Dio_vidconfigChanel+0xfa>
    1f5c:	84 2b       	or	r24, r20
    1f5e:	8c 93       	st	X, r24
    1f60:	57 c0       	rjmp	.+174    	; 0x2010 <Dio_vidconfigChanel+0x1b6>
		}
		break;

	case DIO_PORTC:
		if (dir == DIO_INPUT)
    1f62:	8b 81       	ldd	r24, Y+3	; 0x03
    1f64:	88 23       	and	r24, r24
    1f66:	a9 f4       	brne	.+42     	; 0x1f92 <Dio_vidconfigChanel+0x138>
		{
			CLEAR_BIT(DIO_DDRC_REG,pin);
    1f68:	a4 e3       	ldi	r26, 0x34	; 52
    1f6a:	b0 e0       	ldi	r27, 0x00	; 0
    1f6c:	e4 e3       	ldi	r30, 0x34	; 52
    1f6e:	f0 e0       	ldi	r31, 0x00	; 0
    1f70:	80 81       	ld	r24, Z
    1f72:	48 2f       	mov	r20, r24
    1f74:	8a 81       	ldd	r24, Y+2	; 0x02
    1f76:	28 2f       	mov	r18, r24
    1f78:	30 e0       	ldi	r19, 0x00	; 0
    1f7a:	81 e0       	ldi	r24, 0x01	; 1
    1f7c:	90 e0       	ldi	r25, 0x00	; 0
    1f7e:	02 2e       	mov	r0, r18
    1f80:	02 c0       	rjmp	.+4      	; 0x1f86 <Dio_vidconfigChanel+0x12c>
    1f82:	88 0f       	add	r24, r24
    1f84:	99 1f       	adc	r25, r25
    1f86:	0a 94       	dec	r0
    1f88:	e2 f7       	brpl	.-8      	; 0x1f82 <Dio_vidconfigChanel+0x128>
    1f8a:	80 95       	com	r24
    1f8c:	84 23       	and	r24, r20
    1f8e:	8c 93       	st	X, r24
    1f90:	3f c0       	rjmp	.+126    	; 0x2010 <Dio_vidconfigChanel+0x1b6>
		}
		else
		{
			SET_BIT(DIO_DDRC_REG,pin);
    1f92:	a4 e3       	ldi	r26, 0x34	; 52
    1f94:	b0 e0       	ldi	r27, 0x00	; 0
    1f96:	e4 e3       	ldi	r30, 0x34	; 52
    1f98:	f0 e0       	ldi	r31, 0x00	; 0
    1f9a:	80 81       	ld	r24, Z
    1f9c:	48 2f       	mov	r20, r24
    1f9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1fa0:	28 2f       	mov	r18, r24
    1fa2:	30 e0       	ldi	r19, 0x00	; 0
    1fa4:	81 e0       	ldi	r24, 0x01	; 1
    1fa6:	90 e0       	ldi	r25, 0x00	; 0
    1fa8:	02 2e       	mov	r0, r18
    1faa:	02 c0       	rjmp	.+4      	; 0x1fb0 <Dio_vidconfigChanel+0x156>
    1fac:	88 0f       	add	r24, r24
    1fae:	99 1f       	adc	r25, r25
    1fb0:	0a 94       	dec	r0
    1fb2:	e2 f7       	brpl	.-8      	; 0x1fac <Dio_vidconfigChanel+0x152>
    1fb4:	84 2b       	or	r24, r20
    1fb6:	8c 93       	st	X, r24
    1fb8:	2b c0       	rjmp	.+86     	; 0x2010 <Dio_vidconfigChanel+0x1b6>
		}
		break;

	case DIO_PORTD:
		if (dir == DIO_INPUT)
    1fba:	8b 81       	ldd	r24, Y+3	; 0x03
    1fbc:	88 23       	and	r24, r24
    1fbe:	a9 f4       	brne	.+42     	; 0x1fea <Dio_vidconfigChanel+0x190>
		{
			CLEAR_BIT(DIO_DDRD_REG,pin);
    1fc0:	a1 e3       	ldi	r26, 0x31	; 49
    1fc2:	b0 e0       	ldi	r27, 0x00	; 0
    1fc4:	e1 e3       	ldi	r30, 0x31	; 49
    1fc6:	f0 e0       	ldi	r31, 0x00	; 0
    1fc8:	80 81       	ld	r24, Z
    1fca:	48 2f       	mov	r20, r24
    1fcc:	8a 81       	ldd	r24, Y+2	; 0x02
    1fce:	28 2f       	mov	r18, r24
    1fd0:	30 e0       	ldi	r19, 0x00	; 0
    1fd2:	81 e0       	ldi	r24, 0x01	; 1
    1fd4:	90 e0       	ldi	r25, 0x00	; 0
    1fd6:	02 2e       	mov	r0, r18
    1fd8:	02 c0       	rjmp	.+4      	; 0x1fde <Dio_vidconfigChanel+0x184>
    1fda:	88 0f       	add	r24, r24
    1fdc:	99 1f       	adc	r25, r25
    1fde:	0a 94       	dec	r0
    1fe0:	e2 f7       	brpl	.-8      	; 0x1fda <Dio_vidconfigChanel+0x180>
    1fe2:	80 95       	com	r24
    1fe4:	84 23       	and	r24, r20
    1fe6:	8c 93       	st	X, r24
    1fe8:	13 c0       	rjmp	.+38     	; 0x2010 <Dio_vidconfigChanel+0x1b6>
		}
		else
		{
			SET_BIT(DIO_DDRD_REG,pin);
    1fea:	a1 e3       	ldi	r26, 0x31	; 49
    1fec:	b0 e0       	ldi	r27, 0x00	; 0
    1fee:	e1 e3       	ldi	r30, 0x31	; 49
    1ff0:	f0 e0       	ldi	r31, 0x00	; 0
    1ff2:	80 81       	ld	r24, Z
    1ff4:	48 2f       	mov	r20, r24
    1ff6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ff8:	28 2f       	mov	r18, r24
    1ffa:	30 e0       	ldi	r19, 0x00	; 0
    1ffc:	81 e0       	ldi	r24, 0x01	; 1
    1ffe:	90 e0       	ldi	r25, 0x00	; 0
    2000:	02 2e       	mov	r0, r18
    2002:	02 c0       	rjmp	.+4      	; 0x2008 <Dio_vidconfigChanel+0x1ae>
    2004:	88 0f       	add	r24, r24
    2006:	99 1f       	adc	r25, r25
    2008:	0a 94       	dec	r0
    200a:	e2 f7       	brpl	.-8      	; 0x2004 <Dio_vidconfigChanel+0x1aa>
    200c:	84 2b       	or	r24, r20
    200e:	8c 93       	st	X, r24
		}
		break;
	}
}
    2010:	0f 90       	pop	r0
    2012:	0f 90       	pop	r0
    2014:	0f 90       	pop	r0
    2016:	0f 90       	pop	r0
    2018:	0f 90       	pop	r0
    201a:	cf 91       	pop	r28
    201c:	df 91       	pop	r29
    201e:	08 95       	ret

00002020 <Dio_vidwriteChanel>:

void Dio_vidwriteChanel(dio_port_t port, dio_pin_t pin,dio_level_t level)
{
    2020:	df 93       	push	r29
    2022:	cf 93       	push	r28
    2024:	00 d0       	rcall	.+0      	; 0x2026 <Dio_vidwriteChanel+0x6>
    2026:	00 d0       	rcall	.+0      	; 0x2028 <Dio_vidwriteChanel+0x8>
    2028:	0f 92       	push	r0
    202a:	cd b7       	in	r28, 0x3d	; 61
    202c:	de b7       	in	r29, 0x3e	; 62
    202e:	89 83       	std	Y+1, r24	; 0x01
    2030:	6a 83       	std	Y+2, r22	; 0x02
    2032:	4b 83       	std	Y+3, r20	; 0x03
	switch (port)
    2034:	89 81       	ldd	r24, Y+1	; 0x01
    2036:	28 2f       	mov	r18, r24
    2038:	30 e0       	ldi	r19, 0x00	; 0
    203a:	3d 83       	std	Y+5, r19	; 0x05
    203c:	2c 83       	std	Y+4, r18	; 0x04
    203e:	8c 81       	ldd	r24, Y+4	; 0x04
    2040:	9d 81       	ldd	r25, Y+5	; 0x05
    2042:	81 30       	cpi	r24, 0x01	; 1
    2044:	91 05       	cpc	r25, r1
    2046:	09 f4       	brne	.+2      	; 0x204a <Dio_vidwriteChanel+0x2a>
    2048:	43 c0       	rjmp	.+134    	; 0x20d0 <Dio_vidwriteChanel+0xb0>
    204a:	2c 81       	ldd	r18, Y+4	; 0x04
    204c:	3d 81       	ldd	r19, Y+5	; 0x05
    204e:	22 30       	cpi	r18, 0x02	; 2
    2050:	31 05       	cpc	r19, r1
    2052:	2c f4       	brge	.+10     	; 0x205e <Dio_vidwriteChanel+0x3e>
    2054:	8c 81       	ldd	r24, Y+4	; 0x04
    2056:	9d 81       	ldd	r25, Y+5	; 0x05
    2058:	00 97       	sbiw	r24, 0x00	; 0
    205a:	71 f0       	breq	.+28     	; 0x2078 <Dio_vidwriteChanel+0x58>
    205c:	bc c0       	rjmp	.+376    	; 0x21d6 <Dio_vidwriteChanel+0x1b6>
    205e:	2c 81       	ldd	r18, Y+4	; 0x04
    2060:	3d 81       	ldd	r19, Y+5	; 0x05
    2062:	22 30       	cpi	r18, 0x02	; 2
    2064:	31 05       	cpc	r19, r1
    2066:	09 f4       	brne	.+2      	; 0x206a <Dio_vidwriteChanel+0x4a>
    2068:	5f c0       	rjmp	.+190    	; 0x2128 <Dio_vidwriteChanel+0x108>
    206a:	8c 81       	ldd	r24, Y+4	; 0x04
    206c:	9d 81       	ldd	r25, Y+5	; 0x05
    206e:	83 30       	cpi	r24, 0x03	; 3
    2070:	91 05       	cpc	r25, r1
    2072:	09 f4       	brne	.+2      	; 0x2076 <Dio_vidwriteChanel+0x56>
    2074:	85 c0       	rjmp	.+266    	; 0x2180 <Dio_vidwriteChanel+0x160>
    2076:	af c0       	rjmp	.+350    	; 0x21d6 <Dio_vidwriteChanel+0x1b6>
	{
	case DIO_PORTA:
		if (level == DIO_HIGH)
    2078:	8b 81       	ldd	r24, Y+3	; 0x03
    207a:	81 30       	cpi	r24, 0x01	; 1
    207c:	a1 f4       	brne	.+40     	; 0x20a6 <Dio_vidwriteChanel+0x86>
		{
			SET_BIT(DIO_PORTA_REG,pin);
    207e:	ab e3       	ldi	r26, 0x3B	; 59
    2080:	b0 e0       	ldi	r27, 0x00	; 0
    2082:	eb e3       	ldi	r30, 0x3B	; 59
    2084:	f0 e0       	ldi	r31, 0x00	; 0
    2086:	80 81       	ld	r24, Z
    2088:	48 2f       	mov	r20, r24
    208a:	8a 81       	ldd	r24, Y+2	; 0x02
    208c:	28 2f       	mov	r18, r24
    208e:	30 e0       	ldi	r19, 0x00	; 0
    2090:	81 e0       	ldi	r24, 0x01	; 1
    2092:	90 e0       	ldi	r25, 0x00	; 0
    2094:	02 2e       	mov	r0, r18
    2096:	02 c0       	rjmp	.+4      	; 0x209c <Dio_vidwriteChanel+0x7c>
    2098:	88 0f       	add	r24, r24
    209a:	99 1f       	adc	r25, r25
    209c:	0a 94       	dec	r0
    209e:	e2 f7       	brpl	.-8      	; 0x2098 <Dio_vidwriteChanel+0x78>
    20a0:	84 2b       	or	r24, r20
    20a2:	8c 93       	st	X, r24
    20a4:	98 c0       	rjmp	.+304    	; 0x21d6 <Dio_vidwriteChanel+0x1b6>
		}
		else
		{
			CLEAR_BIT(DIO_PORTA_REG,pin);
    20a6:	ab e3       	ldi	r26, 0x3B	; 59
    20a8:	b0 e0       	ldi	r27, 0x00	; 0
    20aa:	eb e3       	ldi	r30, 0x3B	; 59
    20ac:	f0 e0       	ldi	r31, 0x00	; 0
    20ae:	80 81       	ld	r24, Z
    20b0:	48 2f       	mov	r20, r24
    20b2:	8a 81       	ldd	r24, Y+2	; 0x02
    20b4:	28 2f       	mov	r18, r24
    20b6:	30 e0       	ldi	r19, 0x00	; 0
    20b8:	81 e0       	ldi	r24, 0x01	; 1
    20ba:	90 e0       	ldi	r25, 0x00	; 0
    20bc:	02 2e       	mov	r0, r18
    20be:	02 c0       	rjmp	.+4      	; 0x20c4 <Dio_vidwriteChanel+0xa4>
    20c0:	88 0f       	add	r24, r24
    20c2:	99 1f       	adc	r25, r25
    20c4:	0a 94       	dec	r0
    20c6:	e2 f7       	brpl	.-8      	; 0x20c0 <Dio_vidwriteChanel+0xa0>
    20c8:	80 95       	com	r24
    20ca:	84 23       	and	r24, r20
    20cc:	8c 93       	st	X, r24
    20ce:	83 c0       	rjmp	.+262    	; 0x21d6 <Dio_vidwriteChanel+0x1b6>
		}
		break;

	case DIO_PORTB:
		if (level == DIO_HIGH)
    20d0:	8b 81       	ldd	r24, Y+3	; 0x03
    20d2:	81 30       	cpi	r24, 0x01	; 1
    20d4:	a1 f4       	brne	.+40     	; 0x20fe <Dio_vidwriteChanel+0xde>
		{
			SET_BIT(DIO_PORTB_REG,pin);
    20d6:	a8 e3       	ldi	r26, 0x38	; 56
    20d8:	b0 e0       	ldi	r27, 0x00	; 0
    20da:	e8 e3       	ldi	r30, 0x38	; 56
    20dc:	f0 e0       	ldi	r31, 0x00	; 0
    20de:	80 81       	ld	r24, Z
    20e0:	48 2f       	mov	r20, r24
    20e2:	8a 81       	ldd	r24, Y+2	; 0x02
    20e4:	28 2f       	mov	r18, r24
    20e6:	30 e0       	ldi	r19, 0x00	; 0
    20e8:	81 e0       	ldi	r24, 0x01	; 1
    20ea:	90 e0       	ldi	r25, 0x00	; 0
    20ec:	02 2e       	mov	r0, r18
    20ee:	02 c0       	rjmp	.+4      	; 0x20f4 <Dio_vidwriteChanel+0xd4>
    20f0:	88 0f       	add	r24, r24
    20f2:	99 1f       	adc	r25, r25
    20f4:	0a 94       	dec	r0
    20f6:	e2 f7       	brpl	.-8      	; 0x20f0 <Dio_vidwriteChanel+0xd0>
    20f8:	84 2b       	or	r24, r20
    20fa:	8c 93       	st	X, r24
    20fc:	6c c0       	rjmp	.+216    	; 0x21d6 <Dio_vidwriteChanel+0x1b6>
		}
		else
		{
			CLEAR_BIT(DIO_PORTB_REG,pin);
    20fe:	a8 e3       	ldi	r26, 0x38	; 56
    2100:	b0 e0       	ldi	r27, 0x00	; 0
    2102:	e8 e3       	ldi	r30, 0x38	; 56
    2104:	f0 e0       	ldi	r31, 0x00	; 0
    2106:	80 81       	ld	r24, Z
    2108:	48 2f       	mov	r20, r24
    210a:	8a 81       	ldd	r24, Y+2	; 0x02
    210c:	28 2f       	mov	r18, r24
    210e:	30 e0       	ldi	r19, 0x00	; 0
    2110:	81 e0       	ldi	r24, 0x01	; 1
    2112:	90 e0       	ldi	r25, 0x00	; 0
    2114:	02 2e       	mov	r0, r18
    2116:	02 c0       	rjmp	.+4      	; 0x211c <Dio_vidwriteChanel+0xfc>
    2118:	88 0f       	add	r24, r24
    211a:	99 1f       	adc	r25, r25
    211c:	0a 94       	dec	r0
    211e:	e2 f7       	brpl	.-8      	; 0x2118 <Dio_vidwriteChanel+0xf8>
    2120:	80 95       	com	r24
    2122:	84 23       	and	r24, r20
    2124:	8c 93       	st	X, r24
    2126:	57 c0       	rjmp	.+174    	; 0x21d6 <Dio_vidwriteChanel+0x1b6>
		}
		break;

	case DIO_PORTC:
		if (level == DIO_HIGH)
    2128:	8b 81       	ldd	r24, Y+3	; 0x03
    212a:	81 30       	cpi	r24, 0x01	; 1
    212c:	a1 f4       	brne	.+40     	; 0x2156 <Dio_vidwriteChanel+0x136>
		{
			SET_BIT(DIO_PORTC_REG,pin);
    212e:	a5 e3       	ldi	r26, 0x35	; 53
    2130:	b0 e0       	ldi	r27, 0x00	; 0
    2132:	e5 e3       	ldi	r30, 0x35	; 53
    2134:	f0 e0       	ldi	r31, 0x00	; 0
    2136:	80 81       	ld	r24, Z
    2138:	48 2f       	mov	r20, r24
    213a:	8a 81       	ldd	r24, Y+2	; 0x02
    213c:	28 2f       	mov	r18, r24
    213e:	30 e0       	ldi	r19, 0x00	; 0
    2140:	81 e0       	ldi	r24, 0x01	; 1
    2142:	90 e0       	ldi	r25, 0x00	; 0
    2144:	02 2e       	mov	r0, r18
    2146:	02 c0       	rjmp	.+4      	; 0x214c <Dio_vidwriteChanel+0x12c>
    2148:	88 0f       	add	r24, r24
    214a:	99 1f       	adc	r25, r25
    214c:	0a 94       	dec	r0
    214e:	e2 f7       	brpl	.-8      	; 0x2148 <Dio_vidwriteChanel+0x128>
    2150:	84 2b       	or	r24, r20
    2152:	8c 93       	st	X, r24
    2154:	40 c0       	rjmp	.+128    	; 0x21d6 <Dio_vidwriteChanel+0x1b6>
		}
		else
		{
			CLEAR_BIT(DIO_PORTC_REG,pin);
    2156:	a5 e3       	ldi	r26, 0x35	; 53
    2158:	b0 e0       	ldi	r27, 0x00	; 0
    215a:	e5 e3       	ldi	r30, 0x35	; 53
    215c:	f0 e0       	ldi	r31, 0x00	; 0
    215e:	80 81       	ld	r24, Z
    2160:	48 2f       	mov	r20, r24
    2162:	8a 81       	ldd	r24, Y+2	; 0x02
    2164:	28 2f       	mov	r18, r24
    2166:	30 e0       	ldi	r19, 0x00	; 0
    2168:	81 e0       	ldi	r24, 0x01	; 1
    216a:	90 e0       	ldi	r25, 0x00	; 0
    216c:	02 2e       	mov	r0, r18
    216e:	02 c0       	rjmp	.+4      	; 0x2174 <Dio_vidwriteChanel+0x154>
    2170:	88 0f       	add	r24, r24
    2172:	99 1f       	adc	r25, r25
    2174:	0a 94       	dec	r0
    2176:	e2 f7       	brpl	.-8      	; 0x2170 <Dio_vidwriteChanel+0x150>
    2178:	80 95       	com	r24
    217a:	84 23       	and	r24, r20
    217c:	8c 93       	st	X, r24
    217e:	2b c0       	rjmp	.+86     	; 0x21d6 <Dio_vidwriteChanel+0x1b6>
		}
		break;

	case DIO_PORTD:
		if (level == DIO_HIGH)
    2180:	8b 81       	ldd	r24, Y+3	; 0x03
    2182:	81 30       	cpi	r24, 0x01	; 1
    2184:	a1 f4       	brne	.+40     	; 0x21ae <Dio_vidwriteChanel+0x18e>
		{
			SET_BIT(DIO_PORTD_REG,pin);
    2186:	a2 e3       	ldi	r26, 0x32	; 50
    2188:	b0 e0       	ldi	r27, 0x00	; 0
    218a:	e2 e3       	ldi	r30, 0x32	; 50
    218c:	f0 e0       	ldi	r31, 0x00	; 0
    218e:	80 81       	ld	r24, Z
    2190:	48 2f       	mov	r20, r24
    2192:	8a 81       	ldd	r24, Y+2	; 0x02
    2194:	28 2f       	mov	r18, r24
    2196:	30 e0       	ldi	r19, 0x00	; 0
    2198:	81 e0       	ldi	r24, 0x01	; 1
    219a:	90 e0       	ldi	r25, 0x00	; 0
    219c:	02 2e       	mov	r0, r18
    219e:	02 c0       	rjmp	.+4      	; 0x21a4 <Dio_vidwriteChanel+0x184>
    21a0:	88 0f       	add	r24, r24
    21a2:	99 1f       	adc	r25, r25
    21a4:	0a 94       	dec	r0
    21a6:	e2 f7       	brpl	.-8      	; 0x21a0 <Dio_vidwriteChanel+0x180>
    21a8:	84 2b       	or	r24, r20
    21aa:	8c 93       	st	X, r24
    21ac:	14 c0       	rjmp	.+40     	; 0x21d6 <Dio_vidwriteChanel+0x1b6>
		}
		else
		{
			CLEAR_BIT(DIO_PORTD_REG,pin);
    21ae:	a2 e3       	ldi	r26, 0x32	; 50
    21b0:	b0 e0       	ldi	r27, 0x00	; 0
    21b2:	e2 e3       	ldi	r30, 0x32	; 50
    21b4:	f0 e0       	ldi	r31, 0x00	; 0
    21b6:	80 81       	ld	r24, Z
    21b8:	48 2f       	mov	r20, r24
    21ba:	8a 81       	ldd	r24, Y+2	; 0x02
    21bc:	28 2f       	mov	r18, r24
    21be:	30 e0       	ldi	r19, 0x00	; 0
    21c0:	81 e0       	ldi	r24, 0x01	; 1
    21c2:	90 e0       	ldi	r25, 0x00	; 0
    21c4:	02 2e       	mov	r0, r18
    21c6:	02 c0       	rjmp	.+4      	; 0x21cc <Dio_vidwriteChanel+0x1ac>
    21c8:	88 0f       	add	r24, r24
    21ca:	99 1f       	adc	r25, r25
    21cc:	0a 94       	dec	r0
    21ce:	e2 f7       	brpl	.-8      	; 0x21c8 <Dio_vidwriteChanel+0x1a8>
    21d0:	80 95       	com	r24
    21d2:	84 23       	and	r24, r20
    21d4:	8c 93       	st	X, r24
		}
		break;
	}
}
    21d6:	0f 90       	pop	r0
    21d8:	0f 90       	pop	r0
    21da:	0f 90       	pop	r0
    21dc:	0f 90       	pop	r0
    21de:	0f 90       	pop	r0
    21e0:	cf 91       	pop	r28
    21e2:	df 91       	pop	r29
    21e4:	08 95       	ret

000021e6 <Dio_vidWriteChanelGroup>:

void Dio_vidWriteChanelGroup(dio_port_t port, u8 data, u8 mask)
{
    21e6:	df 93       	push	r29
    21e8:	cf 93       	push	r28
    21ea:	00 d0       	rcall	.+0      	; 0x21ec <Dio_vidWriteChanelGroup+0x6>
    21ec:	00 d0       	rcall	.+0      	; 0x21ee <Dio_vidWriteChanelGroup+0x8>
    21ee:	0f 92       	push	r0
    21f0:	cd b7       	in	r28, 0x3d	; 61
    21f2:	de b7       	in	r29, 0x3e	; 62
    21f4:	89 83       	std	Y+1, r24	; 0x01
    21f6:	6a 83       	std	Y+2, r22	; 0x02
    21f8:	4b 83       	std	Y+3, r20	; 0x03
	switch(port)
    21fa:	89 81       	ldd	r24, Y+1	; 0x01
    21fc:	28 2f       	mov	r18, r24
    21fe:	30 e0       	ldi	r19, 0x00	; 0
    2200:	3d 83       	std	Y+5, r19	; 0x05
    2202:	2c 83       	std	Y+4, r18	; 0x04
    2204:	8c 81       	ldd	r24, Y+4	; 0x04
    2206:	9d 81       	ldd	r25, Y+5	; 0x05
    2208:	81 30       	cpi	r24, 0x01	; 1
    220a:	91 05       	cpc	r25, r1
    220c:	01 f1       	breq	.+64     	; 0x224e <Dio_vidWriteChanelGroup+0x68>
    220e:	2c 81       	ldd	r18, Y+4	; 0x04
    2210:	3d 81       	ldd	r19, Y+5	; 0x05
    2212:	22 30       	cpi	r18, 0x02	; 2
    2214:	31 05       	cpc	r19, r1
    2216:	2c f4       	brge	.+10     	; 0x2222 <Dio_vidWriteChanelGroup+0x3c>
    2218:	8c 81       	ldd	r24, Y+4	; 0x04
    221a:	9d 81       	ldd	r25, Y+5	; 0x05
    221c:	00 97       	sbiw	r24, 0x00	; 0
    221e:	61 f0       	breq	.+24     	; 0x2238 <Dio_vidWriteChanelGroup+0x52>
    2220:	36 c0       	rjmp	.+108    	; 0x228e <Dio_vidWriteChanelGroup+0xa8>
    2222:	2c 81       	ldd	r18, Y+4	; 0x04
    2224:	3d 81       	ldd	r19, Y+5	; 0x05
    2226:	22 30       	cpi	r18, 0x02	; 2
    2228:	31 05       	cpc	r19, r1
    222a:	e1 f0       	breq	.+56     	; 0x2264 <Dio_vidWriteChanelGroup+0x7e>
    222c:	8c 81       	ldd	r24, Y+4	; 0x04
    222e:	9d 81       	ldd	r25, Y+5	; 0x05
    2230:	83 30       	cpi	r24, 0x03	; 3
    2232:	91 05       	cpc	r25, r1
    2234:	11 f1       	breq	.+68     	; 0x227a <Dio_vidWriteChanelGroup+0x94>
    2236:	2b c0       	rjmp	.+86     	; 0x228e <Dio_vidWriteChanelGroup+0xa8>
	{
	case DIO_PORTA:
		DIO_PORTA_REG = (DIO_PORTA_REG & mask)|(data);
    2238:	ab e3       	ldi	r26, 0x3B	; 59
    223a:	b0 e0       	ldi	r27, 0x00	; 0
    223c:	eb e3       	ldi	r30, 0x3B	; 59
    223e:	f0 e0       	ldi	r31, 0x00	; 0
    2240:	90 81       	ld	r25, Z
    2242:	8b 81       	ldd	r24, Y+3	; 0x03
    2244:	98 23       	and	r25, r24
    2246:	8a 81       	ldd	r24, Y+2	; 0x02
    2248:	89 2b       	or	r24, r25
    224a:	8c 93       	st	X, r24
    224c:	20 c0       	rjmp	.+64     	; 0x228e <Dio_vidWriteChanelGroup+0xa8>
		break;

	case DIO_PORTB:
		DIO_PORTB_REG = (DIO_PORTB_REG & mask)|(data);
    224e:	a8 e3       	ldi	r26, 0x38	; 56
    2250:	b0 e0       	ldi	r27, 0x00	; 0
    2252:	e8 e3       	ldi	r30, 0x38	; 56
    2254:	f0 e0       	ldi	r31, 0x00	; 0
    2256:	90 81       	ld	r25, Z
    2258:	8b 81       	ldd	r24, Y+3	; 0x03
    225a:	98 23       	and	r25, r24
    225c:	8a 81       	ldd	r24, Y+2	; 0x02
    225e:	89 2b       	or	r24, r25
    2260:	8c 93       	st	X, r24
    2262:	15 c0       	rjmp	.+42     	; 0x228e <Dio_vidWriteChanelGroup+0xa8>
		break;

	case DIO_PORTC:
		DIO_PORTC_REG = (DIO_PORTC_REG & mask)|(data);
    2264:	a5 e3       	ldi	r26, 0x35	; 53
    2266:	b0 e0       	ldi	r27, 0x00	; 0
    2268:	e5 e3       	ldi	r30, 0x35	; 53
    226a:	f0 e0       	ldi	r31, 0x00	; 0
    226c:	90 81       	ld	r25, Z
    226e:	8b 81       	ldd	r24, Y+3	; 0x03
    2270:	98 23       	and	r25, r24
    2272:	8a 81       	ldd	r24, Y+2	; 0x02
    2274:	89 2b       	or	r24, r25
    2276:	8c 93       	st	X, r24
    2278:	0a c0       	rjmp	.+20     	; 0x228e <Dio_vidWriteChanelGroup+0xa8>
		break;

	case DIO_PORTD:
		DIO_PORTD_REG = (DIO_PORTD_REG & mask)|(data);
    227a:	a2 e3       	ldi	r26, 0x32	; 50
    227c:	b0 e0       	ldi	r27, 0x00	; 0
    227e:	e2 e3       	ldi	r30, 0x32	; 50
    2280:	f0 e0       	ldi	r31, 0x00	; 0
    2282:	90 81       	ld	r25, Z
    2284:	8b 81       	ldd	r24, Y+3	; 0x03
    2286:	98 23       	and	r25, r24
    2288:	8a 81       	ldd	r24, Y+2	; 0x02
    228a:	89 2b       	or	r24, r25
    228c:	8c 93       	st	X, r24
		break;
	}
}
    228e:	0f 90       	pop	r0
    2290:	0f 90       	pop	r0
    2292:	0f 90       	pop	r0
    2294:	0f 90       	pop	r0
    2296:	0f 90       	pop	r0
    2298:	cf 91       	pop	r28
    229a:	df 91       	pop	r29
    229c:	08 95       	ret

0000229e <Dio_udtreadChanel>:

dio_level_t Dio_udtreadChanel(dio_port_t port, dio_pin_t pin)
{
    229e:	df 93       	push	r29
    22a0:	cf 93       	push	r28
    22a2:	00 d0       	rcall	.+0      	; 0x22a4 <Dio_udtreadChanel+0x6>
    22a4:	00 d0       	rcall	.+0      	; 0x22a6 <Dio_udtreadChanel+0x8>
    22a6:	0f 92       	push	r0
    22a8:	cd b7       	in	r28, 0x3d	; 61
    22aa:	de b7       	in	r29, 0x3e	; 62
    22ac:	8a 83       	std	Y+2, r24	; 0x02
    22ae:	6b 83       	std	Y+3, r22	; 0x03
	dio_level_t loc_result = DIO_LOW;
    22b0:	19 82       	std	Y+1, r1	; 0x01

	switch (port)
    22b2:	8a 81       	ldd	r24, Y+2	; 0x02
    22b4:	28 2f       	mov	r18, r24
    22b6:	30 e0       	ldi	r19, 0x00	; 0
    22b8:	3d 83       	std	Y+5, r19	; 0x05
    22ba:	2c 83       	std	Y+4, r18	; 0x04
    22bc:	4c 81       	ldd	r20, Y+4	; 0x04
    22be:	5d 81       	ldd	r21, Y+5	; 0x05
    22c0:	41 30       	cpi	r20, 0x01	; 1
    22c2:	51 05       	cpc	r21, r1
    22c4:	79 f1       	breq	.+94     	; 0x2324 <Dio_udtreadChanel+0x86>
    22c6:	8c 81       	ldd	r24, Y+4	; 0x04
    22c8:	9d 81       	ldd	r25, Y+5	; 0x05
    22ca:	82 30       	cpi	r24, 0x02	; 2
    22cc:	91 05       	cpc	r25, r1
    22ce:	34 f4       	brge	.+12     	; 0x22dc <Dio_udtreadChanel+0x3e>
    22d0:	2c 81       	ldd	r18, Y+4	; 0x04
    22d2:	3d 81       	ldd	r19, Y+5	; 0x05
    22d4:	21 15       	cp	r18, r1
    22d6:	31 05       	cpc	r19, r1
    22d8:	69 f0       	breq	.+26     	; 0x22f4 <Dio_udtreadChanel+0x56>
    22da:	6b c0       	rjmp	.+214    	; 0x23b2 <Dio_udtreadChanel+0x114>
    22dc:	4c 81       	ldd	r20, Y+4	; 0x04
    22de:	5d 81       	ldd	r21, Y+5	; 0x05
    22e0:	42 30       	cpi	r20, 0x02	; 2
    22e2:	51 05       	cpc	r21, r1
    22e4:	b9 f1       	breq	.+110    	; 0x2354 <Dio_udtreadChanel+0xb6>
    22e6:	8c 81       	ldd	r24, Y+4	; 0x04
    22e8:	9d 81       	ldd	r25, Y+5	; 0x05
    22ea:	83 30       	cpi	r24, 0x03	; 3
    22ec:	91 05       	cpc	r25, r1
    22ee:	09 f4       	brne	.+2      	; 0x22f2 <Dio_udtreadChanel+0x54>
    22f0:	49 c0       	rjmp	.+146    	; 0x2384 <Dio_udtreadChanel+0xe6>
    22f2:	5f c0       	rjmp	.+190    	; 0x23b2 <Dio_udtreadChanel+0x114>
	{
	case DIO_PORTA:
		if (CHECK_BIT(DIO_PINA_REG,pin) == 1)
    22f4:	e9 e3       	ldi	r30, 0x39	; 57
    22f6:	f0 e0       	ldi	r31, 0x00	; 0
    22f8:	80 81       	ld	r24, Z
    22fa:	28 2f       	mov	r18, r24
    22fc:	30 e0       	ldi	r19, 0x00	; 0
    22fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2300:	88 2f       	mov	r24, r24
    2302:	90 e0       	ldi	r25, 0x00	; 0
    2304:	a9 01       	movw	r20, r18
    2306:	02 c0       	rjmp	.+4      	; 0x230c <Dio_udtreadChanel+0x6e>
    2308:	55 95       	asr	r21
    230a:	47 95       	ror	r20
    230c:	8a 95       	dec	r24
    230e:	e2 f7       	brpl	.-8      	; 0x2308 <Dio_udtreadChanel+0x6a>
    2310:	ca 01       	movw	r24, r20
    2312:	81 70       	andi	r24, 0x01	; 1
    2314:	90 70       	andi	r25, 0x00	; 0
    2316:	88 23       	and	r24, r24
    2318:	19 f0       	breq	.+6      	; 0x2320 <Dio_udtreadChanel+0x82>
		{
			loc_result = DIO_HIGH;
    231a:	81 e0       	ldi	r24, 0x01	; 1
    231c:	89 83       	std	Y+1, r24	; 0x01
    231e:	49 c0       	rjmp	.+146    	; 0x23b2 <Dio_udtreadChanel+0x114>
		}
		else
		{
			loc_result = DIO_LOW;
    2320:	19 82       	std	Y+1, r1	; 0x01
    2322:	47 c0       	rjmp	.+142    	; 0x23b2 <Dio_udtreadChanel+0x114>
		}
		break;

	case DIO_PORTB:
		if (CHECK_BIT(DIO_PINB_REG,pin) == 1)
    2324:	e6 e3       	ldi	r30, 0x36	; 54
    2326:	f0 e0       	ldi	r31, 0x00	; 0
    2328:	80 81       	ld	r24, Z
    232a:	28 2f       	mov	r18, r24
    232c:	30 e0       	ldi	r19, 0x00	; 0
    232e:	8b 81       	ldd	r24, Y+3	; 0x03
    2330:	88 2f       	mov	r24, r24
    2332:	90 e0       	ldi	r25, 0x00	; 0
    2334:	a9 01       	movw	r20, r18
    2336:	02 c0       	rjmp	.+4      	; 0x233c <Dio_udtreadChanel+0x9e>
    2338:	55 95       	asr	r21
    233a:	47 95       	ror	r20
    233c:	8a 95       	dec	r24
    233e:	e2 f7       	brpl	.-8      	; 0x2338 <Dio_udtreadChanel+0x9a>
    2340:	ca 01       	movw	r24, r20
    2342:	81 70       	andi	r24, 0x01	; 1
    2344:	90 70       	andi	r25, 0x00	; 0
    2346:	88 23       	and	r24, r24
    2348:	19 f0       	breq	.+6      	; 0x2350 <Dio_udtreadChanel+0xb2>
		{
			loc_result = DIO_HIGH;
    234a:	81 e0       	ldi	r24, 0x01	; 1
    234c:	89 83       	std	Y+1, r24	; 0x01
    234e:	31 c0       	rjmp	.+98     	; 0x23b2 <Dio_udtreadChanel+0x114>
		}
		else
		{
			loc_result = DIO_LOW;
    2350:	19 82       	std	Y+1, r1	; 0x01
    2352:	2f c0       	rjmp	.+94     	; 0x23b2 <Dio_udtreadChanel+0x114>
		}
		break;

	case DIO_PORTC:
		if (CHECK_BIT(DIO_PINC_REG,pin) == 1)
    2354:	e3 e3       	ldi	r30, 0x33	; 51
    2356:	f0 e0       	ldi	r31, 0x00	; 0
    2358:	80 81       	ld	r24, Z
    235a:	28 2f       	mov	r18, r24
    235c:	30 e0       	ldi	r19, 0x00	; 0
    235e:	8b 81       	ldd	r24, Y+3	; 0x03
    2360:	88 2f       	mov	r24, r24
    2362:	90 e0       	ldi	r25, 0x00	; 0
    2364:	a9 01       	movw	r20, r18
    2366:	02 c0       	rjmp	.+4      	; 0x236c <Dio_udtreadChanel+0xce>
    2368:	55 95       	asr	r21
    236a:	47 95       	ror	r20
    236c:	8a 95       	dec	r24
    236e:	e2 f7       	brpl	.-8      	; 0x2368 <Dio_udtreadChanel+0xca>
    2370:	ca 01       	movw	r24, r20
    2372:	81 70       	andi	r24, 0x01	; 1
    2374:	90 70       	andi	r25, 0x00	; 0
    2376:	88 23       	and	r24, r24
    2378:	19 f0       	breq	.+6      	; 0x2380 <Dio_udtreadChanel+0xe2>
		{
			loc_result = DIO_HIGH;
    237a:	81 e0       	ldi	r24, 0x01	; 1
    237c:	89 83       	std	Y+1, r24	; 0x01
    237e:	19 c0       	rjmp	.+50     	; 0x23b2 <Dio_udtreadChanel+0x114>
		}
		else
		{
			loc_result = DIO_LOW;
    2380:	19 82       	std	Y+1, r1	; 0x01
    2382:	17 c0       	rjmp	.+46     	; 0x23b2 <Dio_udtreadChanel+0x114>
		}
		break;

	case DIO_PORTD:
		if (CHECK_BIT(DIO_PIND_REG,pin) == 1)
    2384:	e0 e3       	ldi	r30, 0x30	; 48
    2386:	f0 e0       	ldi	r31, 0x00	; 0
    2388:	80 81       	ld	r24, Z
    238a:	28 2f       	mov	r18, r24
    238c:	30 e0       	ldi	r19, 0x00	; 0
    238e:	8b 81       	ldd	r24, Y+3	; 0x03
    2390:	88 2f       	mov	r24, r24
    2392:	90 e0       	ldi	r25, 0x00	; 0
    2394:	a9 01       	movw	r20, r18
    2396:	02 c0       	rjmp	.+4      	; 0x239c <Dio_udtreadChanel+0xfe>
    2398:	55 95       	asr	r21
    239a:	47 95       	ror	r20
    239c:	8a 95       	dec	r24
    239e:	e2 f7       	brpl	.-8      	; 0x2398 <Dio_udtreadChanel+0xfa>
    23a0:	ca 01       	movw	r24, r20
    23a2:	81 70       	andi	r24, 0x01	; 1
    23a4:	90 70       	andi	r25, 0x00	; 0
    23a6:	88 23       	and	r24, r24
    23a8:	19 f0       	breq	.+6      	; 0x23b0 <Dio_udtreadChanel+0x112>
		{
			loc_result = DIO_HIGH;
    23aa:	81 e0       	ldi	r24, 0x01	; 1
    23ac:	89 83       	std	Y+1, r24	; 0x01
    23ae:	01 c0       	rjmp	.+2      	; 0x23b2 <Dio_udtreadChanel+0x114>
		}
		else
		{
			loc_result = DIO_LOW;
    23b0:	19 82       	std	Y+1, r1	; 0x01
		}
		break;
	}
	return loc_result;
    23b2:	89 81       	ldd	r24, Y+1	; 0x01
}
    23b4:	0f 90       	pop	r0
    23b6:	0f 90       	pop	r0
    23b8:	0f 90       	pop	r0
    23ba:	0f 90       	pop	r0
    23bc:	0f 90       	pop	r0
    23be:	cf 91       	pop	r28
    23c0:	df 91       	pop	r29
    23c2:	08 95       	ret

000023c4 <Dio_vidflipChanel>:

void Dio_vidflipChanel(dio_port_t port, dio_pin_t pin)
{
    23c4:	df 93       	push	r29
    23c6:	cf 93       	push	r28
    23c8:	00 d0       	rcall	.+0      	; 0x23ca <Dio_vidflipChanel+0x6>
    23ca:	00 d0       	rcall	.+0      	; 0x23cc <Dio_vidflipChanel+0x8>
    23cc:	cd b7       	in	r28, 0x3d	; 61
    23ce:	de b7       	in	r29, 0x3e	; 62
    23d0:	89 83       	std	Y+1, r24	; 0x01
    23d2:	6a 83       	std	Y+2, r22	; 0x02
	switch (port)
    23d4:	89 81       	ldd	r24, Y+1	; 0x01
    23d6:	28 2f       	mov	r18, r24
    23d8:	30 e0       	ldi	r19, 0x00	; 0
    23da:	3c 83       	std	Y+4, r19	; 0x04
    23dc:	2b 83       	std	Y+3, r18	; 0x03
    23de:	8b 81       	ldd	r24, Y+3	; 0x03
    23e0:	9c 81       	ldd	r25, Y+4	; 0x04
    23e2:	81 30       	cpi	r24, 0x01	; 1
    23e4:	91 05       	cpc	r25, r1
    23e6:	49 f1       	breq	.+82     	; 0x243a <Dio_vidflipChanel+0x76>
    23e8:	2b 81       	ldd	r18, Y+3	; 0x03
    23ea:	3c 81       	ldd	r19, Y+4	; 0x04
    23ec:	22 30       	cpi	r18, 0x02	; 2
    23ee:	31 05       	cpc	r19, r1
    23f0:	2c f4       	brge	.+10     	; 0x23fc <Dio_vidflipChanel+0x38>
    23f2:	8b 81       	ldd	r24, Y+3	; 0x03
    23f4:	9c 81       	ldd	r25, Y+4	; 0x04
    23f6:	00 97       	sbiw	r24, 0x00	; 0
    23f8:	61 f0       	breq	.+24     	; 0x2412 <Dio_vidflipChanel+0x4e>
    23fa:	5a c0       	rjmp	.+180    	; 0x24b0 <Dio_vidflipChanel+0xec>
    23fc:	2b 81       	ldd	r18, Y+3	; 0x03
    23fe:	3c 81       	ldd	r19, Y+4	; 0x04
    2400:	22 30       	cpi	r18, 0x02	; 2
    2402:	31 05       	cpc	r19, r1
    2404:	71 f1       	breq	.+92     	; 0x2462 <Dio_vidflipChanel+0x9e>
    2406:	8b 81       	ldd	r24, Y+3	; 0x03
    2408:	9c 81       	ldd	r25, Y+4	; 0x04
    240a:	83 30       	cpi	r24, 0x03	; 3
    240c:	91 05       	cpc	r25, r1
    240e:	e9 f1       	breq	.+122    	; 0x248a <Dio_vidflipChanel+0xc6>
    2410:	4f c0       	rjmp	.+158    	; 0x24b0 <Dio_vidflipChanel+0xec>
	{
	case DIO_PORTA:
		FLIP_BIT(DIO_PORTA_REG,pin);
    2412:	ab e3       	ldi	r26, 0x3B	; 59
    2414:	b0 e0       	ldi	r27, 0x00	; 0
    2416:	eb e3       	ldi	r30, 0x3B	; 59
    2418:	f0 e0       	ldi	r31, 0x00	; 0
    241a:	80 81       	ld	r24, Z
    241c:	48 2f       	mov	r20, r24
    241e:	8a 81       	ldd	r24, Y+2	; 0x02
    2420:	28 2f       	mov	r18, r24
    2422:	30 e0       	ldi	r19, 0x00	; 0
    2424:	81 e0       	ldi	r24, 0x01	; 1
    2426:	90 e0       	ldi	r25, 0x00	; 0
    2428:	02 2e       	mov	r0, r18
    242a:	02 c0       	rjmp	.+4      	; 0x2430 <Dio_vidflipChanel+0x6c>
    242c:	88 0f       	add	r24, r24
    242e:	99 1f       	adc	r25, r25
    2430:	0a 94       	dec	r0
    2432:	e2 f7       	brpl	.-8      	; 0x242c <Dio_vidflipChanel+0x68>
    2434:	84 27       	eor	r24, r20
    2436:	8c 93       	st	X, r24
    2438:	3b c0       	rjmp	.+118    	; 0x24b0 <Dio_vidflipChanel+0xec>
		break;

	case DIO_PORTB:
		FLIP_BIT(DIO_PORTB_REG,pin);
    243a:	a8 e3       	ldi	r26, 0x38	; 56
    243c:	b0 e0       	ldi	r27, 0x00	; 0
    243e:	e8 e3       	ldi	r30, 0x38	; 56
    2440:	f0 e0       	ldi	r31, 0x00	; 0
    2442:	80 81       	ld	r24, Z
    2444:	48 2f       	mov	r20, r24
    2446:	8a 81       	ldd	r24, Y+2	; 0x02
    2448:	28 2f       	mov	r18, r24
    244a:	30 e0       	ldi	r19, 0x00	; 0
    244c:	81 e0       	ldi	r24, 0x01	; 1
    244e:	90 e0       	ldi	r25, 0x00	; 0
    2450:	02 2e       	mov	r0, r18
    2452:	02 c0       	rjmp	.+4      	; 0x2458 <Dio_vidflipChanel+0x94>
    2454:	88 0f       	add	r24, r24
    2456:	99 1f       	adc	r25, r25
    2458:	0a 94       	dec	r0
    245a:	e2 f7       	brpl	.-8      	; 0x2454 <Dio_vidflipChanel+0x90>
    245c:	84 27       	eor	r24, r20
    245e:	8c 93       	st	X, r24
    2460:	27 c0       	rjmp	.+78     	; 0x24b0 <Dio_vidflipChanel+0xec>
		break;

	case DIO_PORTC:
		FLIP_BIT(DIO_PORTC_REG,pin);
    2462:	a5 e3       	ldi	r26, 0x35	; 53
    2464:	b0 e0       	ldi	r27, 0x00	; 0
    2466:	e5 e3       	ldi	r30, 0x35	; 53
    2468:	f0 e0       	ldi	r31, 0x00	; 0
    246a:	80 81       	ld	r24, Z
    246c:	48 2f       	mov	r20, r24
    246e:	8a 81       	ldd	r24, Y+2	; 0x02
    2470:	28 2f       	mov	r18, r24
    2472:	30 e0       	ldi	r19, 0x00	; 0
    2474:	81 e0       	ldi	r24, 0x01	; 1
    2476:	90 e0       	ldi	r25, 0x00	; 0
    2478:	02 2e       	mov	r0, r18
    247a:	02 c0       	rjmp	.+4      	; 0x2480 <Dio_vidflipChanel+0xbc>
    247c:	88 0f       	add	r24, r24
    247e:	99 1f       	adc	r25, r25
    2480:	0a 94       	dec	r0
    2482:	e2 f7       	brpl	.-8      	; 0x247c <Dio_vidflipChanel+0xb8>
    2484:	84 27       	eor	r24, r20
    2486:	8c 93       	st	X, r24
    2488:	13 c0       	rjmp	.+38     	; 0x24b0 <Dio_vidflipChanel+0xec>
		break;

	case DIO_PORTD:
		FLIP_BIT(DIO_PORTD_REG,pin);
    248a:	a2 e3       	ldi	r26, 0x32	; 50
    248c:	b0 e0       	ldi	r27, 0x00	; 0
    248e:	e2 e3       	ldi	r30, 0x32	; 50
    2490:	f0 e0       	ldi	r31, 0x00	; 0
    2492:	80 81       	ld	r24, Z
    2494:	48 2f       	mov	r20, r24
    2496:	8a 81       	ldd	r24, Y+2	; 0x02
    2498:	28 2f       	mov	r18, r24
    249a:	30 e0       	ldi	r19, 0x00	; 0
    249c:	81 e0       	ldi	r24, 0x01	; 1
    249e:	90 e0       	ldi	r25, 0x00	; 0
    24a0:	02 2e       	mov	r0, r18
    24a2:	02 c0       	rjmp	.+4      	; 0x24a8 <Dio_vidflipChanel+0xe4>
    24a4:	88 0f       	add	r24, r24
    24a6:	99 1f       	adc	r25, r25
    24a8:	0a 94       	dec	r0
    24aa:	e2 f7       	brpl	.-8      	; 0x24a4 <Dio_vidflipChanel+0xe0>
    24ac:	84 27       	eor	r24, r20
    24ae:	8c 93       	st	X, r24
		break;
	}
}
    24b0:	0f 90       	pop	r0
    24b2:	0f 90       	pop	r0
    24b4:	0f 90       	pop	r0
    24b6:	0f 90       	pop	r0
    24b8:	cf 91       	pop	r28
    24ba:	df 91       	pop	r29
    24bc:	08 95       	ret

000024be <Dio_vidPullUpEn>:
void Dio_vidPullUpEn(dio_port_t port, dio_pin_t pin)
{
    24be:	df 93       	push	r29
    24c0:	cf 93       	push	r28
    24c2:	00 d0       	rcall	.+0      	; 0x24c4 <Dio_vidPullUpEn+0x6>
    24c4:	00 d0       	rcall	.+0      	; 0x24c6 <Dio_vidPullUpEn+0x8>
    24c6:	cd b7       	in	r28, 0x3d	; 61
    24c8:	de b7       	in	r29, 0x3e	; 62
    24ca:	89 83       	std	Y+1, r24	; 0x01
    24cc:	6a 83       	std	Y+2, r22	; 0x02
	switch (port)
    24ce:	89 81       	ldd	r24, Y+1	; 0x01
    24d0:	28 2f       	mov	r18, r24
    24d2:	30 e0       	ldi	r19, 0x00	; 0
    24d4:	3c 83       	std	Y+4, r19	; 0x04
    24d6:	2b 83       	std	Y+3, r18	; 0x03
    24d8:	8b 81       	ldd	r24, Y+3	; 0x03
    24da:	9c 81       	ldd	r25, Y+4	; 0x04
    24dc:	81 30       	cpi	r24, 0x01	; 1
    24de:	91 05       	cpc	r25, r1
    24e0:	49 f1       	breq	.+82     	; 0x2534 <Dio_vidPullUpEn+0x76>
    24e2:	2b 81       	ldd	r18, Y+3	; 0x03
    24e4:	3c 81       	ldd	r19, Y+4	; 0x04
    24e6:	22 30       	cpi	r18, 0x02	; 2
    24e8:	31 05       	cpc	r19, r1
    24ea:	2c f4       	brge	.+10     	; 0x24f6 <Dio_vidPullUpEn+0x38>
    24ec:	8b 81       	ldd	r24, Y+3	; 0x03
    24ee:	9c 81       	ldd	r25, Y+4	; 0x04
    24f0:	00 97       	sbiw	r24, 0x00	; 0
    24f2:	61 f0       	breq	.+24     	; 0x250c <Dio_vidPullUpEn+0x4e>
    24f4:	5a c0       	rjmp	.+180    	; 0x25aa <Dio_vidPullUpEn+0xec>
    24f6:	2b 81       	ldd	r18, Y+3	; 0x03
    24f8:	3c 81       	ldd	r19, Y+4	; 0x04
    24fa:	22 30       	cpi	r18, 0x02	; 2
    24fc:	31 05       	cpc	r19, r1
    24fe:	71 f1       	breq	.+92     	; 0x255c <Dio_vidPullUpEn+0x9e>
    2500:	8b 81       	ldd	r24, Y+3	; 0x03
    2502:	9c 81       	ldd	r25, Y+4	; 0x04
    2504:	83 30       	cpi	r24, 0x03	; 3
    2506:	91 05       	cpc	r25, r1
    2508:	e9 f1       	breq	.+122    	; 0x2584 <Dio_vidPullUpEn+0xc6>
    250a:	4f c0       	rjmp	.+158    	; 0x25aa <Dio_vidPullUpEn+0xec>
	{
	case DIO_PORTA:
		SET_BIT(DIO_PORTA_REG,pin);
    250c:	ab e3       	ldi	r26, 0x3B	; 59
    250e:	b0 e0       	ldi	r27, 0x00	; 0
    2510:	eb e3       	ldi	r30, 0x3B	; 59
    2512:	f0 e0       	ldi	r31, 0x00	; 0
    2514:	80 81       	ld	r24, Z
    2516:	48 2f       	mov	r20, r24
    2518:	8a 81       	ldd	r24, Y+2	; 0x02
    251a:	28 2f       	mov	r18, r24
    251c:	30 e0       	ldi	r19, 0x00	; 0
    251e:	81 e0       	ldi	r24, 0x01	; 1
    2520:	90 e0       	ldi	r25, 0x00	; 0
    2522:	02 2e       	mov	r0, r18
    2524:	02 c0       	rjmp	.+4      	; 0x252a <Dio_vidPullUpEn+0x6c>
    2526:	88 0f       	add	r24, r24
    2528:	99 1f       	adc	r25, r25
    252a:	0a 94       	dec	r0
    252c:	e2 f7       	brpl	.-8      	; 0x2526 <Dio_vidPullUpEn+0x68>
    252e:	84 2b       	or	r24, r20
    2530:	8c 93       	st	X, r24
    2532:	3b c0       	rjmp	.+118    	; 0x25aa <Dio_vidPullUpEn+0xec>
		break;

	case DIO_PORTB:
		SET_BIT(DIO_PORTB_REG,pin);
    2534:	a8 e3       	ldi	r26, 0x38	; 56
    2536:	b0 e0       	ldi	r27, 0x00	; 0
    2538:	e8 e3       	ldi	r30, 0x38	; 56
    253a:	f0 e0       	ldi	r31, 0x00	; 0
    253c:	80 81       	ld	r24, Z
    253e:	48 2f       	mov	r20, r24
    2540:	8a 81       	ldd	r24, Y+2	; 0x02
    2542:	28 2f       	mov	r18, r24
    2544:	30 e0       	ldi	r19, 0x00	; 0
    2546:	81 e0       	ldi	r24, 0x01	; 1
    2548:	90 e0       	ldi	r25, 0x00	; 0
    254a:	02 2e       	mov	r0, r18
    254c:	02 c0       	rjmp	.+4      	; 0x2552 <Dio_vidPullUpEn+0x94>
    254e:	88 0f       	add	r24, r24
    2550:	99 1f       	adc	r25, r25
    2552:	0a 94       	dec	r0
    2554:	e2 f7       	brpl	.-8      	; 0x254e <Dio_vidPullUpEn+0x90>
    2556:	84 2b       	or	r24, r20
    2558:	8c 93       	st	X, r24
    255a:	27 c0       	rjmp	.+78     	; 0x25aa <Dio_vidPullUpEn+0xec>
		break;

	case DIO_PORTC:
		SET_BIT(DIO_PORTC_REG,pin);
    255c:	a5 e3       	ldi	r26, 0x35	; 53
    255e:	b0 e0       	ldi	r27, 0x00	; 0
    2560:	e5 e3       	ldi	r30, 0x35	; 53
    2562:	f0 e0       	ldi	r31, 0x00	; 0
    2564:	80 81       	ld	r24, Z
    2566:	48 2f       	mov	r20, r24
    2568:	8a 81       	ldd	r24, Y+2	; 0x02
    256a:	28 2f       	mov	r18, r24
    256c:	30 e0       	ldi	r19, 0x00	; 0
    256e:	81 e0       	ldi	r24, 0x01	; 1
    2570:	90 e0       	ldi	r25, 0x00	; 0
    2572:	02 2e       	mov	r0, r18
    2574:	02 c0       	rjmp	.+4      	; 0x257a <Dio_vidPullUpEn+0xbc>
    2576:	88 0f       	add	r24, r24
    2578:	99 1f       	adc	r25, r25
    257a:	0a 94       	dec	r0
    257c:	e2 f7       	brpl	.-8      	; 0x2576 <Dio_vidPullUpEn+0xb8>
    257e:	84 2b       	or	r24, r20
    2580:	8c 93       	st	X, r24
    2582:	13 c0       	rjmp	.+38     	; 0x25aa <Dio_vidPullUpEn+0xec>
		break;

	case DIO_PORTD:
		SET_BIT(DIO_PORTD_REG,pin);
    2584:	a2 e3       	ldi	r26, 0x32	; 50
    2586:	b0 e0       	ldi	r27, 0x00	; 0
    2588:	e2 e3       	ldi	r30, 0x32	; 50
    258a:	f0 e0       	ldi	r31, 0x00	; 0
    258c:	80 81       	ld	r24, Z
    258e:	48 2f       	mov	r20, r24
    2590:	8a 81       	ldd	r24, Y+2	; 0x02
    2592:	28 2f       	mov	r18, r24
    2594:	30 e0       	ldi	r19, 0x00	; 0
    2596:	81 e0       	ldi	r24, 0x01	; 1
    2598:	90 e0       	ldi	r25, 0x00	; 0
    259a:	02 2e       	mov	r0, r18
    259c:	02 c0       	rjmp	.+4      	; 0x25a2 <Dio_vidPullUpEn+0xe4>
    259e:	88 0f       	add	r24, r24
    25a0:	99 1f       	adc	r25, r25
    25a2:	0a 94       	dec	r0
    25a4:	e2 f7       	brpl	.-8      	; 0x259e <Dio_vidPullUpEn+0xe0>
    25a6:	84 2b       	or	r24, r20
    25a8:	8c 93       	st	X, r24
		break;
	}
}
    25aa:	0f 90       	pop	r0
    25ac:	0f 90       	pop	r0
    25ae:	0f 90       	pop	r0
    25b0:	0f 90       	pop	r0
    25b2:	cf 91       	pop	r28
    25b4:	df 91       	pop	r29
    25b6:	08 95       	ret

000025b8 <__udivmodqi4>:
    25b8:	99 1b       	sub	r25, r25
    25ba:	79 e0       	ldi	r23, 0x09	; 9
    25bc:	04 c0       	rjmp	.+8      	; 0x25c6 <__udivmodqi4_ep>

000025be <__udivmodqi4_loop>:
    25be:	99 1f       	adc	r25, r25
    25c0:	96 17       	cp	r25, r22
    25c2:	08 f0       	brcs	.+2      	; 0x25c6 <__udivmodqi4_ep>
    25c4:	96 1b       	sub	r25, r22

000025c6 <__udivmodqi4_ep>:
    25c6:	88 1f       	adc	r24, r24
    25c8:	7a 95       	dec	r23
    25ca:	c9 f7       	brne	.-14     	; 0x25be <__udivmodqi4_loop>
    25cc:	80 95       	com	r24
    25ce:	08 95       	ret

000025d0 <__prologue_saves__>:
    25d0:	2f 92       	push	r2
    25d2:	3f 92       	push	r3
    25d4:	4f 92       	push	r4
    25d6:	5f 92       	push	r5
    25d8:	6f 92       	push	r6
    25da:	7f 92       	push	r7
    25dc:	8f 92       	push	r8
    25de:	9f 92       	push	r9
    25e0:	af 92       	push	r10
    25e2:	bf 92       	push	r11
    25e4:	cf 92       	push	r12
    25e6:	df 92       	push	r13
    25e8:	ef 92       	push	r14
    25ea:	ff 92       	push	r15
    25ec:	0f 93       	push	r16
    25ee:	1f 93       	push	r17
    25f0:	cf 93       	push	r28
    25f2:	df 93       	push	r29
    25f4:	cd b7       	in	r28, 0x3d	; 61
    25f6:	de b7       	in	r29, 0x3e	; 62
    25f8:	ca 1b       	sub	r28, r26
    25fa:	db 0b       	sbc	r29, r27
    25fc:	0f b6       	in	r0, 0x3f	; 63
    25fe:	f8 94       	cli
    2600:	de bf       	out	0x3e, r29	; 62
    2602:	0f be       	out	0x3f, r0	; 63
    2604:	cd bf       	out	0x3d, r28	; 61
    2606:	09 94       	ijmp

00002608 <__epilogue_restores__>:
    2608:	2a 88       	ldd	r2, Y+18	; 0x12
    260a:	39 88       	ldd	r3, Y+17	; 0x11
    260c:	48 88       	ldd	r4, Y+16	; 0x10
    260e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2610:	6e 84       	ldd	r6, Y+14	; 0x0e
    2612:	7d 84       	ldd	r7, Y+13	; 0x0d
    2614:	8c 84       	ldd	r8, Y+12	; 0x0c
    2616:	9b 84       	ldd	r9, Y+11	; 0x0b
    2618:	aa 84       	ldd	r10, Y+10	; 0x0a
    261a:	b9 84       	ldd	r11, Y+9	; 0x09
    261c:	c8 84       	ldd	r12, Y+8	; 0x08
    261e:	df 80       	ldd	r13, Y+7	; 0x07
    2620:	ee 80       	ldd	r14, Y+6	; 0x06
    2622:	fd 80       	ldd	r15, Y+5	; 0x05
    2624:	0c 81       	ldd	r16, Y+4	; 0x04
    2626:	1b 81       	ldd	r17, Y+3	; 0x03
    2628:	aa 81       	ldd	r26, Y+2	; 0x02
    262a:	b9 81       	ldd	r27, Y+1	; 0x01
    262c:	ce 0f       	add	r28, r30
    262e:	d1 1d       	adc	r29, r1
    2630:	0f b6       	in	r0, 0x3f	; 63
    2632:	f8 94       	cli
    2634:	de bf       	out	0x3e, r29	; 62
    2636:	0f be       	out	0x3f, r0	; 63
    2638:	cd bf       	out	0x3d, r28	; 61
    263a:	ed 01       	movw	r28, r26
    263c:	08 95       	ret

0000263e <sprintf>:
    263e:	ae e0       	ldi	r26, 0x0E	; 14
    2640:	b0 e0       	ldi	r27, 0x00	; 0
    2642:	e5 e2       	ldi	r30, 0x25	; 37
    2644:	f3 e1       	ldi	r31, 0x13	; 19
    2646:	0c 94 f6 12 	jmp	0x25ec	; 0x25ec <__prologue_saves__+0x1c>
    264a:	0d 89       	ldd	r16, Y+21	; 0x15
    264c:	1e 89       	ldd	r17, Y+22	; 0x16
    264e:	86 e0       	ldi	r24, 0x06	; 6
    2650:	8c 83       	std	Y+4, r24	; 0x04
    2652:	1a 83       	std	Y+2, r17	; 0x02
    2654:	09 83       	std	Y+1, r16	; 0x01
    2656:	8f ef       	ldi	r24, 0xFF	; 255
    2658:	9f e7       	ldi	r25, 0x7F	; 127
    265a:	9e 83       	std	Y+6, r25	; 0x06
    265c:	8d 83       	std	Y+5, r24	; 0x05
    265e:	9e 01       	movw	r18, r28
    2660:	27 5e       	subi	r18, 0xE7	; 231
    2662:	3f 4f       	sbci	r19, 0xFF	; 255
    2664:	ce 01       	movw	r24, r28
    2666:	01 96       	adiw	r24, 0x01	; 1
    2668:	6f 89       	ldd	r22, Y+23	; 0x17
    266a:	78 8d       	ldd	r23, Y+24	; 0x18
    266c:	a9 01       	movw	r20, r18
    266e:	0e 94 43 13 	call	0x2686	; 0x2686 <vfprintf>
    2672:	2f 81       	ldd	r18, Y+7	; 0x07
    2674:	38 85       	ldd	r19, Y+8	; 0x08
    2676:	02 0f       	add	r16, r18
    2678:	13 1f       	adc	r17, r19
    267a:	f8 01       	movw	r30, r16
    267c:	10 82       	st	Z, r1
    267e:	2e 96       	adiw	r28, 0x0e	; 14
    2680:	e4 e0       	ldi	r30, 0x04	; 4
    2682:	0c 94 12 13 	jmp	0x2624	; 0x2624 <__epilogue_restores__+0x1c>

00002686 <vfprintf>:
    2686:	ab e0       	ldi	r26, 0x0B	; 11
    2688:	b0 e0       	ldi	r27, 0x00	; 0
    268a:	e9 e4       	ldi	r30, 0x49	; 73
    268c:	f3 e1       	ldi	r31, 0x13	; 19
    268e:	0c 94 e8 12 	jmp	0x25d0	; 0x25d0 <__prologue_saves__>
    2692:	3c 01       	movw	r6, r24
    2694:	2b 01       	movw	r4, r22
    2696:	5a 01       	movw	r10, r20
    2698:	fc 01       	movw	r30, r24
    269a:	17 82       	std	Z+7, r1	; 0x07
    269c:	16 82       	std	Z+6, r1	; 0x06
    269e:	83 81       	ldd	r24, Z+3	; 0x03
    26a0:	81 fd       	sbrc	r24, 1
    26a2:	03 c0       	rjmp	.+6      	; 0x26aa <vfprintf+0x24>
    26a4:	6f ef       	ldi	r22, 0xFF	; 255
    26a6:	7f ef       	ldi	r23, 0xFF	; 255
    26a8:	c6 c1       	rjmp	.+908    	; 0x2a36 <vfprintf+0x3b0>
    26aa:	9a e0       	ldi	r25, 0x0A	; 10
    26ac:	89 2e       	mov	r8, r25
    26ae:	1e 01       	movw	r2, r28
    26b0:	08 94       	sec
    26b2:	21 1c       	adc	r2, r1
    26b4:	31 1c       	adc	r3, r1
    26b6:	f3 01       	movw	r30, r6
    26b8:	23 81       	ldd	r18, Z+3	; 0x03
    26ba:	f2 01       	movw	r30, r4
    26bc:	23 fd       	sbrc	r18, 3
    26be:	85 91       	lpm	r24, Z+
    26c0:	23 ff       	sbrs	r18, 3
    26c2:	81 91       	ld	r24, Z+
    26c4:	2f 01       	movw	r4, r30
    26c6:	88 23       	and	r24, r24
    26c8:	09 f4       	brne	.+2      	; 0x26cc <vfprintf+0x46>
    26ca:	b2 c1       	rjmp	.+868    	; 0x2a30 <vfprintf+0x3aa>
    26cc:	85 32       	cpi	r24, 0x25	; 37
    26ce:	39 f4       	brne	.+14     	; 0x26de <vfprintf+0x58>
    26d0:	23 fd       	sbrc	r18, 3
    26d2:	85 91       	lpm	r24, Z+
    26d4:	23 ff       	sbrs	r18, 3
    26d6:	81 91       	ld	r24, Z+
    26d8:	2f 01       	movw	r4, r30
    26da:	85 32       	cpi	r24, 0x25	; 37
    26dc:	29 f4       	brne	.+10     	; 0x26e8 <vfprintf+0x62>
    26de:	90 e0       	ldi	r25, 0x00	; 0
    26e0:	b3 01       	movw	r22, r6
    26e2:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <fputc>
    26e6:	e7 cf       	rjmp	.-50     	; 0x26b6 <vfprintf+0x30>
    26e8:	98 2f       	mov	r25, r24
    26ea:	ff 24       	eor	r15, r15
    26ec:	ee 24       	eor	r14, r14
    26ee:	99 24       	eor	r9, r9
    26f0:	ff e1       	ldi	r31, 0x1F	; 31
    26f2:	ff 15       	cp	r31, r15
    26f4:	d0 f0       	brcs	.+52     	; 0x272a <vfprintf+0xa4>
    26f6:	9b 32       	cpi	r25, 0x2B	; 43
    26f8:	69 f0       	breq	.+26     	; 0x2714 <vfprintf+0x8e>
    26fa:	9c 32       	cpi	r25, 0x2C	; 44
    26fc:	28 f4       	brcc	.+10     	; 0x2708 <vfprintf+0x82>
    26fe:	90 32       	cpi	r25, 0x20	; 32
    2700:	59 f0       	breq	.+22     	; 0x2718 <vfprintf+0x92>
    2702:	93 32       	cpi	r25, 0x23	; 35
    2704:	91 f4       	brne	.+36     	; 0x272a <vfprintf+0xa4>
    2706:	0e c0       	rjmp	.+28     	; 0x2724 <vfprintf+0x9e>
    2708:	9d 32       	cpi	r25, 0x2D	; 45
    270a:	49 f0       	breq	.+18     	; 0x271e <vfprintf+0x98>
    270c:	90 33       	cpi	r25, 0x30	; 48
    270e:	69 f4       	brne	.+26     	; 0x272a <vfprintf+0xa4>
    2710:	41 e0       	ldi	r20, 0x01	; 1
    2712:	24 c0       	rjmp	.+72     	; 0x275c <vfprintf+0xd6>
    2714:	52 e0       	ldi	r21, 0x02	; 2
    2716:	f5 2a       	or	r15, r21
    2718:	84 e0       	ldi	r24, 0x04	; 4
    271a:	f8 2a       	or	r15, r24
    271c:	28 c0       	rjmp	.+80     	; 0x276e <vfprintf+0xe8>
    271e:	98 e0       	ldi	r25, 0x08	; 8
    2720:	f9 2a       	or	r15, r25
    2722:	25 c0       	rjmp	.+74     	; 0x276e <vfprintf+0xe8>
    2724:	e0 e1       	ldi	r30, 0x10	; 16
    2726:	fe 2a       	or	r15, r30
    2728:	22 c0       	rjmp	.+68     	; 0x276e <vfprintf+0xe8>
    272a:	f7 fc       	sbrc	r15, 7
    272c:	29 c0       	rjmp	.+82     	; 0x2780 <vfprintf+0xfa>
    272e:	89 2f       	mov	r24, r25
    2730:	80 53       	subi	r24, 0x30	; 48
    2732:	8a 30       	cpi	r24, 0x0A	; 10
    2734:	70 f4       	brcc	.+28     	; 0x2752 <vfprintf+0xcc>
    2736:	f6 fe       	sbrs	r15, 6
    2738:	05 c0       	rjmp	.+10     	; 0x2744 <vfprintf+0xbe>
    273a:	98 9c       	mul	r9, r8
    273c:	90 2c       	mov	r9, r0
    273e:	11 24       	eor	r1, r1
    2740:	98 0e       	add	r9, r24
    2742:	15 c0       	rjmp	.+42     	; 0x276e <vfprintf+0xe8>
    2744:	e8 9c       	mul	r14, r8
    2746:	e0 2c       	mov	r14, r0
    2748:	11 24       	eor	r1, r1
    274a:	e8 0e       	add	r14, r24
    274c:	f0 e2       	ldi	r31, 0x20	; 32
    274e:	ff 2a       	or	r15, r31
    2750:	0e c0       	rjmp	.+28     	; 0x276e <vfprintf+0xe8>
    2752:	9e 32       	cpi	r25, 0x2E	; 46
    2754:	29 f4       	brne	.+10     	; 0x2760 <vfprintf+0xda>
    2756:	f6 fc       	sbrc	r15, 6
    2758:	6b c1       	rjmp	.+726    	; 0x2a30 <vfprintf+0x3aa>
    275a:	40 e4       	ldi	r20, 0x40	; 64
    275c:	f4 2a       	or	r15, r20
    275e:	07 c0       	rjmp	.+14     	; 0x276e <vfprintf+0xe8>
    2760:	9c 36       	cpi	r25, 0x6C	; 108
    2762:	19 f4       	brne	.+6      	; 0x276a <vfprintf+0xe4>
    2764:	50 e8       	ldi	r21, 0x80	; 128
    2766:	f5 2a       	or	r15, r21
    2768:	02 c0       	rjmp	.+4      	; 0x276e <vfprintf+0xe8>
    276a:	98 36       	cpi	r25, 0x68	; 104
    276c:	49 f4       	brne	.+18     	; 0x2780 <vfprintf+0xfa>
    276e:	f2 01       	movw	r30, r4
    2770:	23 fd       	sbrc	r18, 3
    2772:	95 91       	lpm	r25, Z+
    2774:	23 ff       	sbrs	r18, 3
    2776:	91 91       	ld	r25, Z+
    2778:	2f 01       	movw	r4, r30
    277a:	99 23       	and	r25, r25
    277c:	09 f0       	breq	.+2      	; 0x2780 <vfprintf+0xfa>
    277e:	b8 cf       	rjmp	.-144    	; 0x26f0 <vfprintf+0x6a>
    2780:	89 2f       	mov	r24, r25
    2782:	85 54       	subi	r24, 0x45	; 69
    2784:	83 30       	cpi	r24, 0x03	; 3
    2786:	18 f0       	brcs	.+6      	; 0x278e <vfprintf+0x108>
    2788:	80 52       	subi	r24, 0x20	; 32
    278a:	83 30       	cpi	r24, 0x03	; 3
    278c:	38 f4       	brcc	.+14     	; 0x279c <vfprintf+0x116>
    278e:	44 e0       	ldi	r20, 0x04	; 4
    2790:	50 e0       	ldi	r21, 0x00	; 0
    2792:	a4 0e       	add	r10, r20
    2794:	b5 1e       	adc	r11, r21
    2796:	5f e3       	ldi	r21, 0x3F	; 63
    2798:	59 83       	std	Y+1, r21	; 0x01
    279a:	0f c0       	rjmp	.+30     	; 0x27ba <vfprintf+0x134>
    279c:	93 36       	cpi	r25, 0x63	; 99
    279e:	31 f0       	breq	.+12     	; 0x27ac <vfprintf+0x126>
    27a0:	93 37       	cpi	r25, 0x73	; 115
    27a2:	79 f0       	breq	.+30     	; 0x27c2 <vfprintf+0x13c>
    27a4:	93 35       	cpi	r25, 0x53	; 83
    27a6:	09 f0       	breq	.+2      	; 0x27aa <vfprintf+0x124>
    27a8:	56 c0       	rjmp	.+172    	; 0x2856 <vfprintf+0x1d0>
    27aa:	20 c0       	rjmp	.+64     	; 0x27ec <vfprintf+0x166>
    27ac:	f5 01       	movw	r30, r10
    27ae:	80 81       	ld	r24, Z
    27b0:	89 83       	std	Y+1, r24	; 0x01
    27b2:	42 e0       	ldi	r20, 0x02	; 2
    27b4:	50 e0       	ldi	r21, 0x00	; 0
    27b6:	a4 0e       	add	r10, r20
    27b8:	b5 1e       	adc	r11, r21
    27ba:	61 01       	movw	r12, r2
    27bc:	01 e0       	ldi	r16, 0x01	; 1
    27be:	10 e0       	ldi	r17, 0x00	; 0
    27c0:	12 c0       	rjmp	.+36     	; 0x27e6 <vfprintf+0x160>
    27c2:	f5 01       	movw	r30, r10
    27c4:	c0 80       	ld	r12, Z
    27c6:	d1 80       	ldd	r13, Z+1	; 0x01
    27c8:	f6 fc       	sbrc	r15, 6
    27ca:	03 c0       	rjmp	.+6      	; 0x27d2 <vfprintf+0x14c>
    27cc:	6f ef       	ldi	r22, 0xFF	; 255
    27ce:	7f ef       	ldi	r23, 0xFF	; 255
    27d0:	02 c0       	rjmp	.+4      	; 0x27d6 <vfprintf+0x150>
    27d2:	69 2d       	mov	r22, r9
    27d4:	70 e0       	ldi	r23, 0x00	; 0
    27d6:	42 e0       	ldi	r20, 0x02	; 2
    27d8:	50 e0       	ldi	r21, 0x00	; 0
    27da:	a4 0e       	add	r10, r20
    27dc:	b5 1e       	adc	r11, r21
    27de:	c6 01       	movw	r24, r12
    27e0:	0e 94 2b 15 	call	0x2a56	; 0x2a56 <strnlen>
    27e4:	8c 01       	movw	r16, r24
    27e6:	5f e7       	ldi	r21, 0x7F	; 127
    27e8:	f5 22       	and	r15, r21
    27ea:	14 c0       	rjmp	.+40     	; 0x2814 <vfprintf+0x18e>
    27ec:	f5 01       	movw	r30, r10
    27ee:	c0 80       	ld	r12, Z
    27f0:	d1 80       	ldd	r13, Z+1	; 0x01
    27f2:	f6 fc       	sbrc	r15, 6
    27f4:	03 c0       	rjmp	.+6      	; 0x27fc <vfprintf+0x176>
    27f6:	6f ef       	ldi	r22, 0xFF	; 255
    27f8:	7f ef       	ldi	r23, 0xFF	; 255
    27fa:	02 c0       	rjmp	.+4      	; 0x2800 <vfprintf+0x17a>
    27fc:	69 2d       	mov	r22, r9
    27fe:	70 e0       	ldi	r23, 0x00	; 0
    2800:	42 e0       	ldi	r20, 0x02	; 2
    2802:	50 e0       	ldi	r21, 0x00	; 0
    2804:	a4 0e       	add	r10, r20
    2806:	b5 1e       	adc	r11, r21
    2808:	c6 01       	movw	r24, r12
    280a:	0e 94 20 15 	call	0x2a40	; 0x2a40 <strnlen_P>
    280e:	8c 01       	movw	r16, r24
    2810:	50 e8       	ldi	r21, 0x80	; 128
    2812:	f5 2a       	or	r15, r21
    2814:	f3 fe       	sbrs	r15, 3
    2816:	07 c0       	rjmp	.+14     	; 0x2826 <vfprintf+0x1a0>
    2818:	1a c0       	rjmp	.+52     	; 0x284e <vfprintf+0x1c8>
    281a:	80 e2       	ldi	r24, 0x20	; 32
    281c:	90 e0       	ldi	r25, 0x00	; 0
    281e:	b3 01       	movw	r22, r6
    2820:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <fputc>
    2824:	ea 94       	dec	r14
    2826:	8e 2d       	mov	r24, r14
    2828:	90 e0       	ldi	r25, 0x00	; 0
    282a:	08 17       	cp	r16, r24
    282c:	19 07       	cpc	r17, r25
    282e:	a8 f3       	brcs	.-22     	; 0x281a <vfprintf+0x194>
    2830:	0e c0       	rjmp	.+28     	; 0x284e <vfprintf+0x1c8>
    2832:	f6 01       	movw	r30, r12
    2834:	f7 fc       	sbrc	r15, 7
    2836:	85 91       	lpm	r24, Z+
    2838:	f7 fe       	sbrs	r15, 7
    283a:	81 91       	ld	r24, Z+
    283c:	6f 01       	movw	r12, r30
    283e:	90 e0       	ldi	r25, 0x00	; 0
    2840:	b3 01       	movw	r22, r6
    2842:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <fputc>
    2846:	e1 10       	cpse	r14, r1
    2848:	ea 94       	dec	r14
    284a:	01 50       	subi	r16, 0x01	; 1
    284c:	10 40       	sbci	r17, 0x00	; 0
    284e:	01 15       	cp	r16, r1
    2850:	11 05       	cpc	r17, r1
    2852:	79 f7       	brne	.-34     	; 0x2832 <vfprintf+0x1ac>
    2854:	ea c0       	rjmp	.+468    	; 0x2a2a <vfprintf+0x3a4>
    2856:	94 36       	cpi	r25, 0x64	; 100
    2858:	11 f0       	breq	.+4      	; 0x285e <vfprintf+0x1d8>
    285a:	99 36       	cpi	r25, 0x69	; 105
    285c:	69 f5       	brne	.+90     	; 0x28b8 <vfprintf+0x232>
    285e:	f7 fe       	sbrs	r15, 7
    2860:	08 c0       	rjmp	.+16     	; 0x2872 <vfprintf+0x1ec>
    2862:	f5 01       	movw	r30, r10
    2864:	20 81       	ld	r18, Z
    2866:	31 81       	ldd	r19, Z+1	; 0x01
    2868:	42 81       	ldd	r20, Z+2	; 0x02
    286a:	53 81       	ldd	r21, Z+3	; 0x03
    286c:	84 e0       	ldi	r24, 0x04	; 4
    286e:	90 e0       	ldi	r25, 0x00	; 0
    2870:	0a c0       	rjmp	.+20     	; 0x2886 <vfprintf+0x200>
    2872:	f5 01       	movw	r30, r10
    2874:	80 81       	ld	r24, Z
    2876:	91 81       	ldd	r25, Z+1	; 0x01
    2878:	9c 01       	movw	r18, r24
    287a:	44 27       	eor	r20, r20
    287c:	37 fd       	sbrc	r19, 7
    287e:	40 95       	com	r20
    2880:	54 2f       	mov	r21, r20
    2882:	82 e0       	ldi	r24, 0x02	; 2
    2884:	90 e0       	ldi	r25, 0x00	; 0
    2886:	a8 0e       	add	r10, r24
    2888:	b9 1e       	adc	r11, r25
    288a:	9f e6       	ldi	r25, 0x6F	; 111
    288c:	f9 22       	and	r15, r25
    288e:	57 ff       	sbrs	r21, 7
    2890:	09 c0       	rjmp	.+18     	; 0x28a4 <vfprintf+0x21e>
    2892:	50 95       	com	r21
    2894:	40 95       	com	r20
    2896:	30 95       	com	r19
    2898:	21 95       	neg	r18
    289a:	3f 4f       	sbci	r19, 0xFF	; 255
    289c:	4f 4f       	sbci	r20, 0xFF	; 255
    289e:	5f 4f       	sbci	r21, 0xFF	; 255
    28a0:	e0 e8       	ldi	r30, 0x80	; 128
    28a2:	fe 2a       	or	r15, r30
    28a4:	ca 01       	movw	r24, r20
    28a6:	b9 01       	movw	r22, r18
    28a8:	a1 01       	movw	r20, r2
    28aa:	2a e0       	ldi	r18, 0x0A	; 10
    28ac:	30 e0       	ldi	r19, 0x00	; 0
    28ae:	0e 94 62 15 	call	0x2ac4	; 0x2ac4 <__ultoa_invert>
    28b2:	d8 2e       	mov	r13, r24
    28b4:	d2 18       	sub	r13, r2
    28b6:	40 c0       	rjmp	.+128    	; 0x2938 <vfprintf+0x2b2>
    28b8:	95 37       	cpi	r25, 0x75	; 117
    28ba:	29 f4       	brne	.+10     	; 0x28c6 <vfprintf+0x240>
    28bc:	1f 2d       	mov	r17, r15
    28be:	1f 7e       	andi	r17, 0xEF	; 239
    28c0:	2a e0       	ldi	r18, 0x0A	; 10
    28c2:	30 e0       	ldi	r19, 0x00	; 0
    28c4:	1d c0       	rjmp	.+58     	; 0x2900 <vfprintf+0x27a>
    28c6:	1f 2d       	mov	r17, r15
    28c8:	19 7f       	andi	r17, 0xF9	; 249
    28ca:	9f 36       	cpi	r25, 0x6F	; 111
    28cc:	61 f0       	breq	.+24     	; 0x28e6 <vfprintf+0x260>
    28ce:	90 37       	cpi	r25, 0x70	; 112
    28d0:	20 f4       	brcc	.+8      	; 0x28da <vfprintf+0x254>
    28d2:	98 35       	cpi	r25, 0x58	; 88
    28d4:	09 f0       	breq	.+2      	; 0x28d8 <vfprintf+0x252>
    28d6:	ac c0       	rjmp	.+344    	; 0x2a30 <vfprintf+0x3aa>
    28d8:	0f c0       	rjmp	.+30     	; 0x28f8 <vfprintf+0x272>
    28da:	90 37       	cpi	r25, 0x70	; 112
    28dc:	39 f0       	breq	.+14     	; 0x28ec <vfprintf+0x266>
    28de:	98 37       	cpi	r25, 0x78	; 120
    28e0:	09 f0       	breq	.+2      	; 0x28e4 <vfprintf+0x25e>
    28e2:	a6 c0       	rjmp	.+332    	; 0x2a30 <vfprintf+0x3aa>
    28e4:	04 c0       	rjmp	.+8      	; 0x28ee <vfprintf+0x268>
    28e6:	28 e0       	ldi	r18, 0x08	; 8
    28e8:	30 e0       	ldi	r19, 0x00	; 0
    28ea:	0a c0       	rjmp	.+20     	; 0x2900 <vfprintf+0x27a>
    28ec:	10 61       	ori	r17, 0x10	; 16
    28ee:	14 fd       	sbrc	r17, 4
    28f0:	14 60       	ori	r17, 0x04	; 4
    28f2:	20 e1       	ldi	r18, 0x10	; 16
    28f4:	30 e0       	ldi	r19, 0x00	; 0
    28f6:	04 c0       	rjmp	.+8      	; 0x2900 <vfprintf+0x27a>
    28f8:	14 fd       	sbrc	r17, 4
    28fa:	16 60       	ori	r17, 0x06	; 6
    28fc:	20 e1       	ldi	r18, 0x10	; 16
    28fe:	32 e0       	ldi	r19, 0x02	; 2
    2900:	17 ff       	sbrs	r17, 7
    2902:	08 c0       	rjmp	.+16     	; 0x2914 <vfprintf+0x28e>
    2904:	f5 01       	movw	r30, r10
    2906:	60 81       	ld	r22, Z
    2908:	71 81       	ldd	r23, Z+1	; 0x01
    290a:	82 81       	ldd	r24, Z+2	; 0x02
    290c:	93 81       	ldd	r25, Z+3	; 0x03
    290e:	44 e0       	ldi	r20, 0x04	; 4
    2910:	50 e0       	ldi	r21, 0x00	; 0
    2912:	08 c0       	rjmp	.+16     	; 0x2924 <vfprintf+0x29e>
    2914:	f5 01       	movw	r30, r10
    2916:	80 81       	ld	r24, Z
    2918:	91 81       	ldd	r25, Z+1	; 0x01
    291a:	bc 01       	movw	r22, r24
    291c:	80 e0       	ldi	r24, 0x00	; 0
    291e:	90 e0       	ldi	r25, 0x00	; 0
    2920:	42 e0       	ldi	r20, 0x02	; 2
    2922:	50 e0       	ldi	r21, 0x00	; 0
    2924:	a4 0e       	add	r10, r20
    2926:	b5 1e       	adc	r11, r21
    2928:	a1 01       	movw	r20, r2
    292a:	0e 94 62 15 	call	0x2ac4	; 0x2ac4 <__ultoa_invert>
    292e:	d8 2e       	mov	r13, r24
    2930:	d2 18       	sub	r13, r2
    2932:	8f e7       	ldi	r24, 0x7F	; 127
    2934:	f8 2e       	mov	r15, r24
    2936:	f1 22       	and	r15, r17
    2938:	f6 fe       	sbrs	r15, 6
    293a:	0b c0       	rjmp	.+22     	; 0x2952 <vfprintf+0x2cc>
    293c:	5e ef       	ldi	r21, 0xFE	; 254
    293e:	f5 22       	and	r15, r21
    2940:	d9 14       	cp	r13, r9
    2942:	38 f4       	brcc	.+14     	; 0x2952 <vfprintf+0x2cc>
    2944:	f4 fe       	sbrs	r15, 4
    2946:	07 c0       	rjmp	.+14     	; 0x2956 <vfprintf+0x2d0>
    2948:	f2 fc       	sbrc	r15, 2
    294a:	05 c0       	rjmp	.+10     	; 0x2956 <vfprintf+0x2d0>
    294c:	8f ee       	ldi	r24, 0xEF	; 239
    294e:	f8 22       	and	r15, r24
    2950:	02 c0       	rjmp	.+4      	; 0x2956 <vfprintf+0x2d0>
    2952:	1d 2d       	mov	r17, r13
    2954:	01 c0       	rjmp	.+2      	; 0x2958 <vfprintf+0x2d2>
    2956:	19 2d       	mov	r17, r9
    2958:	f4 fe       	sbrs	r15, 4
    295a:	0d c0       	rjmp	.+26     	; 0x2976 <vfprintf+0x2f0>
    295c:	fe 01       	movw	r30, r28
    295e:	ed 0d       	add	r30, r13
    2960:	f1 1d       	adc	r31, r1
    2962:	80 81       	ld	r24, Z
    2964:	80 33       	cpi	r24, 0x30	; 48
    2966:	19 f4       	brne	.+6      	; 0x296e <vfprintf+0x2e8>
    2968:	99 ee       	ldi	r25, 0xE9	; 233
    296a:	f9 22       	and	r15, r25
    296c:	08 c0       	rjmp	.+16     	; 0x297e <vfprintf+0x2f8>
    296e:	1f 5f       	subi	r17, 0xFF	; 255
    2970:	f2 fe       	sbrs	r15, 2
    2972:	05 c0       	rjmp	.+10     	; 0x297e <vfprintf+0x2f8>
    2974:	03 c0       	rjmp	.+6      	; 0x297c <vfprintf+0x2f6>
    2976:	8f 2d       	mov	r24, r15
    2978:	86 78       	andi	r24, 0x86	; 134
    297a:	09 f0       	breq	.+2      	; 0x297e <vfprintf+0x2f8>
    297c:	1f 5f       	subi	r17, 0xFF	; 255
    297e:	0f 2d       	mov	r16, r15
    2980:	f3 fc       	sbrc	r15, 3
    2982:	14 c0       	rjmp	.+40     	; 0x29ac <vfprintf+0x326>
    2984:	f0 fe       	sbrs	r15, 0
    2986:	0f c0       	rjmp	.+30     	; 0x29a6 <vfprintf+0x320>
    2988:	1e 15       	cp	r17, r14
    298a:	10 f0       	brcs	.+4      	; 0x2990 <vfprintf+0x30a>
    298c:	9d 2c       	mov	r9, r13
    298e:	0b c0       	rjmp	.+22     	; 0x29a6 <vfprintf+0x320>
    2990:	9d 2c       	mov	r9, r13
    2992:	9e 0c       	add	r9, r14
    2994:	91 1a       	sub	r9, r17
    2996:	1e 2d       	mov	r17, r14
    2998:	06 c0       	rjmp	.+12     	; 0x29a6 <vfprintf+0x320>
    299a:	80 e2       	ldi	r24, 0x20	; 32
    299c:	90 e0       	ldi	r25, 0x00	; 0
    299e:	b3 01       	movw	r22, r6
    29a0:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <fputc>
    29a4:	1f 5f       	subi	r17, 0xFF	; 255
    29a6:	1e 15       	cp	r17, r14
    29a8:	c0 f3       	brcs	.-16     	; 0x299a <vfprintf+0x314>
    29aa:	04 c0       	rjmp	.+8      	; 0x29b4 <vfprintf+0x32e>
    29ac:	1e 15       	cp	r17, r14
    29ae:	10 f4       	brcc	.+4      	; 0x29b4 <vfprintf+0x32e>
    29b0:	e1 1a       	sub	r14, r17
    29b2:	01 c0       	rjmp	.+2      	; 0x29b6 <vfprintf+0x330>
    29b4:	ee 24       	eor	r14, r14
    29b6:	04 ff       	sbrs	r16, 4
    29b8:	0f c0       	rjmp	.+30     	; 0x29d8 <vfprintf+0x352>
    29ba:	80 e3       	ldi	r24, 0x30	; 48
    29bc:	90 e0       	ldi	r25, 0x00	; 0
    29be:	b3 01       	movw	r22, r6
    29c0:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <fputc>
    29c4:	02 ff       	sbrs	r16, 2
    29c6:	1d c0       	rjmp	.+58     	; 0x2a02 <vfprintf+0x37c>
    29c8:	01 fd       	sbrc	r16, 1
    29ca:	03 c0       	rjmp	.+6      	; 0x29d2 <vfprintf+0x34c>
    29cc:	88 e7       	ldi	r24, 0x78	; 120
    29ce:	90 e0       	ldi	r25, 0x00	; 0
    29d0:	0e c0       	rjmp	.+28     	; 0x29ee <vfprintf+0x368>
    29d2:	88 e5       	ldi	r24, 0x58	; 88
    29d4:	90 e0       	ldi	r25, 0x00	; 0
    29d6:	0b c0       	rjmp	.+22     	; 0x29ee <vfprintf+0x368>
    29d8:	80 2f       	mov	r24, r16
    29da:	86 78       	andi	r24, 0x86	; 134
    29dc:	91 f0       	breq	.+36     	; 0x2a02 <vfprintf+0x37c>
    29de:	01 ff       	sbrs	r16, 1
    29e0:	02 c0       	rjmp	.+4      	; 0x29e6 <vfprintf+0x360>
    29e2:	8b e2       	ldi	r24, 0x2B	; 43
    29e4:	01 c0       	rjmp	.+2      	; 0x29e8 <vfprintf+0x362>
    29e6:	80 e2       	ldi	r24, 0x20	; 32
    29e8:	f7 fc       	sbrc	r15, 7
    29ea:	8d e2       	ldi	r24, 0x2D	; 45
    29ec:	90 e0       	ldi	r25, 0x00	; 0
    29ee:	b3 01       	movw	r22, r6
    29f0:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <fputc>
    29f4:	06 c0       	rjmp	.+12     	; 0x2a02 <vfprintf+0x37c>
    29f6:	80 e3       	ldi	r24, 0x30	; 48
    29f8:	90 e0       	ldi	r25, 0x00	; 0
    29fa:	b3 01       	movw	r22, r6
    29fc:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <fputc>
    2a00:	9a 94       	dec	r9
    2a02:	d9 14       	cp	r13, r9
    2a04:	c0 f3       	brcs	.-16     	; 0x29f6 <vfprintf+0x370>
    2a06:	da 94       	dec	r13
    2a08:	f1 01       	movw	r30, r2
    2a0a:	ed 0d       	add	r30, r13
    2a0c:	f1 1d       	adc	r31, r1
    2a0e:	80 81       	ld	r24, Z
    2a10:	90 e0       	ldi	r25, 0x00	; 0
    2a12:	b3 01       	movw	r22, r6
    2a14:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <fputc>
    2a18:	dd 20       	and	r13, r13
    2a1a:	a9 f7       	brne	.-22     	; 0x2a06 <vfprintf+0x380>
    2a1c:	06 c0       	rjmp	.+12     	; 0x2a2a <vfprintf+0x3a4>
    2a1e:	80 e2       	ldi	r24, 0x20	; 32
    2a20:	90 e0       	ldi	r25, 0x00	; 0
    2a22:	b3 01       	movw	r22, r6
    2a24:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <fputc>
    2a28:	ea 94       	dec	r14
    2a2a:	ee 20       	and	r14, r14
    2a2c:	c1 f7       	brne	.-16     	; 0x2a1e <vfprintf+0x398>
    2a2e:	43 ce       	rjmp	.-890    	; 0x26b6 <vfprintf+0x30>
    2a30:	f3 01       	movw	r30, r6
    2a32:	66 81       	ldd	r22, Z+6	; 0x06
    2a34:	77 81       	ldd	r23, Z+7	; 0x07
    2a36:	cb 01       	movw	r24, r22
    2a38:	2b 96       	adiw	r28, 0x0b	; 11
    2a3a:	e2 e1       	ldi	r30, 0x12	; 18
    2a3c:	0c 94 04 13 	jmp	0x2608	; 0x2608 <__epilogue_restores__>

00002a40 <strnlen_P>:
    2a40:	fc 01       	movw	r30, r24
    2a42:	05 90       	lpm	r0, Z+
    2a44:	61 50       	subi	r22, 0x01	; 1
    2a46:	70 40       	sbci	r23, 0x00	; 0
    2a48:	01 10       	cpse	r0, r1
    2a4a:	d8 f7       	brcc	.-10     	; 0x2a42 <strnlen_P+0x2>
    2a4c:	80 95       	com	r24
    2a4e:	90 95       	com	r25
    2a50:	8e 0f       	add	r24, r30
    2a52:	9f 1f       	adc	r25, r31
    2a54:	08 95       	ret

00002a56 <strnlen>:
    2a56:	fc 01       	movw	r30, r24
    2a58:	61 50       	subi	r22, 0x01	; 1
    2a5a:	70 40       	sbci	r23, 0x00	; 0
    2a5c:	01 90       	ld	r0, Z+
    2a5e:	01 10       	cpse	r0, r1
    2a60:	d8 f7       	brcc	.-10     	; 0x2a58 <strnlen+0x2>
    2a62:	80 95       	com	r24
    2a64:	90 95       	com	r25
    2a66:	8e 0f       	add	r24, r30
    2a68:	9f 1f       	adc	r25, r31
    2a6a:	08 95       	ret

00002a6c <fputc>:
    2a6c:	0f 93       	push	r16
    2a6e:	1f 93       	push	r17
    2a70:	cf 93       	push	r28
    2a72:	df 93       	push	r29
    2a74:	8c 01       	movw	r16, r24
    2a76:	eb 01       	movw	r28, r22
    2a78:	8b 81       	ldd	r24, Y+3	; 0x03
    2a7a:	81 ff       	sbrs	r24, 1
    2a7c:	1b c0       	rjmp	.+54     	; 0x2ab4 <fputc+0x48>
    2a7e:	82 ff       	sbrs	r24, 2
    2a80:	0d c0       	rjmp	.+26     	; 0x2a9c <fputc+0x30>
    2a82:	2e 81       	ldd	r18, Y+6	; 0x06
    2a84:	3f 81       	ldd	r19, Y+7	; 0x07
    2a86:	8c 81       	ldd	r24, Y+4	; 0x04
    2a88:	9d 81       	ldd	r25, Y+5	; 0x05
    2a8a:	28 17       	cp	r18, r24
    2a8c:	39 07       	cpc	r19, r25
    2a8e:	64 f4       	brge	.+24     	; 0x2aa8 <fputc+0x3c>
    2a90:	e8 81       	ld	r30, Y
    2a92:	f9 81       	ldd	r31, Y+1	; 0x01
    2a94:	01 93       	st	Z+, r16
    2a96:	f9 83       	std	Y+1, r31	; 0x01
    2a98:	e8 83       	st	Y, r30
    2a9a:	06 c0       	rjmp	.+12     	; 0x2aa8 <fputc+0x3c>
    2a9c:	e8 85       	ldd	r30, Y+8	; 0x08
    2a9e:	f9 85       	ldd	r31, Y+9	; 0x09
    2aa0:	80 2f       	mov	r24, r16
    2aa2:	09 95       	icall
    2aa4:	89 2b       	or	r24, r25
    2aa6:	31 f4       	brne	.+12     	; 0x2ab4 <fputc+0x48>
    2aa8:	8e 81       	ldd	r24, Y+6	; 0x06
    2aaa:	9f 81       	ldd	r25, Y+7	; 0x07
    2aac:	01 96       	adiw	r24, 0x01	; 1
    2aae:	9f 83       	std	Y+7, r25	; 0x07
    2ab0:	8e 83       	std	Y+6, r24	; 0x06
    2ab2:	02 c0       	rjmp	.+4      	; 0x2ab8 <fputc+0x4c>
    2ab4:	0f ef       	ldi	r16, 0xFF	; 255
    2ab6:	1f ef       	ldi	r17, 0xFF	; 255
    2ab8:	c8 01       	movw	r24, r16
    2aba:	df 91       	pop	r29
    2abc:	cf 91       	pop	r28
    2abe:	1f 91       	pop	r17
    2ac0:	0f 91       	pop	r16
    2ac2:	08 95       	ret

00002ac4 <__ultoa_invert>:
    2ac4:	fa 01       	movw	r30, r20
    2ac6:	aa 27       	eor	r26, r26
    2ac8:	28 30       	cpi	r18, 0x08	; 8
    2aca:	51 f1       	breq	.+84     	; 0x2b20 <__ultoa_invert+0x5c>
    2acc:	20 31       	cpi	r18, 0x10	; 16
    2ace:	81 f1       	breq	.+96     	; 0x2b30 <__ultoa_invert+0x6c>
    2ad0:	e8 94       	clt
    2ad2:	6f 93       	push	r22
    2ad4:	6e 7f       	andi	r22, 0xFE	; 254
    2ad6:	6e 5f       	subi	r22, 0xFE	; 254
    2ad8:	7f 4f       	sbci	r23, 0xFF	; 255
    2ada:	8f 4f       	sbci	r24, 0xFF	; 255
    2adc:	9f 4f       	sbci	r25, 0xFF	; 255
    2ade:	af 4f       	sbci	r26, 0xFF	; 255
    2ae0:	b1 e0       	ldi	r27, 0x01	; 1
    2ae2:	3e d0       	rcall	.+124    	; 0x2b60 <__ultoa_invert+0x9c>
    2ae4:	b4 e0       	ldi	r27, 0x04	; 4
    2ae6:	3c d0       	rcall	.+120    	; 0x2b60 <__ultoa_invert+0x9c>
    2ae8:	67 0f       	add	r22, r23
    2aea:	78 1f       	adc	r23, r24
    2aec:	89 1f       	adc	r24, r25
    2aee:	9a 1f       	adc	r25, r26
    2af0:	a1 1d       	adc	r26, r1
    2af2:	68 0f       	add	r22, r24
    2af4:	79 1f       	adc	r23, r25
    2af6:	8a 1f       	adc	r24, r26
    2af8:	91 1d       	adc	r25, r1
    2afa:	a1 1d       	adc	r26, r1
    2afc:	6a 0f       	add	r22, r26
    2afe:	71 1d       	adc	r23, r1
    2b00:	81 1d       	adc	r24, r1
    2b02:	91 1d       	adc	r25, r1
    2b04:	a1 1d       	adc	r26, r1
    2b06:	20 d0       	rcall	.+64     	; 0x2b48 <__ultoa_invert+0x84>
    2b08:	09 f4       	brne	.+2      	; 0x2b0c <__ultoa_invert+0x48>
    2b0a:	68 94       	set
    2b0c:	3f 91       	pop	r19
    2b0e:	2a e0       	ldi	r18, 0x0A	; 10
    2b10:	26 9f       	mul	r18, r22
    2b12:	11 24       	eor	r1, r1
    2b14:	30 19       	sub	r19, r0
    2b16:	30 5d       	subi	r19, 0xD0	; 208
    2b18:	31 93       	st	Z+, r19
    2b1a:	de f6       	brtc	.-74     	; 0x2ad2 <__ultoa_invert+0xe>
    2b1c:	cf 01       	movw	r24, r30
    2b1e:	08 95       	ret
    2b20:	46 2f       	mov	r20, r22
    2b22:	47 70       	andi	r20, 0x07	; 7
    2b24:	40 5d       	subi	r20, 0xD0	; 208
    2b26:	41 93       	st	Z+, r20
    2b28:	b3 e0       	ldi	r27, 0x03	; 3
    2b2a:	0f d0       	rcall	.+30     	; 0x2b4a <__ultoa_invert+0x86>
    2b2c:	c9 f7       	brne	.-14     	; 0x2b20 <__ultoa_invert+0x5c>
    2b2e:	f6 cf       	rjmp	.-20     	; 0x2b1c <__ultoa_invert+0x58>
    2b30:	46 2f       	mov	r20, r22
    2b32:	4f 70       	andi	r20, 0x0F	; 15
    2b34:	40 5d       	subi	r20, 0xD0	; 208
    2b36:	4a 33       	cpi	r20, 0x3A	; 58
    2b38:	18 f0       	brcs	.+6      	; 0x2b40 <__ultoa_invert+0x7c>
    2b3a:	49 5d       	subi	r20, 0xD9	; 217
    2b3c:	31 fd       	sbrc	r19, 1
    2b3e:	40 52       	subi	r20, 0x20	; 32
    2b40:	41 93       	st	Z+, r20
    2b42:	02 d0       	rcall	.+4      	; 0x2b48 <__ultoa_invert+0x84>
    2b44:	a9 f7       	brne	.-22     	; 0x2b30 <__ultoa_invert+0x6c>
    2b46:	ea cf       	rjmp	.-44     	; 0x2b1c <__ultoa_invert+0x58>
    2b48:	b4 e0       	ldi	r27, 0x04	; 4
    2b4a:	a6 95       	lsr	r26
    2b4c:	97 95       	ror	r25
    2b4e:	87 95       	ror	r24
    2b50:	77 95       	ror	r23
    2b52:	67 95       	ror	r22
    2b54:	ba 95       	dec	r27
    2b56:	c9 f7       	brne	.-14     	; 0x2b4a <__ultoa_invert+0x86>
    2b58:	00 97       	sbiw	r24, 0x00	; 0
    2b5a:	61 05       	cpc	r22, r1
    2b5c:	71 05       	cpc	r23, r1
    2b5e:	08 95       	ret
    2b60:	9b 01       	movw	r18, r22
    2b62:	ac 01       	movw	r20, r24
    2b64:	0a 2e       	mov	r0, r26
    2b66:	06 94       	lsr	r0
    2b68:	57 95       	ror	r21
    2b6a:	47 95       	ror	r20
    2b6c:	37 95       	ror	r19
    2b6e:	27 95       	ror	r18
    2b70:	ba 95       	dec	r27
    2b72:	c9 f7       	brne	.-14     	; 0x2b66 <__ultoa_invert+0xa2>
    2b74:	62 0f       	add	r22, r18
    2b76:	73 1f       	adc	r23, r19
    2b78:	84 1f       	adc	r24, r20
    2b7a:	95 1f       	adc	r25, r21
    2b7c:	a0 1d       	adc	r26, r0
    2b7e:	08 95       	ret

00002b80 <_exit>:
    2b80:	f8 94       	cli

00002b82 <__stop_program>:
    2b82:	ff cf       	rjmp	.-2      	; 0x2b82 <__stop_program>
