
Oct21_Amit_Interfacing.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000038fe  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000120  00800060  000038fe  00003972  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00003f78  00000000  00000000  00003a94  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00002177  00000000  00000000  00007a0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000001a0  00000000  00000000  00009b83  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000001f2  00000000  00000000  00009d23  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000240b  00000000  00000000  00009f15  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001386  00000000  00000000  0000c320  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011d6  00000000  00000000  0000d6a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c0  00000000  00000000  0000e87c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002f6  00000000  00000000  0000ea3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000096e  00000000  00000000  0000ed32  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000f6a0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ef       	ldi	r30, 0xFE	; 254
      68:	f8 e3       	ldi	r31, 0x38	; 56
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 38       	cpi	r26, 0x80	; 128
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 0f 07 	call	0xe1e	; 0xe1e <main>
      7a:	0c 94 7d 1c 	jmp	0x38fa	; 0x38fa <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 a5 19 	jmp	0x334a	; 0x334a <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a6 e6       	ldi	r26, 0x66	; 102
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 c1 19 	jmp	0x3382	; 0x3382 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 b1 19 	jmp	0x3362	; 0x3362 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 cd 19 	jmp	0x339a	; 0x339a <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 b1 19 	jmp	0x3362	; 0x3362 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 cd 19 	jmp	0x339a	; 0x339a <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 a5 19 	jmp	0x334a	; 0x334a <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	86 e6       	ldi	r24, 0x66	; 102
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 c1 19 	jmp	0x3382	; 0x3382 <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 ad 19 	jmp	0x335a	; 0x335a <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	66 e6       	ldi	r22, 0x66	; 102
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 c9 19 	jmp	0x3392	; 0x3392 <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 b1 19 	jmp	0x3362	; 0x3362 <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 cd 19 	jmp	0x339a	; 0x339a <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 b1 19 	jmp	0x3362	; 0x3362 <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 cd 19 	jmp	0x339a	; 0x339a <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 b1 19 	jmp	0x3362	; 0x3362 <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 cd 19 	jmp	0x339a	; 0x339a <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 b5 19 	jmp	0x336a	; 0x336a <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 d1 19 	jmp	0x33a2	; 0x33a2 <__epilogue_restores__+0x20>

00000942 <__floatunsisf>:
     942:	a8 e0       	ldi	r26, 0x08	; 8
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e7 ea       	ldi	r30, 0xA7	; 167
     948:	f4 e0       	ldi	r31, 0x04	; 4
     94a:	0c 94 ad 19 	jmp	0x335a	; 0x335a <__prologue_saves__+0x10>
     94e:	7b 01       	movw	r14, r22
     950:	8c 01       	movw	r16, r24
     952:	61 15       	cp	r22, r1
     954:	71 05       	cpc	r23, r1
     956:	81 05       	cpc	r24, r1
     958:	91 05       	cpc	r25, r1
     95a:	19 f4       	brne	.+6      	; 0x962 <__floatunsisf+0x20>
     95c:	82 e0       	ldi	r24, 0x02	; 2
     95e:	89 83       	std	Y+1, r24	; 0x01
     960:	60 c0       	rjmp	.+192    	; 0xa22 <__floatunsisf+0xe0>
     962:	83 e0       	ldi	r24, 0x03	; 3
     964:	89 83       	std	Y+1, r24	; 0x01
     966:	8e e1       	ldi	r24, 0x1E	; 30
     968:	c8 2e       	mov	r12, r24
     96a:	d1 2c       	mov	r13, r1
     96c:	dc 82       	std	Y+4, r13	; 0x04
     96e:	cb 82       	std	Y+3, r12	; 0x03
     970:	ed 82       	std	Y+5, r14	; 0x05
     972:	fe 82       	std	Y+6, r15	; 0x06
     974:	0f 83       	std	Y+7, r16	; 0x07
     976:	18 87       	std	Y+8, r17	; 0x08
     978:	c8 01       	movw	r24, r16
     97a:	b7 01       	movw	r22, r14
     97c:	0e 94 1a 05 	call	0xa34	; 0xa34 <__clzsi2>
     980:	fc 01       	movw	r30, r24
     982:	31 97       	sbiw	r30, 0x01	; 1
     984:	f7 ff       	sbrs	r31, 7
     986:	3b c0       	rjmp	.+118    	; 0x9fe <__floatunsisf+0xbc>
     988:	22 27       	eor	r18, r18
     98a:	33 27       	eor	r19, r19
     98c:	2e 1b       	sub	r18, r30
     98e:	3f 0b       	sbc	r19, r31
     990:	57 01       	movw	r10, r14
     992:	68 01       	movw	r12, r16
     994:	02 2e       	mov	r0, r18
     996:	04 c0       	rjmp	.+8      	; 0x9a0 <__floatunsisf+0x5e>
     998:	d6 94       	lsr	r13
     99a:	c7 94       	ror	r12
     99c:	b7 94       	ror	r11
     99e:	a7 94       	ror	r10
     9a0:	0a 94       	dec	r0
     9a2:	d2 f7       	brpl	.-12     	; 0x998 <__floatunsisf+0x56>
     9a4:	40 e0       	ldi	r20, 0x00	; 0
     9a6:	50 e0       	ldi	r21, 0x00	; 0
     9a8:	60 e0       	ldi	r22, 0x00	; 0
     9aa:	70 e0       	ldi	r23, 0x00	; 0
     9ac:	81 e0       	ldi	r24, 0x01	; 1
     9ae:	90 e0       	ldi	r25, 0x00	; 0
     9b0:	a0 e0       	ldi	r26, 0x00	; 0
     9b2:	b0 e0       	ldi	r27, 0x00	; 0
     9b4:	04 c0       	rjmp	.+8      	; 0x9be <__floatunsisf+0x7c>
     9b6:	88 0f       	add	r24, r24
     9b8:	99 1f       	adc	r25, r25
     9ba:	aa 1f       	adc	r26, r26
     9bc:	bb 1f       	adc	r27, r27
     9be:	2a 95       	dec	r18
     9c0:	d2 f7       	brpl	.-12     	; 0x9b6 <__floatunsisf+0x74>
     9c2:	01 97       	sbiw	r24, 0x01	; 1
     9c4:	a1 09       	sbc	r26, r1
     9c6:	b1 09       	sbc	r27, r1
     9c8:	8e 21       	and	r24, r14
     9ca:	9f 21       	and	r25, r15
     9cc:	a0 23       	and	r26, r16
     9ce:	b1 23       	and	r27, r17
     9d0:	00 97       	sbiw	r24, 0x00	; 0
     9d2:	a1 05       	cpc	r26, r1
     9d4:	b1 05       	cpc	r27, r1
     9d6:	21 f0       	breq	.+8      	; 0x9e0 <__floatunsisf+0x9e>
     9d8:	41 e0       	ldi	r20, 0x01	; 1
     9da:	50 e0       	ldi	r21, 0x00	; 0
     9dc:	60 e0       	ldi	r22, 0x00	; 0
     9de:	70 e0       	ldi	r23, 0x00	; 0
     9e0:	4a 29       	or	r20, r10
     9e2:	5b 29       	or	r21, r11
     9e4:	6c 29       	or	r22, r12
     9e6:	7d 29       	or	r23, r13
     9e8:	4d 83       	std	Y+5, r20	; 0x05
     9ea:	5e 83       	std	Y+6, r21	; 0x06
     9ec:	6f 83       	std	Y+7, r22	; 0x07
     9ee:	78 87       	std	Y+8, r23	; 0x08
     9f0:	8e e1       	ldi	r24, 0x1E	; 30
     9f2:	90 e0       	ldi	r25, 0x00	; 0
     9f4:	8e 1b       	sub	r24, r30
     9f6:	9f 0b       	sbc	r25, r31
     9f8:	9c 83       	std	Y+4, r25	; 0x04
     9fa:	8b 83       	std	Y+3, r24	; 0x03
     9fc:	12 c0       	rjmp	.+36     	; 0xa22 <__floatunsisf+0xe0>
     9fe:	30 97       	sbiw	r30, 0x00	; 0
     a00:	81 f0       	breq	.+32     	; 0xa22 <__floatunsisf+0xe0>
     a02:	0e 2e       	mov	r0, r30
     a04:	04 c0       	rjmp	.+8      	; 0xa0e <__floatunsisf+0xcc>
     a06:	ee 0c       	add	r14, r14
     a08:	ff 1c       	adc	r15, r15
     a0a:	00 1f       	adc	r16, r16
     a0c:	11 1f       	adc	r17, r17
     a0e:	0a 94       	dec	r0
     a10:	d2 f7       	brpl	.-12     	; 0xa06 <__floatunsisf+0xc4>
     a12:	ed 82       	std	Y+5, r14	; 0x05
     a14:	fe 82       	std	Y+6, r15	; 0x06
     a16:	0f 83       	std	Y+7, r16	; 0x07
     a18:	18 87       	std	Y+8, r17	; 0x08
     a1a:	ce 1a       	sub	r12, r30
     a1c:	df 0a       	sbc	r13, r31
     a1e:	dc 82       	std	Y+4, r13	; 0x04
     a20:	cb 82       	std	Y+3, r12	; 0x03
     a22:	1a 82       	std	Y+2, r1	; 0x02
     a24:	ce 01       	movw	r24, r28
     a26:	01 96       	adiw	r24, 0x01	; 1
     a28:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     a2c:	28 96       	adiw	r28, 0x08	; 8
     a2e:	ea e0       	ldi	r30, 0x0A	; 10
     a30:	0c 94 c9 19 	jmp	0x3392	; 0x3392 <__epilogue_restores__+0x10>

00000a34 <__clzsi2>:
     a34:	ef 92       	push	r14
     a36:	ff 92       	push	r15
     a38:	0f 93       	push	r16
     a3a:	1f 93       	push	r17
     a3c:	7b 01       	movw	r14, r22
     a3e:	8c 01       	movw	r16, r24
     a40:	80 e0       	ldi	r24, 0x00	; 0
     a42:	e8 16       	cp	r14, r24
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	f8 06       	cpc	r15, r24
     a48:	81 e0       	ldi	r24, 0x01	; 1
     a4a:	08 07       	cpc	r16, r24
     a4c:	80 e0       	ldi	r24, 0x00	; 0
     a4e:	18 07       	cpc	r17, r24
     a50:	88 f4       	brcc	.+34     	; 0xa74 <__clzsi2+0x40>
     a52:	8f ef       	ldi	r24, 0xFF	; 255
     a54:	e8 16       	cp	r14, r24
     a56:	f1 04       	cpc	r15, r1
     a58:	01 05       	cpc	r16, r1
     a5a:	11 05       	cpc	r17, r1
     a5c:	31 f0       	breq	.+12     	; 0xa6a <__clzsi2+0x36>
     a5e:	28 f0       	brcs	.+10     	; 0xa6a <__clzsi2+0x36>
     a60:	88 e0       	ldi	r24, 0x08	; 8
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	a0 e0       	ldi	r26, 0x00	; 0
     a66:	b0 e0       	ldi	r27, 0x00	; 0
     a68:	17 c0       	rjmp	.+46     	; 0xa98 <__clzsi2+0x64>
     a6a:	80 e0       	ldi	r24, 0x00	; 0
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	a0 e0       	ldi	r26, 0x00	; 0
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	12 c0       	rjmp	.+36     	; 0xa98 <__clzsi2+0x64>
     a74:	80 e0       	ldi	r24, 0x00	; 0
     a76:	e8 16       	cp	r14, r24
     a78:	80 e0       	ldi	r24, 0x00	; 0
     a7a:	f8 06       	cpc	r15, r24
     a7c:	80 e0       	ldi	r24, 0x00	; 0
     a7e:	08 07       	cpc	r16, r24
     a80:	81 e0       	ldi	r24, 0x01	; 1
     a82:	18 07       	cpc	r17, r24
     a84:	28 f0       	brcs	.+10     	; 0xa90 <__clzsi2+0x5c>
     a86:	88 e1       	ldi	r24, 0x18	; 24
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	04 c0       	rjmp	.+8      	; 0xa98 <__clzsi2+0x64>
     a90:	80 e1       	ldi	r24, 0x10	; 16
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	a0 e0       	ldi	r26, 0x00	; 0
     a96:	b0 e0       	ldi	r27, 0x00	; 0
     a98:	20 e2       	ldi	r18, 0x20	; 32
     a9a:	30 e0       	ldi	r19, 0x00	; 0
     a9c:	40 e0       	ldi	r20, 0x00	; 0
     a9e:	50 e0       	ldi	r21, 0x00	; 0
     aa0:	28 1b       	sub	r18, r24
     aa2:	39 0b       	sbc	r19, r25
     aa4:	4a 0b       	sbc	r20, r26
     aa6:	5b 0b       	sbc	r21, r27
     aa8:	04 c0       	rjmp	.+8      	; 0xab2 <__clzsi2+0x7e>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	8a 95       	dec	r24
     ab4:	d2 f7       	brpl	.-12     	; 0xaaa <__clzsi2+0x76>
     ab6:	f7 01       	movw	r30, r14
     ab8:	e2 59       	subi	r30, 0x92	; 146
     aba:	ff 4f       	sbci	r31, 0xFF	; 255
     abc:	80 81       	ld	r24, Z
     abe:	28 1b       	sub	r18, r24
     ac0:	31 09       	sbc	r19, r1
     ac2:	41 09       	sbc	r20, r1
     ac4:	51 09       	sbc	r21, r1
     ac6:	c9 01       	movw	r24, r18
     ac8:	1f 91       	pop	r17
     aca:	0f 91       	pop	r16
     acc:	ff 90       	pop	r15
     ace:	ef 90       	pop	r14
     ad0:	08 95       	ret

00000ad2 <__pack_f>:
     ad2:	df 92       	push	r13
     ad4:	ef 92       	push	r14
     ad6:	ff 92       	push	r15
     ad8:	0f 93       	push	r16
     ada:	1f 93       	push	r17
     adc:	fc 01       	movw	r30, r24
     ade:	e4 80       	ldd	r14, Z+4	; 0x04
     ae0:	f5 80       	ldd	r15, Z+5	; 0x05
     ae2:	06 81       	ldd	r16, Z+6	; 0x06
     ae4:	17 81       	ldd	r17, Z+7	; 0x07
     ae6:	d1 80       	ldd	r13, Z+1	; 0x01
     ae8:	80 81       	ld	r24, Z
     aea:	82 30       	cpi	r24, 0x02	; 2
     aec:	48 f4       	brcc	.+18     	; 0xb00 <__pack_f+0x2e>
     aee:	80 e0       	ldi	r24, 0x00	; 0
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	a0 e1       	ldi	r26, 0x10	; 16
     af4:	b0 e0       	ldi	r27, 0x00	; 0
     af6:	e8 2a       	or	r14, r24
     af8:	f9 2a       	or	r15, r25
     afa:	0a 2b       	or	r16, r26
     afc:	1b 2b       	or	r17, r27
     afe:	a5 c0       	rjmp	.+330    	; 0xc4a <__pack_f+0x178>
     b00:	84 30       	cpi	r24, 0x04	; 4
     b02:	09 f4       	brne	.+2      	; 0xb06 <__pack_f+0x34>
     b04:	9f c0       	rjmp	.+318    	; 0xc44 <__pack_f+0x172>
     b06:	82 30       	cpi	r24, 0x02	; 2
     b08:	21 f4       	brne	.+8      	; 0xb12 <__pack_f+0x40>
     b0a:	ee 24       	eor	r14, r14
     b0c:	ff 24       	eor	r15, r15
     b0e:	87 01       	movw	r16, r14
     b10:	05 c0       	rjmp	.+10     	; 0xb1c <__pack_f+0x4a>
     b12:	e1 14       	cp	r14, r1
     b14:	f1 04       	cpc	r15, r1
     b16:	01 05       	cpc	r16, r1
     b18:	11 05       	cpc	r17, r1
     b1a:	19 f4       	brne	.+6      	; 0xb22 <__pack_f+0x50>
     b1c:	e0 e0       	ldi	r30, 0x00	; 0
     b1e:	f0 e0       	ldi	r31, 0x00	; 0
     b20:	96 c0       	rjmp	.+300    	; 0xc4e <__pack_f+0x17c>
     b22:	62 81       	ldd	r22, Z+2	; 0x02
     b24:	73 81       	ldd	r23, Z+3	; 0x03
     b26:	9f ef       	ldi	r25, 0xFF	; 255
     b28:	62 38       	cpi	r22, 0x82	; 130
     b2a:	79 07       	cpc	r23, r25
     b2c:	0c f0       	brlt	.+2      	; 0xb30 <__pack_f+0x5e>
     b2e:	5b c0       	rjmp	.+182    	; 0xbe6 <__pack_f+0x114>
     b30:	22 e8       	ldi	r18, 0x82	; 130
     b32:	3f ef       	ldi	r19, 0xFF	; 255
     b34:	26 1b       	sub	r18, r22
     b36:	37 0b       	sbc	r19, r23
     b38:	2a 31       	cpi	r18, 0x1A	; 26
     b3a:	31 05       	cpc	r19, r1
     b3c:	2c f0       	brlt	.+10     	; 0xb48 <__pack_f+0x76>
     b3e:	20 e0       	ldi	r18, 0x00	; 0
     b40:	30 e0       	ldi	r19, 0x00	; 0
     b42:	40 e0       	ldi	r20, 0x00	; 0
     b44:	50 e0       	ldi	r21, 0x00	; 0
     b46:	2a c0       	rjmp	.+84     	; 0xb9c <__pack_f+0xca>
     b48:	b8 01       	movw	r22, r16
     b4a:	a7 01       	movw	r20, r14
     b4c:	02 2e       	mov	r0, r18
     b4e:	04 c0       	rjmp	.+8      	; 0xb58 <__pack_f+0x86>
     b50:	76 95       	lsr	r23
     b52:	67 95       	ror	r22
     b54:	57 95       	ror	r21
     b56:	47 95       	ror	r20
     b58:	0a 94       	dec	r0
     b5a:	d2 f7       	brpl	.-12     	; 0xb50 <__pack_f+0x7e>
     b5c:	81 e0       	ldi	r24, 0x01	; 1
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	04 c0       	rjmp	.+8      	; 0xb6e <__pack_f+0x9c>
     b66:	88 0f       	add	r24, r24
     b68:	99 1f       	adc	r25, r25
     b6a:	aa 1f       	adc	r26, r26
     b6c:	bb 1f       	adc	r27, r27
     b6e:	2a 95       	dec	r18
     b70:	d2 f7       	brpl	.-12     	; 0xb66 <__pack_f+0x94>
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	a1 09       	sbc	r26, r1
     b76:	b1 09       	sbc	r27, r1
     b78:	8e 21       	and	r24, r14
     b7a:	9f 21       	and	r25, r15
     b7c:	a0 23       	and	r26, r16
     b7e:	b1 23       	and	r27, r17
     b80:	00 97       	sbiw	r24, 0x00	; 0
     b82:	a1 05       	cpc	r26, r1
     b84:	b1 05       	cpc	r27, r1
     b86:	21 f0       	breq	.+8      	; 0xb90 <__pack_f+0xbe>
     b88:	81 e0       	ldi	r24, 0x01	; 1
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	a0 e0       	ldi	r26, 0x00	; 0
     b8e:	b0 e0       	ldi	r27, 0x00	; 0
     b90:	9a 01       	movw	r18, r20
     b92:	ab 01       	movw	r20, r22
     b94:	28 2b       	or	r18, r24
     b96:	39 2b       	or	r19, r25
     b98:	4a 2b       	or	r20, r26
     b9a:	5b 2b       	or	r21, r27
     b9c:	da 01       	movw	r26, r20
     b9e:	c9 01       	movw	r24, r18
     ba0:	8f 77       	andi	r24, 0x7F	; 127
     ba2:	90 70       	andi	r25, 0x00	; 0
     ba4:	a0 70       	andi	r26, 0x00	; 0
     ba6:	b0 70       	andi	r27, 0x00	; 0
     ba8:	80 34       	cpi	r24, 0x40	; 64
     baa:	91 05       	cpc	r25, r1
     bac:	a1 05       	cpc	r26, r1
     bae:	b1 05       	cpc	r27, r1
     bb0:	39 f4       	brne	.+14     	; 0xbc0 <__pack_f+0xee>
     bb2:	27 ff       	sbrs	r18, 7
     bb4:	09 c0       	rjmp	.+18     	; 0xbc8 <__pack_f+0xf6>
     bb6:	20 5c       	subi	r18, 0xC0	; 192
     bb8:	3f 4f       	sbci	r19, 0xFF	; 255
     bba:	4f 4f       	sbci	r20, 0xFF	; 255
     bbc:	5f 4f       	sbci	r21, 0xFF	; 255
     bbe:	04 c0       	rjmp	.+8      	; 0xbc8 <__pack_f+0xf6>
     bc0:	21 5c       	subi	r18, 0xC1	; 193
     bc2:	3f 4f       	sbci	r19, 0xFF	; 255
     bc4:	4f 4f       	sbci	r20, 0xFF	; 255
     bc6:	5f 4f       	sbci	r21, 0xFF	; 255
     bc8:	e0 e0       	ldi	r30, 0x00	; 0
     bca:	f0 e0       	ldi	r31, 0x00	; 0
     bcc:	20 30       	cpi	r18, 0x00	; 0
     bce:	a0 e0       	ldi	r26, 0x00	; 0
     bd0:	3a 07       	cpc	r19, r26
     bd2:	a0 e0       	ldi	r26, 0x00	; 0
     bd4:	4a 07       	cpc	r20, r26
     bd6:	a0 e4       	ldi	r26, 0x40	; 64
     bd8:	5a 07       	cpc	r21, r26
     bda:	10 f0       	brcs	.+4      	; 0xbe0 <__pack_f+0x10e>
     bdc:	e1 e0       	ldi	r30, 0x01	; 1
     bde:	f0 e0       	ldi	r31, 0x00	; 0
     be0:	79 01       	movw	r14, r18
     be2:	8a 01       	movw	r16, r20
     be4:	27 c0       	rjmp	.+78     	; 0xc34 <__pack_f+0x162>
     be6:	60 38       	cpi	r22, 0x80	; 128
     be8:	71 05       	cpc	r23, r1
     bea:	64 f5       	brge	.+88     	; 0xc44 <__pack_f+0x172>
     bec:	fb 01       	movw	r30, r22
     bee:	e1 58       	subi	r30, 0x81	; 129
     bf0:	ff 4f       	sbci	r31, 0xFF	; 255
     bf2:	d8 01       	movw	r26, r16
     bf4:	c7 01       	movw	r24, r14
     bf6:	8f 77       	andi	r24, 0x7F	; 127
     bf8:	90 70       	andi	r25, 0x00	; 0
     bfa:	a0 70       	andi	r26, 0x00	; 0
     bfc:	b0 70       	andi	r27, 0x00	; 0
     bfe:	80 34       	cpi	r24, 0x40	; 64
     c00:	91 05       	cpc	r25, r1
     c02:	a1 05       	cpc	r26, r1
     c04:	b1 05       	cpc	r27, r1
     c06:	39 f4       	brne	.+14     	; 0xc16 <__pack_f+0x144>
     c08:	e7 fe       	sbrs	r14, 7
     c0a:	0d c0       	rjmp	.+26     	; 0xc26 <__pack_f+0x154>
     c0c:	80 e4       	ldi	r24, 0x40	; 64
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	a0 e0       	ldi	r26, 0x00	; 0
     c12:	b0 e0       	ldi	r27, 0x00	; 0
     c14:	04 c0       	rjmp	.+8      	; 0xc1e <__pack_f+0x14c>
     c16:	8f e3       	ldi	r24, 0x3F	; 63
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	a0 e0       	ldi	r26, 0x00	; 0
     c1c:	b0 e0       	ldi	r27, 0x00	; 0
     c1e:	e8 0e       	add	r14, r24
     c20:	f9 1e       	adc	r15, r25
     c22:	0a 1f       	adc	r16, r26
     c24:	1b 1f       	adc	r17, r27
     c26:	17 ff       	sbrs	r17, 7
     c28:	05 c0       	rjmp	.+10     	; 0xc34 <__pack_f+0x162>
     c2a:	16 95       	lsr	r17
     c2c:	07 95       	ror	r16
     c2e:	f7 94       	ror	r15
     c30:	e7 94       	ror	r14
     c32:	31 96       	adiw	r30, 0x01	; 1
     c34:	87 e0       	ldi	r24, 0x07	; 7
     c36:	16 95       	lsr	r17
     c38:	07 95       	ror	r16
     c3a:	f7 94       	ror	r15
     c3c:	e7 94       	ror	r14
     c3e:	8a 95       	dec	r24
     c40:	d1 f7       	brne	.-12     	; 0xc36 <__pack_f+0x164>
     c42:	05 c0       	rjmp	.+10     	; 0xc4e <__pack_f+0x17c>
     c44:	ee 24       	eor	r14, r14
     c46:	ff 24       	eor	r15, r15
     c48:	87 01       	movw	r16, r14
     c4a:	ef ef       	ldi	r30, 0xFF	; 255
     c4c:	f0 e0       	ldi	r31, 0x00	; 0
     c4e:	6e 2f       	mov	r22, r30
     c50:	67 95       	ror	r22
     c52:	66 27       	eor	r22, r22
     c54:	67 95       	ror	r22
     c56:	90 2f       	mov	r25, r16
     c58:	9f 77       	andi	r25, 0x7F	; 127
     c5a:	d7 94       	ror	r13
     c5c:	dd 24       	eor	r13, r13
     c5e:	d7 94       	ror	r13
     c60:	8e 2f       	mov	r24, r30
     c62:	86 95       	lsr	r24
     c64:	49 2f       	mov	r20, r25
     c66:	46 2b       	or	r20, r22
     c68:	58 2f       	mov	r21, r24
     c6a:	5d 29       	or	r21, r13
     c6c:	b7 01       	movw	r22, r14
     c6e:	ca 01       	movw	r24, r20
     c70:	1f 91       	pop	r17
     c72:	0f 91       	pop	r16
     c74:	ff 90       	pop	r15
     c76:	ef 90       	pop	r14
     c78:	df 90       	pop	r13
     c7a:	08 95       	ret

00000c7c <__unpack_f>:
     c7c:	fc 01       	movw	r30, r24
     c7e:	db 01       	movw	r26, r22
     c80:	40 81       	ld	r20, Z
     c82:	51 81       	ldd	r21, Z+1	; 0x01
     c84:	22 81       	ldd	r18, Z+2	; 0x02
     c86:	62 2f       	mov	r22, r18
     c88:	6f 77       	andi	r22, 0x7F	; 127
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	22 1f       	adc	r18, r18
     c8e:	22 27       	eor	r18, r18
     c90:	22 1f       	adc	r18, r18
     c92:	93 81       	ldd	r25, Z+3	; 0x03
     c94:	89 2f       	mov	r24, r25
     c96:	88 0f       	add	r24, r24
     c98:	82 2b       	or	r24, r18
     c9a:	28 2f       	mov	r18, r24
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	99 1f       	adc	r25, r25
     ca0:	99 27       	eor	r25, r25
     ca2:	99 1f       	adc	r25, r25
     ca4:	11 96       	adiw	r26, 0x01	; 1
     ca6:	9c 93       	st	X, r25
     ca8:	11 97       	sbiw	r26, 0x01	; 1
     caa:	21 15       	cp	r18, r1
     cac:	31 05       	cpc	r19, r1
     cae:	a9 f5       	brne	.+106    	; 0xd1a <__unpack_f+0x9e>
     cb0:	41 15       	cp	r20, r1
     cb2:	51 05       	cpc	r21, r1
     cb4:	61 05       	cpc	r22, r1
     cb6:	71 05       	cpc	r23, r1
     cb8:	11 f4       	brne	.+4      	; 0xcbe <__unpack_f+0x42>
     cba:	82 e0       	ldi	r24, 0x02	; 2
     cbc:	37 c0       	rjmp	.+110    	; 0xd2c <__unpack_f+0xb0>
     cbe:	82 e8       	ldi	r24, 0x82	; 130
     cc0:	9f ef       	ldi	r25, 0xFF	; 255
     cc2:	13 96       	adiw	r26, 0x03	; 3
     cc4:	9c 93       	st	X, r25
     cc6:	8e 93       	st	-X, r24
     cc8:	12 97       	sbiw	r26, 0x02	; 2
     cca:	9a 01       	movw	r18, r20
     ccc:	ab 01       	movw	r20, r22
     cce:	67 e0       	ldi	r22, 0x07	; 7
     cd0:	22 0f       	add	r18, r18
     cd2:	33 1f       	adc	r19, r19
     cd4:	44 1f       	adc	r20, r20
     cd6:	55 1f       	adc	r21, r21
     cd8:	6a 95       	dec	r22
     cda:	d1 f7       	brne	.-12     	; 0xcd0 <__unpack_f+0x54>
     cdc:	83 e0       	ldi	r24, 0x03	; 3
     cde:	8c 93       	st	X, r24
     ce0:	0d c0       	rjmp	.+26     	; 0xcfc <__unpack_f+0x80>
     ce2:	22 0f       	add	r18, r18
     ce4:	33 1f       	adc	r19, r19
     ce6:	44 1f       	adc	r20, r20
     ce8:	55 1f       	adc	r21, r21
     cea:	12 96       	adiw	r26, 0x02	; 2
     cec:	8d 91       	ld	r24, X+
     cee:	9c 91       	ld	r25, X
     cf0:	13 97       	sbiw	r26, 0x03	; 3
     cf2:	01 97       	sbiw	r24, 0x01	; 1
     cf4:	13 96       	adiw	r26, 0x03	; 3
     cf6:	9c 93       	st	X, r25
     cf8:	8e 93       	st	-X, r24
     cfa:	12 97       	sbiw	r26, 0x02	; 2
     cfc:	20 30       	cpi	r18, 0x00	; 0
     cfe:	80 e0       	ldi	r24, 0x00	; 0
     d00:	38 07       	cpc	r19, r24
     d02:	80 e0       	ldi	r24, 0x00	; 0
     d04:	48 07       	cpc	r20, r24
     d06:	80 e4       	ldi	r24, 0x40	; 64
     d08:	58 07       	cpc	r21, r24
     d0a:	58 f3       	brcs	.-42     	; 0xce2 <__unpack_f+0x66>
     d0c:	14 96       	adiw	r26, 0x04	; 4
     d0e:	2d 93       	st	X+, r18
     d10:	3d 93       	st	X+, r19
     d12:	4d 93       	st	X+, r20
     d14:	5c 93       	st	X, r21
     d16:	17 97       	sbiw	r26, 0x07	; 7
     d18:	08 95       	ret
     d1a:	2f 3f       	cpi	r18, 0xFF	; 255
     d1c:	31 05       	cpc	r19, r1
     d1e:	79 f4       	brne	.+30     	; 0xd3e <__unpack_f+0xc2>
     d20:	41 15       	cp	r20, r1
     d22:	51 05       	cpc	r21, r1
     d24:	61 05       	cpc	r22, r1
     d26:	71 05       	cpc	r23, r1
     d28:	19 f4       	brne	.+6      	; 0xd30 <__unpack_f+0xb4>
     d2a:	84 e0       	ldi	r24, 0x04	; 4
     d2c:	8c 93       	st	X, r24
     d2e:	08 95       	ret
     d30:	64 ff       	sbrs	r22, 4
     d32:	03 c0       	rjmp	.+6      	; 0xd3a <__unpack_f+0xbe>
     d34:	81 e0       	ldi	r24, 0x01	; 1
     d36:	8c 93       	st	X, r24
     d38:	12 c0       	rjmp	.+36     	; 0xd5e <__unpack_f+0xe2>
     d3a:	1c 92       	st	X, r1
     d3c:	10 c0       	rjmp	.+32     	; 0xd5e <__unpack_f+0xe2>
     d3e:	2f 57       	subi	r18, 0x7F	; 127
     d40:	30 40       	sbci	r19, 0x00	; 0
     d42:	13 96       	adiw	r26, 0x03	; 3
     d44:	3c 93       	st	X, r19
     d46:	2e 93       	st	-X, r18
     d48:	12 97       	sbiw	r26, 0x02	; 2
     d4a:	83 e0       	ldi	r24, 0x03	; 3
     d4c:	8c 93       	st	X, r24
     d4e:	87 e0       	ldi	r24, 0x07	; 7
     d50:	44 0f       	add	r20, r20
     d52:	55 1f       	adc	r21, r21
     d54:	66 1f       	adc	r22, r22
     d56:	77 1f       	adc	r23, r23
     d58:	8a 95       	dec	r24
     d5a:	d1 f7       	brne	.-12     	; 0xd50 <__unpack_f+0xd4>
     d5c:	70 64       	ori	r23, 0x40	; 64
     d5e:	14 96       	adiw	r26, 0x04	; 4
     d60:	4d 93       	st	X+, r20
     d62:	5d 93       	st	X+, r21
     d64:	6d 93       	st	X+, r22
     d66:	7c 93       	st	X, r23
     d68:	17 97       	sbiw	r26, 0x07	; 7
     d6a:	08 95       	ret

00000d6c <__fpcmp_parts_f>:
     d6c:	1f 93       	push	r17
     d6e:	dc 01       	movw	r26, r24
     d70:	fb 01       	movw	r30, r22
     d72:	9c 91       	ld	r25, X
     d74:	92 30       	cpi	r25, 0x02	; 2
     d76:	08 f4       	brcc	.+2      	; 0xd7a <__fpcmp_parts_f+0xe>
     d78:	47 c0       	rjmp	.+142    	; 0xe08 <__fpcmp_parts_f+0x9c>
     d7a:	80 81       	ld	r24, Z
     d7c:	82 30       	cpi	r24, 0x02	; 2
     d7e:	08 f4       	brcc	.+2      	; 0xd82 <__fpcmp_parts_f+0x16>
     d80:	43 c0       	rjmp	.+134    	; 0xe08 <__fpcmp_parts_f+0x9c>
     d82:	94 30       	cpi	r25, 0x04	; 4
     d84:	51 f4       	brne	.+20     	; 0xd9a <__fpcmp_parts_f+0x2e>
     d86:	11 96       	adiw	r26, 0x01	; 1
     d88:	1c 91       	ld	r17, X
     d8a:	84 30       	cpi	r24, 0x04	; 4
     d8c:	99 f5       	brne	.+102    	; 0xdf4 <__fpcmp_parts_f+0x88>
     d8e:	81 81       	ldd	r24, Z+1	; 0x01
     d90:	68 2f       	mov	r22, r24
     d92:	70 e0       	ldi	r23, 0x00	; 0
     d94:	61 1b       	sub	r22, r17
     d96:	71 09       	sbc	r23, r1
     d98:	3f c0       	rjmp	.+126    	; 0xe18 <__fpcmp_parts_f+0xac>
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	21 f0       	breq	.+8      	; 0xda6 <__fpcmp_parts_f+0x3a>
     d9e:	92 30       	cpi	r25, 0x02	; 2
     da0:	31 f4       	brne	.+12     	; 0xdae <__fpcmp_parts_f+0x42>
     da2:	82 30       	cpi	r24, 0x02	; 2
     da4:	b9 f1       	breq	.+110    	; 0xe14 <__fpcmp_parts_f+0xa8>
     da6:	81 81       	ldd	r24, Z+1	; 0x01
     da8:	88 23       	and	r24, r24
     daa:	89 f1       	breq	.+98     	; 0xe0e <__fpcmp_parts_f+0xa2>
     dac:	2d c0       	rjmp	.+90     	; 0xe08 <__fpcmp_parts_f+0x9c>
     dae:	11 96       	adiw	r26, 0x01	; 1
     db0:	1c 91       	ld	r17, X
     db2:	11 97       	sbiw	r26, 0x01	; 1
     db4:	82 30       	cpi	r24, 0x02	; 2
     db6:	f1 f0       	breq	.+60     	; 0xdf4 <__fpcmp_parts_f+0x88>
     db8:	81 81       	ldd	r24, Z+1	; 0x01
     dba:	18 17       	cp	r17, r24
     dbc:	d9 f4       	brne	.+54     	; 0xdf4 <__fpcmp_parts_f+0x88>
     dbe:	12 96       	adiw	r26, 0x02	; 2
     dc0:	2d 91       	ld	r18, X+
     dc2:	3c 91       	ld	r19, X
     dc4:	13 97       	sbiw	r26, 0x03	; 3
     dc6:	82 81       	ldd	r24, Z+2	; 0x02
     dc8:	93 81       	ldd	r25, Z+3	; 0x03
     dca:	82 17       	cp	r24, r18
     dcc:	93 07       	cpc	r25, r19
     dce:	94 f0       	brlt	.+36     	; 0xdf4 <__fpcmp_parts_f+0x88>
     dd0:	28 17       	cp	r18, r24
     dd2:	39 07       	cpc	r19, r25
     dd4:	bc f0       	brlt	.+46     	; 0xe04 <__fpcmp_parts_f+0x98>
     dd6:	14 96       	adiw	r26, 0x04	; 4
     dd8:	8d 91       	ld	r24, X+
     dda:	9d 91       	ld	r25, X+
     ddc:	0d 90       	ld	r0, X+
     dde:	bc 91       	ld	r27, X
     de0:	a0 2d       	mov	r26, r0
     de2:	24 81       	ldd	r18, Z+4	; 0x04
     de4:	35 81       	ldd	r19, Z+5	; 0x05
     de6:	46 81       	ldd	r20, Z+6	; 0x06
     de8:	57 81       	ldd	r21, Z+7	; 0x07
     dea:	28 17       	cp	r18, r24
     dec:	39 07       	cpc	r19, r25
     dee:	4a 07       	cpc	r20, r26
     df0:	5b 07       	cpc	r21, r27
     df2:	18 f4       	brcc	.+6      	; 0xdfa <__fpcmp_parts_f+0x8e>
     df4:	11 23       	and	r17, r17
     df6:	41 f0       	breq	.+16     	; 0xe08 <__fpcmp_parts_f+0x9c>
     df8:	0a c0       	rjmp	.+20     	; 0xe0e <__fpcmp_parts_f+0xa2>
     dfa:	82 17       	cp	r24, r18
     dfc:	93 07       	cpc	r25, r19
     dfe:	a4 07       	cpc	r26, r20
     e00:	b5 07       	cpc	r27, r21
     e02:	40 f4       	brcc	.+16     	; 0xe14 <__fpcmp_parts_f+0xa8>
     e04:	11 23       	and	r17, r17
     e06:	19 f0       	breq	.+6      	; 0xe0e <__fpcmp_parts_f+0xa2>
     e08:	61 e0       	ldi	r22, 0x01	; 1
     e0a:	70 e0       	ldi	r23, 0x00	; 0
     e0c:	05 c0       	rjmp	.+10     	; 0xe18 <__fpcmp_parts_f+0xac>
     e0e:	6f ef       	ldi	r22, 0xFF	; 255
     e10:	7f ef       	ldi	r23, 0xFF	; 255
     e12:	02 c0       	rjmp	.+4      	; 0xe18 <__fpcmp_parts_f+0xac>
     e14:	60 e0       	ldi	r22, 0x00	; 0
     e16:	70 e0       	ldi	r23, 0x00	; 0
     e18:	cb 01       	movw	r24, r22
     e1a:	1f 91       	pop	r17
     e1c:	08 95       	ret

00000e1e <main>:
#include "Lm35.h"
#include "Uart.h"


int main()
{
     e1e:	df 93       	push	r29
     e20:	cf 93       	push	r28
     e22:	cd b7       	in	r28, 0x3d	; 61
     e24:	de b7       	in	r29, 0x3e	; 62
     e26:	2e 97       	sbiw	r28, 0x0e	; 14
     e28:	0f b6       	in	r0, 0x3f	; 63
     e2a:	f8 94       	cli
     e2c:	de bf       	out	0x3e, r29	; 62
     e2e:	0f be       	out	0x3f, r0	; 63
     e30:	cd bf       	out	0x3d, r28	; 61
while (1)
	{
		Led_vidledToggle(LED2);
     e32:	82 e0       	ldi	r24, 0x02	; 2
     e34:	0e 94 27 0a 	call	0x144e	; 0x144e <Led_vidledToggle>
     e38:	80 e0       	ldi	r24, 0x00	; 0
     e3a:	90 e0       	ldi	r25, 0x00	; 0
     e3c:	aa ef       	ldi	r26, 0xFA	; 250
     e3e:	b3 e4       	ldi	r27, 0x43	; 67
     e40:	8b 87       	std	Y+11, r24	; 0x0b
     e42:	9c 87       	std	Y+12, r25	; 0x0c
     e44:	ad 87       	std	Y+13, r26	; 0x0d
     e46:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e48:	6b 85       	ldd	r22, Y+11	; 0x0b
     e4a:	7c 85       	ldd	r23, Y+12	; 0x0c
     e4c:	8d 85       	ldd	r24, Y+13	; 0x0d
     e4e:	9e 85       	ldd	r25, Y+14	; 0x0e
     e50:	20 e0       	ldi	r18, 0x00	; 0
     e52:	30 e0       	ldi	r19, 0x00	; 0
     e54:	4a e7       	ldi	r20, 0x7A	; 122
     e56:	55 e4       	ldi	r21, 0x45	; 69
     e58:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     e5c:	dc 01       	movw	r26, r24
     e5e:	cb 01       	movw	r24, r22
     e60:	8f 83       	std	Y+7, r24	; 0x07
     e62:	98 87       	std	Y+8, r25	; 0x08
     e64:	a9 87       	std	Y+9, r26	; 0x09
     e66:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e68:	6f 81       	ldd	r22, Y+7	; 0x07
     e6a:	78 85       	ldd	r23, Y+8	; 0x08
     e6c:	89 85       	ldd	r24, Y+9	; 0x09
     e6e:	9a 85       	ldd	r25, Y+10	; 0x0a
     e70:	20 e0       	ldi	r18, 0x00	; 0
     e72:	30 e0       	ldi	r19, 0x00	; 0
     e74:	40 e8       	ldi	r20, 0x80	; 128
     e76:	5f e3       	ldi	r21, 0x3F	; 63
     e78:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
     e7c:	88 23       	and	r24, r24
     e7e:	2c f4       	brge	.+10     	; 0xe8a <main+0x6c>
		__ticks = 1;
     e80:	81 e0       	ldi	r24, 0x01	; 1
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	9e 83       	std	Y+6, r25	; 0x06
     e86:	8d 83       	std	Y+5, r24	; 0x05
     e88:	3f c0       	rjmp	.+126    	; 0xf08 <main+0xea>
	else if (__tmp > 65535)
     e8a:	6f 81       	ldd	r22, Y+7	; 0x07
     e8c:	78 85       	ldd	r23, Y+8	; 0x08
     e8e:	89 85       	ldd	r24, Y+9	; 0x09
     e90:	9a 85       	ldd	r25, Y+10	; 0x0a
     e92:	20 e0       	ldi	r18, 0x00	; 0
     e94:	3f ef       	ldi	r19, 0xFF	; 255
     e96:	4f e7       	ldi	r20, 0x7F	; 127
     e98:	57 e4       	ldi	r21, 0x47	; 71
     e9a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
     e9e:	18 16       	cp	r1, r24
     ea0:	4c f5       	brge	.+82     	; 0xef4 <main+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ea2:	6b 85       	ldd	r22, Y+11	; 0x0b
     ea4:	7c 85       	ldd	r23, Y+12	; 0x0c
     ea6:	8d 85       	ldd	r24, Y+13	; 0x0d
     ea8:	9e 85       	ldd	r25, Y+14	; 0x0e
     eaa:	20 e0       	ldi	r18, 0x00	; 0
     eac:	30 e0       	ldi	r19, 0x00	; 0
     eae:	40 e2       	ldi	r20, 0x20	; 32
     eb0:	51 e4       	ldi	r21, 0x41	; 65
     eb2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     eb6:	dc 01       	movw	r26, r24
     eb8:	cb 01       	movw	r24, r22
     eba:	bc 01       	movw	r22, r24
     ebc:	cd 01       	movw	r24, r26
     ebe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     ec2:	dc 01       	movw	r26, r24
     ec4:	cb 01       	movw	r24, r22
     ec6:	9e 83       	std	Y+6, r25	; 0x06
     ec8:	8d 83       	std	Y+5, r24	; 0x05
     eca:	0f c0       	rjmp	.+30     	; 0xeea <main+0xcc>
     ecc:	80 e9       	ldi	r24, 0x90	; 144
     ece:	91 e0       	ldi	r25, 0x01	; 1
     ed0:	9c 83       	std	Y+4, r25	; 0x04
     ed2:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     ed4:	8b 81       	ldd	r24, Y+3	; 0x03
     ed6:	9c 81       	ldd	r25, Y+4	; 0x04
     ed8:	01 97       	sbiw	r24, 0x01	; 1
     eda:	f1 f7       	brne	.-4      	; 0xed8 <main+0xba>
     edc:	9c 83       	std	Y+4, r25	; 0x04
     ede:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ee0:	8d 81       	ldd	r24, Y+5	; 0x05
     ee2:	9e 81       	ldd	r25, Y+6	; 0x06
     ee4:	01 97       	sbiw	r24, 0x01	; 1
     ee6:	9e 83       	std	Y+6, r25	; 0x06
     ee8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     eea:	8d 81       	ldd	r24, Y+5	; 0x05
     eec:	9e 81       	ldd	r25, Y+6	; 0x06
     eee:	00 97       	sbiw	r24, 0x00	; 0
     ef0:	69 f7       	brne	.-38     	; 0xecc <main+0xae>
     ef2:	9f cf       	rjmp	.-194    	; 0xe32 <main+0x14>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ef4:	6f 81       	ldd	r22, Y+7	; 0x07
     ef6:	78 85       	ldd	r23, Y+8	; 0x08
     ef8:	89 85       	ldd	r24, Y+9	; 0x09
     efa:	9a 85       	ldd	r25, Y+10	; 0x0a
     efc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     f00:	dc 01       	movw	r26, r24
     f02:	cb 01       	movw	r24, r22
     f04:	9e 83       	std	Y+6, r25	; 0x06
     f06:	8d 83       	std	Y+5, r24	; 0x05
     f08:	8d 81       	ldd	r24, Y+5	; 0x05
     f0a:	9e 81       	ldd	r25, Y+6	; 0x06
     f0c:	9a 83       	std	Y+2, r25	; 0x02
     f0e:	89 83       	std	Y+1, r24	; 0x01
     f10:	89 81       	ldd	r24, Y+1	; 0x01
     f12:	9a 81       	ldd	r25, Y+2	; 0x02
     f14:	01 97       	sbiw	r24, 0x01	; 1
     f16:	f1 f7       	brne	.-4      	; 0xf14 <main+0xf6>
     f18:	9a 83       	std	Y+2, r25	; 0x02
     f1a:	89 83       	std	Y+1, r24	; 0x01
     f1c:	8a cf       	rjmp	.-236    	; 0xe32 <main+0x14>

00000f1e <SSD_vidinit>:
#include "SSD.h"
#include "Dio.h"
#include <util/delay.h>

void SSD_vidinit(void)
{
     f1e:	df 93       	push	r29
     f20:	cf 93       	push	r28
     f22:	cd b7       	in	r28, 0x3d	; 61
     f24:	de b7       	in	r29, 0x3e	; 62
	Dio_vidconfigChanel(DIO_PORTB, DIO_PIN1, DIO_OUTPUT);
     f26:	81 e0       	ldi	r24, 0x01	; 1
     f28:	61 e0       	ldi	r22, 0x01	; 1
     f2a:	41 e0       	ldi	r20, 0x01	; 1
     f2c:	0e 94 3c 15 	call	0x2a78	; 0x2a78 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTB, DIO_PIN2, DIO_OUTPUT);
     f30:	81 e0       	ldi	r24, 0x01	; 1
     f32:	62 e0       	ldi	r22, 0x02	; 2
     f34:	41 e0       	ldi	r20, 0x01	; 1
     f36:	0e 94 3c 15 	call	0x2a78	; 0x2a78 <Dio_vidconfigChanel>

	Dio_vidconfigChanel(DIO_PORTA, DIO_PIN4, DIO_OUTPUT);
     f3a:	80 e0       	ldi	r24, 0x00	; 0
     f3c:	64 e0       	ldi	r22, 0x04	; 4
     f3e:	41 e0       	ldi	r20, 0x01	; 1
     f40:	0e 94 3c 15 	call	0x2a78	; 0x2a78 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTA, DIO_PIN5, DIO_OUTPUT);
     f44:	80 e0       	ldi	r24, 0x00	; 0
     f46:	65 e0       	ldi	r22, 0x05	; 5
     f48:	41 e0       	ldi	r20, 0x01	; 1
     f4a:	0e 94 3c 15 	call	0x2a78	; 0x2a78 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTA, DIO_PIN6, DIO_OUTPUT);
     f4e:	80 e0       	ldi	r24, 0x00	; 0
     f50:	66 e0       	ldi	r22, 0x06	; 6
     f52:	41 e0       	ldi	r20, 0x01	; 1
     f54:	0e 94 3c 15 	call	0x2a78	; 0x2a78 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTA, DIO_PIN7, DIO_OUTPUT);
     f58:	80 e0       	ldi	r24, 0x00	; 0
     f5a:	67 e0       	ldi	r22, 0x07	; 7
     f5c:	41 e0       	ldi	r20, 0x01	; 1
     f5e:	0e 94 3c 15 	call	0x2a78	; 0x2a78 <Dio_vidconfigChanel>
}
     f62:	cf 91       	pop	r28
     f64:	df 91       	pop	r29
     f66:	08 95       	ret

00000f68 <SSD_viddisplyNum>:

void SSD_viddisplyNum(u8 num)
{
     f68:	df 93       	push	r29
     f6a:	cf 93       	push	r28
     f6c:	cd b7       	in	r28, 0x3d	; 61
     f6e:	de b7       	in	r29, 0x3e	; 62
     f70:	e3 97       	sbiw	r28, 0x33	; 51
     f72:	0f b6       	in	r0, 0x3f	; 63
     f74:	f8 94       	cli
     f76:	de bf       	out	0x3e, r29	; 62
     f78:	0f be       	out	0x3f, r0	; 63
     f7a:	cd bf       	out	0x3d, r28	; 61
     f7c:	8b ab       	std	Y+51, r24	; 0x33
	u8 loc_secondDigit =  (num%10)<<4;
     f7e:	8b a9       	ldd	r24, Y+51	; 0x33
     f80:	9a e0       	ldi	r25, 0x0A	; 10
     f82:	69 2f       	mov	r22, r25
     f84:	0e 94 77 19 	call	0x32ee	; 0x32ee <__udivmodqi4>
     f88:	89 2f       	mov	r24, r25
     f8a:	82 95       	swap	r24
     f8c:	80 7f       	andi	r24, 0xF0	; 240
     f8e:	8a ab       	std	Y+50, r24	; 0x32
	u8 loc_firstDigit = (num/10)<<4;
     f90:	8b a9       	ldd	r24, Y+51	; 0x33
     f92:	9a e0       	ldi	r25, 0x0A	; 10
     f94:	69 2f       	mov	r22, r25
     f96:	0e 94 77 19 	call	0x32ee	; 0x32ee <__udivmodqi4>
     f9a:	82 95       	swap	r24
     f9c:	80 7f       	andi	r24, 0xF0	; 240
     f9e:	89 ab       	std	Y+49, r24	; 0x31
	static boolean loc_once = TRUE;

	/* Enable SSD 1	-> EN1 = High	*/
	Dio_vidwriteChanel(DIO_PORTB, DIO_PIN2, DIO_HIGH);
     fa0:	81 e0       	ldi	r24, 0x01	; 1
     fa2:	62 e0       	ldi	r22, 0x02	; 2
     fa4:	41 e0       	ldi	r20, 0x01	; 1
     fa6:	0e 94 1f 16 	call	0x2c3e	; 0x2c3e <Dio_vidwriteChanel>
	/* Disable SSD 2 -> EN2 =Low	*/
	Dio_vidwriteChanel(DIO_PORTB, DIO_PIN1, DIO_LOW);
     faa:	81 e0       	ldi	r24, 0x01	; 1
     fac:	61 e0       	ldi	r22, 0x01	; 1
     fae:	40 e0       	ldi	r20, 0x00	; 0
     fb0:	0e 94 1f 16 	call	0x2c3e	; 0x2c3e <Dio_vidwriteChanel>
	/* Write first digit */
	Dio_vidWriteChanelGroup(DIO_PORTA, loc_firstDigit, SSD_MASK);
     fb4:	80 e0       	ldi	r24, 0x00	; 0
     fb6:	69 a9       	ldd	r22, Y+49	; 0x31
     fb8:	4f e0       	ldi	r20, 0x0F	; 15
     fba:	0e 94 02 17 	call	0x2e04	; 0x2e04 <Dio_vidWriteChanelGroup>
     fbe:	80 e0       	ldi	r24, 0x00	; 0
     fc0:	90 e0       	ldi	r25, 0x00	; 0
     fc2:	aa ef       	ldi	r26, 0xFA	; 250
     fc4:	b3 e4       	ldi	r27, 0x43	; 67
     fc6:	8d a7       	std	Y+45, r24	; 0x2d
     fc8:	9e a7       	std	Y+46, r25	; 0x2e
     fca:	af a7       	std	Y+47, r26	; 0x2f
     fcc:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     fce:	6d a5       	ldd	r22, Y+45	; 0x2d
     fd0:	7e a5       	ldd	r23, Y+46	; 0x2e
     fd2:	8f a5       	ldd	r24, Y+47	; 0x2f
     fd4:	98 a9       	ldd	r25, Y+48	; 0x30
     fd6:	2b ea       	ldi	r18, 0xAB	; 171
     fd8:	3a ea       	ldi	r19, 0xAA	; 170
     fda:	4a ea       	ldi	r20, 0xAA	; 170
     fdc:	50 e4       	ldi	r21, 0x40	; 64
     fde:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     fe2:	dc 01       	movw	r26, r24
     fe4:	cb 01       	movw	r24, r22
     fe6:	89 a7       	std	Y+41, r24	; 0x29
     fe8:	9a a7       	std	Y+42, r25	; 0x2a
     fea:	ab a7       	std	Y+43, r26	; 0x2b
     fec:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
     fee:	69 a5       	ldd	r22, Y+41	; 0x29
     ff0:	7a a5       	ldd	r23, Y+42	; 0x2a
     ff2:	8b a5       	ldd	r24, Y+43	; 0x2b
     ff4:	9c a5       	ldd	r25, Y+44	; 0x2c
     ff6:	20 e0       	ldi	r18, 0x00	; 0
     ff8:	30 e0       	ldi	r19, 0x00	; 0
     ffa:	40 e8       	ldi	r20, 0x80	; 128
     ffc:	5f e3       	ldi	r21, 0x3F	; 63
     ffe:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1002:	88 23       	and	r24, r24
    1004:	1c f4       	brge	.+6      	; 0x100c <SSD_viddisplyNum+0xa4>
		__ticks = 1;
    1006:	81 e0       	ldi	r24, 0x01	; 1
    1008:	88 a7       	std	Y+40, r24	; 0x28
    100a:	91 c0       	rjmp	.+290    	; 0x112e <SSD_viddisplyNum+0x1c6>
	else if (__tmp > 255)
    100c:	69 a5       	ldd	r22, Y+41	; 0x29
    100e:	7a a5       	ldd	r23, Y+42	; 0x2a
    1010:	8b a5       	ldd	r24, Y+43	; 0x2b
    1012:	9c a5       	ldd	r25, Y+44	; 0x2c
    1014:	20 e0       	ldi	r18, 0x00	; 0
    1016:	30 e0       	ldi	r19, 0x00	; 0
    1018:	4f e7       	ldi	r20, 0x7F	; 127
    101a:	53 e4       	ldi	r21, 0x43	; 67
    101c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1020:	18 16       	cp	r1, r24
    1022:	0c f0       	brlt	.+2      	; 0x1026 <SSD_viddisplyNum+0xbe>
    1024:	7b c0       	rjmp	.+246    	; 0x111c <SSD_viddisplyNum+0x1b4>
	{
		_delay_ms(__us / 1000.0);
    1026:	6d a5       	ldd	r22, Y+45	; 0x2d
    1028:	7e a5       	ldd	r23, Y+46	; 0x2e
    102a:	8f a5       	ldd	r24, Y+47	; 0x2f
    102c:	98 a9       	ldd	r25, Y+48	; 0x30
    102e:	20 e0       	ldi	r18, 0x00	; 0
    1030:	30 e0       	ldi	r19, 0x00	; 0
    1032:	4a e7       	ldi	r20, 0x7A	; 122
    1034:	54 e4       	ldi	r21, 0x44	; 68
    1036:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    103a:	dc 01       	movw	r26, r24
    103c:	cb 01       	movw	r24, r22
    103e:	8c a3       	std	Y+36, r24	; 0x24
    1040:	9d a3       	std	Y+37, r25	; 0x25
    1042:	ae a3       	std	Y+38, r26	; 0x26
    1044:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1046:	6c a1       	ldd	r22, Y+36	; 0x24
    1048:	7d a1       	ldd	r23, Y+37	; 0x25
    104a:	8e a1       	ldd	r24, Y+38	; 0x26
    104c:	9f a1       	ldd	r25, Y+39	; 0x27
    104e:	20 e0       	ldi	r18, 0x00	; 0
    1050:	30 e0       	ldi	r19, 0x00	; 0
    1052:	4a e7       	ldi	r20, 0x7A	; 122
    1054:	55 e4       	ldi	r21, 0x45	; 69
    1056:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    105a:	dc 01       	movw	r26, r24
    105c:	cb 01       	movw	r24, r22
    105e:	88 a3       	std	Y+32, r24	; 0x20
    1060:	99 a3       	std	Y+33, r25	; 0x21
    1062:	aa a3       	std	Y+34, r26	; 0x22
    1064:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    1066:	68 a1       	ldd	r22, Y+32	; 0x20
    1068:	79 a1       	ldd	r23, Y+33	; 0x21
    106a:	8a a1       	ldd	r24, Y+34	; 0x22
    106c:	9b a1       	ldd	r25, Y+35	; 0x23
    106e:	20 e0       	ldi	r18, 0x00	; 0
    1070:	30 e0       	ldi	r19, 0x00	; 0
    1072:	40 e8       	ldi	r20, 0x80	; 128
    1074:	5f e3       	ldi	r21, 0x3F	; 63
    1076:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    107a:	88 23       	and	r24, r24
    107c:	2c f4       	brge	.+10     	; 0x1088 <SSD_viddisplyNum+0x120>
		__ticks = 1;
    107e:	81 e0       	ldi	r24, 0x01	; 1
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	9f 8f       	std	Y+31, r25	; 0x1f
    1084:	8e 8f       	std	Y+30, r24	; 0x1e
    1086:	3f c0       	rjmp	.+126    	; 0x1106 <SSD_viddisplyNum+0x19e>
	else if (__tmp > 65535)
    1088:	68 a1       	ldd	r22, Y+32	; 0x20
    108a:	79 a1       	ldd	r23, Y+33	; 0x21
    108c:	8a a1       	ldd	r24, Y+34	; 0x22
    108e:	9b a1       	ldd	r25, Y+35	; 0x23
    1090:	20 e0       	ldi	r18, 0x00	; 0
    1092:	3f ef       	ldi	r19, 0xFF	; 255
    1094:	4f e7       	ldi	r20, 0x7F	; 127
    1096:	57 e4       	ldi	r21, 0x47	; 71
    1098:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    109c:	18 16       	cp	r1, r24
    109e:	4c f5       	brge	.+82     	; 0x10f2 <SSD_viddisplyNum+0x18a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10a0:	6c a1       	ldd	r22, Y+36	; 0x24
    10a2:	7d a1       	ldd	r23, Y+37	; 0x25
    10a4:	8e a1       	ldd	r24, Y+38	; 0x26
    10a6:	9f a1       	ldd	r25, Y+39	; 0x27
    10a8:	20 e0       	ldi	r18, 0x00	; 0
    10aa:	30 e0       	ldi	r19, 0x00	; 0
    10ac:	40 e2       	ldi	r20, 0x20	; 32
    10ae:	51 e4       	ldi	r21, 0x41	; 65
    10b0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    10b4:	dc 01       	movw	r26, r24
    10b6:	cb 01       	movw	r24, r22
    10b8:	bc 01       	movw	r22, r24
    10ba:	cd 01       	movw	r24, r26
    10bc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    10c0:	dc 01       	movw	r26, r24
    10c2:	cb 01       	movw	r24, r22
    10c4:	9f 8f       	std	Y+31, r25	; 0x1f
    10c6:	8e 8f       	std	Y+30, r24	; 0x1e
    10c8:	0f c0       	rjmp	.+30     	; 0x10e8 <SSD_viddisplyNum+0x180>
    10ca:	80 e9       	ldi	r24, 0x90	; 144
    10cc:	91 e0       	ldi	r25, 0x01	; 1
    10ce:	9d 8f       	std	Y+29, r25	; 0x1d
    10d0:	8c 8f       	std	Y+28, r24	; 0x1c
    10d2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    10d4:	9d 8d       	ldd	r25, Y+29	; 0x1d
    10d6:	01 97       	sbiw	r24, 0x01	; 1
    10d8:	f1 f7       	brne	.-4      	; 0x10d6 <SSD_viddisplyNum+0x16e>
    10da:	9d 8f       	std	Y+29, r25	; 0x1d
    10dc:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10de:	8e 8d       	ldd	r24, Y+30	; 0x1e
    10e0:	9f 8d       	ldd	r25, Y+31	; 0x1f
    10e2:	01 97       	sbiw	r24, 0x01	; 1
    10e4:	9f 8f       	std	Y+31, r25	; 0x1f
    10e6:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10e8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    10ea:	9f 8d       	ldd	r25, Y+31	; 0x1f
    10ec:	00 97       	sbiw	r24, 0x00	; 0
    10ee:	69 f7       	brne	.-38     	; 0x10ca <SSD_viddisplyNum+0x162>
    10f0:	24 c0       	rjmp	.+72     	; 0x113a <SSD_viddisplyNum+0x1d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10f2:	68 a1       	ldd	r22, Y+32	; 0x20
    10f4:	79 a1       	ldd	r23, Y+33	; 0x21
    10f6:	8a a1       	ldd	r24, Y+34	; 0x22
    10f8:	9b a1       	ldd	r25, Y+35	; 0x23
    10fa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    10fe:	dc 01       	movw	r26, r24
    1100:	cb 01       	movw	r24, r22
    1102:	9f 8f       	std	Y+31, r25	; 0x1f
    1104:	8e 8f       	std	Y+30, r24	; 0x1e
    1106:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1108:	9f 8d       	ldd	r25, Y+31	; 0x1f
    110a:	9b 8f       	std	Y+27, r25	; 0x1b
    110c:	8a 8f       	std	Y+26, r24	; 0x1a
    110e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1110:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1112:	01 97       	sbiw	r24, 0x01	; 1
    1114:	f1 f7       	brne	.-4      	; 0x1112 <SSD_viddisplyNum+0x1aa>
    1116:	9b 8f       	std	Y+27, r25	; 0x1b
    1118:	8a 8f       	std	Y+26, r24	; 0x1a
    111a:	0f c0       	rjmp	.+30     	; 0x113a <SSD_viddisplyNum+0x1d2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    111c:	69 a5       	ldd	r22, Y+41	; 0x29
    111e:	7a a5       	ldd	r23, Y+42	; 0x2a
    1120:	8b a5       	ldd	r24, Y+43	; 0x2b
    1122:	9c a5       	ldd	r25, Y+44	; 0x2c
    1124:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1128:	dc 01       	movw	r26, r24
    112a:	cb 01       	movw	r24, r22
    112c:	88 a7       	std	Y+40, r24	; 0x28
    112e:	88 a5       	ldd	r24, Y+40	; 0x28
    1130:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1132:	89 8d       	ldd	r24, Y+25	; 0x19
    1134:	8a 95       	dec	r24
    1136:	f1 f7       	brne	.-4      	; 0x1134 <SSD_viddisplyNum+0x1cc>
    1138:	89 8f       	std	Y+25, r24	; 0x19

	_delay_us(500);

	/* Disable SSD 1	-> EN1 = Low	*/
	Dio_vidwriteChanel(DIO_PORTB, DIO_PIN2, DIO_LOW);
    113a:	81 e0       	ldi	r24, 0x01	; 1
    113c:	62 e0       	ldi	r22, 0x02	; 2
    113e:	40 e0       	ldi	r20, 0x00	; 0
    1140:	0e 94 1f 16 	call	0x2c3e	; 0x2c3e <Dio_vidwriteChanel>
	/* Enable SSD 2 -> EN2 = High	*/
	Dio_vidwriteChanel(DIO_PORTB, DIO_PIN1, DIO_HIGH);
    1144:	81 e0       	ldi	r24, 0x01	; 1
    1146:	61 e0       	ldi	r22, 0x01	; 1
    1148:	41 e0       	ldi	r20, 0x01	; 1
    114a:	0e 94 1f 16 	call	0x2c3e	; 0x2c3e <Dio_vidwriteChanel>
	/* Write second digit */
	Dio_vidWriteChanelGroup(DIO_PORTA, loc_secondDigit, SSD_MASK);
    114e:	80 e0       	ldi	r24, 0x00	; 0
    1150:	6a a9       	ldd	r22, Y+50	; 0x32
    1152:	4f e0       	ldi	r20, 0x0F	; 15
    1154:	0e 94 02 17 	call	0x2e04	; 0x2e04 <Dio_vidWriteChanelGroup>
    1158:	80 e0       	ldi	r24, 0x00	; 0
    115a:	90 e0       	ldi	r25, 0x00	; 0
    115c:	aa ef       	ldi	r26, 0xFA	; 250
    115e:	b3 e4       	ldi	r27, 0x43	; 67
    1160:	8d 8b       	std	Y+21, r24	; 0x15
    1162:	9e 8b       	std	Y+22, r25	; 0x16
    1164:	af 8b       	std	Y+23, r26	; 0x17
    1166:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1168:	6d 89       	ldd	r22, Y+21	; 0x15
    116a:	7e 89       	ldd	r23, Y+22	; 0x16
    116c:	8f 89       	ldd	r24, Y+23	; 0x17
    116e:	98 8d       	ldd	r25, Y+24	; 0x18
    1170:	2b ea       	ldi	r18, 0xAB	; 171
    1172:	3a ea       	ldi	r19, 0xAA	; 170
    1174:	4a ea       	ldi	r20, 0xAA	; 170
    1176:	50 e4       	ldi	r21, 0x40	; 64
    1178:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    117c:	dc 01       	movw	r26, r24
    117e:	cb 01       	movw	r24, r22
    1180:	89 8b       	std	Y+17, r24	; 0x11
    1182:	9a 8b       	std	Y+18, r25	; 0x12
    1184:	ab 8b       	std	Y+19, r26	; 0x13
    1186:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1188:	69 89       	ldd	r22, Y+17	; 0x11
    118a:	7a 89       	ldd	r23, Y+18	; 0x12
    118c:	8b 89       	ldd	r24, Y+19	; 0x13
    118e:	9c 89       	ldd	r25, Y+20	; 0x14
    1190:	20 e0       	ldi	r18, 0x00	; 0
    1192:	30 e0       	ldi	r19, 0x00	; 0
    1194:	40 e8       	ldi	r20, 0x80	; 128
    1196:	5f e3       	ldi	r21, 0x3F	; 63
    1198:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    119c:	88 23       	and	r24, r24
    119e:	1c f4       	brge	.+6      	; 0x11a6 <SSD_viddisplyNum+0x23e>
		__ticks = 1;
    11a0:	81 e0       	ldi	r24, 0x01	; 1
    11a2:	88 8b       	std	Y+16, r24	; 0x10
    11a4:	91 c0       	rjmp	.+290    	; 0x12c8 <SSD_viddisplyNum+0x360>
	else if (__tmp > 255)
    11a6:	69 89       	ldd	r22, Y+17	; 0x11
    11a8:	7a 89       	ldd	r23, Y+18	; 0x12
    11aa:	8b 89       	ldd	r24, Y+19	; 0x13
    11ac:	9c 89       	ldd	r25, Y+20	; 0x14
    11ae:	20 e0       	ldi	r18, 0x00	; 0
    11b0:	30 e0       	ldi	r19, 0x00	; 0
    11b2:	4f e7       	ldi	r20, 0x7F	; 127
    11b4:	53 e4       	ldi	r21, 0x43	; 67
    11b6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    11ba:	18 16       	cp	r1, r24
    11bc:	0c f0       	brlt	.+2      	; 0x11c0 <SSD_viddisplyNum+0x258>
    11be:	7b c0       	rjmp	.+246    	; 0x12b6 <SSD_viddisplyNum+0x34e>
	{
		_delay_ms(__us / 1000.0);
    11c0:	6d 89       	ldd	r22, Y+21	; 0x15
    11c2:	7e 89       	ldd	r23, Y+22	; 0x16
    11c4:	8f 89       	ldd	r24, Y+23	; 0x17
    11c6:	98 8d       	ldd	r25, Y+24	; 0x18
    11c8:	20 e0       	ldi	r18, 0x00	; 0
    11ca:	30 e0       	ldi	r19, 0x00	; 0
    11cc:	4a e7       	ldi	r20, 0x7A	; 122
    11ce:	54 e4       	ldi	r21, 0x44	; 68
    11d0:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    11d4:	dc 01       	movw	r26, r24
    11d6:	cb 01       	movw	r24, r22
    11d8:	8c 87       	std	Y+12, r24	; 0x0c
    11da:	9d 87       	std	Y+13, r25	; 0x0d
    11dc:	ae 87       	std	Y+14, r26	; 0x0e
    11de:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11e0:	6c 85       	ldd	r22, Y+12	; 0x0c
    11e2:	7d 85       	ldd	r23, Y+13	; 0x0d
    11e4:	8e 85       	ldd	r24, Y+14	; 0x0e
    11e6:	9f 85       	ldd	r25, Y+15	; 0x0f
    11e8:	20 e0       	ldi	r18, 0x00	; 0
    11ea:	30 e0       	ldi	r19, 0x00	; 0
    11ec:	4a e7       	ldi	r20, 0x7A	; 122
    11ee:	55 e4       	ldi	r21, 0x45	; 69
    11f0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    11f4:	dc 01       	movw	r26, r24
    11f6:	cb 01       	movw	r24, r22
    11f8:	88 87       	std	Y+8, r24	; 0x08
    11fa:	99 87       	std	Y+9, r25	; 0x09
    11fc:	aa 87       	std	Y+10, r26	; 0x0a
    11fe:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1200:	68 85       	ldd	r22, Y+8	; 0x08
    1202:	79 85       	ldd	r23, Y+9	; 0x09
    1204:	8a 85       	ldd	r24, Y+10	; 0x0a
    1206:	9b 85       	ldd	r25, Y+11	; 0x0b
    1208:	20 e0       	ldi	r18, 0x00	; 0
    120a:	30 e0       	ldi	r19, 0x00	; 0
    120c:	40 e8       	ldi	r20, 0x80	; 128
    120e:	5f e3       	ldi	r21, 0x3F	; 63
    1210:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1214:	88 23       	and	r24, r24
    1216:	2c f4       	brge	.+10     	; 0x1222 <SSD_viddisplyNum+0x2ba>
		__ticks = 1;
    1218:	81 e0       	ldi	r24, 0x01	; 1
    121a:	90 e0       	ldi	r25, 0x00	; 0
    121c:	9f 83       	std	Y+7, r25	; 0x07
    121e:	8e 83       	std	Y+6, r24	; 0x06
    1220:	3f c0       	rjmp	.+126    	; 0x12a0 <SSD_viddisplyNum+0x338>
	else if (__tmp > 65535)
    1222:	68 85       	ldd	r22, Y+8	; 0x08
    1224:	79 85       	ldd	r23, Y+9	; 0x09
    1226:	8a 85       	ldd	r24, Y+10	; 0x0a
    1228:	9b 85       	ldd	r25, Y+11	; 0x0b
    122a:	20 e0       	ldi	r18, 0x00	; 0
    122c:	3f ef       	ldi	r19, 0xFF	; 255
    122e:	4f e7       	ldi	r20, 0x7F	; 127
    1230:	57 e4       	ldi	r21, 0x47	; 71
    1232:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1236:	18 16       	cp	r1, r24
    1238:	4c f5       	brge	.+82     	; 0x128c <SSD_viddisplyNum+0x324>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    123a:	6c 85       	ldd	r22, Y+12	; 0x0c
    123c:	7d 85       	ldd	r23, Y+13	; 0x0d
    123e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1240:	9f 85       	ldd	r25, Y+15	; 0x0f
    1242:	20 e0       	ldi	r18, 0x00	; 0
    1244:	30 e0       	ldi	r19, 0x00	; 0
    1246:	40 e2       	ldi	r20, 0x20	; 32
    1248:	51 e4       	ldi	r21, 0x41	; 65
    124a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    124e:	dc 01       	movw	r26, r24
    1250:	cb 01       	movw	r24, r22
    1252:	bc 01       	movw	r22, r24
    1254:	cd 01       	movw	r24, r26
    1256:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    125a:	dc 01       	movw	r26, r24
    125c:	cb 01       	movw	r24, r22
    125e:	9f 83       	std	Y+7, r25	; 0x07
    1260:	8e 83       	std	Y+6, r24	; 0x06
    1262:	0f c0       	rjmp	.+30     	; 0x1282 <SSD_viddisplyNum+0x31a>
    1264:	80 e9       	ldi	r24, 0x90	; 144
    1266:	91 e0       	ldi	r25, 0x01	; 1
    1268:	9d 83       	std	Y+5, r25	; 0x05
    126a:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    126c:	8c 81       	ldd	r24, Y+4	; 0x04
    126e:	9d 81       	ldd	r25, Y+5	; 0x05
    1270:	01 97       	sbiw	r24, 0x01	; 1
    1272:	f1 f7       	brne	.-4      	; 0x1270 <SSD_viddisplyNum+0x308>
    1274:	9d 83       	std	Y+5, r25	; 0x05
    1276:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1278:	8e 81       	ldd	r24, Y+6	; 0x06
    127a:	9f 81       	ldd	r25, Y+7	; 0x07
    127c:	01 97       	sbiw	r24, 0x01	; 1
    127e:	9f 83       	std	Y+7, r25	; 0x07
    1280:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1282:	8e 81       	ldd	r24, Y+6	; 0x06
    1284:	9f 81       	ldd	r25, Y+7	; 0x07
    1286:	00 97       	sbiw	r24, 0x00	; 0
    1288:	69 f7       	brne	.-38     	; 0x1264 <SSD_viddisplyNum+0x2fc>
    128a:	24 c0       	rjmp	.+72     	; 0x12d4 <SSD_viddisplyNum+0x36c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    128c:	68 85       	ldd	r22, Y+8	; 0x08
    128e:	79 85       	ldd	r23, Y+9	; 0x09
    1290:	8a 85       	ldd	r24, Y+10	; 0x0a
    1292:	9b 85       	ldd	r25, Y+11	; 0x0b
    1294:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1298:	dc 01       	movw	r26, r24
    129a:	cb 01       	movw	r24, r22
    129c:	9f 83       	std	Y+7, r25	; 0x07
    129e:	8e 83       	std	Y+6, r24	; 0x06
    12a0:	8e 81       	ldd	r24, Y+6	; 0x06
    12a2:	9f 81       	ldd	r25, Y+7	; 0x07
    12a4:	9b 83       	std	Y+3, r25	; 0x03
    12a6:	8a 83       	std	Y+2, r24	; 0x02
    12a8:	8a 81       	ldd	r24, Y+2	; 0x02
    12aa:	9b 81       	ldd	r25, Y+3	; 0x03
    12ac:	01 97       	sbiw	r24, 0x01	; 1
    12ae:	f1 f7       	brne	.-4      	; 0x12ac <SSD_viddisplyNum+0x344>
    12b0:	9b 83       	std	Y+3, r25	; 0x03
    12b2:	8a 83       	std	Y+2, r24	; 0x02
    12b4:	0f c0       	rjmp	.+30     	; 0x12d4 <SSD_viddisplyNum+0x36c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    12b6:	69 89       	ldd	r22, Y+17	; 0x11
    12b8:	7a 89       	ldd	r23, Y+18	; 0x12
    12ba:	8b 89       	ldd	r24, Y+19	; 0x13
    12bc:	9c 89       	ldd	r25, Y+20	; 0x14
    12be:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    12c2:	dc 01       	movw	r26, r24
    12c4:	cb 01       	movw	r24, r22
    12c6:	88 8b       	std	Y+16, r24	; 0x10
    12c8:	88 89       	ldd	r24, Y+16	; 0x10
    12ca:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    12cc:	89 81       	ldd	r24, Y+1	; 0x01
    12ce:	8a 95       	dec	r24
    12d0:	f1 f7       	brne	.-4      	; 0x12ce <SSD_viddisplyNum+0x366>
    12d2:	89 83       	std	Y+1, r24	; 0x01


	_delay_us(500);
}
    12d4:	e3 96       	adiw	r28, 0x33	; 51
    12d6:	0f b6       	in	r0, 0x3f	; 63
    12d8:	f8 94       	cli
    12da:	de bf       	out	0x3e, r29	; 62
    12dc:	0f be       	out	0x3f, r0	; 63
    12de:	cd bf       	out	0x3d, r28	; 61
    12e0:	cf 91       	pop	r28
    12e2:	df 91       	pop	r29
    12e4:	08 95       	ret

000012e6 <SSD_viddelayWithDisplay_ms>:

void SSD_viddelayWithDisplay_ms(u8 num,u32 delay)
{
    12e6:	df 93       	push	r29
    12e8:	cf 93       	push	r28
    12ea:	cd b7       	in	r28, 0x3d	; 61
    12ec:	de b7       	in	r29, 0x3e	; 62
    12ee:	29 97       	sbiw	r28, 0x09	; 9
    12f0:	0f b6       	in	r0, 0x3f	; 63
    12f2:	f8 94       	cli
    12f4:	de bf       	out	0x3e, r29	; 62
    12f6:	0f be       	out	0x3f, r0	; 63
    12f8:	cd bf       	out	0x3d, r28	; 61
    12fa:	8d 83       	std	Y+5, r24	; 0x05
    12fc:	4e 83       	std	Y+6, r20	; 0x06
    12fe:	5f 83       	std	Y+7, r21	; 0x07
    1300:	68 87       	std	Y+8, r22	; 0x08
    1302:	79 87       	std	Y+9, r23	; 0x09
	u32 loc_iter =0;
    1304:	19 82       	std	Y+1, r1	; 0x01
    1306:	1a 82       	std	Y+2, r1	; 0x02
    1308:	1b 82       	std	Y+3, r1	; 0x03
    130a:	1c 82       	std	Y+4, r1	; 0x04

	for(loc_iter=0; loc_iter<delay; loc_iter++)
    130c:	19 82       	std	Y+1, r1	; 0x01
    130e:	1a 82       	std	Y+2, r1	; 0x02
    1310:	1b 82       	std	Y+3, r1	; 0x03
    1312:	1c 82       	std	Y+4, r1	; 0x04
    1314:	0e c0       	rjmp	.+28     	; 0x1332 <SSD_viddelayWithDisplay_ms+0x4c>
	{
		SSD_viddisplyNum(num);
    1316:	8d 81       	ldd	r24, Y+5	; 0x05
    1318:	0e 94 b4 07 	call	0xf68	; 0xf68 <SSD_viddisplyNum>

void SSD_viddelayWithDisplay_ms(u8 num,u32 delay)
{
	u32 loc_iter =0;

	for(loc_iter=0; loc_iter<delay; loc_iter++)
    131c:	89 81       	ldd	r24, Y+1	; 0x01
    131e:	9a 81       	ldd	r25, Y+2	; 0x02
    1320:	ab 81       	ldd	r26, Y+3	; 0x03
    1322:	bc 81       	ldd	r27, Y+4	; 0x04
    1324:	01 96       	adiw	r24, 0x01	; 1
    1326:	a1 1d       	adc	r26, r1
    1328:	b1 1d       	adc	r27, r1
    132a:	89 83       	std	Y+1, r24	; 0x01
    132c:	9a 83       	std	Y+2, r25	; 0x02
    132e:	ab 83       	std	Y+3, r26	; 0x03
    1330:	bc 83       	std	Y+4, r27	; 0x04
    1332:	29 81       	ldd	r18, Y+1	; 0x01
    1334:	3a 81       	ldd	r19, Y+2	; 0x02
    1336:	4b 81       	ldd	r20, Y+3	; 0x03
    1338:	5c 81       	ldd	r21, Y+4	; 0x04
    133a:	8e 81       	ldd	r24, Y+6	; 0x06
    133c:	9f 81       	ldd	r25, Y+7	; 0x07
    133e:	a8 85       	ldd	r26, Y+8	; 0x08
    1340:	b9 85       	ldd	r27, Y+9	; 0x09
    1342:	28 17       	cp	r18, r24
    1344:	39 07       	cpc	r19, r25
    1346:	4a 07       	cpc	r20, r26
    1348:	5b 07       	cpc	r21, r27
    134a:	28 f3       	brcs	.-54     	; 0x1316 <SSD_viddelayWithDisplay_ms+0x30>
	{
		SSD_viddisplyNum(num);
	}
}
    134c:	29 96       	adiw	r28, 0x09	; 9
    134e:	0f b6       	in	r0, 0x3f	; 63
    1350:	f8 94       	cli
    1352:	de bf       	out	0x3e, r29	; 62
    1354:	0f be       	out	0x3f, r0	; 63
    1356:	cd bf       	out	0x3d, r28	; 61
    1358:	cf 91       	pop	r28
    135a:	df 91       	pop	r29
    135c:	08 95       	ret

0000135e <Led_vidinit>:

#include "Dio.h"
#include "Led.h"

void Led_vidinit(void)
{
    135e:	df 93       	push	r29
    1360:	cf 93       	push	r28
    1362:	cd b7       	in	r28, 0x3d	; 61
    1364:	de b7       	in	r29, 0x3e	; 62
	Dio_vidconfigChanel(DIO_PORTC, DIO_PIN2,DIO_OUTPUT);
    1366:	82 e0       	ldi	r24, 0x02	; 2
    1368:	62 e0       	ldi	r22, 0x02	; 2
    136a:	41 e0       	ldi	r20, 0x01	; 1
    136c:	0e 94 3c 15 	call	0x2a78	; 0x2a78 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTC, DIO_PIN7,DIO_OUTPUT);
    1370:	82 e0       	ldi	r24, 0x02	; 2
    1372:	67 e0       	ldi	r22, 0x07	; 7
    1374:	41 e0       	ldi	r20, 0x01	; 1
    1376:	0e 94 3c 15 	call	0x2a78	; 0x2a78 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTD, DIO_PIN3,DIO_OUTPUT);
    137a:	83 e0       	ldi	r24, 0x03	; 3
    137c:	63 e0       	ldi	r22, 0x03	; 3
    137e:	41 e0       	ldi	r20, 0x01	; 1
    1380:	0e 94 3c 15 	call	0x2a78	; 0x2a78 <Dio_vidconfigChanel>
}
    1384:	cf 91       	pop	r28
    1386:	df 91       	pop	r29
    1388:	08 95       	ret

0000138a <Led_vidledOn>:

void Led_vidledOn(led_ledId_t ledId)
{
    138a:	df 93       	push	r29
    138c:	cf 93       	push	r28
    138e:	00 d0       	rcall	.+0      	; 0x1390 <Led_vidledOn+0x6>
    1390:	0f 92       	push	r0
    1392:	cd b7       	in	r28, 0x3d	; 61
    1394:	de b7       	in	r29, 0x3e	; 62
    1396:	89 83       	std	Y+1, r24	; 0x01
	switch (ledId)
    1398:	89 81       	ldd	r24, Y+1	; 0x01
    139a:	28 2f       	mov	r18, r24
    139c:	30 e0       	ldi	r19, 0x00	; 0
    139e:	3b 83       	std	Y+3, r19	; 0x03
    13a0:	2a 83       	std	Y+2, r18	; 0x02
    13a2:	8a 81       	ldd	r24, Y+2	; 0x02
    13a4:	9b 81       	ldd	r25, Y+3	; 0x03
    13a6:	81 30       	cpi	r24, 0x01	; 1
    13a8:	91 05       	cpc	r25, r1
    13aa:	79 f0       	breq	.+30     	; 0x13ca <Led_vidledOn+0x40>
    13ac:	2a 81       	ldd	r18, Y+2	; 0x02
    13ae:	3b 81       	ldd	r19, Y+3	; 0x03
    13b0:	22 30       	cpi	r18, 0x02	; 2
    13b2:	31 05       	cpc	r19, r1
    13b4:	81 f0       	breq	.+32     	; 0x13d6 <Led_vidledOn+0x4c>
    13b6:	8a 81       	ldd	r24, Y+2	; 0x02
    13b8:	9b 81       	ldd	r25, Y+3	; 0x03
    13ba:	00 97       	sbiw	r24, 0x00	; 0
    13bc:	89 f4       	brne	.+34     	; 0x13e0 <Led_vidledOn+0x56>
	{
	case LED0:
		Dio_vidwriteChanel(DIO_PORTC, DIO_PIN2, DIO_HIGH);
    13be:	82 e0       	ldi	r24, 0x02	; 2
    13c0:	62 e0       	ldi	r22, 0x02	; 2
    13c2:	41 e0       	ldi	r20, 0x01	; 1
    13c4:	0e 94 1f 16 	call	0x2c3e	; 0x2c3e <Dio_vidwriteChanel>
    13c8:	0b c0       	rjmp	.+22     	; 0x13e0 <Led_vidledOn+0x56>
		break;

	case LED1:
		Dio_vidwriteChanel(DIO_PORTC, DIO_PIN7, DIO_HIGH);
    13ca:	82 e0       	ldi	r24, 0x02	; 2
    13cc:	67 e0       	ldi	r22, 0x07	; 7
    13ce:	41 e0       	ldi	r20, 0x01	; 1
    13d0:	0e 94 1f 16 	call	0x2c3e	; 0x2c3e <Dio_vidwriteChanel>
    13d4:	05 c0       	rjmp	.+10     	; 0x13e0 <Led_vidledOn+0x56>
		break;

	case LED2:
		Dio_vidwriteChanel(DIO_PORTD, DIO_PIN3, DIO_HIGH);
    13d6:	83 e0       	ldi	r24, 0x03	; 3
    13d8:	63 e0       	ldi	r22, 0x03	; 3
    13da:	41 e0       	ldi	r20, 0x01	; 1
    13dc:	0e 94 1f 16 	call	0x2c3e	; 0x2c3e <Dio_vidwriteChanel>
		break;
	}
}
    13e0:	0f 90       	pop	r0
    13e2:	0f 90       	pop	r0
    13e4:	0f 90       	pop	r0
    13e6:	cf 91       	pop	r28
    13e8:	df 91       	pop	r29
    13ea:	08 95       	ret

000013ec <Led_vidledOff>:

void Led_vidledOff(led_ledId_t ledId)
{
    13ec:	df 93       	push	r29
    13ee:	cf 93       	push	r28
    13f0:	00 d0       	rcall	.+0      	; 0x13f2 <Led_vidledOff+0x6>
    13f2:	0f 92       	push	r0
    13f4:	cd b7       	in	r28, 0x3d	; 61
    13f6:	de b7       	in	r29, 0x3e	; 62
    13f8:	89 83       	std	Y+1, r24	; 0x01
	switch (ledId)
    13fa:	89 81       	ldd	r24, Y+1	; 0x01
    13fc:	28 2f       	mov	r18, r24
    13fe:	30 e0       	ldi	r19, 0x00	; 0
    1400:	3b 83       	std	Y+3, r19	; 0x03
    1402:	2a 83       	std	Y+2, r18	; 0x02
    1404:	8a 81       	ldd	r24, Y+2	; 0x02
    1406:	9b 81       	ldd	r25, Y+3	; 0x03
    1408:	81 30       	cpi	r24, 0x01	; 1
    140a:	91 05       	cpc	r25, r1
    140c:	79 f0       	breq	.+30     	; 0x142c <Led_vidledOff+0x40>
    140e:	2a 81       	ldd	r18, Y+2	; 0x02
    1410:	3b 81       	ldd	r19, Y+3	; 0x03
    1412:	22 30       	cpi	r18, 0x02	; 2
    1414:	31 05       	cpc	r19, r1
    1416:	81 f0       	breq	.+32     	; 0x1438 <Led_vidledOff+0x4c>
    1418:	8a 81       	ldd	r24, Y+2	; 0x02
    141a:	9b 81       	ldd	r25, Y+3	; 0x03
    141c:	00 97       	sbiw	r24, 0x00	; 0
    141e:	89 f4       	brne	.+34     	; 0x1442 <Led_vidledOff+0x56>
	{
	case LED0:
		Dio_vidwriteChanel(DIO_PORTC, DIO_PIN2, DIO_LOW);
    1420:	82 e0       	ldi	r24, 0x02	; 2
    1422:	62 e0       	ldi	r22, 0x02	; 2
    1424:	40 e0       	ldi	r20, 0x00	; 0
    1426:	0e 94 1f 16 	call	0x2c3e	; 0x2c3e <Dio_vidwriteChanel>
    142a:	0b c0       	rjmp	.+22     	; 0x1442 <Led_vidledOff+0x56>
		break;

	case LED1:
		Dio_vidwriteChanel(DIO_PORTC, DIO_PIN7, DIO_LOW);
    142c:	82 e0       	ldi	r24, 0x02	; 2
    142e:	67 e0       	ldi	r22, 0x07	; 7
    1430:	40 e0       	ldi	r20, 0x00	; 0
    1432:	0e 94 1f 16 	call	0x2c3e	; 0x2c3e <Dio_vidwriteChanel>
    1436:	05 c0       	rjmp	.+10     	; 0x1442 <Led_vidledOff+0x56>
		break;

	case LED2:
		Dio_vidwriteChanel(DIO_PORTD, DIO_PIN3, DIO_LOW);
    1438:	83 e0       	ldi	r24, 0x03	; 3
    143a:	63 e0       	ldi	r22, 0x03	; 3
    143c:	40 e0       	ldi	r20, 0x00	; 0
    143e:	0e 94 1f 16 	call	0x2c3e	; 0x2c3e <Dio_vidwriteChanel>
		break;
	}
}
    1442:	0f 90       	pop	r0
    1444:	0f 90       	pop	r0
    1446:	0f 90       	pop	r0
    1448:	cf 91       	pop	r28
    144a:	df 91       	pop	r29
    144c:	08 95       	ret

0000144e <Led_vidledToggle>:
void Led_vidledToggle(led_ledId_t ledId)
{
    144e:	df 93       	push	r29
    1450:	cf 93       	push	r28
    1452:	00 d0       	rcall	.+0      	; 0x1454 <Led_vidledToggle+0x6>
    1454:	0f 92       	push	r0
    1456:	cd b7       	in	r28, 0x3d	; 61
    1458:	de b7       	in	r29, 0x3e	; 62
    145a:	89 83       	std	Y+1, r24	; 0x01
	switch (ledId)
    145c:	89 81       	ldd	r24, Y+1	; 0x01
    145e:	28 2f       	mov	r18, r24
    1460:	30 e0       	ldi	r19, 0x00	; 0
    1462:	3b 83       	std	Y+3, r19	; 0x03
    1464:	2a 83       	std	Y+2, r18	; 0x02
    1466:	8a 81       	ldd	r24, Y+2	; 0x02
    1468:	9b 81       	ldd	r25, Y+3	; 0x03
    146a:	81 30       	cpi	r24, 0x01	; 1
    146c:	91 05       	cpc	r25, r1
    146e:	71 f0       	breq	.+28     	; 0x148c <Led_vidledToggle+0x3e>
    1470:	2a 81       	ldd	r18, Y+2	; 0x02
    1472:	3b 81       	ldd	r19, Y+3	; 0x03
    1474:	22 30       	cpi	r18, 0x02	; 2
    1476:	31 05       	cpc	r19, r1
    1478:	71 f0       	breq	.+28     	; 0x1496 <Led_vidledToggle+0x48>
    147a:	8a 81       	ldd	r24, Y+2	; 0x02
    147c:	9b 81       	ldd	r25, Y+3	; 0x03
    147e:	00 97       	sbiw	r24, 0x00	; 0
    1480:	71 f4       	brne	.+28     	; 0x149e <Led_vidledToggle+0x50>
	{
	case LED0:
		Dio_vidflipChanel(DIO_PORTC, DIO_PIN2);
    1482:	82 e0       	ldi	r24, 0x02	; 2
    1484:	62 e0       	ldi	r22, 0x02	; 2
    1486:	0e 94 f1 17 	call	0x2fe2	; 0x2fe2 <Dio_vidflipChanel>
    148a:	09 c0       	rjmp	.+18     	; 0x149e <Led_vidledToggle+0x50>
		break;

	case LED1:
		Dio_vidflipChanel(DIO_PORTC, DIO_PIN7);
    148c:	82 e0       	ldi	r24, 0x02	; 2
    148e:	67 e0       	ldi	r22, 0x07	; 7
    1490:	0e 94 f1 17 	call	0x2fe2	; 0x2fe2 <Dio_vidflipChanel>
    1494:	04 c0       	rjmp	.+8      	; 0x149e <Led_vidledToggle+0x50>
		break;

	case LED2:
		Dio_vidflipChanel(DIO_PORTD, DIO_PIN3);
    1496:	83 e0       	ldi	r24, 0x03	; 3
    1498:	63 e0       	ldi	r22, 0x03	; 3
    149a:	0e 94 f1 17 	call	0x2fe2	; 0x2fe2 <Dio_vidflipChanel>
		break;
	}
}
    149e:	0f 90       	pop	r0
    14a0:	0f 90       	pop	r0
    14a2:	0f 90       	pop	r0
    14a4:	cf 91       	pop	r28
    14a6:	df 91       	pop	r29
    14a8:	08 95       	ret

000014aa <Lm35_vidInit>:

#include "Std_Types.h"
#include "Adc.h"

void Lm35_vidInit(void)
{
    14aa:	df 93       	push	r29
    14ac:	cf 93       	push	r28
    14ae:	cd b7       	in	r28, 0x3d	; 61
    14b0:	de b7       	in	r29, 0x3e	; 62
	Adc_vidInit();
    14b2:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <Adc_vidInit>
}
    14b6:	cf 91       	pop	r28
    14b8:	df 91       	pop	r29
    14ba:	08 95       	ret

000014bc <Lm35_u8TempRead>:
u16 Lm35_u8TempRead(void)
{
    14bc:	df 93       	push	r29
    14be:	cf 93       	push	r28
    14c0:	00 d0       	rcall	.+0      	; 0x14c2 <Lm35_u8TempRead+0x6>
    14c2:	00 d0       	rcall	.+0      	; 0x14c4 <Lm35_u8TempRead+0x8>
    14c4:	00 d0       	rcall	.+0      	; 0x14c6 <Lm35_u8TempRead+0xa>
    14c6:	cd b7       	in	r28, 0x3d	; 61
    14c8:	de b7       	in	r29, 0x3e	; 62
	f64 loc_adcRead = 0;
    14ca:	80 e0       	ldi	r24, 0x00	; 0
    14cc:	90 e0       	ldi	r25, 0x00	; 0
    14ce:	a0 e0       	ldi	r26, 0x00	; 0
    14d0:	b0 e0       	ldi	r27, 0x00	; 0
    14d2:	8b 83       	std	Y+3, r24	; 0x03
    14d4:	9c 83       	std	Y+4, r25	; 0x04
    14d6:	ad 83       	std	Y+5, r26	; 0x05
    14d8:	be 83       	std	Y+6, r27	; 0x06
	u16 loc_temp = 0;
    14da:	1a 82       	std	Y+2, r1	; 0x02
    14dc:	19 82       	std	Y+1, r1	; 0x01

	loc_adcRead = Adc_u16AdcRead(ADC_CHANNEL1);
    14de:	81 e0       	ldi	r24, 0x01	; 1
    14e0:	0e 94 07 19 	call	0x320e	; 0x320e <Adc_u16AdcRead>
    14e4:	dc 01       	movw	r26, r24
    14e6:	cb 01       	movw	r24, r22
    14e8:	8b 83       	std	Y+3, r24	; 0x03
    14ea:	9c 83       	std	Y+4, r25	; 0x04
    14ec:	ad 83       	std	Y+5, r26	; 0x05
    14ee:	be 83       	std	Y+6, r27	; 0x06
	loc_temp = loc_adcRead/10;
    14f0:	6b 81       	ldd	r22, Y+3	; 0x03
    14f2:	7c 81       	ldd	r23, Y+4	; 0x04
    14f4:	8d 81       	ldd	r24, Y+5	; 0x05
    14f6:	9e 81       	ldd	r25, Y+6	; 0x06
    14f8:	20 e0       	ldi	r18, 0x00	; 0
    14fa:	30 e0       	ldi	r19, 0x00	; 0
    14fc:	40 e2       	ldi	r20, 0x20	; 32
    14fe:	51 e4       	ldi	r21, 0x41	; 65
    1500:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1504:	dc 01       	movw	r26, r24
    1506:	cb 01       	movw	r24, r22
    1508:	bc 01       	movw	r22, r24
    150a:	cd 01       	movw	r24, r26
    150c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1510:	dc 01       	movw	r26, r24
    1512:	cb 01       	movw	r24, r22
    1514:	9a 83       	std	Y+2, r25	; 0x02
    1516:	89 83       	std	Y+1, r24	; 0x01

	return loc_temp;
    1518:	89 81       	ldd	r24, Y+1	; 0x01
    151a:	9a 81       	ldd	r25, Y+2	; 0x02
}
    151c:	26 96       	adiw	r28, 0x06	; 6
    151e:	0f b6       	in	r0, 0x3f	; 63
    1520:	f8 94       	cli
    1522:	de bf       	out	0x3e, r29	; 62
    1524:	0f be       	out	0x3f, r0	; 63
    1526:	cd bf       	out	0x3d, r28	; 61
    1528:	cf 91       	pop	r28
    152a:	df 91       	pop	r29
    152c:	08 95       	ret

0000152e <Lcd_vidinit>:
#include "util/delay.h"
#include <stdio.h>


void Lcd_vidinit(void)
{
    152e:	df 93       	push	r29
    1530:	cf 93       	push	r28
    1532:	cd b7       	in	r28, 0x3d	; 61
    1534:	de b7       	in	r29, 0x3e	; 62
    1536:	e4 97       	sbiw	r28, 0x34	; 52
    1538:	0f b6       	in	r0, 0x3f	; 63
    153a:	f8 94       	cli
    153c:	de bf       	out	0x3e, r29	; 62
    153e:	0f be       	out	0x3f, r0	; 63
    1540:	cd bf       	out	0x3d, r28	; 61
	/*	configure control pins as output	*/
	Dio_vidconfigChanel(DIO_PORTB, DIO_PIN1, DIO_OUTPUT);
    1542:	81 e0       	ldi	r24, 0x01	; 1
    1544:	61 e0       	ldi	r22, 0x01	; 1
    1546:	41 e0       	ldi	r20, 0x01	; 1
    1548:	0e 94 3c 15 	call	0x2a78	; 0x2a78 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTB, DIO_PIN2, DIO_OUTPUT);
    154c:	81 e0       	ldi	r24, 0x01	; 1
    154e:	62 e0       	ldi	r22, 0x02	; 2
    1550:	41 e0       	ldi	r20, 0x01	; 1
    1552:	0e 94 3c 15 	call	0x2a78	; 0x2a78 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTB, DIO_PIN3, DIO_OUTPUT);
    1556:	81 e0       	ldi	r24, 0x01	; 1
    1558:	63 e0       	ldi	r22, 0x03	; 3
    155a:	41 e0       	ldi	r20, 0x01	; 1
    155c:	0e 94 3c 15 	call	0x2a78	; 0x2a78 <Dio_vidconfigChanel>

	/*	configure data pins as output	*/
	Dio_vidconfigChanel(DIO_PORTA, DIO_PIN4, DIO_OUTPUT);
    1560:	80 e0       	ldi	r24, 0x00	; 0
    1562:	64 e0       	ldi	r22, 0x04	; 4
    1564:	41 e0       	ldi	r20, 0x01	; 1
    1566:	0e 94 3c 15 	call	0x2a78	; 0x2a78 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTA, DIO_PIN5, DIO_OUTPUT);
    156a:	80 e0       	ldi	r24, 0x00	; 0
    156c:	65 e0       	ldi	r22, 0x05	; 5
    156e:	41 e0       	ldi	r20, 0x01	; 1
    1570:	0e 94 3c 15 	call	0x2a78	; 0x2a78 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTA, DIO_PIN6, DIO_OUTPUT);
    1574:	80 e0       	ldi	r24, 0x00	; 0
    1576:	66 e0       	ldi	r22, 0x06	; 6
    1578:	41 e0       	ldi	r20, 0x01	; 1
    157a:	0e 94 3c 15 	call	0x2a78	; 0x2a78 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTA, DIO_PIN7, DIO_OUTPUT);
    157e:	80 e0       	ldi	r24, 0x00	; 0
    1580:	67 e0       	ldi	r22, 0x07	; 7
    1582:	41 e0       	ldi	r20, 0x01	; 1
    1584:	0e 94 3c 15 	call	0x2a78	; 0x2a78 <Dio_vidconfigChanel>

	Dio_vidwriteChanel(DIO_PORTB, DIO_PIN2, DIO_LOW);
    1588:	81 e0       	ldi	r24, 0x01	; 1
    158a:	62 e0       	ldi	r22, 0x02	; 2
    158c:	40 e0       	ldi	r20, 0x00	; 0
    158e:	0e 94 1f 16 	call	0x2c3e	; 0x2c3e <Dio_vidwriteChanel>
    1592:	80 e0       	ldi	r24, 0x00	; 0
    1594:	90 e0       	ldi	r25, 0x00	; 0
    1596:	a0 e7       	ldi	r26, 0x70	; 112
    1598:	b1 e4       	ldi	r27, 0x41	; 65
    159a:	89 ab       	std	Y+49, r24	; 0x31
    159c:	9a ab       	std	Y+50, r25	; 0x32
    159e:	ab ab       	std	Y+51, r26	; 0x33
    15a0:	bc ab       	std	Y+52, r27	; 0x34
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15a2:	69 a9       	ldd	r22, Y+49	; 0x31
    15a4:	7a a9       	ldd	r23, Y+50	; 0x32
    15a6:	8b a9       	ldd	r24, Y+51	; 0x33
    15a8:	9c a9       	ldd	r25, Y+52	; 0x34
    15aa:	20 e0       	ldi	r18, 0x00	; 0
    15ac:	30 e0       	ldi	r19, 0x00	; 0
    15ae:	4a e7       	ldi	r20, 0x7A	; 122
    15b0:	55 e4       	ldi	r21, 0x45	; 69
    15b2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15b6:	dc 01       	movw	r26, r24
    15b8:	cb 01       	movw	r24, r22
    15ba:	8d a7       	std	Y+45, r24	; 0x2d
    15bc:	9e a7       	std	Y+46, r25	; 0x2e
    15be:	af a7       	std	Y+47, r26	; 0x2f
    15c0:	b8 ab       	std	Y+48, r27	; 0x30
	if (__tmp < 1.0)
    15c2:	6d a5       	ldd	r22, Y+45	; 0x2d
    15c4:	7e a5       	ldd	r23, Y+46	; 0x2e
    15c6:	8f a5       	ldd	r24, Y+47	; 0x2f
    15c8:	98 a9       	ldd	r25, Y+48	; 0x30
    15ca:	20 e0       	ldi	r18, 0x00	; 0
    15cc:	30 e0       	ldi	r19, 0x00	; 0
    15ce:	40 e8       	ldi	r20, 0x80	; 128
    15d0:	5f e3       	ldi	r21, 0x3F	; 63
    15d2:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    15d6:	88 23       	and	r24, r24
    15d8:	2c f4       	brge	.+10     	; 0x15e4 <Lcd_vidinit+0xb6>
		__ticks = 1;
    15da:	81 e0       	ldi	r24, 0x01	; 1
    15dc:	90 e0       	ldi	r25, 0x00	; 0
    15de:	9c a7       	std	Y+44, r25	; 0x2c
    15e0:	8b a7       	std	Y+43, r24	; 0x2b
    15e2:	3f c0       	rjmp	.+126    	; 0x1662 <Lcd_vidinit+0x134>
	else if (__tmp > 65535)
    15e4:	6d a5       	ldd	r22, Y+45	; 0x2d
    15e6:	7e a5       	ldd	r23, Y+46	; 0x2e
    15e8:	8f a5       	ldd	r24, Y+47	; 0x2f
    15ea:	98 a9       	ldd	r25, Y+48	; 0x30
    15ec:	20 e0       	ldi	r18, 0x00	; 0
    15ee:	3f ef       	ldi	r19, 0xFF	; 255
    15f0:	4f e7       	ldi	r20, 0x7F	; 127
    15f2:	57 e4       	ldi	r21, 0x47	; 71
    15f4:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    15f8:	18 16       	cp	r1, r24
    15fa:	4c f5       	brge	.+82     	; 0x164e <Lcd_vidinit+0x120>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15fc:	69 a9       	ldd	r22, Y+49	; 0x31
    15fe:	7a a9       	ldd	r23, Y+50	; 0x32
    1600:	8b a9       	ldd	r24, Y+51	; 0x33
    1602:	9c a9       	ldd	r25, Y+52	; 0x34
    1604:	20 e0       	ldi	r18, 0x00	; 0
    1606:	30 e0       	ldi	r19, 0x00	; 0
    1608:	40 e2       	ldi	r20, 0x20	; 32
    160a:	51 e4       	ldi	r21, 0x41	; 65
    160c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1610:	dc 01       	movw	r26, r24
    1612:	cb 01       	movw	r24, r22
    1614:	bc 01       	movw	r22, r24
    1616:	cd 01       	movw	r24, r26
    1618:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    161c:	dc 01       	movw	r26, r24
    161e:	cb 01       	movw	r24, r22
    1620:	9c a7       	std	Y+44, r25	; 0x2c
    1622:	8b a7       	std	Y+43, r24	; 0x2b
    1624:	0f c0       	rjmp	.+30     	; 0x1644 <Lcd_vidinit+0x116>
    1626:	80 e9       	ldi	r24, 0x90	; 144
    1628:	91 e0       	ldi	r25, 0x01	; 1
    162a:	9a a7       	std	Y+42, r25	; 0x2a
    162c:	89 a7       	std	Y+41, r24	; 0x29
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    162e:	89 a5       	ldd	r24, Y+41	; 0x29
    1630:	9a a5       	ldd	r25, Y+42	; 0x2a
    1632:	01 97       	sbiw	r24, 0x01	; 1
    1634:	f1 f7       	brne	.-4      	; 0x1632 <Lcd_vidinit+0x104>
    1636:	9a a7       	std	Y+42, r25	; 0x2a
    1638:	89 a7       	std	Y+41, r24	; 0x29
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    163a:	8b a5       	ldd	r24, Y+43	; 0x2b
    163c:	9c a5       	ldd	r25, Y+44	; 0x2c
    163e:	01 97       	sbiw	r24, 0x01	; 1
    1640:	9c a7       	std	Y+44, r25	; 0x2c
    1642:	8b a7       	std	Y+43, r24	; 0x2b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1644:	8b a5       	ldd	r24, Y+43	; 0x2b
    1646:	9c a5       	ldd	r25, Y+44	; 0x2c
    1648:	00 97       	sbiw	r24, 0x00	; 0
    164a:	69 f7       	brne	.-38     	; 0x1626 <Lcd_vidinit+0xf8>
    164c:	14 c0       	rjmp	.+40     	; 0x1676 <Lcd_vidinit+0x148>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    164e:	6d a5       	ldd	r22, Y+45	; 0x2d
    1650:	7e a5       	ldd	r23, Y+46	; 0x2e
    1652:	8f a5       	ldd	r24, Y+47	; 0x2f
    1654:	98 a9       	ldd	r25, Y+48	; 0x30
    1656:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    165a:	dc 01       	movw	r26, r24
    165c:	cb 01       	movw	r24, r22
    165e:	9c a7       	std	Y+44, r25	; 0x2c
    1660:	8b a7       	std	Y+43, r24	; 0x2b
    1662:	8b a5       	ldd	r24, Y+43	; 0x2b
    1664:	9c a5       	ldd	r25, Y+44	; 0x2c
    1666:	98 a7       	std	Y+40, r25	; 0x28
    1668:	8f a3       	std	Y+39, r24	; 0x27
    166a:	8f a1       	ldd	r24, Y+39	; 0x27
    166c:	98 a5       	ldd	r25, Y+40	; 0x28
    166e:	01 97       	sbiw	r24, 0x01	; 1
    1670:	f1 f7       	brne	.-4      	; 0x166e <Lcd_vidinit+0x140>
    1672:	98 a7       	std	Y+40, r25	; 0x28
    1674:	8f a3       	std	Y+39, r24	; 0x27

	_delay_ms(15);

	Lcd_vidCmd(0x03);
    1676:	83 e0       	ldi	r24, 0x03	; 3
    1678:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <Lcd_vidCmd>
    167c:	80 e0       	ldi	r24, 0x00	; 0
    167e:	90 e0       	ldi	r25, 0x00	; 0
    1680:	a0 ea       	ldi	r26, 0xA0	; 160
    1682:	b0 e4       	ldi	r27, 0x40	; 64
    1684:	8b a3       	std	Y+35, r24	; 0x23
    1686:	9c a3       	std	Y+36, r25	; 0x24
    1688:	ad a3       	std	Y+37, r26	; 0x25
    168a:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    168c:	6b a1       	ldd	r22, Y+35	; 0x23
    168e:	7c a1       	ldd	r23, Y+36	; 0x24
    1690:	8d a1       	ldd	r24, Y+37	; 0x25
    1692:	9e a1       	ldd	r25, Y+38	; 0x26
    1694:	20 e0       	ldi	r18, 0x00	; 0
    1696:	30 e0       	ldi	r19, 0x00	; 0
    1698:	4a e7       	ldi	r20, 0x7A	; 122
    169a:	55 e4       	ldi	r21, 0x45	; 69
    169c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16a0:	dc 01       	movw	r26, r24
    16a2:	cb 01       	movw	r24, r22
    16a4:	8f 8f       	std	Y+31, r24	; 0x1f
    16a6:	98 a3       	std	Y+32, r25	; 0x20
    16a8:	a9 a3       	std	Y+33, r26	; 0x21
    16aa:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    16ac:	6f 8d       	ldd	r22, Y+31	; 0x1f
    16ae:	78 a1       	ldd	r23, Y+32	; 0x20
    16b0:	89 a1       	ldd	r24, Y+33	; 0x21
    16b2:	9a a1       	ldd	r25, Y+34	; 0x22
    16b4:	20 e0       	ldi	r18, 0x00	; 0
    16b6:	30 e0       	ldi	r19, 0x00	; 0
    16b8:	40 e8       	ldi	r20, 0x80	; 128
    16ba:	5f e3       	ldi	r21, 0x3F	; 63
    16bc:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    16c0:	88 23       	and	r24, r24
    16c2:	2c f4       	brge	.+10     	; 0x16ce <Lcd_vidinit+0x1a0>
		__ticks = 1;
    16c4:	81 e0       	ldi	r24, 0x01	; 1
    16c6:	90 e0       	ldi	r25, 0x00	; 0
    16c8:	9e 8f       	std	Y+30, r25	; 0x1e
    16ca:	8d 8f       	std	Y+29, r24	; 0x1d
    16cc:	3f c0       	rjmp	.+126    	; 0x174c <Lcd_vidinit+0x21e>
	else if (__tmp > 65535)
    16ce:	6f 8d       	ldd	r22, Y+31	; 0x1f
    16d0:	78 a1       	ldd	r23, Y+32	; 0x20
    16d2:	89 a1       	ldd	r24, Y+33	; 0x21
    16d4:	9a a1       	ldd	r25, Y+34	; 0x22
    16d6:	20 e0       	ldi	r18, 0x00	; 0
    16d8:	3f ef       	ldi	r19, 0xFF	; 255
    16da:	4f e7       	ldi	r20, 0x7F	; 127
    16dc:	57 e4       	ldi	r21, 0x47	; 71
    16de:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    16e2:	18 16       	cp	r1, r24
    16e4:	4c f5       	brge	.+82     	; 0x1738 <Lcd_vidinit+0x20a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16e6:	6b a1       	ldd	r22, Y+35	; 0x23
    16e8:	7c a1       	ldd	r23, Y+36	; 0x24
    16ea:	8d a1       	ldd	r24, Y+37	; 0x25
    16ec:	9e a1       	ldd	r25, Y+38	; 0x26
    16ee:	20 e0       	ldi	r18, 0x00	; 0
    16f0:	30 e0       	ldi	r19, 0x00	; 0
    16f2:	40 e2       	ldi	r20, 0x20	; 32
    16f4:	51 e4       	ldi	r21, 0x41	; 65
    16f6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16fa:	dc 01       	movw	r26, r24
    16fc:	cb 01       	movw	r24, r22
    16fe:	bc 01       	movw	r22, r24
    1700:	cd 01       	movw	r24, r26
    1702:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1706:	dc 01       	movw	r26, r24
    1708:	cb 01       	movw	r24, r22
    170a:	9e 8f       	std	Y+30, r25	; 0x1e
    170c:	8d 8f       	std	Y+29, r24	; 0x1d
    170e:	0f c0       	rjmp	.+30     	; 0x172e <Lcd_vidinit+0x200>
    1710:	80 e9       	ldi	r24, 0x90	; 144
    1712:	91 e0       	ldi	r25, 0x01	; 1
    1714:	9c 8f       	std	Y+28, r25	; 0x1c
    1716:	8b 8f       	std	Y+27, r24	; 0x1b
    1718:	8b 8d       	ldd	r24, Y+27	; 0x1b
    171a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    171c:	01 97       	sbiw	r24, 0x01	; 1
    171e:	f1 f7       	brne	.-4      	; 0x171c <Lcd_vidinit+0x1ee>
    1720:	9c 8f       	std	Y+28, r25	; 0x1c
    1722:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1724:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1726:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1728:	01 97       	sbiw	r24, 0x01	; 1
    172a:	9e 8f       	std	Y+30, r25	; 0x1e
    172c:	8d 8f       	std	Y+29, r24	; 0x1d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    172e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1730:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1732:	00 97       	sbiw	r24, 0x00	; 0
    1734:	69 f7       	brne	.-38     	; 0x1710 <Lcd_vidinit+0x1e2>
    1736:	14 c0       	rjmp	.+40     	; 0x1760 <Lcd_vidinit+0x232>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1738:	6f 8d       	ldd	r22, Y+31	; 0x1f
    173a:	78 a1       	ldd	r23, Y+32	; 0x20
    173c:	89 a1       	ldd	r24, Y+33	; 0x21
    173e:	9a a1       	ldd	r25, Y+34	; 0x22
    1740:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1744:	dc 01       	movw	r26, r24
    1746:	cb 01       	movw	r24, r22
    1748:	9e 8f       	std	Y+30, r25	; 0x1e
    174a:	8d 8f       	std	Y+29, r24	; 0x1d
    174c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    174e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1750:	9a 8f       	std	Y+26, r25	; 0x1a
    1752:	89 8f       	std	Y+25, r24	; 0x19
    1754:	89 8d       	ldd	r24, Y+25	; 0x19
    1756:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1758:	01 97       	sbiw	r24, 0x01	; 1
    175a:	f1 f7       	brne	.-4      	; 0x1758 <Lcd_vidinit+0x22a>
    175c:	9a 8f       	std	Y+26, r25	; 0x1a
    175e:	89 8f       	std	Y+25, r24	; 0x19
	_delay_ms(5);
	Lcd_vidCmd(0x03);
    1760:	83 e0       	ldi	r24, 0x03	; 3
    1762:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <Lcd_vidCmd>
    1766:	80 e0       	ldi	r24, 0x00	; 0
    1768:	90 e0       	ldi	r25, 0x00	; 0
    176a:	a8 ec       	ldi	r26, 0xC8	; 200
    176c:	b2 e4       	ldi	r27, 0x42	; 66
    176e:	8d 8b       	std	Y+21, r24	; 0x15
    1770:	9e 8b       	std	Y+22, r25	; 0x16
    1772:	af 8b       	std	Y+23, r26	; 0x17
    1774:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1776:	6d 89       	ldd	r22, Y+21	; 0x15
    1778:	7e 89       	ldd	r23, Y+22	; 0x16
    177a:	8f 89       	ldd	r24, Y+23	; 0x17
    177c:	98 8d       	ldd	r25, Y+24	; 0x18
    177e:	2b ea       	ldi	r18, 0xAB	; 171
    1780:	3a ea       	ldi	r19, 0xAA	; 170
    1782:	4a ea       	ldi	r20, 0xAA	; 170
    1784:	50 e4       	ldi	r21, 0x40	; 64
    1786:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    178a:	dc 01       	movw	r26, r24
    178c:	cb 01       	movw	r24, r22
    178e:	89 8b       	std	Y+17, r24	; 0x11
    1790:	9a 8b       	std	Y+18, r25	; 0x12
    1792:	ab 8b       	std	Y+19, r26	; 0x13
    1794:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1796:	69 89       	ldd	r22, Y+17	; 0x11
    1798:	7a 89       	ldd	r23, Y+18	; 0x12
    179a:	8b 89       	ldd	r24, Y+19	; 0x13
    179c:	9c 89       	ldd	r25, Y+20	; 0x14
    179e:	20 e0       	ldi	r18, 0x00	; 0
    17a0:	30 e0       	ldi	r19, 0x00	; 0
    17a2:	40 e8       	ldi	r20, 0x80	; 128
    17a4:	5f e3       	ldi	r21, 0x3F	; 63
    17a6:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    17aa:	88 23       	and	r24, r24
    17ac:	1c f4       	brge	.+6      	; 0x17b4 <Lcd_vidinit+0x286>
		__ticks = 1;
    17ae:	81 e0       	ldi	r24, 0x01	; 1
    17b0:	88 8b       	std	Y+16, r24	; 0x10
    17b2:	91 c0       	rjmp	.+290    	; 0x18d6 <Lcd_vidinit+0x3a8>
	else if (__tmp > 255)
    17b4:	69 89       	ldd	r22, Y+17	; 0x11
    17b6:	7a 89       	ldd	r23, Y+18	; 0x12
    17b8:	8b 89       	ldd	r24, Y+19	; 0x13
    17ba:	9c 89       	ldd	r25, Y+20	; 0x14
    17bc:	20 e0       	ldi	r18, 0x00	; 0
    17be:	30 e0       	ldi	r19, 0x00	; 0
    17c0:	4f e7       	ldi	r20, 0x7F	; 127
    17c2:	53 e4       	ldi	r21, 0x43	; 67
    17c4:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    17c8:	18 16       	cp	r1, r24
    17ca:	0c f0       	brlt	.+2      	; 0x17ce <Lcd_vidinit+0x2a0>
    17cc:	7b c0       	rjmp	.+246    	; 0x18c4 <Lcd_vidinit+0x396>
	{
		_delay_ms(__us / 1000.0);
    17ce:	6d 89       	ldd	r22, Y+21	; 0x15
    17d0:	7e 89       	ldd	r23, Y+22	; 0x16
    17d2:	8f 89       	ldd	r24, Y+23	; 0x17
    17d4:	98 8d       	ldd	r25, Y+24	; 0x18
    17d6:	20 e0       	ldi	r18, 0x00	; 0
    17d8:	30 e0       	ldi	r19, 0x00	; 0
    17da:	4a e7       	ldi	r20, 0x7A	; 122
    17dc:	54 e4       	ldi	r21, 0x44	; 68
    17de:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    17e2:	dc 01       	movw	r26, r24
    17e4:	cb 01       	movw	r24, r22
    17e6:	8c 87       	std	Y+12, r24	; 0x0c
    17e8:	9d 87       	std	Y+13, r25	; 0x0d
    17ea:	ae 87       	std	Y+14, r26	; 0x0e
    17ec:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17ee:	6c 85       	ldd	r22, Y+12	; 0x0c
    17f0:	7d 85       	ldd	r23, Y+13	; 0x0d
    17f2:	8e 85       	ldd	r24, Y+14	; 0x0e
    17f4:	9f 85       	ldd	r25, Y+15	; 0x0f
    17f6:	20 e0       	ldi	r18, 0x00	; 0
    17f8:	30 e0       	ldi	r19, 0x00	; 0
    17fa:	4a e7       	ldi	r20, 0x7A	; 122
    17fc:	55 e4       	ldi	r21, 0x45	; 69
    17fe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1802:	dc 01       	movw	r26, r24
    1804:	cb 01       	movw	r24, r22
    1806:	88 87       	std	Y+8, r24	; 0x08
    1808:	99 87       	std	Y+9, r25	; 0x09
    180a:	aa 87       	std	Y+10, r26	; 0x0a
    180c:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    180e:	68 85       	ldd	r22, Y+8	; 0x08
    1810:	79 85       	ldd	r23, Y+9	; 0x09
    1812:	8a 85       	ldd	r24, Y+10	; 0x0a
    1814:	9b 85       	ldd	r25, Y+11	; 0x0b
    1816:	20 e0       	ldi	r18, 0x00	; 0
    1818:	30 e0       	ldi	r19, 0x00	; 0
    181a:	40 e8       	ldi	r20, 0x80	; 128
    181c:	5f e3       	ldi	r21, 0x3F	; 63
    181e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1822:	88 23       	and	r24, r24
    1824:	2c f4       	brge	.+10     	; 0x1830 <Lcd_vidinit+0x302>
		__ticks = 1;
    1826:	81 e0       	ldi	r24, 0x01	; 1
    1828:	90 e0       	ldi	r25, 0x00	; 0
    182a:	9f 83       	std	Y+7, r25	; 0x07
    182c:	8e 83       	std	Y+6, r24	; 0x06
    182e:	3f c0       	rjmp	.+126    	; 0x18ae <Lcd_vidinit+0x380>
	else if (__tmp > 65535)
    1830:	68 85       	ldd	r22, Y+8	; 0x08
    1832:	79 85       	ldd	r23, Y+9	; 0x09
    1834:	8a 85       	ldd	r24, Y+10	; 0x0a
    1836:	9b 85       	ldd	r25, Y+11	; 0x0b
    1838:	20 e0       	ldi	r18, 0x00	; 0
    183a:	3f ef       	ldi	r19, 0xFF	; 255
    183c:	4f e7       	ldi	r20, 0x7F	; 127
    183e:	57 e4       	ldi	r21, 0x47	; 71
    1840:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1844:	18 16       	cp	r1, r24
    1846:	4c f5       	brge	.+82     	; 0x189a <Lcd_vidinit+0x36c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1848:	6c 85       	ldd	r22, Y+12	; 0x0c
    184a:	7d 85       	ldd	r23, Y+13	; 0x0d
    184c:	8e 85       	ldd	r24, Y+14	; 0x0e
    184e:	9f 85       	ldd	r25, Y+15	; 0x0f
    1850:	20 e0       	ldi	r18, 0x00	; 0
    1852:	30 e0       	ldi	r19, 0x00	; 0
    1854:	40 e2       	ldi	r20, 0x20	; 32
    1856:	51 e4       	ldi	r21, 0x41	; 65
    1858:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    185c:	dc 01       	movw	r26, r24
    185e:	cb 01       	movw	r24, r22
    1860:	bc 01       	movw	r22, r24
    1862:	cd 01       	movw	r24, r26
    1864:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1868:	dc 01       	movw	r26, r24
    186a:	cb 01       	movw	r24, r22
    186c:	9f 83       	std	Y+7, r25	; 0x07
    186e:	8e 83       	std	Y+6, r24	; 0x06
    1870:	0f c0       	rjmp	.+30     	; 0x1890 <Lcd_vidinit+0x362>
    1872:	80 e9       	ldi	r24, 0x90	; 144
    1874:	91 e0       	ldi	r25, 0x01	; 1
    1876:	9d 83       	std	Y+5, r25	; 0x05
    1878:	8c 83       	std	Y+4, r24	; 0x04
    187a:	8c 81       	ldd	r24, Y+4	; 0x04
    187c:	9d 81       	ldd	r25, Y+5	; 0x05
    187e:	01 97       	sbiw	r24, 0x01	; 1
    1880:	f1 f7       	brne	.-4      	; 0x187e <Lcd_vidinit+0x350>
    1882:	9d 83       	std	Y+5, r25	; 0x05
    1884:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1886:	8e 81       	ldd	r24, Y+6	; 0x06
    1888:	9f 81       	ldd	r25, Y+7	; 0x07
    188a:	01 97       	sbiw	r24, 0x01	; 1
    188c:	9f 83       	std	Y+7, r25	; 0x07
    188e:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1890:	8e 81       	ldd	r24, Y+6	; 0x06
    1892:	9f 81       	ldd	r25, Y+7	; 0x07
    1894:	00 97       	sbiw	r24, 0x00	; 0
    1896:	69 f7       	brne	.-38     	; 0x1872 <Lcd_vidinit+0x344>
    1898:	24 c0       	rjmp	.+72     	; 0x18e2 <Lcd_vidinit+0x3b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    189a:	68 85       	ldd	r22, Y+8	; 0x08
    189c:	79 85       	ldd	r23, Y+9	; 0x09
    189e:	8a 85       	ldd	r24, Y+10	; 0x0a
    18a0:	9b 85       	ldd	r25, Y+11	; 0x0b
    18a2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18a6:	dc 01       	movw	r26, r24
    18a8:	cb 01       	movw	r24, r22
    18aa:	9f 83       	std	Y+7, r25	; 0x07
    18ac:	8e 83       	std	Y+6, r24	; 0x06
    18ae:	8e 81       	ldd	r24, Y+6	; 0x06
    18b0:	9f 81       	ldd	r25, Y+7	; 0x07
    18b2:	9b 83       	std	Y+3, r25	; 0x03
    18b4:	8a 83       	std	Y+2, r24	; 0x02
    18b6:	8a 81       	ldd	r24, Y+2	; 0x02
    18b8:	9b 81       	ldd	r25, Y+3	; 0x03
    18ba:	01 97       	sbiw	r24, 0x01	; 1
    18bc:	f1 f7       	brne	.-4      	; 0x18ba <Lcd_vidinit+0x38c>
    18be:	9b 83       	std	Y+3, r25	; 0x03
    18c0:	8a 83       	std	Y+2, r24	; 0x02
    18c2:	0f c0       	rjmp	.+30     	; 0x18e2 <Lcd_vidinit+0x3b4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    18c4:	69 89       	ldd	r22, Y+17	; 0x11
    18c6:	7a 89       	ldd	r23, Y+18	; 0x12
    18c8:	8b 89       	ldd	r24, Y+19	; 0x13
    18ca:	9c 89       	ldd	r25, Y+20	; 0x14
    18cc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18d0:	dc 01       	movw	r26, r24
    18d2:	cb 01       	movw	r24, r22
    18d4:	88 8b       	std	Y+16, r24	; 0x10
    18d6:	88 89       	ldd	r24, Y+16	; 0x10
    18d8:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    18da:	89 81       	ldd	r24, Y+1	; 0x01
    18dc:	8a 95       	dec	r24
    18de:	f1 f7       	brne	.-4      	; 0x18dc <Lcd_vidinit+0x3ae>
    18e0:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(100);
	Lcd_vidCmd(0x03);
    18e2:	83 e0       	ldi	r24, 0x03	; 3
    18e4:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <Lcd_vidCmd>
	Lcd_vidCmd(0x02);
    18e8:	82 e0       	ldi	r24, 0x02	; 2
    18ea:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <Lcd_vidCmd>
	Lcd_vidCmd(_LCD_4BIT_MODE);
    18ee:	88 e2       	ldi	r24, 0x28	; 40
    18f0:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <Lcd_vidCmd>
}
    18f4:	e4 96       	adiw	r28, 0x34	; 52
    18f6:	0f b6       	in	r0, 0x3f	; 63
    18f8:	f8 94       	cli
    18fa:	de bf       	out	0x3e, r29	; 62
    18fc:	0f be       	out	0x3f, r0	; 63
    18fe:	cd bf       	out	0x3d, r28	; 61
    1900:	cf 91       	pop	r28
    1902:	df 91       	pop	r29
    1904:	08 95       	ret

00001906 <Lcd_videnablePulse>:

static void Lcd_videnablePulse(void)
{
    1906:	df 93       	push	r29
    1908:	cf 93       	push	r28
    190a:	cd b7       	in	r28, 0x3d	; 61
    190c:	de b7       	in	r29, 0x3e	; 62
    190e:	a6 97       	sbiw	r28, 0x26	; 38
    1910:	0f b6       	in	r0, 0x3f	; 63
    1912:	f8 94       	cli
    1914:	de bf       	out	0x3e, r29	; 62
    1916:	0f be       	out	0x3f, r0	; 63
    1918:	cd bf       	out	0x3d, r28	; 61
	//send Enable pulse
	Dio_vidwriteChanel(DIO_PORTB, DIO_PIN3, DIO_HIGH);
    191a:	81 e0       	ldi	r24, 0x01	; 1
    191c:	63 e0       	ldi	r22, 0x03	; 3
    191e:	41 e0       	ldi	r20, 0x01	; 1
    1920:	0e 94 1f 16 	call	0x2c3e	; 0x2c3e <Dio_vidwriteChanel>
    1924:	80 e0       	ldi	r24, 0x00	; 0
    1926:	90 e0       	ldi	r25, 0x00	; 0
    1928:	a0 e8       	ldi	r26, 0x80	; 128
    192a:	bf e3       	ldi	r27, 0x3F	; 63
    192c:	8b a3       	std	Y+35, r24	; 0x23
    192e:	9c a3       	std	Y+36, r25	; 0x24
    1930:	ad a3       	std	Y+37, r26	; 0x25
    1932:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1934:	6b a1       	ldd	r22, Y+35	; 0x23
    1936:	7c a1       	ldd	r23, Y+36	; 0x24
    1938:	8d a1       	ldd	r24, Y+37	; 0x25
    193a:	9e a1       	ldd	r25, Y+38	; 0x26
    193c:	2b ea       	ldi	r18, 0xAB	; 171
    193e:	3a ea       	ldi	r19, 0xAA	; 170
    1940:	4a ea       	ldi	r20, 0xAA	; 170
    1942:	50 e4       	ldi	r21, 0x40	; 64
    1944:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1948:	dc 01       	movw	r26, r24
    194a:	cb 01       	movw	r24, r22
    194c:	8f 8f       	std	Y+31, r24	; 0x1f
    194e:	98 a3       	std	Y+32, r25	; 0x20
    1950:	a9 a3       	std	Y+33, r26	; 0x21
    1952:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    1954:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1956:	78 a1       	ldd	r23, Y+32	; 0x20
    1958:	89 a1       	ldd	r24, Y+33	; 0x21
    195a:	9a a1       	ldd	r25, Y+34	; 0x22
    195c:	20 e0       	ldi	r18, 0x00	; 0
    195e:	30 e0       	ldi	r19, 0x00	; 0
    1960:	40 e8       	ldi	r20, 0x80	; 128
    1962:	5f e3       	ldi	r21, 0x3F	; 63
    1964:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1968:	88 23       	and	r24, r24
    196a:	1c f4       	brge	.+6      	; 0x1972 <Lcd_videnablePulse+0x6c>
		__ticks = 1;
    196c:	81 e0       	ldi	r24, 0x01	; 1
    196e:	8e 8f       	std	Y+30, r24	; 0x1e
    1970:	91 c0       	rjmp	.+290    	; 0x1a94 <Lcd_videnablePulse+0x18e>
	else if (__tmp > 255)
    1972:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1974:	78 a1       	ldd	r23, Y+32	; 0x20
    1976:	89 a1       	ldd	r24, Y+33	; 0x21
    1978:	9a a1       	ldd	r25, Y+34	; 0x22
    197a:	20 e0       	ldi	r18, 0x00	; 0
    197c:	30 e0       	ldi	r19, 0x00	; 0
    197e:	4f e7       	ldi	r20, 0x7F	; 127
    1980:	53 e4       	ldi	r21, 0x43	; 67
    1982:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1986:	18 16       	cp	r1, r24
    1988:	0c f0       	brlt	.+2      	; 0x198c <Lcd_videnablePulse+0x86>
    198a:	7b c0       	rjmp	.+246    	; 0x1a82 <Lcd_videnablePulse+0x17c>
	{
		_delay_ms(__us / 1000.0);
    198c:	6b a1       	ldd	r22, Y+35	; 0x23
    198e:	7c a1       	ldd	r23, Y+36	; 0x24
    1990:	8d a1       	ldd	r24, Y+37	; 0x25
    1992:	9e a1       	ldd	r25, Y+38	; 0x26
    1994:	20 e0       	ldi	r18, 0x00	; 0
    1996:	30 e0       	ldi	r19, 0x00	; 0
    1998:	4a e7       	ldi	r20, 0x7A	; 122
    199a:	54 e4       	ldi	r21, 0x44	; 68
    199c:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    19a0:	dc 01       	movw	r26, r24
    19a2:	cb 01       	movw	r24, r22
    19a4:	8a 8f       	std	Y+26, r24	; 0x1a
    19a6:	9b 8f       	std	Y+27, r25	; 0x1b
    19a8:	ac 8f       	std	Y+28, r26	; 0x1c
    19aa:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19ac:	6a 8d       	ldd	r22, Y+26	; 0x1a
    19ae:	7b 8d       	ldd	r23, Y+27	; 0x1b
    19b0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    19b2:	9d 8d       	ldd	r25, Y+29	; 0x1d
    19b4:	20 e0       	ldi	r18, 0x00	; 0
    19b6:	30 e0       	ldi	r19, 0x00	; 0
    19b8:	4a e7       	ldi	r20, 0x7A	; 122
    19ba:	55 e4       	ldi	r21, 0x45	; 69
    19bc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19c0:	dc 01       	movw	r26, r24
    19c2:	cb 01       	movw	r24, r22
    19c4:	8e 8b       	std	Y+22, r24	; 0x16
    19c6:	9f 8b       	std	Y+23, r25	; 0x17
    19c8:	a8 8f       	std	Y+24, r26	; 0x18
    19ca:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    19cc:	6e 89       	ldd	r22, Y+22	; 0x16
    19ce:	7f 89       	ldd	r23, Y+23	; 0x17
    19d0:	88 8d       	ldd	r24, Y+24	; 0x18
    19d2:	99 8d       	ldd	r25, Y+25	; 0x19
    19d4:	20 e0       	ldi	r18, 0x00	; 0
    19d6:	30 e0       	ldi	r19, 0x00	; 0
    19d8:	40 e8       	ldi	r20, 0x80	; 128
    19da:	5f e3       	ldi	r21, 0x3F	; 63
    19dc:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    19e0:	88 23       	and	r24, r24
    19e2:	2c f4       	brge	.+10     	; 0x19ee <Lcd_videnablePulse+0xe8>
		__ticks = 1;
    19e4:	81 e0       	ldi	r24, 0x01	; 1
    19e6:	90 e0       	ldi	r25, 0x00	; 0
    19e8:	9d 8b       	std	Y+21, r25	; 0x15
    19ea:	8c 8b       	std	Y+20, r24	; 0x14
    19ec:	3f c0       	rjmp	.+126    	; 0x1a6c <Lcd_videnablePulse+0x166>
	else if (__tmp > 65535)
    19ee:	6e 89       	ldd	r22, Y+22	; 0x16
    19f0:	7f 89       	ldd	r23, Y+23	; 0x17
    19f2:	88 8d       	ldd	r24, Y+24	; 0x18
    19f4:	99 8d       	ldd	r25, Y+25	; 0x19
    19f6:	20 e0       	ldi	r18, 0x00	; 0
    19f8:	3f ef       	ldi	r19, 0xFF	; 255
    19fa:	4f e7       	ldi	r20, 0x7F	; 127
    19fc:	57 e4       	ldi	r21, 0x47	; 71
    19fe:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1a02:	18 16       	cp	r1, r24
    1a04:	4c f5       	brge	.+82     	; 0x1a58 <Lcd_videnablePulse+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a06:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1a08:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1a0a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1a0c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1a0e:	20 e0       	ldi	r18, 0x00	; 0
    1a10:	30 e0       	ldi	r19, 0x00	; 0
    1a12:	40 e2       	ldi	r20, 0x20	; 32
    1a14:	51 e4       	ldi	r21, 0x41	; 65
    1a16:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a1a:	dc 01       	movw	r26, r24
    1a1c:	cb 01       	movw	r24, r22
    1a1e:	bc 01       	movw	r22, r24
    1a20:	cd 01       	movw	r24, r26
    1a22:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a26:	dc 01       	movw	r26, r24
    1a28:	cb 01       	movw	r24, r22
    1a2a:	9d 8b       	std	Y+21, r25	; 0x15
    1a2c:	8c 8b       	std	Y+20, r24	; 0x14
    1a2e:	0f c0       	rjmp	.+30     	; 0x1a4e <Lcd_videnablePulse+0x148>
    1a30:	80 e9       	ldi	r24, 0x90	; 144
    1a32:	91 e0       	ldi	r25, 0x01	; 1
    1a34:	9b 8b       	std	Y+19, r25	; 0x13
    1a36:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1a38:	8a 89       	ldd	r24, Y+18	; 0x12
    1a3a:	9b 89       	ldd	r25, Y+19	; 0x13
    1a3c:	01 97       	sbiw	r24, 0x01	; 1
    1a3e:	f1 f7       	brne	.-4      	; 0x1a3c <Lcd_videnablePulse+0x136>
    1a40:	9b 8b       	std	Y+19, r25	; 0x13
    1a42:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a44:	8c 89       	ldd	r24, Y+20	; 0x14
    1a46:	9d 89       	ldd	r25, Y+21	; 0x15
    1a48:	01 97       	sbiw	r24, 0x01	; 1
    1a4a:	9d 8b       	std	Y+21, r25	; 0x15
    1a4c:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a4e:	8c 89       	ldd	r24, Y+20	; 0x14
    1a50:	9d 89       	ldd	r25, Y+21	; 0x15
    1a52:	00 97       	sbiw	r24, 0x00	; 0
    1a54:	69 f7       	brne	.-38     	; 0x1a30 <Lcd_videnablePulse+0x12a>
    1a56:	24 c0       	rjmp	.+72     	; 0x1aa0 <Lcd_videnablePulse+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a58:	6e 89       	ldd	r22, Y+22	; 0x16
    1a5a:	7f 89       	ldd	r23, Y+23	; 0x17
    1a5c:	88 8d       	ldd	r24, Y+24	; 0x18
    1a5e:	99 8d       	ldd	r25, Y+25	; 0x19
    1a60:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a64:	dc 01       	movw	r26, r24
    1a66:	cb 01       	movw	r24, r22
    1a68:	9d 8b       	std	Y+21, r25	; 0x15
    1a6a:	8c 8b       	std	Y+20, r24	; 0x14
    1a6c:	8c 89       	ldd	r24, Y+20	; 0x14
    1a6e:	9d 89       	ldd	r25, Y+21	; 0x15
    1a70:	99 8b       	std	Y+17, r25	; 0x11
    1a72:	88 8b       	std	Y+16, r24	; 0x10
    1a74:	88 89       	ldd	r24, Y+16	; 0x10
    1a76:	99 89       	ldd	r25, Y+17	; 0x11
    1a78:	01 97       	sbiw	r24, 0x01	; 1
    1a7a:	f1 f7       	brne	.-4      	; 0x1a78 <Lcd_videnablePulse+0x172>
    1a7c:	99 8b       	std	Y+17, r25	; 0x11
    1a7e:	88 8b       	std	Y+16, r24	; 0x10
    1a80:	0f c0       	rjmp	.+30     	; 0x1aa0 <Lcd_videnablePulse+0x19a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1a82:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1a84:	78 a1       	ldd	r23, Y+32	; 0x20
    1a86:	89 a1       	ldd	r24, Y+33	; 0x21
    1a88:	9a a1       	ldd	r25, Y+34	; 0x22
    1a8a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a8e:	dc 01       	movw	r26, r24
    1a90:	cb 01       	movw	r24, r22
    1a92:	8e 8f       	std	Y+30, r24	; 0x1e
    1a94:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1a96:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1a98:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a9a:	8a 95       	dec	r24
    1a9c:	f1 f7       	brne	.-4      	; 0x1a9a <Lcd_videnablePulse+0x194>
    1a9e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(1);
	Dio_vidwriteChanel(DIO_PORTB, DIO_PIN3, DIO_LOW);
    1aa0:	81 e0       	ldi	r24, 0x01	; 1
    1aa2:	63 e0       	ldi	r22, 0x03	; 3
    1aa4:	40 e0       	ldi	r20, 0x00	; 0
    1aa6:	0e 94 1f 16 	call	0x2c3e	; 0x2c3e <Dio_vidwriteChanel>
    1aaa:	80 e0       	ldi	r24, 0x00	; 0
    1aac:	90 e0       	ldi	r25, 0x00	; 0
    1aae:	a0 e0       	ldi	r26, 0x00	; 0
    1ab0:	b0 e4       	ldi	r27, 0x40	; 64
    1ab2:	8b 87       	std	Y+11, r24	; 0x0b
    1ab4:	9c 87       	std	Y+12, r25	; 0x0c
    1ab6:	ad 87       	std	Y+13, r26	; 0x0d
    1ab8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1aba:	6b 85       	ldd	r22, Y+11	; 0x0b
    1abc:	7c 85       	ldd	r23, Y+12	; 0x0c
    1abe:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ac0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ac2:	20 e0       	ldi	r18, 0x00	; 0
    1ac4:	30 e0       	ldi	r19, 0x00	; 0
    1ac6:	4a e7       	ldi	r20, 0x7A	; 122
    1ac8:	55 e4       	ldi	r21, 0x45	; 69
    1aca:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ace:	dc 01       	movw	r26, r24
    1ad0:	cb 01       	movw	r24, r22
    1ad2:	8f 83       	std	Y+7, r24	; 0x07
    1ad4:	98 87       	std	Y+8, r25	; 0x08
    1ad6:	a9 87       	std	Y+9, r26	; 0x09
    1ad8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ada:	6f 81       	ldd	r22, Y+7	; 0x07
    1adc:	78 85       	ldd	r23, Y+8	; 0x08
    1ade:	89 85       	ldd	r24, Y+9	; 0x09
    1ae0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ae2:	20 e0       	ldi	r18, 0x00	; 0
    1ae4:	30 e0       	ldi	r19, 0x00	; 0
    1ae6:	40 e8       	ldi	r20, 0x80	; 128
    1ae8:	5f e3       	ldi	r21, 0x3F	; 63
    1aea:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1aee:	88 23       	and	r24, r24
    1af0:	2c f4       	brge	.+10     	; 0x1afc <Lcd_videnablePulse+0x1f6>
		__ticks = 1;
    1af2:	81 e0       	ldi	r24, 0x01	; 1
    1af4:	90 e0       	ldi	r25, 0x00	; 0
    1af6:	9e 83       	std	Y+6, r25	; 0x06
    1af8:	8d 83       	std	Y+5, r24	; 0x05
    1afa:	3f c0       	rjmp	.+126    	; 0x1b7a <Lcd_videnablePulse+0x274>
	else if (__tmp > 65535)
    1afc:	6f 81       	ldd	r22, Y+7	; 0x07
    1afe:	78 85       	ldd	r23, Y+8	; 0x08
    1b00:	89 85       	ldd	r24, Y+9	; 0x09
    1b02:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b04:	20 e0       	ldi	r18, 0x00	; 0
    1b06:	3f ef       	ldi	r19, 0xFF	; 255
    1b08:	4f e7       	ldi	r20, 0x7F	; 127
    1b0a:	57 e4       	ldi	r21, 0x47	; 71
    1b0c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1b10:	18 16       	cp	r1, r24
    1b12:	4c f5       	brge	.+82     	; 0x1b66 <Lcd_videnablePulse+0x260>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b14:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b16:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b18:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b1a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b1c:	20 e0       	ldi	r18, 0x00	; 0
    1b1e:	30 e0       	ldi	r19, 0x00	; 0
    1b20:	40 e2       	ldi	r20, 0x20	; 32
    1b22:	51 e4       	ldi	r21, 0x41	; 65
    1b24:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b28:	dc 01       	movw	r26, r24
    1b2a:	cb 01       	movw	r24, r22
    1b2c:	bc 01       	movw	r22, r24
    1b2e:	cd 01       	movw	r24, r26
    1b30:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b34:	dc 01       	movw	r26, r24
    1b36:	cb 01       	movw	r24, r22
    1b38:	9e 83       	std	Y+6, r25	; 0x06
    1b3a:	8d 83       	std	Y+5, r24	; 0x05
    1b3c:	0f c0       	rjmp	.+30     	; 0x1b5c <Lcd_videnablePulse+0x256>
    1b3e:	80 e9       	ldi	r24, 0x90	; 144
    1b40:	91 e0       	ldi	r25, 0x01	; 1
    1b42:	9c 83       	std	Y+4, r25	; 0x04
    1b44:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1b46:	8b 81       	ldd	r24, Y+3	; 0x03
    1b48:	9c 81       	ldd	r25, Y+4	; 0x04
    1b4a:	01 97       	sbiw	r24, 0x01	; 1
    1b4c:	f1 f7       	brne	.-4      	; 0x1b4a <Lcd_videnablePulse+0x244>
    1b4e:	9c 83       	std	Y+4, r25	; 0x04
    1b50:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b52:	8d 81       	ldd	r24, Y+5	; 0x05
    1b54:	9e 81       	ldd	r25, Y+6	; 0x06
    1b56:	01 97       	sbiw	r24, 0x01	; 1
    1b58:	9e 83       	std	Y+6, r25	; 0x06
    1b5a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b5c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b5e:	9e 81       	ldd	r25, Y+6	; 0x06
    1b60:	00 97       	sbiw	r24, 0x00	; 0
    1b62:	69 f7       	brne	.-38     	; 0x1b3e <Lcd_videnablePulse+0x238>
    1b64:	14 c0       	rjmp	.+40     	; 0x1b8e <Lcd_videnablePulse+0x288>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b66:	6f 81       	ldd	r22, Y+7	; 0x07
    1b68:	78 85       	ldd	r23, Y+8	; 0x08
    1b6a:	89 85       	ldd	r24, Y+9	; 0x09
    1b6c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b6e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b72:	dc 01       	movw	r26, r24
    1b74:	cb 01       	movw	r24, r22
    1b76:	9e 83       	std	Y+6, r25	; 0x06
    1b78:	8d 83       	std	Y+5, r24	; 0x05
    1b7a:	8d 81       	ldd	r24, Y+5	; 0x05
    1b7c:	9e 81       	ldd	r25, Y+6	; 0x06
    1b7e:	9a 83       	std	Y+2, r25	; 0x02
    1b80:	89 83       	std	Y+1, r24	; 0x01
    1b82:	89 81       	ldd	r24, Y+1	; 0x01
    1b84:	9a 81       	ldd	r25, Y+2	; 0x02
    1b86:	01 97       	sbiw	r24, 0x01	; 1
    1b88:	f1 f7       	brne	.-4      	; 0x1b86 <Lcd_videnablePulse+0x280>
    1b8a:	9a 83       	std	Y+2, r25	; 0x02
    1b8c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    1b8e:	a6 96       	adiw	r28, 0x26	; 38
    1b90:	0f b6       	in	r0, 0x3f	; 63
    1b92:	f8 94       	cli
    1b94:	de bf       	out	0x3e, r29	; 62
    1b96:	0f be       	out	0x3f, r0	; 63
    1b98:	cd bf       	out	0x3d, r28	; 61
    1b9a:	cf 91       	pop	r28
    1b9c:	df 91       	pop	r29
    1b9e:	08 95       	ret

00001ba0 <Lcd_vidDisplayChar>:
void Lcd_vidDisplayChar(u8 chr)
{
    1ba0:	df 93       	push	r29
    1ba2:	cf 93       	push	r28
    1ba4:	00 d0       	rcall	.+0      	; 0x1ba6 <Lcd_vidDisplayChar+0x6>
    1ba6:	0f 92       	push	r0
    1ba8:	cd b7       	in	r28, 0x3d	; 61
    1baa:	de b7       	in	r29, 0x3e	; 62
    1bac:	8b 83       	std	Y+3, r24	; 0x03
	0b1101  1001

	1101   0000
	1001   0000
*/
	u8 loc_MSB = (chr & ~LCD_MASK);
    1bae:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb0:	80 7f       	andi	r24, 0xF0	; 240
    1bb2:	8a 83       	std	Y+2, r24	; 0x02
	u8 loc_LSB = (chr<<4);
    1bb4:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb6:	82 95       	swap	r24
    1bb8:	80 7f       	andi	r24, 0xF0	; 240
    1bba:	89 83       	std	Y+1, r24	; 0x01
	//RS->1
	Dio_vidwriteChanel(DIO_PORTB, DIO_PIN1, DIO_HIGH);
    1bbc:	81 e0       	ldi	r24, 0x01	; 1
    1bbe:	61 e0       	ldi	r22, 0x01	; 1
    1bc0:	41 e0       	ldi	r20, 0x01	; 1
    1bc2:	0e 94 1f 16 	call	0x2c3e	; 0x2c3e <Dio_vidwriteChanel>

	//write data MSB to LCD
	Dio_vidWriteChanelGroup(DIO_PORTA, loc_MSB, LCD_MASK);
    1bc6:	80 e0       	ldi	r24, 0x00	; 0
    1bc8:	6a 81       	ldd	r22, Y+2	; 0x02
    1bca:	4f e0       	ldi	r20, 0x0F	; 15
    1bcc:	0e 94 02 17 	call	0x2e04	; 0x2e04 <Dio_vidWriteChanelGroup>
	//send Enable pulse
	Lcd_videnablePulse();
    1bd0:	0e 94 83 0c 	call	0x1906	; 0x1906 <Lcd_videnablePulse>

	//write data LSB to LCD
	Dio_vidWriteChanelGroup(DIO_PORTA, loc_LSB, LCD_MASK);
    1bd4:	80 e0       	ldi	r24, 0x00	; 0
    1bd6:	69 81       	ldd	r22, Y+1	; 0x01
    1bd8:	4f e0       	ldi	r20, 0x0F	; 15
    1bda:	0e 94 02 17 	call	0x2e04	; 0x2e04 <Dio_vidWriteChanelGroup>
	//send Enable pulse
	Lcd_videnablePulse();
    1bde:	0e 94 83 0c 	call	0x1906	; 0x1906 <Lcd_videnablePulse>
}
    1be2:	0f 90       	pop	r0
    1be4:	0f 90       	pop	r0
    1be6:	0f 90       	pop	r0
    1be8:	cf 91       	pop	r28
    1bea:	df 91       	pop	r29
    1bec:	08 95       	ret

00001bee <Lcd_vidCmd>:
void Lcd_vidCmd(lcd_Cmd_t cmd)
{
    1bee:	df 93       	push	r29
    1bf0:	cf 93       	push	r28
    1bf2:	00 d0       	rcall	.+0      	; 0x1bf4 <Lcd_vidCmd+0x6>
    1bf4:	0f 92       	push	r0
    1bf6:	cd b7       	in	r28, 0x3d	; 61
    1bf8:	de b7       	in	r29, 0x3e	; 62
    1bfa:	8b 83       	std	Y+3, r24	; 0x03
	u8 loc_MSB = cmd & ~LCD_MASK;
    1bfc:	8b 81       	ldd	r24, Y+3	; 0x03
    1bfe:	80 7f       	andi	r24, 0xF0	; 240
    1c00:	8a 83       	std	Y+2, r24	; 0x02
	u8 loc_LSB = cmd<<4;
    1c02:	8b 81       	ldd	r24, Y+3	; 0x03
    1c04:	82 95       	swap	r24
    1c06:	80 7f       	andi	r24, 0xF0	; 240
    1c08:	89 83       	std	Y+1, r24	; 0x01
	//RS->0
	Dio_vidwriteChanel(DIO_PORTB, DIO_PIN1, DIO_LOW);
    1c0a:	81 e0       	ldi	r24, 0x01	; 1
    1c0c:	61 e0       	ldi	r22, 0x01	; 1
    1c0e:	40 e0       	ldi	r20, 0x00	; 0
    1c10:	0e 94 1f 16 	call	0x2c3e	; 0x2c3e <Dio_vidwriteChanel>

	//write data MSB to LCD
	Dio_vidWriteChanelGroup(DIO_PORTA, loc_MSB, LCD_MASK);
    1c14:	80 e0       	ldi	r24, 0x00	; 0
    1c16:	6a 81       	ldd	r22, Y+2	; 0x02
    1c18:	4f e0       	ldi	r20, 0x0F	; 15
    1c1a:	0e 94 02 17 	call	0x2e04	; 0x2e04 <Dio_vidWriteChanelGroup>
	//send Enable pulse
	Lcd_videnablePulse();
    1c1e:	0e 94 83 0c 	call	0x1906	; 0x1906 <Lcd_videnablePulse>

	//write data LSB to LCD
	Dio_vidWriteChanelGroup(DIO_PORTA, loc_LSB, LCD_MASK);
    1c22:	80 e0       	ldi	r24, 0x00	; 0
    1c24:	69 81       	ldd	r22, Y+1	; 0x01
    1c26:	4f e0       	ldi	r20, 0x0F	; 15
    1c28:	0e 94 02 17 	call	0x2e04	; 0x2e04 <Dio_vidWriteChanelGroup>
	//send Enable pulse
	Lcd_videnablePulse();
    1c2c:	0e 94 83 0c 	call	0x1906	; 0x1906 <Lcd_videnablePulse>
}
    1c30:	0f 90       	pop	r0
    1c32:	0f 90       	pop	r0
    1c34:	0f 90       	pop	r0
    1c36:	cf 91       	pop	r28
    1c38:	df 91       	pop	r29
    1c3a:	08 95       	ret

00001c3c <Lcd_vidRowColumn>:

void Lcd_vidRowColumn(u8 row, u8 col)
{
    1c3c:	df 93       	push	r29
    1c3e:	cf 93       	push	r28
    1c40:	00 d0       	rcall	.+0      	; 0x1c42 <Lcd_vidRowColumn+0x6>
    1c42:	00 d0       	rcall	.+0      	; 0x1c44 <Lcd_vidRowColumn+0x8>
    1c44:	cd b7       	in	r28, 0x3d	; 61
    1c46:	de b7       	in	r29, 0x3e	; 62
    1c48:	89 83       	std	Y+1, r24	; 0x01
    1c4a:	6a 83       	std	Y+2, r22	; 0x02
	switch (row)
    1c4c:	89 81       	ldd	r24, Y+1	; 0x01
    1c4e:	28 2f       	mov	r18, r24
    1c50:	30 e0       	ldi	r19, 0x00	; 0
    1c52:	3c 83       	std	Y+4, r19	; 0x04
    1c54:	2b 83       	std	Y+3, r18	; 0x03
    1c56:	8b 81       	ldd	r24, Y+3	; 0x03
    1c58:	9c 81       	ldd	r25, Y+4	; 0x04
    1c5a:	00 97       	sbiw	r24, 0x00	; 0
    1c5c:	31 f0       	breq	.+12     	; 0x1c6a <Lcd_vidRowColumn+0x2e>
    1c5e:	2b 81       	ldd	r18, Y+3	; 0x03
    1c60:	3c 81       	ldd	r19, Y+4	; 0x04
    1c62:	21 30       	cpi	r18, 0x01	; 1
    1c64:	31 05       	cpc	r19, r1
    1c66:	31 f0       	breq	.+12     	; 0x1c74 <Lcd_vidRowColumn+0x38>
    1c68:	09 c0       	rjmp	.+18     	; 0x1c7c <Lcd_vidRowColumn+0x40>
	{
	case 0:
		Lcd_vidCmd(0x80 + col);
    1c6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c6c:	80 58       	subi	r24, 0x80	; 128
    1c6e:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <Lcd_vidCmd>
    1c72:	04 c0       	rjmp	.+8      	; 0x1c7c <Lcd_vidRowColumn+0x40>
		break;

	case 1:
		Lcd_vidCmd(0xC0 + col);
    1c74:	8a 81       	ldd	r24, Y+2	; 0x02
    1c76:	80 54       	subi	r24, 0x40	; 64
    1c78:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <Lcd_vidCmd>
		break;
	}
}
    1c7c:	0f 90       	pop	r0
    1c7e:	0f 90       	pop	r0
    1c80:	0f 90       	pop	r0
    1c82:	0f 90       	pop	r0
    1c84:	cf 91       	pop	r28
    1c86:	df 91       	pop	r29
    1c88:	08 95       	ret

00001c8a <Lcd_vidDisplyStr>:
void Lcd_vidDisplyStr(u8* str)
{
    1c8a:	df 93       	push	r29
    1c8c:	cf 93       	push	r28
    1c8e:	00 d0       	rcall	.+0      	; 0x1c90 <Lcd_vidDisplyStr+0x6>
    1c90:	cd b7       	in	r28, 0x3d	; 61
    1c92:	de b7       	in	r29, 0x3e	; 62
    1c94:	9a 83       	std	Y+2, r25	; 0x02
    1c96:	89 83       	std	Y+1, r24	; 0x01
    1c98:	0a c0       	rjmp	.+20     	; 0x1cae <Lcd_vidDisplyStr+0x24>
	while (*str != '\0')
	{
		Lcd_vidDisplayChar(*str);
    1c9a:	e9 81       	ldd	r30, Y+1	; 0x01
    1c9c:	fa 81       	ldd	r31, Y+2	; 0x02
    1c9e:	80 81       	ld	r24, Z
    1ca0:	0e 94 d0 0d 	call	0x1ba0	; 0x1ba0 <Lcd_vidDisplayChar>
		str++;
    1ca4:	89 81       	ldd	r24, Y+1	; 0x01
    1ca6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ca8:	01 96       	adiw	r24, 0x01	; 1
    1caa:	9a 83       	std	Y+2, r25	; 0x02
    1cac:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
}
void Lcd_vidDisplyStr(u8* str)
{
	while (*str != '\0')
    1cae:	e9 81       	ldd	r30, Y+1	; 0x01
    1cb0:	fa 81       	ldd	r31, Y+2	; 0x02
    1cb2:	80 81       	ld	r24, Z
    1cb4:	88 23       	and	r24, r24
    1cb6:	89 f7       	brne	.-30     	; 0x1c9a <Lcd_vidDisplyStr+0x10>
	{
		Lcd_vidDisplayChar(*str);
		str++;
	}
}
    1cb8:	0f 90       	pop	r0
    1cba:	0f 90       	pop	r0
    1cbc:	cf 91       	pop	r28
    1cbe:	df 91       	pop	r29
    1cc0:	08 95       	ret

00001cc2 <Lcd_vidDisplyInt>:

void Lcd_vidDisplyInt(u32 num)
{
    1cc2:	df 93       	push	r29
    1cc4:	cf 93       	push	r28
    1cc6:	cd b7       	in	r28, 0x3d	; 61
    1cc8:	de b7       	in	r29, 0x3e	; 62
    1cca:	29 97       	sbiw	r28, 0x09	; 9
    1ccc:	0f b6       	in	r0, 0x3f	; 63
    1cce:	f8 94       	cli
    1cd0:	de bf       	out	0x3e, r29	; 62
    1cd2:	0f be       	out	0x3f, r0	; 63
    1cd4:	cd bf       	out	0x3d, r28	; 61
    1cd6:	6e 83       	std	Y+6, r22	; 0x06
    1cd8:	7f 83       	std	Y+7, r23	; 0x07
    1cda:	88 87       	std	Y+8, r24	; 0x08
    1cdc:	99 87       	std	Y+9, r25	; 0x09
	u8 buffer[5];
	sprintf(buffer,"%d",num);
    1cde:	8d b7       	in	r24, 0x3d	; 61
    1ce0:	9e b7       	in	r25, 0x3e	; 62
    1ce2:	08 97       	sbiw	r24, 0x08	; 8
    1ce4:	0f b6       	in	r0, 0x3f	; 63
    1ce6:	f8 94       	cli
    1ce8:	9e bf       	out	0x3e, r25	; 62
    1cea:	0f be       	out	0x3f, r0	; 63
    1cec:	8d bf       	out	0x3d, r24	; 61
    1cee:	ed b7       	in	r30, 0x3d	; 61
    1cf0:	fe b7       	in	r31, 0x3e	; 62
    1cf2:	31 96       	adiw	r30, 0x01	; 1
    1cf4:	ce 01       	movw	r24, r28
    1cf6:	01 96       	adiw	r24, 0x01	; 1
    1cf8:	91 83       	std	Z+1, r25	; 0x01
    1cfa:	80 83       	st	Z, r24
    1cfc:	80 e6       	ldi	r24, 0x60	; 96
    1cfe:	90 e0       	ldi	r25, 0x00	; 0
    1d00:	93 83       	std	Z+3, r25	; 0x03
    1d02:	82 83       	std	Z+2, r24	; 0x02
    1d04:	8e 81       	ldd	r24, Y+6	; 0x06
    1d06:	9f 81       	ldd	r25, Y+7	; 0x07
    1d08:	a8 85       	ldd	r26, Y+8	; 0x08
    1d0a:	b9 85       	ldd	r27, Y+9	; 0x09
    1d0c:	84 83       	std	Z+4, r24	; 0x04
    1d0e:	95 83       	std	Z+5, r25	; 0x05
    1d10:	a6 83       	std	Z+6, r26	; 0x06
    1d12:	b7 83       	std	Z+7, r27	; 0x07
    1d14:	0e 94 dc 19 	call	0x33b8	; 0x33b8 <sprintf>
    1d18:	8d b7       	in	r24, 0x3d	; 61
    1d1a:	9e b7       	in	r25, 0x3e	; 62
    1d1c:	08 96       	adiw	r24, 0x08	; 8
    1d1e:	0f b6       	in	r0, 0x3f	; 63
    1d20:	f8 94       	cli
    1d22:	9e bf       	out	0x3e, r25	; 62
    1d24:	0f be       	out	0x3f, r0	; 63
    1d26:	8d bf       	out	0x3d, r24	; 61
	Lcd_vidDisplyStr(buffer);
    1d28:	ce 01       	movw	r24, r28
    1d2a:	01 96       	adiw	r24, 0x01	; 1
    1d2c:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <Lcd_vidDisplyStr>
}
    1d30:	29 96       	adiw	r28, 0x09	; 9
    1d32:	0f b6       	in	r0, 0x3f	; 63
    1d34:	f8 94       	cli
    1d36:	de bf       	out	0x3e, r29	; 62
    1d38:	0f be       	out	0x3f, r0	; 63
    1d3a:	cd bf       	out	0x3d, r28	; 61
    1d3c:	cf 91       	pop	r28
    1d3e:	df 91       	pop	r29
    1d40:	08 95       	ret

00001d42 <Lcd_vidDisplyFlot>:
void Lcd_vidDisplyFlot(f64 num)
{
    1d42:	df 93       	push	r29
    1d44:	cf 93       	push	r28
    1d46:	cd b7       	in	r28, 0x3d	; 61
    1d48:	de b7       	in	r29, 0x3e	; 62
    1d4a:	68 97       	sbiw	r28, 0x18	; 24
    1d4c:	0f b6       	in	r0, 0x3f	; 63
    1d4e:	f8 94       	cli
    1d50:	de bf       	out	0x3e, r29	; 62
    1d52:	0f be       	out	0x3f, r0	; 63
    1d54:	cd bf       	out	0x3d, r28	; 61
    1d56:	6d 8b       	std	Y+21, r22	; 0x15
    1d58:	7e 8b       	std	Y+22, r23	; 0x16
    1d5a:	8f 8b       	std	Y+23, r24	; 0x17
    1d5c:	98 8f       	std	Y+24, r25	; 0x18
	u8 buffer[20];
	sprintf(buffer,"%f",num);
    1d5e:	8d b7       	in	r24, 0x3d	; 61
    1d60:	9e b7       	in	r25, 0x3e	; 62
    1d62:	08 97       	sbiw	r24, 0x08	; 8
    1d64:	0f b6       	in	r0, 0x3f	; 63
    1d66:	f8 94       	cli
    1d68:	9e bf       	out	0x3e, r25	; 62
    1d6a:	0f be       	out	0x3f, r0	; 63
    1d6c:	8d bf       	out	0x3d, r24	; 61
    1d6e:	ed b7       	in	r30, 0x3d	; 61
    1d70:	fe b7       	in	r31, 0x3e	; 62
    1d72:	31 96       	adiw	r30, 0x01	; 1
    1d74:	ce 01       	movw	r24, r28
    1d76:	01 96       	adiw	r24, 0x01	; 1
    1d78:	91 83       	std	Z+1, r25	; 0x01
    1d7a:	80 83       	st	Z, r24
    1d7c:	83 e6       	ldi	r24, 0x63	; 99
    1d7e:	90 e0       	ldi	r25, 0x00	; 0
    1d80:	93 83       	std	Z+3, r25	; 0x03
    1d82:	82 83       	std	Z+2, r24	; 0x02
    1d84:	8d 89       	ldd	r24, Y+21	; 0x15
    1d86:	9e 89       	ldd	r25, Y+22	; 0x16
    1d88:	af 89       	ldd	r26, Y+23	; 0x17
    1d8a:	b8 8d       	ldd	r27, Y+24	; 0x18
    1d8c:	84 83       	std	Z+4, r24	; 0x04
    1d8e:	95 83       	std	Z+5, r25	; 0x05
    1d90:	a6 83       	std	Z+6, r26	; 0x06
    1d92:	b7 83       	std	Z+7, r27	; 0x07
    1d94:	0e 94 dc 19 	call	0x33b8	; 0x33b8 <sprintf>
    1d98:	8d b7       	in	r24, 0x3d	; 61
    1d9a:	9e b7       	in	r25, 0x3e	; 62
    1d9c:	08 96       	adiw	r24, 0x08	; 8
    1d9e:	0f b6       	in	r0, 0x3f	; 63
    1da0:	f8 94       	cli
    1da2:	9e bf       	out	0x3e, r25	; 62
    1da4:	0f be       	out	0x3f, r0	; 63
    1da6:	8d bf       	out	0x3d, r24	; 61
	Lcd_vidDisplyStr(buffer);
    1da8:	ce 01       	movw	r24, r28
    1daa:	01 96       	adiw	r24, 0x01	; 1
    1dac:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <Lcd_vidDisplyStr>
}
    1db0:	68 96       	adiw	r28, 0x18	; 24
    1db2:	0f b6       	in	r0, 0x3f	; 63
    1db4:	f8 94       	cli
    1db6:	de bf       	out	0x3e, r29	; 62
    1db8:	0f be       	out	0x3f, r0	; 63
    1dba:	cd bf       	out	0x3d, r28	; 61
    1dbc:	cf 91       	pop	r28
    1dbe:	df 91       	pop	r29
    1dc0:	08 95       	ret

00001dc2 <Keypad_vidInit>:
		{'7','8','9','C'},
		{'*','0','#','D'}
};

void Keypad_vidInit(void)
{
    1dc2:	df 93       	push	r29
    1dc4:	cf 93       	push	r28
    1dc6:	cd b7       	in	r28, 0x3d	; 61
    1dc8:	de b7       	in	r29, 0x3e	; 62
	/*	Configure Rows Pins as input	*/
	Dio_vidconfigChanel(DIO_PORTC, DIO_PIN0, DIO_INPUT);/* ROW0	*/
    1dca:	82 e0       	ldi	r24, 0x02	; 2
    1dcc:	60 e0       	ldi	r22, 0x00	; 0
    1dce:	40 e0       	ldi	r20, 0x00	; 0
    1dd0:	0e 94 3c 15 	call	0x2a78	; 0x2a78 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTC, DIO_PIN1, DIO_INPUT);/* ROW1	*/
    1dd4:	82 e0       	ldi	r24, 0x02	; 2
    1dd6:	61 e0       	ldi	r22, 0x01	; 1
    1dd8:	40 e0       	ldi	r20, 0x00	; 0
    1dda:	0e 94 3c 15 	call	0x2a78	; 0x2a78 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTC, DIO_PIN2, DIO_INPUT);/* ROW2	*/
    1dde:	82 e0       	ldi	r24, 0x02	; 2
    1de0:	62 e0       	ldi	r22, 0x02	; 2
    1de2:	40 e0       	ldi	r20, 0x00	; 0
    1de4:	0e 94 3c 15 	call	0x2a78	; 0x2a78 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTC, DIO_PIN3, DIO_INPUT);/* ROW3 */
    1de8:	82 e0       	ldi	r24, 0x02	; 2
    1dea:	63 e0       	ldi	r22, 0x03	; 3
    1dec:	40 e0       	ldi	r20, 0x00	; 0
    1dee:	0e 94 3c 15 	call	0x2a78	; 0x2a78 <Dio_vidconfigChanel>

	/*	Configure Columns Pins as output	*/
	Dio_vidconfigChanel(DIO_PORTC, DIO_PIN4, DIO_OUTPUT);/*	COL0 */
    1df2:	82 e0       	ldi	r24, 0x02	; 2
    1df4:	64 e0       	ldi	r22, 0x04	; 4
    1df6:	41 e0       	ldi	r20, 0x01	; 1
    1df8:	0e 94 3c 15 	call	0x2a78	; 0x2a78 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTC, DIO_PIN5, DIO_OUTPUT);/* COL1 */
    1dfc:	82 e0       	ldi	r24, 0x02	; 2
    1dfe:	65 e0       	ldi	r22, 0x05	; 5
    1e00:	41 e0       	ldi	r20, 0x01	; 1
    1e02:	0e 94 3c 15 	call	0x2a78	; 0x2a78 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTC, DIO_PIN6, DIO_OUTPUT);/* COL2 */
    1e06:	82 e0       	ldi	r24, 0x02	; 2
    1e08:	66 e0       	ldi	r22, 0x06	; 6
    1e0a:	41 e0       	ldi	r20, 0x01	; 1
    1e0c:	0e 94 3c 15 	call	0x2a78	; 0x2a78 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTC, DIO_PIN7, DIO_OUTPUT);/* COL3 */
    1e10:	82 e0       	ldi	r24, 0x02	; 2
    1e12:	67 e0       	ldi	r22, 0x07	; 7
    1e14:	41 e0       	ldi	r20, 0x01	; 1
    1e16:	0e 94 3c 15 	call	0x2a78	; 0x2a78 <Dio_vidconfigChanel>

	Dio_vidPullUpEn(DIO_PORTC, DIO_PIN0);
    1e1a:	82 e0       	ldi	r24, 0x02	; 2
    1e1c:	60 e0       	ldi	r22, 0x00	; 0
    1e1e:	0e 94 6e 18 	call	0x30dc	; 0x30dc <Dio_vidPullUpEn>
	Dio_vidPullUpEn(DIO_PORTC, DIO_PIN1);
    1e22:	82 e0       	ldi	r24, 0x02	; 2
    1e24:	61 e0       	ldi	r22, 0x01	; 1
    1e26:	0e 94 6e 18 	call	0x30dc	; 0x30dc <Dio_vidPullUpEn>
	Dio_vidPullUpEn(DIO_PORTC, DIO_PIN2);
    1e2a:	82 e0       	ldi	r24, 0x02	; 2
    1e2c:	62 e0       	ldi	r22, 0x02	; 2
    1e2e:	0e 94 6e 18 	call	0x30dc	; 0x30dc <Dio_vidPullUpEn>
	Dio_vidPullUpEn(DIO_PORTC, DIO_PIN3);
    1e32:	82 e0       	ldi	r24, 0x02	; 2
    1e34:	63 e0       	ldi	r22, 0x03	; 3
    1e36:	0e 94 6e 18 	call	0x30dc	; 0x30dc <Dio_vidPullUpEn>


	Dio_vidwriteChanel(DIO_PORTC, DIO_PIN4, DIO_LOW);
    1e3a:	82 e0       	ldi	r24, 0x02	; 2
    1e3c:	64 e0       	ldi	r22, 0x04	; 4
    1e3e:	40 e0       	ldi	r20, 0x00	; 0
    1e40:	0e 94 1f 16 	call	0x2c3e	; 0x2c3e <Dio_vidwriteChanel>
	Dio_vidwriteChanel(DIO_PORTC, DIO_PIN5, DIO_LOW);
    1e44:	82 e0       	ldi	r24, 0x02	; 2
    1e46:	65 e0       	ldi	r22, 0x05	; 5
    1e48:	40 e0       	ldi	r20, 0x00	; 0
    1e4a:	0e 94 1f 16 	call	0x2c3e	; 0x2c3e <Dio_vidwriteChanel>
	Dio_vidwriteChanel(DIO_PORTC, DIO_PIN6, DIO_LOW);
    1e4e:	82 e0       	ldi	r24, 0x02	; 2
    1e50:	66 e0       	ldi	r22, 0x06	; 6
    1e52:	40 e0       	ldi	r20, 0x00	; 0
    1e54:	0e 94 1f 16 	call	0x2c3e	; 0x2c3e <Dio_vidwriteChanel>
	Dio_vidwriteChanel(DIO_PORTC, DIO_PIN7, DIO_LOW);
    1e58:	82 e0       	ldi	r24, 0x02	; 2
    1e5a:	67 e0       	ldi	r22, 0x07	; 7
    1e5c:	40 e0       	ldi	r20, 0x00	; 0
    1e5e:	0e 94 1f 16 	call	0x2c3e	; 0x2c3e <Dio_vidwriteChanel>
}
    1e62:	cf 91       	pop	r28
    1e64:	df 91       	pop	r29
    1e66:	08 95       	ret

00001e68 <Keypad_IsPressed>:

static boolean Keypad_IsPressed(void)
{
    1e68:	df 93       	push	r29
    1e6a:	cf 93       	push	r28
    1e6c:	0f 92       	push	r0
    1e6e:	cd b7       	in	r28, 0x3d	; 61
    1e70:	de b7       	in	r29, 0x3e	; 62
	if (
    1e72:	82 e0       	ldi	r24, 0x02	; 2
    1e74:	60 e0       	ldi	r22, 0x00	; 0
    1e76:	0e 94 5e 17 	call	0x2ebc	; 0x2ebc <Dio_udtreadChanel>
    1e7a:	88 23       	and	r24, r24
    1e7c:	91 f0       	breq	.+36     	; 0x1ea2 <Keypad_IsPressed+0x3a>
    1e7e:	82 e0       	ldi	r24, 0x02	; 2
    1e80:	61 e0       	ldi	r22, 0x01	; 1
    1e82:	0e 94 5e 17 	call	0x2ebc	; 0x2ebc <Dio_udtreadChanel>
    1e86:	88 23       	and	r24, r24
    1e88:	61 f0       	breq	.+24     	; 0x1ea2 <Keypad_IsPressed+0x3a>
    1e8a:	82 e0       	ldi	r24, 0x02	; 2
    1e8c:	62 e0       	ldi	r22, 0x02	; 2
    1e8e:	0e 94 5e 17 	call	0x2ebc	; 0x2ebc <Dio_udtreadChanel>
    1e92:	88 23       	and	r24, r24
    1e94:	31 f0       	breq	.+12     	; 0x1ea2 <Keypad_IsPressed+0x3a>
    1e96:	82 e0       	ldi	r24, 0x02	; 2
    1e98:	63 e0       	ldi	r22, 0x03	; 3
    1e9a:	0e 94 5e 17 	call	0x2ebc	; 0x2ebc <Dio_udtreadChanel>
    1e9e:	88 23       	and	r24, r24
    1ea0:	19 f4       	brne	.+6      	; 0x1ea8 <Keypad_IsPressed+0x40>
			Dio_udtreadChanel(DIO_PORTC, DIO_PIN1) == DIO_LOW ||
			Dio_udtreadChanel(DIO_PORTC, DIO_PIN2) == DIO_LOW ||
			Dio_udtreadChanel(DIO_PORTC, DIO_PIN3) == DIO_LOW
	)
	{
		return TRUE;
    1ea2:	81 e0       	ldi	r24, 0x01	; 1
    1ea4:	89 83       	std	Y+1, r24	; 0x01
    1ea6:	01 c0       	rjmp	.+2      	; 0x1eaa <Keypad_IsPressed+0x42>
	}
	else
	{
		return FALSE;
    1ea8:	19 82       	std	Y+1, r1	; 0x01
    1eaa:	89 81       	ldd	r24, Y+1	; 0x01
	}
}
    1eac:	0f 90       	pop	r0
    1eae:	cf 91       	pop	r28
    1eb0:	df 91       	pop	r29
    1eb2:	08 95       	ret

00001eb4 <Keypad_GetRow>:


static kp_row_t Keypad_GetRow(void)
{
    1eb4:	df 93       	push	r29
    1eb6:	cf 93       	push	r28
    1eb8:	0f 92       	push	r0
    1eba:	cd b7       	in	r28, 0x3d	; 61
    1ebc:	de b7       	in	r29, 0x3e	; 62
	kp_row_t loc_ButtonRow = KP_NOROW;
    1ebe:	8f ef       	ldi	r24, 0xFF	; 255
    1ec0:	89 83       	std	Y+1, r24	; 0x01
	if (Dio_udtreadChanel(DIO_PORTC, DIO_PIN0) == DIO_LOW)
    1ec2:	82 e0       	ldi	r24, 0x02	; 2
    1ec4:	60 e0       	ldi	r22, 0x00	; 0
    1ec6:	0e 94 5e 17 	call	0x2ebc	; 0x2ebc <Dio_udtreadChanel>
    1eca:	88 23       	and	r24, r24
    1ecc:	11 f4       	brne	.+4      	; 0x1ed2 <Keypad_GetRow+0x1e>
	{
		loc_ButtonRow = KP_ROW0;
    1ece:	19 82       	std	Y+1, r1	; 0x01
    1ed0:	1d c0       	rjmp	.+58     	; 0x1f0c <Keypad_GetRow+0x58>
	}
	else if (Dio_udtreadChanel(DIO_PORTC, DIO_PIN1) == DIO_LOW)
    1ed2:	82 e0       	ldi	r24, 0x02	; 2
    1ed4:	61 e0       	ldi	r22, 0x01	; 1
    1ed6:	0e 94 5e 17 	call	0x2ebc	; 0x2ebc <Dio_udtreadChanel>
    1eda:	88 23       	and	r24, r24
    1edc:	19 f4       	brne	.+6      	; 0x1ee4 <Keypad_GetRow+0x30>
	{
		loc_ButtonRow = KP_ROW1;
    1ede:	81 e0       	ldi	r24, 0x01	; 1
    1ee0:	89 83       	std	Y+1, r24	; 0x01
    1ee2:	14 c0       	rjmp	.+40     	; 0x1f0c <Keypad_GetRow+0x58>
	}
	else if (Dio_udtreadChanel(DIO_PORTC, DIO_PIN2) == DIO_LOW)
    1ee4:	82 e0       	ldi	r24, 0x02	; 2
    1ee6:	62 e0       	ldi	r22, 0x02	; 2
    1ee8:	0e 94 5e 17 	call	0x2ebc	; 0x2ebc <Dio_udtreadChanel>
    1eec:	88 23       	and	r24, r24
    1eee:	19 f4       	brne	.+6      	; 0x1ef6 <Keypad_GetRow+0x42>
	{
		loc_ButtonRow = KP_ROW2;
    1ef0:	82 e0       	ldi	r24, 0x02	; 2
    1ef2:	89 83       	std	Y+1, r24	; 0x01
    1ef4:	0b c0       	rjmp	.+22     	; 0x1f0c <Keypad_GetRow+0x58>
	}
	else if (Dio_udtreadChanel(DIO_PORTC, DIO_PIN3) == DIO_LOW)
    1ef6:	82 e0       	ldi	r24, 0x02	; 2
    1ef8:	63 e0       	ldi	r22, 0x03	; 3
    1efa:	0e 94 5e 17 	call	0x2ebc	; 0x2ebc <Dio_udtreadChanel>
    1efe:	88 23       	and	r24, r24
    1f00:	19 f4       	brne	.+6      	; 0x1f08 <Keypad_GetRow+0x54>
	{
		loc_ButtonRow = KP_ROW3;
    1f02:	83 e0       	ldi	r24, 0x03	; 3
    1f04:	89 83       	std	Y+1, r24	; 0x01
    1f06:	02 c0       	rjmp	.+4      	; 0x1f0c <Keypad_GetRow+0x58>
	}
	else
	{
		loc_ButtonRow = KP_NOROW;
    1f08:	8f ef       	ldi	r24, 0xFF	; 255
    1f0a:	89 83       	std	Y+1, r24	; 0x01
	}
	return loc_ButtonRow;
    1f0c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f0e:	0f 90       	pop	r0
    1f10:	cf 91       	pop	r28
    1f12:	df 91       	pop	r29
    1f14:	08 95       	ret

00001f16 <Keypad_GetCol>:

static kp_col_t Keypad_GetCol(kp_row_t current_row)
{
    1f16:	df 93       	push	r29
    1f18:	cf 93       	push	r28
    1f1a:	00 d0       	rcall	.+0      	; 0x1f1c <Keypad_GetCol+0x6>
    1f1c:	cd b7       	in	r28, 0x3d	; 61
    1f1e:	de b7       	in	r29, 0x3e	; 62
    1f20:	8a 83       	std	Y+2, r24	; 0x02
	kp_col_t loc_ButtonCol = KP_NOCOL;
    1f22:	8f ef       	ldi	r24, 0xFF	; 255
    1f24:	89 83       	std	Y+1, r24	; 0x01

	Dio_vidwriteChanel(DIO_PORTC, DIO_PIN4, DIO_LOW);
    1f26:	82 e0       	ldi	r24, 0x02	; 2
    1f28:	64 e0       	ldi	r22, 0x04	; 4
    1f2a:	40 e0       	ldi	r20, 0x00	; 0
    1f2c:	0e 94 1f 16 	call	0x2c3e	; 0x2c3e <Dio_vidwriteChanel>
	Dio_vidwriteChanel(DIO_PORTC, DIO_PIN5, DIO_HIGH);
    1f30:	82 e0       	ldi	r24, 0x02	; 2
    1f32:	65 e0       	ldi	r22, 0x05	; 5
    1f34:	41 e0       	ldi	r20, 0x01	; 1
    1f36:	0e 94 1f 16 	call	0x2c3e	; 0x2c3e <Dio_vidwriteChanel>
	Dio_vidwriteChanel(DIO_PORTC, DIO_PIN6, DIO_HIGH);
    1f3a:	82 e0       	ldi	r24, 0x02	; 2
    1f3c:	66 e0       	ldi	r22, 0x06	; 6
    1f3e:	41 e0       	ldi	r20, 0x01	; 1
    1f40:	0e 94 1f 16 	call	0x2c3e	; 0x2c3e <Dio_vidwriteChanel>
	Dio_vidwriteChanel(DIO_PORTC, DIO_PIN7, DIO_HIGH);
    1f44:	82 e0       	ldi	r24, 0x02	; 2
    1f46:	67 e0       	ldi	r22, 0x07	; 7
    1f48:	41 e0       	ldi	r20, 0x01	; 1
    1f4a:	0e 94 1f 16 	call	0x2c3e	; 0x2c3e <Dio_vidwriteChanel>

	if (Keypad_GetRow() == current_row)
    1f4e:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <Keypad_GetRow>
    1f52:	98 2f       	mov	r25, r24
    1f54:	8a 81       	ldd	r24, Y+2	; 0x02
    1f56:	98 17       	cp	r25, r24
    1f58:	11 f4       	brne	.+4      	; 0x1f5e <Keypad_GetCol+0x48>
	{
		loc_ButtonCol = KP_COL0;
    1f5a:	19 82       	std	Y+1, r1	; 0x01
    1f5c:	59 c0       	rjmp	.+178    	; 0x2010 <Keypad_GetCol+0xfa>
	}
	else
	{
		Dio_vidwriteChanel(DIO_PORTC, DIO_PIN4, DIO_HIGH);
    1f5e:	82 e0       	ldi	r24, 0x02	; 2
    1f60:	64 e0       	ldi	r22, 0x04	; 4
    1f62:	41 e0       	ldi	r20, 0x01	; 1
    1f64:	0e 94 1f 16 	call	0x2c3e	; 0x2c3e <Dio_vidwriteChanel>
		Dio_vidwriteChanel(DIO_PORTC, DIO_PIN5, DIO_LOW);
    1f68:	82 e0       	ldi	r24, 0x02	; 2
    1f6a:	65 e0       	ldi	r22, 0x05	; 5
    1f6c:	40 e0       	ldi	r20, 0x00	; 0
    1f6e:	0e 94 1f 16 	call	0x2c3e	; 0x2c3e <Dio_vidwriteChanel>
		Dio_vidwriteChanel(DIO_PORTC, DIO_PIN6, DIO_HIGH);
    1f72:	82 e0       	ldi	r24, 0x02	; 2
    1f74:	66 e0       	ldi	r22, 0x06	; 6
    1f76:	41 e0       	ldi	r20, 0x01	; 1
    1f78:	0e 94 1f 16 	call	0x2c3e	; 0x2c3e <Dio_vidwriteChanel>
		Dio_vidwriteChanel(DIO_PORTC, DIO_PIN7, DIO_HIGH);
    1f7c:	82 e0       	ldi	r24, 0x02	; 2
    1f7e:	67 e0       	ldi	r22, 0x07	; 7
    1f80:	41 e0       	ldi	r20, 0x01	; 1
    1f82:	0e 94 1f 16 	call	0x2c3e	; 0x2c3e <Dio_vidwriteChanel>

		if (Keypad_GetRow() == current_row)
    1f86:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <Keypad_GetRow>
    1f8a:	98 2f       	mov	r25, r24
    1f8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f8e:	98 17       	cp	r25, r24
    1f90:	19 f4       	brne	.+6      	; 0x1f98 <Keypad_GetCol+0x82>
		{
			loc_ButtonCol = KP_COL1;
    1f92:	81 e0       	ldi	r24, 0x01	; 1
    1f94:	89 83       	std	Y+1, r24	; 0x01
    1f96:	3c c0       	rjmp	.+120    	; 0x2010 <Keypad_GetCol+0xfa>
		}
		else
		{
			Dio_vidwriteChanel(DIO_PORTC, DIO_PIN4, DIO_HIGH);
    1f98:	82 e0       	ldi	r24, 0x02	; 2
    1f9a:	64 e0       	ldi	r22, 0x04	; 4
    1f9c:	41 e0       	ldi	r20, 0x01	; 1
    1f9e:	0e 94 1f 16 	call	0x2c3e	; 0x2c3e <Dio_vidwriteChanel>
			Dio_vidwriteChanel(DIO_PORTC, DIO_PIN5, DIO_HIGH);
    1fa2:	82 e0       	ldi	r24, 0x02	; 2
    1fa4:	65 e0       	ldi	r22, 0x05	; 5
    1fa6:	41 e0       	ldi	r20, 0x01	; 1
    1fa8:	0e 94 1f 16 	call	0x2c3e	; 0x2c3e <Dio_vidwriteChanel>
			Dio_vidwriteChanel(DIO_PORTC, DIO_PIN6, DIO_LOW);
    1fac:	82 e0       	ldi	r24, 0x02	; 2
    1fae:	66 e0       	ldi	r22, 0x06	; 6
    1fb0:	40 e0       	ldi	r20, 0x00	; 0
    1fb2:	0e 94 1f 16 	call	0x2c3e	; 0x2c3e <Dio_vidwriteChanel>
			Dio_vidwriteChanel(DIO_PORTC, DIO_PIN7, DIO_HIGH);
    1fb6:	82 e0       	ldi	r24, 0x02	; 2
    1fb8:	67 e0       	ldi	r22, 0x07	; 7
    1fba:	41 e0       	ldi	r20, 0x01	; 1
    1fbc:	0e 94 1f 16 	call	0x2c3e	; 0x2c3e <Dio_vidwriteChanel>

			if (Keypad_GetRow() == current_row)
    1fc0:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <Keypad_GetRow>
    1fc4:	98 2f       	mov	r25, r24
    1fc6:	8a 81       	ldd	r24, Y+2	; 0x02
    1fc8:	98 17       	cp	r25, r24
    1fca:	19 f4       	brne	.+6      	; 0x1fd2 <Keypad_GetCol+0xbc>
			{
				loc_ButtonCol = KP_COL2;
    1fcc:	82 e0       	ldi	r24, 0x02	; 2
    1fce:	89 83       	std	Y+1, r24	; 0x01
    1fd0:	1f c0       	rjmp	.+62     	; 0x2010 <Keypad_GetCol+0xfa>
			}
			else
			{
				Dio_vidwriteChanel(DIO_PORTC, DIO_PIN4, DIO_HIGH);
    1fd2:	82 e0       	ldi	r24, 0x02	; 2
    1fd4:	64 e0       	ldi	r22, 0x04	; 4
    1fd6:	41 e0       	ldi	r20, 0x01	; 1
    1fd8:	0e 94 1f 16 	call	0x2c3e	; 0x2c3e <Dio_vidwriteChanel>
				Dio_vidwriteChanel(DIO_PORTC, DIO_PIN5, DIO_HIGH);
    1fdc:	82 e0       	ldi	r24, 0x02	; 2
    1fde:	65 e0       	ldi	r22, 0x05	; 5
    1fe0:	41 e0       	ldi	r20, 0x01	; 1
    1fe2:	0e 94 1f 16 	call	0x2c3e	; 0x2c3e <Dio_vidwriteChanel>
				Dio_vidwriteChanel(DIO_PORTC, DIO_PIN6, DIO_HIGH);
    1fe6:	82 e0       	ldi	r24, 0x02	; 2
    1fe8:	66 e0       	ldi	r22, 0x06	; 6
    1fea:	41 e0       	ldi	r20, 0x01	; 1
    1fec:	0e 94 1f 16 	call	0x2c3e	; 0x2c3e <Dio_vidwriteChanel>
				Dio_vidwriteChanel(DIO_PORTC, DIO_PIN7, DIO_LOW);
    1ff0:	82 e0       	ldi	r24, 0x02	; 2
    1ff2:	67 e0       	ldi	r22, 0x07	; 7
    1ff4:	40 e0       	ldi	r20, 0x00	; 0
    1ff6:	0e 94 1f 16 	call	0x2c3e	; 0x2c3e <Dio_vidwriteChanel>

				if (Keypad_GetRow() == current_row)
    1ffa:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <Keypad_GetRow>
    1ffe:	98 2f       	mov	r25, r24
    2000:	8a 81       	ldd	r24, Y+2	; 0x02
    2002:	98 17       	cp	r25, r24
    2004:	19 f4       	brne	.+6      	; 0x200c <Keypad_GetCol+0xf6>
				{
					loc_ButtonCol = KP_COL3;
    2006:	83 e0       	ldi	r24, 0x03	; 3
    2008:	89 83       	std	Y+1, r24	; 0x01
    200a:	02 c0       	rjmp	.+4      	; 0x2010 <Keypad_GetCol+0xfa>
				}
				else
				{
					loc_ButtonCol = KP_NOCOL;
    200c:	8f ef       	ldi	r24, 0xFF	; 255
    200e:	89 83       	std	Y+1, r24	; 0x01
				}
			}
		}
	}
	return loc_ButtonCol;
    2010:	89 81       	ldd	r24, Y+1	; 0x01
}
    2012:	0f 90       	pop	r0
    2014:	0f 90       	pop	r0
    2016:	cf 91       	pop	r28
    2018:	df 91       	pop	r29
    201a:	08 95       	ret

0000201c <Keypad_u8GetKey>:

u8 Keypad_u8GetKey(void)
{
    201c:	df 93       	push	r29
    201e:	cf 93       	push	r28
    2020:	00 d0       	rcall	.+0      	; 0x2022 <Keypad_u8GetKey+0x6>
    2022:	0f 92       	push	r0
    2024:	cd b7       	in	r28, 0x3d	; 61
    2026:	de b7       	in	r29, 0x3e	; 62
	u8 loc_key = 0xFF;
    2028:	8f ef       	ldi	r24, 0xFF	; 255
    202a:	8b 83       	std	Y+3, r24	; 0x03
	kp_row_t loc_Row = KP_NOROW;
    202c:	8f ef       	ldi	r24, 0xFF	; 255
    202e:	8a 83       	std	Y+2, r24	; 0x02
	kp_row_t loc_Col = KP_NOCOL;
    2030:	8f ef       	ldi	r24, 0xFF	; 255
    2032:	89 83       	std	Y+1, r24	; 0x01

	Keypad_vidInit();
    2034:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <Keypad_vidInit>
	/*	Check If Keypad Pressed*/
	if (Keypad_IsPressed() == TRUE)
    2038:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <Keypad_IsPressed>
    203c:	81 30       	cpi	r24, 0x01	; 1
    203e:	f1 f4       	brne	.+60     	; 0x207c <Keypad_u8GetKey+0x60>
	{
		/*	Get pressed key ROW*/
		loc_Row = Keypad_GetRow();
    2040:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <Keypad_GetRow>
    2044:	8a 83       	std	Y+2, r24	; 0x02
		/*	Get pressed key COLUMN	*/
		loc_Col = Keypad_GetCol(loc_Row);
    2046:	8a 81       	ldd	r24, Y+2	; 0x02
    2048:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <Keypad_GetCol>
    204c:	89 83       	std	Y+1, r24	; 0x01
		/* loc_key = Keypad_layout[ROW][COLUMN]	*/
		loc_key = Keypad_layout[loc_Row][loc_Col];
    204e:	8a 81       	ldd	r24, Y+2	; 0x02
    2050:	48 2f       	mov	r20, r24
    2052:	55 27       	eor	r21, r21
    2054:	47 fd       	sbrc	r20, 7
    2056:	50 95       	com	r21
    2058:	89 81       	ldd	r24, Y+1	; 0x01
    205a:	28 2f       	mov	r18, r24
    205c:	33 27       	eor	r19, r19
    205e:	27 fd       	sbrc	r18, 7
    2060:	30 95       	com	r19
    2062:	ca 01       	movw	r24, r20
    2064:	88 0f       	add	r24, r24
    2066:	99 1f       	adc	r25, r25
    2068:	88 0f       	add	r24, r24
    206a:	99 1f       	adc	r25, r25
    206c:	82 0f       	add	r24, r18
    206e:	93 1f       	adc	r25, r19
    2070:	fc 01       	movw	r30, r24
    2072:	e1 59       	subi	r30, 0x91	; 145
    2074:	fe 4f       	sbci	r31, 0xFE	; 254
    2076:	80 81       	ld	r24, Z
    2078:	8b 83       	std	Y+3, r24	; 0x03
    207a:	02 c0       	rjmp	.+4      	; 0x2080 <Keypad_u8GetKey+0x64>
	}
	else
	{
		/*	Do Nothing	*/
		loc_key = 0xFF;
    207c:	8f ef       	ldi	r24, 0xFF	; 255
    207e:	8b 83       	std	Y+3, r24	; 0x03
	}
	return loc_key;
    2080:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2082:	0f 90       	pop	r0
    2084:	0f 90       	pop	r0
    2086:	0f 90       	pop	r0
    2088:	cf 91       	pop	r28
    208a:	df 91       	pop	r29
    208c:	08 95       	ret

0000208e <Dc_Motor_vidInit>:

#include "Dc_Motor.h"
#include "util/delay.h"

void Dc_Motor_vidInit(void)
{
    208e:	df 93       	push	r29
    2090:	cf 93       	push	r28
    2092:	cd b7       	in	r28, 0x3d	; 61
    2094:	de b7       	in	r29, 0x3e	; 62
	/*	Configure Motor Control Pins as Outputs	*/

	/*	Make Sure Motor is Stop	*/

}
    2096:	cf 91       	pop	r28
    2098:	df 91       	pop	r29
    209a:	08 95       	ret

0000209c <Dc_Motor_vidStart>:
void Dc_Motor_vidStart(motor_dir_t dir)
{
    209c:	df 93       	push	r29
    209e:	cf 93       	push	r28
    20a0:	0f 92       	push	r0
    20a2:	cd b7       	in	r28, 0x3d	; 61
    20a4:	de b7       	in	r29, 0x3e	; 62
    20a6:	89 83       	std	Y+1, r24	; 0x01

	}

	/*	Set EN1 Pin	*/

}
    20a8:	0f 90       	pop	r0
    20aa:	cf 91       	pop	r28
    20ac:	df 91       	pop	r29
    20ae:	08 95       	ret

000020b0 <Dc_Motor_vidStop>:
void Dc_Motor_vidStop(void)
{
    20b0:	df 93       	push	r29
    20b2:	cf 93       	push	r28
    20b4:	cd b7       	in	r28, 0x3d	; 61
    20b6:	de b7       	in	r29, 0x3e	; 62
    20b8:	2e 97       	sbiw	r28, 0x0e	; 14
    20ba:	0f b6       	in	r0, 0x3f	; 63
    20bc:	f8 94       	cli
    20be:	de bf       	out	0x3e, r29	; 62
    20c0:	0f be       	out	0x3f, r0	; 63
    20c2:	cd bf       	out	0x3d, r28	; 61
    20c4:	80 e0       	ldi	r24, 0x00	; 0
    20c6:	90 e8       	ldi	r25, 0x80	; 128
    20c8:	ab e3       	ldi	r26, 0x3B	; 59
    20ca:	b5 e4       	ldi	r27, 0x45	; 69
    20cc:	8b 87       	std	Y+11, r24	; 0x0b
    20ce:	9c 87       	std	Y+12, r25	; 0x0c
    20d0:	ad 87       	std	Y+13, r26	; 0x0d
    20d2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    20d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    20d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    20da:	9e 85       	ldd	r25, Y+14	; 0x0e
    20dc:	20 e0       	ldi	r18, 0x00	; 0
    20de:	30 e0       	ldi	r19, 0x00	; 0
    20e0:	4a e7       	ldi	r20, 0x7A	; 122
    20e2:	55 e4       	ldi	r21, 0x45	; 69
    20e4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20e8:	dc 01       	movw	r26, r24
    20ea:	cb 01       	movw	r24, r22
    20ec:	8f 83       	std	Y+7, r24	; 0x07
    20ee:	98 87       	std	Y+8, r25	; 0x08
    20f0:	a9 87       	std	Y+9, r26	; 0x09
    20f2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20f4:	6f 81       	ldd	r22, Y+7	; 0x07
    20f6:	78 85       	ldd	r23, Y+8	; 0x08
    20f8:	89 85       	ldd	r24, Y+9	; 0x09
    20fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    20fc:	20 e0       	ldi	r18, 0x00	; 0
    20fe:	30 e0       	ldi	r19, 0x00	; 0
    2100:	40 e8       	ldi	r20, 0x80	; 128
    2102:	5f e3       	ldi	r21, 0x3F	; 63
    2104:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2108:	88 23       	and	r24, r24
    210a:	2c f4       	brge	.+10     	; 0x2116 <Dc_Motor_vidStop+0x66>
		__ticks = 1;
    210c:	81 e0       	ldi	r24, 0x01	; 1
    210e:	90 e0       	ldi	r25, 0x00	; 0
    2110:	9e 83       	std	Y+6, r25	; 0x06
    2112:	8d 83       	std	Y+5, r24	; 0x05
    2114:	3f c0       	rjmp	.+126    	; 0x2194 <Dc_Motor_vidStop+0xe4>
	else if (__tmp > 65535)
    2116:	6f 81       	ldd	r22, Y+7	; 0x07
    2118:	78 85       	ldd	r23, Y+8	; 0x08
    211a:	89 85       	ldd	r24, Y+9	; 0x09
    211c:	9a 85       	ldd	r25, Y+10	; 0x0a
    211e:	20 e0       	ldi	r18, 0x00	; 0
    2120:	3f ef       	ldi	r19, 0xFF	; 255
    2122:	4f e7       	ldi	r20, 0x7F	; 127
    2124:	57 e4       	ldi	r21, 0x47	; 71
    2126:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    212a:	18 16       	cp	r1, r24
    212c:	4c f5       	brge	.+82     	; 0x2180 <Dc_Motor_vidStop+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    212e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2130:	7c 85       	ldd	r23, Y+12	; 0x0c
    2132:	8d 85       	ldd	r24, Y+13	; 0x0d
    2134:	9e 85       	ldd	r25, Y+14	; 0x0e
    2136:	20 e0       	ldi	r18, 0x00	; 0
    2138:	30 e0       	ldi	r19, 0x00	; 0
    213a:	40 e2       	ldi	r20, 0x20	; 32
    213c:	51 e4       	ldi	r21, 0x41	; 65
    213e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2142:	dc 01       	movw	r26, r24
    2144:	cb 01       	movw	r24, r22
    2146:	bc 01       	movw	r22, r24
    2148:	cd 01       	movw	r24, r26
    214a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    214e:	dc 01       	movw	r26, r24
    2150:	cb 01       	movw	r24, r22
    2152:	9e 83       	std	Y+6, r25	; 0x06
    2154:	8d 83       	std	Y+5, r24	; 0x05
    2156:	0f c0       	rjmp	.+30     	; 0x2176 <Dc_Motor_vidStop+0xc6>
    2158:	80 e9       	ldi	r24, 0x90	; 144
    215a:	91 e0       	ldi	r25, 0x01	; 1
    215c:	9c 83       	std	Y+4, r25	; 0x04
    215e:	8b 83       	std	Y+3, r24	; 0x03
    2160:	8b 81       	ldd	r24, Y+3	; 0x03
    2162:	9c 81       	ldd	r25, Y+4	; 0x04
    2164:	01 97       	sbiw	r24, 0x01	; 1
    2166:	f1 f7       	brne	.-4      	; 0x2164 <Dc_Motor_vidStop+0xb4>
    2168:	9c 83       	std	Y+4, r25	; 0x04
    216a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    216c:	8d 81       	ldd	r24, Y+5	; 0x05
    216e:	9e 81       	ldd	r25, Y+6	; 0x06
    2170:	01 97       	sbiw	r24, 0x01	; 1
    2172:	9e 83       	std	Y+6, r25	; 0x06
    2174:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2176:	8d 81       	ldd	r24, Y+5	; 0x05
    2178:	9e 81       	ldd	r25, Y+6	; 0x06
    217a:	00 97       	sbiw	r24, 0x00	; 0
    217c:	69 f7       	brne	.-38     	; 0x2158 <Dc_Motor_vidStop+0xa8>
    217e:	14 c0       	rjmp	.+40     	; 0x21a8 <Dc_Motor_vidStop+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2180:	6f 81       	ldd	r22, Y+7	; 0x07
    2182:	78 85       	ldd	r23, Y+8	; 0x08
    2184:	89 85       	ldd	r24, Y+9	; 0x09
    2186:	9a 85       	ldd	r25, Y+10	; 0x0a
    2188:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    218c:	dc 01       	movw	r26, r24
    218e:	cb 01       	movw	r24, r22
    2190:	9e 83       	std	Y+6, r25	; 0x06
    2192:	8d 83       	std	Y+5, r24	; 0x05
    2194:	8d 81       	ldd	r24, Y+5	; 0x05
    2196:	9e 81       	ldd	r25, Y+6	; 0x06
    2198:	9a 83       	std	Y+2, r25	; 0x02
    219a:	89 83       	std	Y+1, r24	; 0x01
    219c:	89 81       	ldd	r24, Y+1	; 0x01
    219e:	9a 81       	ldd	r25, Y+2	; 0x02
    21a0:	01 97       	sbiw	r24, 0x01	; 1
    21a2:	f1 f7       	brne	.-4      	; 0x21a0 <Dc_Motor_vidStop+0xf0>
    21a4:	9a 83       	std	Y+2, r25	; 0x02
    21a6:	89 83       	std	Y+1, r24	; 0x01
	/*	Clear EN1 Pin	*/

	/*	Wait Till Motor Stop	*/
	_delay_ms(3000);
}
    21a8:	2e 96       	adiw	r28, 0x0e	; 14
    21aa:	0f b6       	in	r0, 0x3f	; 63
    21ac:	f8 94       	cli
    21ae:	de bf       	out	0x3e, r29	; 62
    21b0:	0f be       	out	0x3f, r0	; 63
    21b2:	cd bf       	out	0x3d, r28	; 61
    21b4:	cf 91       	pop	r28
    21b6:	df 91       	pop	r29
    21b8:	08 95       	ret

000021ba <Buzzer_vidinit>:
 *      Author: Eng_Fawzi
 */
#include "Dio.h"

void Buzzer_vidinit(void)
{
    21ba:	df 93       	push	r29
    21bc:	cf 93       	push	r28
    21be:	cd b7       	in	r28, 0x3d	; 61
    21c0:	de b7       	in	r29, 0x3e	; 62
	Dio_vidconfigChanel(DIO_PORTA,DIO_PIN3,DIO_OUTPUT);
    21c2:	80 e0       	ldi	r24, 0x00	; 0
    21c4:	63 e0       	ldi	r22, 0x03	; 3
    21c6:	41 e0       	ldi	r20, 0x01	; 1
    21c8:	0e 94 3c 15 	call	0x2a78	; 0x2a78 <Dio_vidconfigChanel>
}
    21cc:	cf 91       	pop	r28
    21ce:	df 91       	pop	r29
    21d0:	08 95       	ret

000021d2 <Buzzer_vidbuzzerOn>:
void Buzzer_vidbuzzerOn(void)
{
    21d2:	df 93       	push	r29
    21d4:	cf 93       	push	r28
    21d6:	cd b7       	in	r28, 0x3d	; 61
    21d8:	de b7       	in	r29, 0x3e	; 62
	Dio_vidwriteChanel(DIO_PORTA, DIO_PIN3, DIO_HIGH);
    21da:	80 e0       	ldi	r24, 0x00	; 0
    21dc:	63 e0       	ldi	r22, 0x03	; 3
    21de:	41 e0       	ldi	r20, 0x01	; 1
    21e0:	0e 94 1f 16 	call	0x2c3e	; 0x2c3e <Dio_vidwriteChanel>
}
    21e4:	cf 91       	pop	r28
    21e6:	df 91       	pop	r29
    21e8:	08 95       	ret

000021ea <Buzzer_vidbuzzerOff>:
void Buzzer_vidbuzzerOff(void)
{
    21ea:	df 93       	push	r29
    21ec:	cf 93       	push	r28
    21ee:	cd b7       	in	r28, 0x3d	; 61
    21f0:	de b7       	in	r29, 0x3e	; 62
	Dio_vidwriteChanel(DIO_PORTA, DIO_PIN3, DIO_LOW);
    21f2:	80 e0       	ldi	r24, 0x00	; 0
    21f4:	63 e0       	ldi	r22, 0x03	; 3
    21f6:	40 e0       	ldi	r20, 0x00	; 0
    21f8:	0e 94 1f 16 	call	0x2c3e	; 0x2c3e <Dio_vidwriteChanel>
}
    21fc:	cf 91       	pop	r28
    21fe:	df 91       	pop	r29
    2200:	08 95       	ret

00002202 <Button_vidbuttonInit>:
 */
#include "Button.h"
#include "Dio.h"

void Button_vidbuttonInit(void)
{
    2202:	df 93       	push	r29
    2204:	cf 93       	push	r28
    2206:	cd b7       	in	r28, 0x3d	; 61
    2208:	de b7       	in	r29, 0x3e	; 62
	Dio_vidconfigChanel(DIO_PORTB, DIO_PIN0, DIO_INPUT);
    220a:	81 e0       	ldi	r24, 0x01	; 1
    220c:	60 e0       	ldi	r22, 0x00	; 0
    220e:	40 e0       	ldi	r20, 0x00	; 0
    2210:	0e 94 3c 15 	call	0x2a78	; 0x2a78 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTD, DIO_PIN6, DIO_INPUT);
    2214:	83 e0       	ldi	r24, 0x03	; 3
    2216:	66 e0       	ldi	r22, 0x06	; 6
    2218:	40 e0       	ldi	r20, 0x00	; 0
    221a:	0e 94 3c 15 	call	0x2a78	; 0x2a78 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTD, DIO_PIN2, DIO_INPUT);
    221e:	83 e0       	ldi	r24, 0x03	; 3
    2220:	62 e0       	ldi	r22, 0x02	; 2
    2222:	40 e0       	ldi	r20, 0x00	; 0
    2224:	0e 94 3c 15 	call	0x2a78	; 0x2a78 <Dio_vidconfigChanel>
}
    2228:	cf 91       	pop	r28
    222a:	df 91       	pop	r29
    222c:	08 95       	ret

0000222e <Button_udtbuttonStatus>:


button_butStatus_t Button_udtbuttonStatus(button_buttonId_t butnId)
{
    222e:	df 93       	push	r29
    2230:	cf 93       	push	r28
    2232:	00 d0       	rcall	.+0      	; 0x2234 <Button_udtbuttonStatus+0x6>
    2234:	00 d0       	rcall	.+0      	; 0x2236 <Button_udtbuttonStatus+0x8>
    2236:	cd b7       	in	r28, 0x3d	; 61
    2238:	de b7       	in	r29, 0x3e	; 62
    223a:	8a 83       	std	Y+2, r24	; 0x02
	button_butStatus_t locBtnStatus = RELAEASED;
    223c:	19 82       	std	Y+1, r1	; 0x01
	switch (butnId)
    223e:	8a 81       	ldd	r24, Y+2	; 0x02
    2240:	28 2f       	mov	r18, r24
    2242:	30 e0       	ldi	r19, 0x00	; 0
    2244:	3c 83       	std	Y+4, r19	; 0x04
    2246:	2b 83       	std	Y+3, r18	; 0x03
    2248:	8b 81       	ldd	r24, Y+3	; 0x03
    224a:	9c 81       	ldd	r25, Y+4	; 0x04
    224c:	81 30       	cpi	r24, 0x01	; 1
    224e:	91 05       	cpc	r25, r1
    2250:	a1 f0       	breq	.+40     	; 0x227a <Button_udtbuttonStatus+0x4c>
    2252:	2b 81       	ldd	r18, Y+3	; 0x03
    2254:	3c 81       	ldd	r19, Y+4	; 0x04
    2256:	22 30       	cpi	r18, 0x02	; 2
    2258:	31 05       	cpc	r19, r1
    225a:	d1 f0       	breq	.+52     	; 0x2290 <Button_udtbuttonStatus+0x62>
    225c:	8b 81       	ldd	r24, Y+3	; 0x03
    225e:	9c 81       	ldd	r25, Y+4	; 0x04
    2260:	00 97       	sbiw	r24, 0x00	; 0
    2262:	01 f5       	brne	.+64     	; 0x22a4 <Button_udtbuttonStatus+0x76>
	{
		case BUTTON0:
			if (Dio_udtreadChanel(DIO_PORTB, DIO_PIN0) == DIO_HIGH)
    2264:	81 e0       	ldi	r24, 0x01	; 1
    2266:	60 e0       	ldi	r22, 0x00	; 0
    2268:	0e 94 5e 17 	call	0x2ebc	; 0x2ebc <Dio_udtreadChanel>
    226c:	81 30       	cpi	r24, 0x01	; 1
    226e:	19 f4       	brne	.+6      	; 0x2276 <Button_udtbuttonStatus+0x48>
			{
				locBtnStatus = PRESSED;
    2270:	81 e0       	ldi	r24, 0x01	; 1
    2272:	89 83       	std	Y+1, r24	; 0x01
    2274:	17 c0       	rjmp	.+46     	; 0x22a4 <Button_udtbuttonStatus+0x76>
			}
			else
			{
				locBtnStatus = RELAEASED;
    2276:	19 82       	std	Y+1, r1	; 0x01
    2278:	15 c0       	rjmp	.+42     	; 0x22a4 <Button_udtbuttonStatus+0x76>
			}
			break;

		case BUTTON1:
			if (Dio_udtreadChanel(DIO_PORTD, DIO_PIN6) == DIO_HIGH)
    227a:	83 e0       	ldi	r24, 0x03	; 3
    227c:	66 e0       	ldi	r22, 0x06	; 6
    227e:	0e 94 5e 17 	call	0x2ebc	; 0x2ebc <Dio_udtreadChanel>
    2282:	81 30       	cpi	r24, 0x01	; 1
    2284:	19 f4       	brne	.+6      	; 0x228c <Button_udtbuttonStatus+0x5e>
			{
				locBtnStatus = PRESSED;
    2286:	81 e0       	ldi	r24, 0x01	; 1
    2288:	89 83       	std	Y+1, r24	; 0x01
    228a:	0c c0       	rjmp	.+24     	; 0x22a4 <Button_udtbuttonStatus+0x76>
			}
			else
			{
				locBtnStatus = RELAEASED;
    228c:	19 82       	std	Y+1, r1	; 0x01
    228e:	0a c0       	rjmp	.+20     	; 0x22a4 <Button_udtbuttonStatus+0x76>
			}
			break;

		case BUTTON2:
			if (Dio_udtreadChanel(DIO_PORTD, DIO_PIN2) == DIO_HIGH)
    2290:	83 e0       	ldi	r24, 0x03	; 3
    2292:	62 e0       	ldi	r22, 0x02	; 2
    2294:	0e 94 5e 17 	call	0x2ebc	; 0x2ebc <Dio_udtreadChanel>
    2298:	81 30       	cpi	r24, 0x01	; 1
    229a:	19 f4       	brne	.+6      	; 0x22a2 <Button_udtbuttonStatus+0x74>
			{
				locBtnStatus = PRESSED;
    229c:	81 e0       	ldi	r24, 0x01	; 1
    229e:	89 83       	std	Y+1, r24	; 0x01
    22a0:	01 c0       	rjmp	.+2      	; 0x22a4 <Button_udtbuttonStatus+0x76>
			}
			else
			{
				locBtnStatus = RELAEASED;
    22a2:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
	}
	return locBtnStatus;
    22a4:	89 81       	ldd	r24, Y+1	; 0x01
}
    22a6:	0f 90       	pop	r0
    22a8:	0f 90       	pop	r0
    22aa:	0f 90       	pop	r0
    22ac:	0f 90       	pop	r0
    22ae:	cf 91       	pop	r28
    22b0:	df 91       	pop	r29
    22b2:	08 95       	ret

000022b4 <USART_Init>:
#include "Uart.h"
#include "Std_Types.h"
#include "Bit_Math.h"

void USART_Init(u32 baud)
{
    22b4:	df 93       	push	r29
    22b6:	cf 93       	push	r28
    22b8:	cd b7       	in	r28, 0x3d	; 61
    22ba:	de b7       	in	r29, 0x3e	; 62
    22bc:	28 97       	sbiw	r28, 0x08	; 8
    22be:	0f b6       	in	r0, 0x3f	; 63
    22c0:	f8 94       	cli
    22c2:	de bf       	out	0x3e, r29	; 62
    22c4:	0f be       	out	0x3f, r0	; 63
    22c6:	cd bf       	out	0x3d, r28	; 61
    22c8:	6d 83       	std	Y+5, r22	; 0x05
    22ca:	7e 83       	std	Y+6, r23	; 0x06
    22cc:	8f 83       	std	Y+7, r24	; 0x07
    22ce:	98 87       	std	Y+8, r25	; 0x08
	/*	Calculate UBRR Value	*/
	u32 loc_UBBR_val = ((F_OSC/(16*baud))-1);
    22d0:	8d 81       	ldd	r24, Y+5	; 0x05
    22d2:	9e 81       	ldd	r25, Y+6	; 0x06
    22d4:	af 81       	ldd	r26, Y+7	; 0x07
    22d6:	b8 85       	ldd	r27, Y+8	; 0x08
    22d8:	88 0f       	add	r24, r24
    22da:	99 1f       	adc	r25, r25
    22dc:	aa 1f       	adc	r26, r26
    22de:	bb 1f       	adc	r27, r27
    22e0:	88 0f       	add	r24, r24
    22e2:	99 1f       	adc	r25, r25
    22e4:	aa 1f       	adc	r26, r26
    22e6:	bb 1f       	adc	r27, r27
    22e8:	88 0f       	add	r24, r24
    22ea:	99 1f       	adc	r25, r25
    22ec:	aa 1f       	adc	r26, r26
    22ee:	bb 1f       	adc	r27, r27
    22f0:	88 0f       	add	r24, r24
    22f2:	99 1f       	adc	r25, r25
    22f4:	aa 1f       	adc	r26, r26
    22f6:	bb 1f       	adc	r27, r27
    22f8:	9c 01       	movw	r18, r24
    22fa:	ad 01       	movw	r20, r26
    22fc:	80 e0       	ldi	r24, 0x00	; 0
    22fe:	94 e2       	ldi	r25, 0x24	; 36
    2300:	a4 ef       	ldi	r26, 0xF4	; 244
    2302:	b0 e0       	ldi	r27, 0x00	; 0
    2304:	bc 01       	movw	r22, r24
    2306:	cd 01       	movw	r24, r26
    2308:	0e 94 83 19 	call	0x3306	; 0x3306 <__udivmodsi4>
    230c:	da 01       	movw	r26, r20
    230e:	c9 01       	movw	r24, r18
    2310:	01 97       	sbiw	r24, 0x01	; 1
    2312:	a1 09       	sbc	r26, r1
    2314:	b1 09       	sbc	r27, r1
    2316:	89 83       	std	Y+1, r24	; 0x01
    2318:	9a 83       	std	Y+2, r25	; 0x02
    231a:	ab 83       	std	Y+3, r26	; 0x03
    231c:	bc 83       	std	Y+4, r27	; 0x04
	/* Set baud rate */
	UART_UBRRH_REG = loc_UBBR_val>>8;
    231e:	e0 e4       	ldi	r30, 0x40	; 64
    2320:	f0 e0       	ldi	r31, 0x00	; 0
    2322:	89 81       	ldd	r24, Y+1	; 0x01
    2324:	9a 81       	ldd	r25, Y+2	; 0x02
    2326:	ab 81       	ldd	r26, Y+3	; 0x03
    2328:	bc 81       	ldd	r27, Y+4	; 0x04
    232a:	89 2f       	mov	r24, r25
    232c:	9a 2f       	mov	r25, r26
    232e:	ab 2f       	mov	r26, r27
    2330:	bb 27       	eor	r27, r27
    2332:	80 83       	st	Z, r24
	UART_UBRRL_REG = loc_UBBR_val;
    2334:	e9 e2       	ldi	r30, 0x29	; 41
    2336:	f0 e0       	ldi	r31, 0x00	; 0
    2338:	89 81       	ldd	r24, Y+1	; 0x01
    233a:	80 83       	st	Z, r24
	/* Enable receiver and transmitter */
	UART_UCSRB_REG = (1<<UART_RXEN_BIT)|(1<<UART_TXEN_BIT);
    233c:	ea e2       	ldi	r30, 0x2A	; 42
    233e:	f0 e0       	ldi	r31, 0x00	; 0
    2340:	88 e1       	ldi	r24, 0x18	; 24
    2342:	80 83       	st	Z, r24
	/* Set frame format: 8data, 2stop bit */
	UART_UCSRC_REG = (1<<UART_URSEL_BIT)|(1<<UART_USBS_BIT)|(3<<UART_UCSZ0_BIT);
    2344:	e0 e4       	ldi	r30, 0x40	; 64
    2346:	f0 e0       	ldi	r31, 0x00	; 0
    2348:	8e e8       	ldi	r24, 0x8E	; 142
    234a:	80 83       	st	Z, r24
}
    234c:	28 96       	adiw	r28, 0x08	; 8
    234e:	0f b6       	in	r0, 0x3f	; 63
    2350:	f8 94       	cli
    2352:	de bf       	out	0x3e, r29	; 62
    2354:	0f be       	out	0x3f, r0	; 63
    2356:	cd bf       	out	0x3d, r28	; 61
    2358:	cf 91       	pop	r28
    235a:	df 91       	pop	r29
    235c:	08 95       	ret

0000235e <USART_TransmitChar>:

void USART_TransmitChar(u8 data)
{
    235e:	df 93       	push	r29
    2360:	cf 93       	push	r28
    2362:	0f 92       	push	r0
    2364:	cd b7       	in	r28, 0x3d	; 61
    2366:	de b7       	in	r29, 0x3e	; 62
    2368:	89 83       	std	Y+1, r24	; 0x01
	/* Wait for empty transmit buffer */
	while (CHECK_BIT(UART_UCSRA_REG,UART_UDRE_BIT) == 0)
    236a:	eb e2       	ldi	r30, 0x2B	; 43
    236c:	f0 e0       	ldi	r31, 0x00	; 0
    236e:	80 81       	ld	r24, Z
    2370:	82 95       	swap	r24
    2372:	86 95       	lsr	r24
    2374:	87 70       	andi	r24, 0x07	; 7
    2376:	88 2f       	mov	r24, r24
    2378:	90 e0       	ldi	r25, 0x00	; 0
    237a:	81 70       	andi	r24, 0x01	; 1
    237c:	90 70       	andi	r25, 0x00	; 0
    237e:	00 97       	sbiw	r24, 0x00	; 0
    2380:	a1 f3       	breq	.-24     	; 0x236a <USART_TransmitChar+0xc>
	{
		;
	}
		/* Put data into buffer, sends the data */
	UART_UDR_REG = data;
    2382:	ec e2       	ldi	r30, 0x2C	; 44
    2384:	f0 e0       	ldi	r31, 0x00	; 0
    2386:	89 81       	ldd	r24, Y+1	; 0x01
    2388:	80 83       	st	Z, r24
}
    238a:	0f 90       	pop	r0
    238c:	cf 91       	pop	r28
    238e:	df 91       	pop	r29
    2390:	08 95       	ret

00002392 <USART_Receive_Blocking>:

u8 USART_Receive_Blocking(void)
{
    2392:	df 93       	push	r29
    2394:	cf 93       	push	r28
    2396:	cd b7       	in	r28, 0x3d	; 61
    2398:	de b7       	in	r29, 0x3e	; 62
	/* Wait for data to be received */
	while (CHECK_BIT(UART_UCSRA_REG,UART_RXC_BIT) == 0)
    239a:	eb e2       	ldi	r30, 0x2B	; 43
    239c:	f0 e0       	ldi	r31, 0x00	; 0
    239e:	80 81       	ld	r24, Z
    23a0:	88 23       	and	r24, r24
    23a2:	dc f7       	brge	.-10     	; 0x239a <USART_Receive_Blocking+0x8>
	{
		;
	}
	/* Get and return received data from buffer */
	return UART_UDR_REG;
    23a4:	ec e2       	ldi	r30, 0x2C	; 44
    23a6:	f0 e0       	ldi	r31, 0x00	; 0
    23a8:	80 81       	ld	r24, Z
}
    23aa:	cf 91       	pop	r28
    23ac:	df 91       	pop	r29
    23ae:	08 95       	ret

000023b0 <USART_Receive_NonBlocking>:
u8 USART_Receive_NonBlocking(void)
{
    23b0:	df 93       	push	r29
    23b2:	cf 93       	push	r28
    23b4:	0f 92       	push	r0
    23b6:	cd b7       	in	r28, 0x3d	; 61
    23b8:	de b7       	in	r29, 0x3e	; 62
	/* Wait for data to be received */
	if (CHECK_BIT(UART_UCSRA_REG,UART_RXC_BIT) == 1)
    23ba:	eb e2       	ldi	r30, 0x2B	; 43
    23bc:	f0 e0       	ldi	r31, 0x00	; 0
    23be:	80 81       	ld	r24, Z
    23c0:	88 1f       	adc	r24, r24
    23c2:	88 27       	eor	r24, r24
    23c4:	88 1f       	adc	r24, r24
    23c6:	81 30       	cpi	r24, 0x01	; 1
    23c8:	29 f4       	brne	.+10     	; 0x23d4 <USART_Receive_NonBlocking+0x24>
	{
		/* Get and return received data from buffer */
		return UART_UDR_REG;
    23ca:	ec e2       	ldi	r30, 0x2C	; 44
    23cc:	f0 e0       	ldi	r31, 0x00	; 0
    23ce:	80 81       	ld	r24, Z
    23d0:	89 83       	std	Y+1, r24	; 0x01
    23d2:	01 c0       	rjmp	.+2      	; 0x23d6 <USART_Receive_NonBlocking+0x26>
	}
	else
	{
		return 0;
    23d4:	19 82       	std	Y+1, r1	; 0x01
    23d6:	89 81       	ldd	r24, Y+1	; 0x01
	}

}
    23d8:	0f 90       	pop	r0
    23da:	cf 91       	pop	r28
    23dc:	df 91       	pop	r29
    23de:	08 95       	ret

000023e0 <USART_TransmitStr>:
void USART_TransmitStr(u8 *str)
{
    23e0:	df 93       	push	r29
    23e2:	cf 93       	push	r28
    23e4:	00 d0       	rcall	.+0      	; 0x23e6 <USART_TransmitStr+0x6>
    23e6:	cd b7       	in	r28, 0x3d	; 61
    23e8:	de b7       	in	r29, 0x3e	; 62
    23ea:	9a 83       	std	Y+2, r25	; 0x02
    23ec:	89 83       	std	Y+1, r24	; 0x01
    23ee:	0a c0       	rjmp	.+20     	; 0x2404 <USART_TransmitStr+0x24>
	while (*str != '\0')
	{
		USART_TransmitChar(*str);
    23f0:	e9 81       	ldd	r30, Y+1	; 0x01
    23f2:	fa 81       	ldd	r31, Y+2	; 0x02
    23f4:	80 81       	ld	r24, Z
    23f6:	0e 94 af 11 	call	0x235e	; 0x235e <USART_TransmitChar>
		str++;
    23fa:	89 81       	ldd	r24, Y+1	; 0x01
    23fc:	9a 81       	ldd	r25, Y+2	; 0x02
    23fe:	01 96       	adiw	r24, 0x01	; 1
    2400:	9a 83       	std	Y+2, r25	; 0x02
    2402:	89 83       	std	Y+1, r24	; 0x01
	}

}
void USART_TransmitStr(u8 *str)
{
	while (*str != '\0')
    2404:	e9 81       	ldd	r30, Y+1	; 0x01
    2406:	fa 81       	ldd	r31, Y+2	; 0x02
    2408:	80 81       	ld	r24, Z
    240a:	88 23       	and	r24, r24
    240c:	89 f7       	brne	.-30     	; 0x23f0 <USART_TransmitStr+0x10>
	{
		USART_TransmitChar(*str);
		str++;
	}
}
    240e:	0f 90       	pop	r0
    2410:	0f 90       	pop	r0
    2412:	cf 91       	pop	r28
    2414:	df 91       	pop	r29
    2416:	08 95       	ret

00002418 <USART_Receive_InterruptEnable>:
void USART_Receive_InterruptEnable(void)
{
    2418:	df 93       	push	r29
    241a:	cf 93       	push	r28
    241c:	cd b7       	in	r28, 0x3d	; 61
    241e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(UART_UCSRB_REG,UART_RXCIE_BIT);
    2420:	aa e2       	ldi	r26, 0x2A	; 42
    2422:	b0 e0       	ldi	r27, 0x00	; 0
    2424:	ea e2       	ldi	r30, 0x2A	; 42
    2426:	f0 e0       	ldi	r31, 0x00	; 0
    2428:	80 81       	ld	r24, Z
    242a:	80 68       	ori	r24, 0x80	; 128
    242c:	8c 93       	st	X, r24
}
    242e:	cf 91       	pop	r28
    2430:	df 91       	pop	r29
    2432:	08 95       	ret

00002434 <Timer0_vidInit>:

#include "Timer0.h"

void Timer0_vidInit(void)
{
    2434:	df 93       	push	r29
    2436:	cf 93       	push	r28
    2438:	cd b7       	in	r28, 0x3d	; 61
    243a:	de b7       	in	r29, 0x3e	; 62

}
    243c:	cf 91       	pop	r28
    243e:	df 91       	pop	r29
    2440:	08 95       	ret

00002442 <Timer0_vidSetPreload>:

void Timer0_vidSetPreload(u8 preload)
{
    2442:	df 93       	push	r29
    2444:	cf 93       	push	r28
    2446:	0f 92       	push	r0
    2448:	cd b7       	in	r28, 0x3d	; 61
    244a:	de b7       	in	r29, 0x3e	; 62
    244c:	89 83       	std	Y+1, r24	; 0x01

}
    244e:	0f 90       	pop	r0
    2450:	cf 91       	pop	r28
    2452:	df 91       	pop	r29
    2454:	08 95       	ret

00002456 <Timer0_vidTimerStart>:

void Timer0_vidTimerStart(timer0_clk_t clk)
{
    2456:	df 93       	push	r29
    2458:	cf 93       	push	r28
    245a:	0f 92       	push	r0
    245c:	cd b7       	in	r28, 0x3d	; 61
    245e:	de b7       	in	r29, 0x3e	; 62
    2460:	89 83       	std	Y+1, r24	; 0x01

}
    2462:	0f 90       	pop	r0
    2464:	cf 91       	pop	r28
    2466:	df 91       	pop	r29
    2468:	08 95       	ret

0000246a <Timer0_vidTimerStop>:

void Timer0_vidTimerStop(void)
{
    246a:	df 93       	push	r29
    246c:	cf 93       	push	r28
    246e:	cd b7       	in	r28, 0x3d	; 61
    2470:	de b7       	in	r29, 0x3e	; 62

}
    2472:	cf 91       	pop	r28
    2474:	df 91       	pop	r29
    2476:	08 95       	ret

00002478 <Timer0_vidEnableOVInterrupt>:

void Timer0_vidEnableOVInterrupt(void)
{
    2478:	df 93       	push	r29
    247a:	cf 93       	push	r28
    247c:	cd b7       	in	r28, 0x3d	; 61
    247e:	de b7       	in	r29, 0x3e	; 62

}
    2480:	cf 91       	pop	r28
    2482:	df 91       	pop	r29
    2484:	08 95       	ret

00002486 <Timer0_vidDisableOVInterrupt>:
void Timer0_vidDisableOVInterrupt(void)
{
    2486:	df 93       	push	r29
    2488:	cf 93       	push	r28
    248a:	cd b7       	in	r28, 0x3d	; 61
    248c:	de b7       	in	r29, 0x3e	; 62

}
    248e:	cf 91       	pop	r28
    2490:	df 91       	pop	r29
    2492:	08 95       	ret

00002494 <Spi_vidMasterInit>:
 *
 *************************************************/
#include "Spi.h"

void Spi_vidMasterInit(void)
{
    2494:	df 93       	push	r29
    2496:	cf 93       	push	r28
    2498:	cd b7       	in	r28, 0x3d	; 61
    249a:	de b7       	in	r29, 0x3e	; 62
	/*	configure SPI MOSI Pin as output	*/
	Dio_vidconfigChanel(DIO_PORTB, DIO_PIN5, DIO_OUTPUT);
    249c:	81 e0       	ldi	r24, 0x01	; 1
    249e:	65 e0       	ldi	r22, 0x05	; 5
    24a0:	41 e0       	ldi	r20, 0x01	; 1
    24a2:	0e 94 3c 15 	call	0x2a78	; 0x2a78 <Dio_vidconfigChanel>
	/*	configure SPI SS Pin as output	*/
	Dio_vidconfigChanel(DIO_PORTB, DIO_PIN4, DIO_OUTPUT);
    24a6:	81 e0       	ldi	r24, 0x01	; 1
    24a8:	64 e0       	ldi	r22, 0x04	; 4
    24aa:	41 e0       	ldi	r20, 0x01	; 1
    24ac:	0e 94 3c 15 	call	0x2a78	; 0x2a78 <Dio_vidconfigChanel>
	/*	configure SPI SCK Pin as output	*/
	Dio_vidconfigChanel(DIO_PORTB, DIO_PIN7, DIO_OUTPUT);
    24b0:	81 e0       	ldi	r24, 0x01	; 1
    24b2:	67 e0       	ldi	r22, 0x07	; 7
    24b4:	41 e0       	ldi	r20, 0x01	; 1
    24b6:	0e 94 3c 15 	call	0x2a78	; 0x2a78 <Dio_vidconfigChanel>
	/*	configure SPI MISO Pin as input	*/
	Dio_vidconfigChanel(DIO_PORTB, DIO_PIN6, DIO_INPUT);
    24ba:	81 e0       	ldi	r24, 0x01	; 1
    24bc:	66 e0       	ldi	r22, 0x06	; 6
    24be:	40 e0       	ldi	r20, 0x00	; 0
    24c0:	0e 94 3c 15 	call	0x2a78	; 0x2a78 <Dio_vidconfigChanel>
	/*	initialize SPI SS pin with HIGH (No slave selected) */
	Dio_vidwriteChanel(DIO_PORTB, DIO_PIN4, DIO_HIGH);
    24c4:	81 e0       	ldi	r24, 0x01	; 1
    24c6:	64 e0       	ldi	r22, 0x04	; 4
    24c8:	41 e0       	ldi	r20, 0x01	; 1
    24ca:	0e 94 1f 16 	call	0x2c3e	; 0x2c3e <Dio_vidwriteChanel>
	/*	enable SPI Module	*/
	SET_BIT(SPI_SPCR_REG,SPI_SPE_BIT_NO);
    24ce:	ad e2       	ldi	r26, 0x2D	; 45
    24d0:	b0 e0       	ldi	r27, 0x00	; 0
    24d2:	ed e2       	ldi	r30, 0x2D	; 45
    24d4:	f0 e0       	ldi	r31, 0x00	; 0
    24d6:	80 81       	ld	r24, Z
    24d8:	80 64       	ori	r24, 0x40	; 64
    24da:	8c 93       	st	X, r24
	/*	enable SPI Module in Master mode	*/
	SET_BIT(SPI_SPCR_REG,SPI_MSTR_BIT_NO);
    24dc:	ad e2       	ldi	r26, 0x2D	; 45
    24de:	b0 e0       	ldi	r27, 0x00	; 0
    24e0:	ed e2       	ldi	r30, 0x2D	; 45
    24e2:	f0 e0       	ldi	r31, 0x00	; 0
    24e4:	80 81       	ld	r24, Z
    24e6:	80 61       	ori	r24, 0x10	; 16
    24e8:	8c 93       	st	X, r24
	/*	set SCK frequency by F_CPU/16	*/
	/*	Set SPI Speed	1MHZ*/
	SPI_SPCR_REG |= SPI_SCK_FREQ_FCPU_DIV_16;
    24ea:	ad e2       	ldi	r26, 0x2D	; 45
    24ec:	b0 e0       	ldi	r27, 0x00	; 0
    24ee:	ed e2       	ldi	r30, 0x2D	; 45
    24f0:	f0 e0       	ldi	r31, 0x00	; 0
    24f2:	80 81       	ld	r24, Z
    24f4:	81 60       	ori	r24, 0x01	; 1
    24f6:	8c 93       	st	X, r24
}
    24f8:	cf 91       	pop	r28
    24fa:	df 91       	pop	r29
    24fc:	08 95       	ret

000024fe <Spi_vidSlaveInit>:

void Spi_vidSlaveInit(void)
{
    24fe:	df 93       	push	r29
    2500:	cf 93       	push	r28
    2502:	cd b7       	in	r28, 0x3d	; 61
    2504:	de b7       	in	r29, 0x3e	; 62
	/*	configure SPI MOSI Pin as input	*/
	Dio_vidconfigChanel(DIO_PORTB, DIO_PIN5, DIO_INPUT);
    2506:	81 e0       	ldi	r24, 0x01	; 1
    2508:	65 e0       	ldi	r22, 0x05	; 5
    250a:	40 e0       	ldi	r20, 0x00	; 0
    250c:	0e 94 3c 15 	call	0x2a78	; 0x2a78 <Dio_vidconfigChanel>
	/*	configure SPI SS Pin as input	*/
	Dio_vidconfigChanel(DIO_PORTB, DIO_PIN4, DIO_INPUT);
    2510:	81 e0       	ldi	r24, 0x01	; 1
    2512:	64 e0       	ldi	r22, 0x04	; 4
    2514:	40 e0       	ldi	r20, 0x00	; 0
    2516:	0e 94 3c 15 	call	0x2a78	; 0x2a78 <Dio_vidconfigChanel>
	/*	configure SPI SCK Pin as input	*/
	Dio_vidconfigChanel(DIO_PORTB, DIO_PIN7, DIO_INPUT);
    251a:	81 e0       	ldi	r24, 0x01	; 1
    251c:	67 e0       	ldi	r22, 0x07	; 7
    251e:	40 e0       	ldi	r20, 0x00	; 0
    2520:	0e 94 3c 15 	call	0x2a78	; 0x2a78 <Dio_vidconfigChanel>
	/*	configure SPI MISO Pin as output	*/
	Dio_vidconfigChanel(DIO_PORTB, DIO_PIN6, DIO_OUTPUT);
    2524:	81 e0       	ldi	r24, 0x01	; 1
    2526:	66 e0       	ldi	r22, 0x06	; 6
    2528:	41 e0       	ldi	r20, 0x01	; 1
    252a:	0e 94 3c 15 	call	0x2a78	; 0x2a78 <Dio_vidconfigChanel>
	/*	enable SPI Module	*/
	SET_BIT(SPI_SPCR_REG,SPI_SPE_BIT_NO);
    252e:	ad e2       	ldi	r26, 0x2D	; 45
    2530:	b0 e0       	ldi	r27, 0x00	; 0
    2532:	ed e2       	ldi	r30, 0x2D	; 45
    2534:	f0 e0       	ldi	r31, 0x00	; 0
    2536:	80 81       	ld	r24, Z
    2538:	80 64       	ori	r24, 0x40	; 64
    253a:	8c 93       	st	X, r24
	/*	enable SPI Module in Slave mode	*/
	CLEAR_BIT(SPI_SPCR_REG,SPI_MSTR_BIT_NO);
    253c:	ad e2       	ldi	r26, 0x2D	; 45
    253e:	b0 e0       	ldi	r27, 0x00	; 0
    2540:	ed e2       	ldi	r30, 0x2D	; 45
    2542:	f0 e0       	ldi	r31, 0x00	; 0
    2544:	80 81       	ld	r24, Z
    2546:	8f 7e       	andi	r24, 0xEF	; 239
    2548:	8c 93       	st	X, r24
}
    254a:	cf 91       	pop	r28
    254c:	df 91       	pop	r29
    254e:	08 95       	ret

00002550 <Spi_MasterWrite>:

void Spi_MasterWrite(u8 data)
{
    2550:	df 93       	push	r29
    2552:	cf 93       	push	r28
    2554:	00 d0       	rcall	.+0      	; 0x2556 <Spi_MasterWrite+0x6>
    2556:	cd b7       	in	r28, 0x3d	; 61
    2558:	de b7       	in	r29, 0x3e	; 62
    255a:	8a 83       	std	Y+2, r24	; 0x02
	u8 loc_flush_byte;
	/*	load SPI data register with a byte to send	*/
	SPI_SPDR_REG = data;
    255c:	ef e2       	ldi	r30, 0x2F	; 47
    255e:	f0 e0       	ldi	r31, 0x00	; 0
    2560:	8a 81       	ldd	r24, Y+2	; 0x02
    2562:	80 83       	st	Z, r24
	/*	wait until byte sent	*/
	while(CHECK_BIT(SPI_SPSR_REG,SPI_SPIF_BIT_NO) == 0)
    2564:	ee e2       	ldi	r30, 0x2E	; 46
    2566:	f0 e0       	ldi	r31, 0x00	; 0
    2568:	80 81       	ld	r24, Z
    256a:	88 23       	and	r24, r24
    256c:	dc f7       	brge	.-10     	; 0x2564 <Spi_MasterWrite+0x14>
	{
		;
	}
	loc_flush_byte = SPI_SPDR_REG;
    256e:	ef e2       	ldi	r30, 0x2F	; 47
    2570:	f0 e0       	ldi	r31, 0x00	; 0
    2572:	80 81       	ld	r24, Z
    2574:	89 83       	std	Y+1, r24	; 0x01
}
    2576:	0f 90       	pop	r0
    2578:	0f 90       	pop	r0
    257a:	cf 91       	pop	r28
    257c:	df 91       	pop	r29
    257e:	08 95       	ret

00002580 <Spi_u8MasterRead>:

u8 Spi_u8MasterRead(void)
{
    2580:	df 93       	push	r29
    2582:	cf 93       	push	r28
    2584:	0f 92       	push	r0
    2586:	cd b7       	in	r28, 0x3d	; 61
    2588:	de b7       	in	r29, 0x3e	; 62
	u8 loc_dummy_byte=0xFF;
    258a:	8f ef       	ldi	r24, 0xFF	; 255
    258c:	89 83       	std	Y+1, r24	; 0x01
	/*	load SPI data register with a byte to send	*/
	SPI_SPDR_REG = loc_dummy_byte;
    258e:	ef e2       	ldi	r30, 0x2F	; 47
    2590:	f0 e0       	ldi	r31, 0x00	; 0
    2592:	89 81       	ldd	r24, Y+1	; 0x01
    2594:	80 83       	st	Z, r24
	/*	wait until byte received	*/
	while(CHECK_BIT(SPI_SPSR_REG,SPI_SPIF_BIT_NO) == 0)
    2596:	ee e2       	ldi	r30, 0x2E	; 46
    2598:	f0 e0       	ldi	r31, 0x00	; 0
    259a:	80 81       	ld	r24, Z
    259c:	88 23       	and	r24, r24
    259e:	dc f7       	brge	.-10     	; 0x2596 <Spi_u8MasterRead+0x16>
	{
		;
	}
		/*	read the data register	*/
	return SPI_SPDR_REG;
    25a0:	ef e2       	ldi	r30, 0x2F	; 47
    25a2:	f0 e0       	ldi	r31, 0x00	; 0
    25a4:	80 81       	ld	r24, Z
}
    25a6:	0f 90       	pop	r0
    25a8:	cf 91       	pop	r28
    25aa:	df 91       	pop	r29
    25ac:	08 95       	ret

000025ae <Spi_u8MasterTranseve>:

u8 Spi_u8MasterTranseve(u8 data)
{
    25ae:	df 93       	push	r29
    25b0:	cf 93       	push	r28
    25b2:	0f 92       	push	r0
    25b4:	cd b7       	in	r28, 0x3d	; 61
    25b6:	de b7       	in	r29, 0x3e	; 62
    25b8:	89 83       	std	Y+1, r24	; 0x01
	/*	load SPI data register with a byte to send	*/
	SPI_SPDR_REG = data;
    25ba:	ef e2       	ldi	r30, 0x2F	; 47
    25bc:	f0 e0       	ldi	r31, 0x00	; 0
    25be:	89 81       	ldd	r24, Y+1	; 0x01
    25c0:	80 83       	st	Z, r24
	/*	wait until byte sent	*/
	while(CHECK_BIT(SPI_SPSR_REG,SPI_SPIF_BIT_NO) == 0)
    25c2:	ee e2       	ldi	r30, 0x2E	; 46
    25c4:	f0 e0       	ldi	r31, 0x00	; 0
    25c6:	80 81       	ld	r24, Z
    25c8:	88 23       	and	r24, r24
    25ca:	dc f7       	brge	.-10     	; 0x25c2 <Spi_u8MasterTranseve+0x14>
	{
		;
	}
	/*	flush the data register	*/
	return SPI_SPDR_REG;
    25cc:	ef e2       	ldi	r30, 0x2F	; 47
    25ce:	f0 e0       	ldi	r31, 0x00	; 0
    25d0:	80 81       	ld	r24, Z
}
    25d2:	0f 90       	pop	r0
    25d4:	cf 91       	pop	r28
    25d6:	df 91       	pop	r29
    25d8:	08 95       	ret

000025da <Spi_u8SlaveRead>:

u8 Spi_u8SlaveRead(void)
{
    25da:	df 93       	push	r29
    25dc:	cf 93       	push	r28
    25de:	cd b7       	in	r28, 0x3d	; 61
    25e0:	de b7       	in	r29, 0x3e	; 62
	/*	wait until byte received	*/
	while(CHECK_BIT(SPI_SPSR_REG,SPI_SPIF_BIT_NO) == 0)
    25e2:	ee e2       	ldi	r30, 0x2E	; 46
    25e4:	f0 e0       	ldi	r31, 0x00	; 0
    25e6:	80 81       	ld	r24, Z
    25e8:	88 23       	and	r24, r24
    25ea:	dc f7       	brge	.-10     	; 0x25e2 <Spi_u8SlaveRead+0x8>
	{
		;
	}
		/*	read the data register	*/
	return SPI_SPDR_REG;
    25ec:	ef e2       	ldi	r30, 0x2F	; 47
    25ee:	f0 e0       	ldi	r31, 0x00	; 0
    25f0:	80 81       	ld	r24, Z
}
    25f2:	cf 91       	pop	r28
    25f4:	df 91       	pop	r29
    25f6:	08 95       	ret

000025f8 <Spi_vidSlaveWrite>:

void Spi_vidSlaveWrite(u8 data)
{
    25f8:	df 93       	push	r29
    25fa:	cf 93       	push	r28
    25fc:	0f 92       	push	r0
    25fe:	cd b7       	in	r28, 0x3d	; 61
    2600:	de b7       	in	r29, 0x3e	; 62
    2602:	89 83       	std	Y+1, r24	; 0x01
	SPI_SPDR_REG = data;
    2604:	ef e2       	ldi	r30, 0x2F	; 47
    2606:	f0 e0       	ldi	r31, 0x00	; 0
    2608:	89 81       	ldd	r24, Y+1	; 0x01
    260a:	80 83       	st	Z, r24
}
    260c:	0f 90       	pop	r0
    260e:	cf 91       	pop	r28
    2610:	df 91       	pop	r29
    2612:	08 95       	ret

00002614 <I2C_MasterInit>:
 *
 ***********************************************/
#include "I2c.h"

void I2C_MasterInit(void)
{
    2614:	df 93       	push	r29
    2616:	cf 93       	push	r28
    2618:	cd b7       	in	r28, 0x3d	; 61
    261a:	de b7       	in	r29, 0x3e	; 62
    /* Bit Rate: 400 KHZ */
	I2C_TWBR_REG=0x0C;
    261c:	e0 e2       	ldi	r30, 0x20	; 32
    261e:	f0 e0       	ldi	r31, 0x00	; 0
    2620:	8c e0       	ldi	r24, 0x0C	; 12
    2622:	80 83       	st	Z, r24
    /* enable I2C Module	*/
	/* enable ACK check	*/
	I2C_TWCR_REG |=I2C_ENABLE|I2C_ENABLE_ACK;
    2624:	a6 e5       	ldi	r26, 0x56	; 86
    2626:	b0 e0       	ldi	r27, 0x00	; 0
    2628:	e6 e5       	ldi	r30, 0x56	; 86
    262a:	f0 e0       	ldi	r31, 0x00	; 0
    262c:	80 81       	ld	r24, Z
    262e:	84 64       	ori	r24, 0x44	; 68
    2630:	8c 93       	st	X, r24
}
    2632:	cf 91       	pop	r28
    2634:	df 91       	pop	r29
    2636:	08 95       	ret

00002638 <I2C_SlaveInit>:

void I2C_SlaveInit(u8 addr)
{
    2638:	df 93       	push	r29
    263a:	cf 93       	push	r28
    263c:	0f 92       	push	r0
    263e:	cd b7       	in	r28, 0x3d	; 61
    2640:	de b7       	in	r29, 0x3e	; 62
    2642:	89 83       	std	Y+1, r24	; 0x01
	/*	enable general call response in slave mode	*/
	SET_BIT(I2C_TWAR_REG,I2C_SLAVE_RESPONSE_BIT_NO);
    2644:	a2 e2       	ldi	r26, 0x22	; 34
    2646:	b0 e0       	ldi	r27, 0x00	; 0
    2648:	e2 e2       	ldi	r30, 0x22	; 34
    264a:	f0 e0       	ldi	r31, 0x00	; 0
    264c:	80 81       	ld	r24, Z
    264e:	81 60       	ori	r24, 0x01	; 1
    2650:	8c 93       	st	X, r24
    /* I2C Bus Slave Address	*/
	I2C_TWAR_REG |= (addr<<1);
    2652:	a2 e2       	ldi	r26, 0x22	; 34
    2654:	b0 e0       	ldi	r27, 0x00	; 0
    2656:	e2 e2       	ldi	r30, 0x22	; 34
    2658:	f0 e0       	ldi	r31, 0x00	; 0
    265a:	80 81       	ld	r24, Z
    265c:	28 2f       	mov	r18, r24
    265e:	89 81       	ldd	r24, Y+1	; 0x01
    2660:	88 2f       	mov	r24, r24
    2662:	90 e0       	ldi	r25, 0x00	; 0
    2664:	88 0f       	add	r24, r24
    2666:	99 1f       	adc	r25, r25
    2668:	82 2b       	or	r24, r18
    266a:	8c 93       	st	X, r24
    /* enable I2C Module	*/
	/*	enable ACK check	*/
	I2C_TWCR_REG |=I2C_ENABLE|I2C_ENABLE_ACK;
    266c:	a6 e5       	ldi	r26, 0x56	; 86
    266e:	b0 e0       	ldi	r27, 0x00	; 0
    2670:	e6 e5       	ldi	r30, 0x56	; 86
    2672:	f0 e0       	ldi	r31, 0x00	; 0
    2674:	80 81       	ld	r24, Z
    2676:	84 64       	ori	r24, 0x44	; 68
    2678:	8c 93       	st	X, r24
}
    267a:	0f 90       	pop	r0
    267c:	cf 91       	pop	r28
    267e:	df 91       	pop	r29
    2680:	08 95       	ret

00002682 <I2C_StartCondition>:
boolean I2C_StartCondition(void)
{
    2682:	df 93       	push	r29
    2684:	cf 93       	push	r28
    2686:	0f 92       	push	r0
    2688:	cd b7       	in	r28, 0x3d	; 61
    268a:	de b7       	in	r29, 0x3e	; 62
	/*	send start condition	*/
	I2C_TWCR_REG = I2C_INTERRUPT_FLAG|I2C_START_COND;
    268c:	e6 e5       	ldi	r30, 0x56	; 86
    268e:	f0 e0       	ldi	r31, 0x00	; 0
    2690:	80 ea       	ldi	r24, 0xA0	; 160
    2692:	80 83       	st	Z, r24
    /*	Wait until start condition sent successfully	*/
    while (CHECK_BIT(I2C_TWCR_REG,I2C_INTERRUPT_FLAG_BIT_NO)==0)
    2694:	e6 e5       	ldi	r30, 0x56	; 86
    2696:	f0 e0       	ldi	r31, 0x00	; 0
    2698:	80 81       	ld	r24, Z
    269a:	88 23       	and	r24, r24
    269c:	dc f7       	brge	.-10     	; 0x2694 <I2C_StartCondition+0x12>
    {
    	/*Do Nothing */
    	   ;
    }

    if (I2C_ReadStatus() != I2C_START_ACK)
    269e:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <I2C_ReadStatus>
    26a2:	88 30       	cpi	r24, 0x08	; 8
    26a4:	11 f0       	breq	.+4      	; 0x26aa <I2C_StartCondition+0x28>
    {
    	return FALSE;
    26a6:	19 82       	std	Y+1, r1	; 0x01
    26a8:	02 c0       	rjmp	.+4      	; 0x26ae <I2C_StartCondition+0x2c>
    }
    else
    {
    	/*	Do Nothing	*/
    }
    return TRUE;
    26aa:	81 e0       	ldi	r24, 0x01	; 1
    26ac:	89 83       	std	Y+1, r24	; 0x01
    26ae:	89 81       	ldd	r24, Y+1	; 0x01
}
    26b0:	0f 90       	pop	r0
    26b2:	cf 91       	pop	r28
    26b4:	df 91       	pop	r29
    26b6:	08 95       	ret

000026b8 <I2C_RepeatedStartCondition>:
boolean I2C_RepeatedStartCondition(void)
{
    26b8:	df 93       	push	r29
    26ba:	cf 93       	push	r28
    26bc:	0f 92       	push	r0
    26be:	cd b7       	in	r28, 0x3d	; 61
    26c0:	de b7       	in	r29, 0x3e	; 62
	/*	send start condition	*/
	I2C_TWCR_REG |= I2C_INTERRUPT_FLAG|I2C_START_COND;
    26c2:	a6 e5       	ldi	r26, 0x56	; 86
    26c4:	b0 e0       	ldi	r27, 0x00	; 0
    26c6:	e6 e5       	ldi	r30, 0x56	; 86
    26c8:	f0 e0       	ldi	r31, 0x00	; 0
    26ca:	80 81       	ld	r24, Z
    26cc:	80 6a       	ori	r24, 0xA0	; 160
    26ce:	8c 93       	st	X, r24
    /*	Wait until start condition sent successfully	*/
    while (CHECK_BIT(I2C_TWCR_REG,I2C_INTERRUPT_FLAG_BIT_NO)==0)
    26d0:	e6 e5       	ldi	r30, 0x56	; 86
    26d2:	f0 e0       	ldi	r31, 0x00	; 0
    26d4:	80 81       	ld	r24, Z
    26d6:	88 23       	and	r24, r24
    26d8:	dc f7       	brge	.-10     	; 0x26d0 <I2C_RepeatedStartCondition+0x18>
    {
    	/*Do Nothing */
    	   ;
    }
    if (I2C_ReadStatus() != I2C_REP_START_ACK)
    26da:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <I2C_ReadStatus>
    26de:	80 31       	cpi	r24, 0x10	; 16
    26e0:	11 f0       	breq	.+4      	; 0x26e6 <I2C_RepeatedStartCondition+0x2e>
    {
    	return FALSE;
    26e2:	19 82       	std	Y+1, r1	; 0x01
    26e4:	02 c0       	rjmp	.+4      	; 0x26ea <I2C_RepeatedStartCondition+0x32>
    }
    else
    {
    	/*	Do Nothing	*/
    }
    return TRUE;
    26e6:	81 e0       	ldi	r24, 0x01	; 1
    26e8:	89 83       	std	Y+1, r24	; 0x01
    26ea:	89 81       	ldd	r24, Y+1	; 0x01
}
    26ec:	0f 90       	pop	r0
    26ee:	cf 91       	pop	r28
    26f0:	df 91       	pop	r29
    26f2:	08 95       	ret

000026f4 <I2C_StopCondition>:
void I2C_StopCondition(void)
{
    26f4:	df 93       	push	r29
    26f6:	cf 93       	push	r28
    26f8:	cd b7       	in	r28, 0x3d	; 61
    26fa:	de b7       	in	r29, 0x3e	; 62
	/*	send stop condition	*/
	I2C_TWCR_REG |= I2C_INTERRUPT_FLAG|I2C_STOP_COND;
    26fc:	a6 e5       	ldi	r26, 0x56	; 86
    26fe:	b0 e0       	ldi	r27, 0x00	; 0
    2700:	e6 e5       	ldi	r30, 0x56	; 86
    2702:	f0 e0       	ldi	r31, 0x00	; 0
    2704:	80 81       	ld	r24, Z
    2706:	80 69       	ori	r24, 0x90	; 144
    2708:	8c 93       	st	X, r24
	/*	Wait until start condition sent successfully	*/
    while (CHECK_BIT(I2C_TWCR_REG,I2C_INTERRUPT_FLAG_BIT_NO)==0)
    270a:	e6 e5       	ldi	r30, 0x56	; 86
    270c:	f0 e0       	ldi	r31, 0x00	; 0
    270e:	80 81       	ld	r24, Z
    2710:	88 23       	and	r24, r24
    2712:	dc f7       	brge	.-10     	; 0x270a <I2C_StopCondition+0x16>
    {
    	/*Do Nothing */
    	   ;
    }

}
    2714:	cf 91       	pop	r28
    2716:	df 91       	pop	r29
    2718:	08 95       	ret

0000271a <I2C_WriteByte>:
void I2C_WriteByte(u8 data)
{
    271a:	df 93       	push	r29
    271c:	cf 93       	push	r28
    271e:	0f 92       	push	r0
    2720:	cd b7       	in	r28, 0x3d	; 61
    2722:	de b7       	in	r29, 0x3e	; 62
    2724:	89 83       	std	Y+1, r24	; 0x01
    /*clear flag	*/
	I2C_TWCR_REG |= I2C_INTERRUPT_FLAG;
    2726:	a6 e5       	ldi	r26, 0x56	; 86
    2728:	b0 e0       	ldi	r27, 0x00	; 0
    272a:	e6 e5       	ldi	r30, 0x56	; 86
    272c:	f0 e0       	ldi	r31, 0x00	; 0
    272e:	80 81       	ld	r24, Z
    2730:	80 68       	ori	r24, 0x80	; 128
    2732:	8c 93       	st	X, r24

    /*	Put data On I2C data Register	*/
	I2C_TWDR_REG = data;
    2734:	e3 e2       	ldi	r30, 0x23	; 35
    2736:	f0 e0       	ldi	r31, 0x00	; 0
    2738:	89 81       	ldd	r24, Y+1	; 0x01
    273a:	80 83       	st	Z, r24

	/*	Wait until data sent successfully	*/
    while (CHECK_BIT(I2C_TWCR_REG,I2C_INTERRUPT_FLAG_BIT_NO)==0)
    273c:	e6 e5       	ldi	r30, 0x56	; 86
    273e:	f0 e0       	ldi	r31, 0x00	; 0
    2740:	80 81       	ld	r24, Z
    2742:	88 23       	and	r24, r24
    2744:	dc f7       	brge	.-10     	; 0x273c <I2C_WriteByte+0x22>
    {
    	/*Do Nothing */
    	   ;
    }
}
    2746:	0f 90       	pop	r0
    2748:	cf 91       	pop	r28
    274a:	df 91       	pop	r29
    274c:	08 95       	ret

0000274e <I2C_Send_SlaveAddressWriteOperation>:
boolean I2C_Send_SlaveAddressWriteOperation(u8 addr)
{
    274e:	df 93       	push	r29
    2750:	cf 93       	push	r28
    2752:	00 d0       	rcall	.+0      	; 0x2754 <I2C_Send_SlaveAddressWriteOperation+0x6>
    2754:	0f 92       	push	r0
    2756:	cd b7       	in	r28, 0x3d	; 61
    2758:	de b7       	in	r29, 0x3e	; 62
    275a:	8a 83       	std	Y+2, r24	; 0x02
	u8 loc_addrWrite=0;
    275c:	19 82       	std	Y+1, r1	; 0x01
	loc_addrWrite=(addr<<1);
    275e:	8a 81       	ldd	r24, Y+2	; 0x02
    2760:	88 0f       	add	r24, r24
    2762:	89 83       	std	Y+1, r24	; 0x01
	I2C_WriteByte(loc_addrWrite);
    2764:	89 81       	ldd	r24, Y+1	; 0x01
    2766:	0e 94 8d 13 	call	0x271a	; 0x271a <I2C_WriteByte>
    if (I2C_ReadStatus() != I2C_SLA_W_ACK)
    276a:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <I2C_ReadStatus>
    276e:	88 31       	cpi	r24, 0x18	; 24
    2770:	11 f0       	breq	.+4      	; 0x2776 <I2C_Send_SlaveAddressWriteOperation+0x28>
    {
    	return FALSE;
    2772:	1b 82       	std	Y+3, r1	; 0x03
    2774:	02 c0       	rjmp	.+4      	; 0x277a <I2C_Send_SlaveAddressWriteOperation+0x2c>
    }
    else
    {
    	/*	Do Nothing	*/
    }
    return TRUE;
    2776:	81 e0       	ldi	r24, 0x01	; 1
    2778:	8b 83       	std	Y+3, r24	; 0x03
    277a:	8b 81       	ldd	r24, Y+3	; 0x03

}
    277c:	0f 90       	pop	r0
    277e:	0f 90       	pop	r0
    2780:	0f 90       	pop	r0
    2782:	cf 91       	pop	r28
    2784:	df 91       	pop	r29
    2786:	08 95       	ret

00002788 <I2C_Send_SlaveAddressReadOperation>:
boolean I2C_Send_SlaveAddressReadOperation(u8 addr)
{
    2788:	df 93       	push	r29
    278a:	cf 93       	push	r28
    278c:	00 d0       	rcall	.+0      	; 0x278e <I2C_Send_SlaveAddressReadOperation+0x6>
    278e:	0f 92       	push	r0
    2790:	cd b7       	in	r28, 0x3d	; 61
    2792:	de b7       	in	r29, 0x3e	; 62
    2794:	8a 83       	std	Y+2, r24	; 0x02
	u8 loc_addrWrite=0;
    2796:	19 82       	std	Y+1, r1	; 0x01
	loc_addrWrite=(addr<<1)|(0x01);
    2798:	8a 81       	ldd	r24, Y+2	; 0x02
    279a:	88 2f       	mov	r24, r24
    279c:	90 e0       	ldi	r25, 0x00	; 0
    279e:	88 0f       	add	r24, r24
    27a0:	99 1f       	adc	r25, r25
    27a2:	81 60       	ori	r24, 0x01	; 1
    27a4:	89 83       	std	Y+1, r24	; 0x01
	I2C_WriteByte(loc_addrWrite);
    27a6:	89 81       	ldd	r24, Y+1	; 0x01
    27a8:	0e 94 8d 13 	call	0x271a	; 0x271a <I2C_WriteByte>
    if (I2C_ReadStatus() != I2C_SLA_R_ACK)
    27ac:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <I2C_ReadStatus>
    27b0:	80 34       	cpi	r24, 0x40	; 64
    27b2:	11 f0       	breq	.+4      	; 0x27b8 <I2C_Send_SlaveAddressReadOperation+0x30>
    {
    	return FALSE;
    27b4:	1b 82       	std	Y+3, r1	; 0x03
    27b6:	02 c0       	rjmp	.+4      	; 0x27bc <I2C_Send_SlaveAddressReadOperation+0x34>
    }
    else
    {
    	/*	Do Nothing	*/
    }
    return TRUE;
    27b8:	81 e0       	ldi	r24, 0x01	; 1
    27ba:	8b 83       	std	Y+3, r24	; 0x03
    27bc:	8b 81       	ldd	r24, Y+3	; 0x03
}
    27be:	0f 90       	pop	r0
    27c0:	0f 90       	pop	r0
    27c2:	0f 90       	pop	r0
    27c4:	cf 91       	pop	r28
    27c6:	df 91       	pop	r29
    27c8:	08 95       	ret

000027ca <I2C_ReadByte>:
u8 I2C_ReadByte(void)
{
    27ca:	df 93       	push	r29
    27cc:	cf 93       	push	r28
    27ce:	cd b7       	in	r28, 0x3d	; 61
    27d0:	de b7       	in	r29, 0x3e	; 62
	I2C_TWCR_REG |= I2C_INTERRUPT_FLAG;
    27d2:	a6 e5       	ldi	r26, 0x56	; 86
    27d4:	b0 e0       	ldi	r27, 0x00	; 0
    27d6:	e6 e5       	ldi	r30, 0x56	; 86
    27d8:	f0 e0       	ldi	r31, 0x00	; 0
    27da:	80 81       	ld	r24, Z
    27dc:	80 68       	ori	r24, 0x80	; 128
    27de:	8c 93       	st	X, r24
	/*	Wait until data sent successfully	*/
    while (!(CHECK_BIT(I2C_TWCR_REG,I2C_INTERRUPT_FLAG_BIT_NO)))
    27e0:	e6 e5       	ldi	r30, 0x56	; 86
    27e2:	f0 e0       	ldi	r31, 0x00	; 0
    27e4:	80 81       	ld	r24, Z
    27e6:	88 23       	and	r24, r24
    27e8:	dc f7       	brge	.-10     	; 0x27e0 <I2C_ReadByte+0x16>
    {
    	/*Do Nothing */
    	   ;
    }
    return I2C_TWDR_REG;
    27ea:	e3 e2       	ldi	r30, 0x23	; 35
    27ec:	f0 e0       	ldi	r31, 0x00	; 0
    27ee:	80 81       	ld	r24, Z
}
    27f0:	cf 91       	pop	r28
    27f2:	df 91       	pop	r29
    27f4:	08 95       	ret

000027f6 <I2C_ReadStatus>:
u8 I2C_ReadStatus(void)
{
    27f6:	df 93       	push	r29
    27f8:	cf 93       	push	r28
    27fa:	0f 92       	push	r0
    27fc:	cd b7       	in	r28, 0x3d	; 61
    27fe:	de b7       	in	r29, 0x3e	; 62
    u8 status;
    status = I2C_TWSR_REG & 0xF8; // 1111 1000
    2800:	e1 e2       	ldi	r30, 0x21	; 33
    2802:	f0 e0       	ldi	r31, 0x00	; 0
    2804:	80 81       	ld	r24, Z
    2806:	88 7f       	andi	r24, 0xF8	; 248
    2808:	89 83       	std	Y+1, r24	; 0x01
    return status;
    280a:	89 81       	ldd	r24, Y+1	; 0x01
}
    280c:	0f 90       	pop	r0
    280e:	cf 91       	pop	r28
    2810:	df 91       	pop	r29
    2812:	08 95       	ret

00002814 <GINT_vidEnableAllInterrupts>:

#include "GINT_Reg.h"
#include "Bit_Math.h"

void GINT_vidEnableAllInterrupts(void)
{
    2814:	df 93       	push	r29
    2816:	cf 93       	push	r28
    2818:	cd b7       	in	r28, 0x3d	; 61
    281a:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GINT_SREG_REG,7);
    281c:	af e5       	ldi	r26, 0x5F	; 95
    281e:	b0 e0       	ldi	r27, 0x00	; 0
    2820:	ef e5       	ldi	r30, 0x5F	; 95
    2822:	f0 e0       	ldi	r31, 0x00	; 0
    2824:	80 81       	ld	r24, Z
    2826:	80 68       	ori	r24, 0x80	; 128
    2828:	8c 93       	st	X, r24
}
    282a:	cf 91       	pop	r28
    282c:	df 91       	pop	r29
    282e:	08 95       	ret

00002830 <GINT_vidDisableAllInterrupts>:

void GINT_vidDisableAllInterrupts(void)
{
    2830:	df 93       	push	r29
    2832:	cf 93       	push	r28
    2834:	cd b7       	in	r28, 0x3d	; 61
    2836:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(GINT_SREG_REG,7);
    2838:	af e5       	ldi	r26, 0x5F	; 95
    283a:	b0 e0       	ldi	r27, 0x00	; 0
    283c:	ef e5       	ldi	r30, 0x5F	; 95
    283e:	f0 e0       	ldi	r31, 0x00	; 0
    2840:	80 81       	ld	r24, Z
    2842:	8f 77       	andi	r24, 0x7F	; 127
    2844:	8c 93       	st	X, r24
}
    2846:	cf 91       	pop	r28
    2848:	df 91       	pop	r29
    284a:	08 95       	ret

0000284c <ExtInt_vidConfigExtInt>:
#include "ExtInt_Reg.h"
#include "ExtInt.h"
#include "Std_Types.h"

void ExtInt_vidConfigExtInt(extint_id_t intId, extint_sensectrl_t sensCtrl)
{
    284c:	df 93       	push	r29
    284e:	cf 93       	push	r28
    2850:	00 d0       	rcall	.+0      	; 0x2852 <ExtInt_vidConfigExtInt+0x6>
    2852:	00 d0       	rcall	.+0      	; 0x2854 <ExtInt_vidConfigExtInt+0x8>
    2854:	cd b7       	in	r28, 0x3d	; 61
    2856:	de b7       	in	r29, 0x3e	; 62
    2858:	89 83       	std	Y+1, r24	; 0x01
    285a:	6a 83       	std	Y+2, r22	; 0x02
	switch(intId)
    285c:	89 81       	ldd	r24, Y+1	; 0x01
    285e:	28 2f       	mov	r18, r24
    2860:	30 e0       	ldi	r19, 0x00	; 0
    2862:	3c 83       	std	Y+4, r19	; 0x04
    2864:	2b 83       	std	Y+3, r18	; 0x03
    2866:	8b 81       	ldd	r24, Y+3	; 0x03
    2868:	9c 81       	ldd	r25, Y+4	; 0x04
    286a:	81 30       	cpi	r24, 0x01	; 1
    286c:	91 05       	cpc	r25, r1
    286e:	09 f4       	brne	.+2      	; 0x2872 <ExtInt_vidConfigExtInt+0x26>
    2870:	5a c0       	rjmp	.+180    	; 0x2926 <ExtInt_vidConfigExtInt+0xda>
    2872:	2b 81       	ldd	r18, Y+3	; 0x03
    2874:	3c 81       	ldd	r19, Y+4	; 0x04
    2876:	22 30       	cpi	r18, 0x02	; 2
    2878:	31 05       	cpc	r19, r1
    287a:	09 f4       	brne	.+2      	; 0x287e <ExtInt_vidConfigExtInt+0x32>
    287c:	a3 c0       	rjmp	.+326    	; 0x29c4 <ExtInt_vidConfigExtInt+0x178>
    287e:	8b 81       	ldd	r24, Y+3	; 0x03
    2880:	9c 81       	ldd	r25, Y+4	; 0x04
    2882:	00 97       	sbiw	r24, 0x00	; 0
    2884:	09 f0       	breq	.+2      	; 0x2888 <ExtInt_vidConfigExtInt+0x3c>
    2886:	ba c0       	rjmp	.+372    	; 0x29fc <ExtInt_vidConfigExtInt+0x1b0>
	{
	case EXT_INT0:
		/*	configure sense control	*/
		if (sensCtrl == EXT_RISING_EDGE)
    2888:	8a 81       	ldd	r24, Y+2	; 0x02
    288a:	81 30       	cpi	r24, 0x01	; 1
    288c:	79 f4       	brne	.+30     	; 0x28ac <ExtInt_vidConfigExtInt+0x60>
		{
			SET_BIT(EXTINT_MCUCR_REG,0);
    288e:	a5 e5       	ldi	r26, 0x55	; 85
    2890:	b0 e0       	ldi	r27, 0x00	; 0
    2892:	e5 e5       	ldi	r30, 0x55	; 85
    2894:	f0 e0       	ldi	r31, 0x00	; 0
    2896:	80 81       	ld	r24, Z
    2898:	81 60       	ori	r24, 0x01	; 1
    289a:	8c 93       	st	X, r24
			SET_BIT(EXTINT_MCUCR_REG,1);
    289c:	a5 e5       	ldi	r26, 0x55	; 85
    289e:	b0 e0       	ldi	r27, 0x00	; 0
    28a0:	e5 e5       	ldi	r30, 0x55	; 85
    28a2:	f0 e0       	ldi	r31, 0x00	; 0
    28a4:	80 81       	ld	r24, Z
    28a6:	82 60       	ori	r24, 0x02	; 2
    28a8:	8c 93       	st	X, r24
    28aa:	35 c0       	rjmp	.+106    	; 0x2916 <ExtInt_vidConfigExtInt+0xca>
		}
		else if (sensCtrl == EXT_FAILING_EDGE)
    28ac:	8a 81       	ldd	r24, Y+2	; 0x02
    28ae:	88 23       	and	r24, r24
    28b0:	79 f4       	brne	.+30     	; 0x28d0 <ExtInt_vidConfigExtInt+0x84>
		{
			CLEAR_BIT(EXTINT_MCUCR_REG,0);
    28b2:	a5 e5       	ldi	r26, 0x55	; 85
    28b4:	b0 e0       	ldi	r27, 0x00	; 0
    28b6:	e5 e5       	ldi	r30, 0x55	; 85
    28b8:	f0 e0       	ldi	r31, 0x00	; 0
    28ba:	80 81       	ld	r24, Z
    28bc:	8e 7f       	andi	r24, 0xFE	; 254
    28be:	8c 93       	st	X, r24
			SET_BIT(EXTINT_MCUCR_REG,1);
    28c0:	a5 e5       	ldi	r26, 0x55	; 85
    28c2:	b0 e0       	ldi	r27, 0x00	; 0
    28c4:	e5 e5       	ldi	r30, 0x55	; 85
    28c6:	f0 e0       	ldi	r31, 0x00	; 0
    28c8:	80 81       	ld	r24, Z
    28ca:	82 60       	ori	r24, 0x02	; 2
    28cc:	8c 93       	st	X, r24
    28ce:	23 c0       	rjmp	.+70     	; 0x2916 <ExtInt_vidConfigExtInt+0xca>
		}
		else if (sensCtrl == EXT_BOTH_EDGE)
    28d0:	8a 81       	ldd	r24, Y+2	; 0x02
    28d2:	82 30       	cpi	r24, 0x02	; 2
    28d4:	79 f4       	brne	.+30     	; 0x28f4 <ExtInt_vidConfigExtInt+0xa8>
		{
			SET_BIT(EXTINT_MCUCR_REG,0);
    28d6:	a5 e5       	ldi	r26, 0x55	; 85
    28d8:	b0 e0       	ldi	r27, 0x00	; 0
    28da:	e5 e5       	ldi	r30, 0x55	; 85
    28dc:	f0 e0       	ldi	r31, 0x00	; 0
    28de:	80 81       	ld	r24, Z
    28e0:	81 60       	ori	r24, 0x01	; 1
    28e2:	8c 93       	st	X, r24
			CLEAR_BIT(EXTINT_MCUCR_REG,1);
    28e4:	a5 e5       	ldi	r26, 0x55	; 85
    28e6:	b0 e0       	ldi	r27, 0x00	; 0
    28e8:	e5 e5       	ldi	r30, 0x55	; 85
    28ea:	f0 e0       	ldi	r31, 0x00	; 0
    28ec:	80 81       	ld	r24, Z
    28ee:	8d 7f       	andi	r24, 0xFD	; 253
    28f0:	8c 93       	st	X, r24
    28f2:	11 c0       	rjmp	.+34     	; 0x2916 <ExtInt_vidConfigExtInt+0xca>
		}
		else if (sensCtrl == EXT_LOW_LEVEL)
    28f4:	8a 81       	ldd	r24, Y+2	; 0x02
    28f6:	83 30       	cpi	r24, 0x03	; 3
    28f8:	71 f4       	brne	.+28     	; 0x2916 <ExtInt_vidConfigExtInt+0xca>
		{
			CLEAR_BIT(EXTINT_MCUCR_REG,0);
    28fa:	a5 e5       	ldi	r26, 0x55	; 85
    28fc:	b0 e0       	ldi	r27, 0x00	; 0
    28fe:	e5 e5       	ldi	r30, 0x55	; 85
    2900:	f0 e0       	ldi	r31, 0x00	; 0
    2902:	80 81       	ld	r24, Z
    2904:	8e 7f       	andi	r24, 0xFE	; 254
    2906:	8c 93       	st	X, r24
			CLEAR_BIT(EXTINT_MCUCR_REG,1);
    2908:	a5 e5       	ldi	r26, 0x55	; 85
    290a:	b0 e0       	ldi	r27, 0x00	; 0
    290c:	e5 e5       	ldi	r30, 0x55	; 85
    290e:	f0 e0       	ldi	r31, 0x00	; 0
    2910:	80 81       	ld	r24, Z
    2912:	8d 7f       	andi	r24, 0xFD	; 253
    2914:	8c 93       	st	X, r24
		else
		{
			/*	Do Nothing	*/
		}
		/*	Enable Int0 Interrupt	*/
		SET_BIT(EXTINT_GICR_REG,INT0_EN_BIT);
    2916:	ab e5       	ldi	r26, 0x5B	; 91
    2918:	b0 e0       	ldi	r27, 0x00	; 0
    291a:	eb e5       	ldi	r30, 0x5B	; 91
    291c:	f0 e0       	ldi	r31, 0x00	; 0
    291e:	80 81       	ld	r24, Z
    2920:	80 64       	ori	r24, 0x40	; 64
    2922:	8c 93       	st	X, r24
    2924:	6b c0       	rjmp	.+214    	; 0x29fc <ExtInt_vidConfigExtInt+0x1b0>
		break;

	case EXT_INT1:

		/*	configure sense control	*/
				if (sensCtrl == EXT_RISING_EDGE)
    2926:	8a 81       	ldd	r24, Y+2	; 0x02
    2928:	81 30       	cpi	r24, 0x01	; 1
    292a:	79 f4       	brne	.+30     	; 0x294a <ExtInt_vidConfigExtInt+0xfe>
				{
					SET_BIT(EXTINT_MCUCR_REG,2);
    292c:	a5 e5       	ldi	r26, 0x55	; 85
    292e:	b0 e0       	ldi	r27, 0x00	; 0
    2930:	e5 e5       	ldi	r30, 0x55	; 85
    2932:	f0 e0       	ldi	r31, 0x00	; 0
    2934:	80 81       	ld	r24, Z
    2936:	84 60       	ori	r24, 0x04	; 4
    2938:	8c 93       	st	X, r24
					SET_BIT(EXTINT_MCUCR_REG,3);
    293a:	a5 e5       	ldi	r26, 0x55	; 85
    293c:	b0 e0       	ldi	r27, 0x00	; 0
    293e:	e5 e5       	ldi	r30, 0x55	; 85
    2940:	f0 e0       	ldi	r31, 0x00	; 0
    2942:	80 81       	ld	r24, Z
    2944:	88 60       	ori	r24, 0x08	; 8
    2946:	8c 93       	st	X, r24
    2948:	35 c0       	rjmp	.+106    	; 0x29b4 <ExtInt_vidConfigExtInt+0x168>
				}
				else if (sensCtrl == EXT_FAILING_EDGE)
    294a:	8a 81       	ldd	r24, Y+2	; 0x02
    294c:	88 23       	and	r24, r24
    294e:	79 f4       	brne	.+30     	; 0x296e <ExtInt_vidConfigExtInt+0x122>
				{
					CLEAR_BIT(EXTINT_MCUCR_REG,2);
    2950:	a5 e5       	ldi	r26, 0x55	; 85
    2952:	b0 e0       	ldi	r27, 0x00	; 0
    2954:	e5 e5       	ldi	r30, 0x55	; 85
    2956:	f0 e0       	ldi	r31, 0x00	; 0
    2958:	80 81       	ld	r24, Z
    295a:	8b 7f       	andi	r24, 0xFB	; 251
    295c:	8c 93       	st	X, r24
					SET_BIT(EXTINT_MCUCR_REG,3);
    295e:	a5 e5       	ldi	r26, 0x55	; 85
    2960:	b0 e0       	ldi	r27, 0x00	; 0
    2962:	e5 e5       	ldi	r30, 0x55	; 85
    2964:	f0 e0       	ldi	r31, 0x00	; 0
    2966:	80 81       	ld	r24, Z
    2968:	88 60       	ori	r24, 0x08	; 8
    296a:	8c 93       	st	X, r24
    296c:	23 c0       	rjmp	.+70     	; 0x29b4 <ExtInt_vidConfigExtInt+0x168>
				}
				else if (sensCtrl == EXT_BOTH_EDGE)
    296e:	8a 81       	ldd	r24, Y+2	; 0x02
    2970:	82 30       	cpi	r24, 0x02	; 2
    2972:	79 f4       	brne	.+30     	; 0x2992 <ExtInt_vidConfigExtInt+0x146>
				{
					SET_BIT(EXTINT_MCUCR_REG,2);
    2974:	a5 e5       	ldi	r26, 0x55	; 85
    2976:	b0 e0       	ldi	r27, 0x00	; 0
    2978:	e5 e5       	ldi	r30, 0x55	; 85
    297a:	f0 e0       	ldi	r31, 0x00	; 0
    297c:	80 81       	ld	r24, Z
    297e:	84 60       	ori	r24, 0x04	; 4
    2980:	8c 93       	st	X, r24
					CLEAR_BIT(EXTINT_MCUCR_REG,3);
    2982:	a5 e5       	ldi	r26, 0x55	; 85
    2984:	b0 e0       	ldi	r27, 0x00	; 0
    2986:	e5 e5       	ldi	r30, 0x55	; 85
    2988:	f0 e0       	ldi	r31, 0x00	; 0
    298a:	80 81       	ld	r24, Z
    298c:	87 7f       	andi	r24, 0xF7	; 247
    298e:	8c 93       	st	X, r24
    2990:	11 c0       	rjmp	.+34     	; 0x29b4 <ExtInt_vidConfigExtInt+0x168>
				}
				else if (sensCtrl == EXT_LOW_LEVEL)
    2992:	8a 81       	ldd	r24, Y+2	; 0x02
    2994:	83 30       	cpi	r24, 0x03	; 3
    2996:	71 f4       	brne	.+28     	; 0x29b4 <ExtInt_vidConfigExtInt+0x168>
				{
					CLEAR_BIT(EXTINT_MCUCR_REG,2);
    2998:	a5 e5       	ldi	r26, 0x55	; 85
    299a:	b0 e0       	ldi	r27, 0x00	; 0
    299c:	e5 e5       	ldi	r30, 0x55	; 85
    299e:	f0 e0       	ldi	r31, 0x00	; 0
    29a0:	80 81       	ld	r24, Z
    29a2:	8b 7f       	andi	r24, 0xFB	; 251
    29a4:	8c 93       	st	X, r24
					CLEAR_BIT(EXTINT_MCUCR_REG,3);
    29a6:	a5 e5       	ldi	r26, 0x55	; 85
    29a8:	b0 e0       	ldi	r27, 0x00	; 0
    29aa:	e5 e5       	ldi	r30, 0x55	; 85
    29ac:	f0 e0       	ldi	r31, 0x00	; 0
    29ae:	80 81       	ld	r24, Z
    29b0:	87 7f       	andi	r24, 0xF7	; 247
    29b2:	8c 93       	st	X, r24
				else
				{
					/*	Do Nothing	*/
				}

		SET_BIT(EXTINT_GICR_REG,INT1_EN_BIT);
    29b4:	ab e5       	ldi	r26, 0x5B	; 91
    29b6:	b0 e0       	ldi	r27, 0x00	; 0
    29b8:	eb e5       	ldi	r30, 0x5B	; 91
    29ba:	f0 e0       	ldi	r31, 0x00	; 0
    29bc:	80 81       	ld	r24, Z
    29be:	80 68       	ori	r24, 0x80	; 128
    29c0:	8c 93       	st	X, r24
    29c2:	1c c0       	rjmp	.+56     	; 0x29fc <ExtInt_vidConfigExtInt+0x1b0>
		break;

	case EXT_INT2:

		if (sensCtrl == EXT_FAILING_EDGE)
    29c4:	8a 81       	ldd	r24, Y+2	; 0x02
    29c6:	88 23       	and	r24, r24
    29c8:	41 f4       	brne	.+16     	; 0x29da <ExtInt_vidConfigExtInt+0x18e>
		{
			CLEAR_BIT(EXTINT_MCUCSR_REG,6);
    29ca:	a4 e5       	ldi	r26, 0x54	; 84
    29cc:	b0 e0       	ldi	r27, 0x00	; 0
    29ce:	e4 e5       	ldi	r30, 0x54	; 84
    29d0:	f0 e0       	ldi	r31, 0x00	; 0
    29d2:	80 81       	ld	r24, Z
    29d4:	8f 7b       	andi	r24, 0xBF	; 191
    29d6:	8c 93       	st	X, r24
    29d8:	0a c0       	rjmp	.+20     	; 0x29ee <ExtInt_vidConfigExtInt+0x1a2>
		}
		else if (sensCtrl == EXT_RISING_EDGE)
    29da:	8a 81       	ldd	r24, Y+2	; 0x02
    29dc:	81 30       	cpi	r24, 0x01	; 1
    29de:	39 f4       	brne	.+14     	; 0x29ee <ExtInt_vidConfigExtInt+0x1a2>
		{
			SET_BIT(EXTINT_MCUCSR_REG,6);
    29e0:	a4 e5       	ldi	r26, 0x54	; 84
    29e2:	b0 e0       	ldi	r27, 0x00	; 0
    29e4:	e4 e5       	ldi	r30, 0x54	; 84
    29e6:	f0 e0       	ldi	r31, 0x00	; 0
    29e8:	80 81       	ld	r24, Z
    29ea:	80 64       	ori	r24, 0x40	; 64
    29ec:	8c 93       	st	X, r24
		}
		else
		{
			/*	Do Nothing	*/
		}
		SET_BIT(EXTINT_GICR_REG,INT2_EN_BIT);
    29ee:	ab e5       	ldi	r26, 0x5B	; 91
    29f0:	b0 e0       	ldi	r27, 0x00	; 0
    29f2:	eb e5       	ldi	r30, 0x5B	; 91
    29f4:	f0 e0       	ldi	r31, 0x00	; 0
    29f6:	80 81       	ld	r24, Z
    29f8:	80 62       	ori	r24, 0x20	; 32
    29fa:	8c 93       	st	X, r24
		break;
	}
}
    29fc:	0f 90       	pop	r0
    29fe:	0f 90       	pop	r0
    2a00:	0f 90       	pop	r0
    2a02:	0f 90       	pop	r0
    2a04:	cf 91       	pop	r28
    2a06:	df 91       	pop	r29
    2a08:	08 95       	ret

00002a0a <ExtInt_vidDisableExtInt>:

void ExtInt_vidDisableExtInt(extint_id_t intId)
{
    2a0a:	df 93       	push	r29
    2a0c:	cf 93       	push	r28
    2a0e:	00 d0       	rcall	.+0      	; 0x2a10 <ExtInt_vidDisableExtInt+0x6>
    2a10:	0f 92       	push	r0
    2a12:	cd b7       	in	r28, 0x3d	; 61
    2a14:	de b7       	in	r29, 0x3e	; 62
    2a16:	89 83       	std	Y+1, r24	; 0x01
	switch (intId)
    2a18:	89 81       	ldd	r24, Y+1	; 0x01
    2a1a:	28 2f       	mov	r18, r24
    2a1c:	30 e0       	ldi	r19, 0x00	; 0
    2a1e:	3b 83       	std	Y+3, r19	; 0x03
    2a20:	2a 83       	std	Y+2, r18	; 0x02
    2a22:	8a 81       	ldd	r24, Y+2	; 0x02
    2a24:	9b 81       	ldd	r25, Y+3	; 0x03
    2a26:	81 30       	cpi	r24, 0x01	; 1
    2a28:	91 05       	cpc	r25, r1
    2a2a:	89 f0       	breq	.+34     	; 0x2a4e <ExtInt_vidDisableExtInt+0x44>
    2a2c:	2a 81       	ldd	r18, Y+2	; 0x02
    2a2e:	3b 81       	ldd	r19, Y+3	; 0x03
    2a30:	22 30       	cpi	r18, 0x02	; 2
    2a32:	31 05       	cpc	r19, r1
    2a34:	a1 f0       	breq	.+40     	; 0x2a5e <ExtInt_vidDisableExtInt+0x54>
    2a36:	8a 81       	ldd	r24, Y+2	; 0x02
    2a38:	9b 81       	ldd	r25, Y+3	; 0x03
    2a3a:	00 97       	sbiw	r24, 0x00	; 0
    2a3c:	b9 f4       	brne	.+46     	; 0x2a6c <ExtInt_vidDisableExtInt+0x62>
	{
	case EXT_INT0:
		SET_BIT(EXTINT_GICR_REG,INT0_EN_BIT);
    2a3e:	ab e5       	ldi	r26, 0x5B	; 91
    2a40:	b0 e0       	ldi	r27, 0x00	; 0
    2a42:	eb e5       	ldi	r30, 0x5B	; 91
    2a44:	f0 e0       	ldi	r31, 0x00	; 0
    2a46:	80 81       	ld	r24, Z
    2a48:	80 64       	ori	r24, 0x40	; 64
    2a4a:	8c 93       	st	X, r24
    2a4c:	0f c0       	rjmp	.+30     	; 0x2a6c <ExtInt_vidDisableExtInt+0x62>
		break;

	case EXT_INT1:
		SET_BIT(EXTINT_GICR_REG,INT1_EN_BIT);
    2a4e:	ab e5       	ldi	r26, 0x5B	; 91
    2a50:	b0 e0       	ldi	r27, 0x00	; 0
    2a52:	eb e5       	ldi	r30, 0x5B	; 91
    2a54:	f0 e0       	ldi	r31, 0x00	; 0
    2a56:	80 81       	ld	r24, Z
    2a58:	80 68       	ori	r24, 0x80	; 128
    2a5a:	8c 93       	st	X, r24
    2a5c:	07 c0       	rjmp	.+14     	; 0x2a6c <ExtInt_vidDisableExtInt+0x62>
		break;

	case EXT_INT2:
		SET_BIT(EXTINT_GICR_REG,INT2_EN_BIT);
    2a5e:	ab e5       	ldi	r26, 0x5B	; 91
    2a60:	b0 e0       	ldi	r27, 0x00	; 0
    2a62:	eb e5       	ldi	r30, 0x5B	; 91
    2a64:	f0 e0       	ldi	r31, 0x00	; 0
    2a66:	80 81       	ld	r24, Z
    2a68:	80 62       	ori	r24, 0x20	; 32
    2a6a:	8c 93       	st	X, r24
		break;
	}
}
    2a6c:	0f 90       	pop	r0
    2a6e:	0f 90       	pop	r0
    2a70:	0f 90       	pop	r0
    2a72:	cf 91       	pop	r28
    2a74:	df 91       	pop	r29
    2a76:	08 95       	ret

00002a78 <Dio_vidconfigChanel>:
 */
#include "Dio.h"
#include "Bit_Math.h"

void Dio_vidconfigChanel(dio_port_t port, dio_pin_t pin,dio_dir_t dir)
{
    2a78:	df 93       	push	r29
    2a7a:	cf 93       	push	r28
    2a7c:	00 d0       	rcall	.+0      	; 0x2a7e <Dio_vidconfigChanel+0x6>
    2a7e:	00 d0       	rcall	.+0      	; 0x2a80 <Dio_vidconfigChanel+0x8>
    2a80:	0f 92       	push	r0
    2a82:	cd b7       	in	r28, 0x3d	; 61
    2a84:	de b7       	in	r29, 0x3e	; 62
    2a86:	89 83       	std	Y+1, r24	; 0x01
    2a88:	6a 83       	std	Y+2, r22	; 0x02
    2a8a:	4b 83       	std	Y+3, r20	; 0x03
	switch(port)
    2a8c:	89 81       	ldd	r24, Y+1	; 0x01
    2a8e:	28 2f       	mov	r18, r24
    2a90:	30 e0       	ldi	r19, 0x00	; 0
    2a92:	3d 83       	std	Y+5, r19	; 0x05
    2a94:	2c 83       	std	Y+4, r18	; 0x04
    2a96:	8c 81       	ldd	r24, Y+4	; 0x04
    2a98:	9d 81       	ldd	r25, Y+5	; 0x05
    2a9a:	81 30       	cpi	r24, 0x01	; 1
    2a9c:	91 05       	cpc	r25, r1
    2a9e:	09 f4       	brne	.+2      	; 0x2aa2 <Dio_vidconfigChanel+0x2a>
    2aa0:	43 c0       	rjmp	.+134    	; 0x2b28 <Dio_vidconfigChanel+0xb0>
    2aa2:	2c 81       	ldd	r18, Y+4	; 0x04
    2aa4:	3d 81       	ldd	r19, Y+5	; 0x05
    2aa6:	22 30       	cpi	r18, 0x02	; 2
    2aa8:	31 05       	cpc	r19, r1
    2aaa:	2c f4       	brge	.+10     	; 0x2ab6 <Dio_vidconfigChanel+0x3e>
    2aac:	8c 81       	ldd	r24, Y+4	; 0x04
    2aae:	9d 81       	ldd	r25, Y+5	; 0x05
    2ab0:	00 97       	sbiw	r24, 0x00	; 0
    2ab2:	71 f0       	breq	.+28     	; 0x2ad0 <Dio_vidconfigChanel+0x58>
    2ab4:	bc c0       	rjmp	.+376    	; 0x2c2e <Dio_vidconfigChanel+0x1b6>
    2ab6:	2c 81       	ldd	r18, Y+4	; 0x04
    2ab8:	3d 81       	ldd	r19, Y+5	; 0x05
    2aba:	22 30       	cpi	r18, 0x02	; 2
    2abc:	31 05       	cpc	r19, r1
    2abe:	09 f4       	brne	.+2      	; 0x2ac2 <Dio_vidconfigChanel+0x4a>
    2ac0:	5f c0       	rjmp	.+190    	; 0x2b80 <Dio_vidconfigChanel+0x108>
    2ac2:	8c 81       	ldd	r24, Y+4	; 0x04
    2ac4:	9d 81       	ldd	r25, Y+5	; 0x05
    2ac6:	83 30       	cpi	r24, 0x03	; 3
    2ac8:	91 05       	cpc	r25, r1
    2aca:	09 f4       	brne	.+2      	; 0x2ace <Dio_vidconfigChanel+0x56>
    2acc:	85 c0       	rjmp	.+266    	; 0x2bd8 <Dio_vidconfigChanel+0x160>
    2ace:	af c0       	rjmp	.+350    	; 0x2c2e <Dio_vidconfigChanel+0x1b6>
	{
	case DIO_PORTA:
		if (dir == DIO_INPUT)
    2ad0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ad2:	88 23       	and	r24, r24
    2ad4:	a9 f4       	brne	.+42     	; 0x2b00 <Dio_vidconfigChanel+0x88>
		{
			CLEAR_BIT(DIO_DDRA_REG,pin);
    2ad6:	aa e3       	ldi	r26, 0x3A	; 58
    2ad8:	b0 e0       	ldi	r27, 0x00	; 0
    2ada:	ea e3       	ldi	r30, 0x3A	; 58
    2adc:	f0 e0       	ldi	r31, 0x00	; 0
    2ade:	80 81       	ld	r24, Z
    2ae0:	48 2f       	mov	r20, r24
    2ae2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ae4:	28 2f       	mov	r18, r24
    2ae6:	30 e0       	ldi	r19, 0x00	; 0
    2ae8:	81 e0       	ldi	r24, 0x01	; 1
    2aea:	90 e0       	ldi	r25, 0x00	; 0
    2aec:	02 2e       	mov	r0, r18
    2aee:	02 c0       	rjmp	.+4      	; 0x2af4 <Dio_vidconfigChanel+0x7c>
    2af0:	88 0f       	add	r24, r24
    2af2:	99 1f       	adc	r25, r25
    2af4:	0a 94       	dec	r0
    2af6:	e2 f7       	brpl	.-8      	; 0x2af0 <Dio_vidconfigChanel+0x78>
    2af8:	80 95       	com	r24
    2afa:	84 23       	and	r24, r20
    2afc:	8c 93       	st	X, r24
    2afe:	97 c0       	rjmp	.+302    	; 0x2c2e <Dio_vidconfigChanel+0x1b6>
		}
		else
		{
			SET_BIT(DIO_DDRA_REG,pin);
    2b00:	aa e3       	ldi	r26, 0x3A	; 58
    2b02:	b0 e0       	ldi	r27, 0x00	; 0
    2b04:	ea e3       	ldi	r30, 0x3A	; 58
    2b06:	f0 e0       	ldi	r31, 0x00	; 0
    2b08:	80 81       	ld	r24, Z
    2b0a:	48 2f       	mov	r20, r24
    2b0c:	8a 81       	ldd	r24, Y+2	; 0x02
    2b0e:	28 2f       	mov	r18, r24
    2b10:	30 e0       	ldi	r19, 0x00	; 0
    2b12:	81 e0       	ldi	r24, 0x01	; 1
    2b14:	90 e0       	ldi	r25, 0x00	; 0
    2b16:	02 2e       	mov	r0, r18
    2b18:	02 c0       	rjmp	.+4      	; 0x2b1e <Dio_vidconfigChanel+0xa6>
    2b1a:	88 0f       	add	r24, r24
    2b1c:	99 1f       	adc	r25, r25
    2b1e:	0a 94       	dec	r0
    2b20:	e2 f7       	brpl	.-8      	; 0x2b1a <Dio_vidconfigChanel+0xa2>
    2b22:	84 2b       	or	r24, r20
    2b24:	8c 93       	st	X, r24
    2b26:	83 c0       	rjmp	.+262    	; 0x2c2e <Dio_vidconfigChanel+0x1b6>
		}
		break;

	case DIO_PORTB:
		if (dir == DIO_INPUT)
    2b28:	8b 81       	ldd	r24, Y+3	; 0x03
    2b2a:	88 23       	and	r24, r24
    2b2c:	a9 f4       	brne	.+42     	; 0x2b58 <Dio_vidconfigChanel+0xe0>
		{
			CLEAR_BIT(DIO_DDRB_REG,pin);
    2b2e:	a7 e3       	ldi	r26, 0x37	; 55
    2b30:	b0 e0       	ldi	r27, 0x00	; 0
    2b32:	e7 e3       	ldi	r30, 0x37	; 55
    2b34:	f0 e0       	ldi	r31, 0x00	; 0
    2b36:	80 81       	ld	r24, Z
    2b38:	48 2f       	mov	r20, r24
    2b3a:	8a 81       	ldd	r24, Y+2	; 0x02
    2b3c:	28 2f       	mov	r18, r24
    2b3e:	30 e0       	ldi	r19, 0x00	; 0
    2b40:	81 e0       	ldi	r24, 0x01	; 1
    2b42:	90 e0       	ldi	r25, 0x00	; 0
    2b44:	02 2e       	mov	r0, r18
    2b46:	02 c0       	rjmp	.+4      	; 0x2b4c <Dio_vidconfigChanel+0xd4>
    2b48:	88 0f       	add	r24, r24
    2b4a:	99 1f       	adc	r25, r25
    2b4c:	0a 94       	dec	r0
    2b4e:	e2 f7       	brpl	.-8      	; 0x2b48 <Dio_vidconfigChanel+0xd0>
    2b50:	80 95       	com	r24
    2b52:	84 23       	and	r24, r20
    2b54:	8c 93       	st	X, r24
    2b56:	6b c0       	rjmp	.+214    	; 0x2c2e <Dio_vidconfigChanel+0x1b6>
		}
		else
		{
			SET_BIT(DIO_DDRB_REG,pin);
    2b58:	a7 e3       	ldi	r26, 0x37	; 55
    2b5a:	b0 e0       	ldi	r27, 0x00	; 0
    2b5c:	e7 e3       	ldi	r30, 0x37	; 55
    2b5e:	f0 e0       	ldi	r31, 0x00	; 0
    2b60:	80 81       	ld	r24, Z
    2b62:	48 2f       	mov	r20, r24
    2b64:	8a 81       	ldd	r24, Y+2	; 0x02
    2b66:	28 2f       	mov	r18, r24
    2b68:	30 e0       	ldi	r19, 0x00	; 0
    2b6a:	81 e0       	ldi	r24, 0x01	; 1
    2b6c:	90 e0       	ldi	r25, 0x00	; 0
    2b6e:	02 2e       	mov	r0, r18
    2b70:	02 c0       	rjmp	.+4      	; 0x2b76 <Dio_vidconfigChanel+0xfe>
    2b72:	88 0f       	add	r24, r24
    2b74:	99 1f       	adc	r25, r25
    2b76:	0a 94       	dec	r0
    2b78:	e2 f7       	brpl	.-8      	; 0x2b72 <Dio_vidconfigChanel+0xfa>
    2b7a:	84 2b       	or	r24, r20
    2b7c:	8c 93       	st	X, r24
    2b7e:	57 c0       	rjmp	.+174    	; 0x2c2e <Dio_vidconfigChanel+0x1b6>
		}
		break;

	case DIO_PORTC:
		if (dir == DIO_INPUT)
    2b80:	8b 81       	ldd	r24, Y+3	; 0x03
    2b82:	88 23       	and	r24, r24
    2b84:	a9 f4       	brne	.+42     	; 0x2bb0 <Dio_vidconfigChanel+0x138>
		{
			CLEAR_BIT(DIO_DDRC_REG,pin);
    2b86:	a4 e3       	ldi	r26, 0x34	; 52
    2b88:	b0 e0       	ldi	r27, 0x00	; 0
    2b8a:	e4 e3       	ldi	r30, 0x34	; 52
    2b8c:	f0 e0       	ldi	r31, 0x00	; 0
    2b8e:	80 81       	ld	r24, Z
    2b90:	48 2f       	mov	r20, r24
    2b92:	8a 81       	ldd	r24, Y+2	; 0x02
    2b94:	28 2f       	mov	r18, r24
    2b96:	30 e0       	ldi	r19, 0x00	; 0
    2b98:	81 e0       	ldi	r24, 0x01	; 1
    2b9a:	90 e0       	ldi	r25, 0x00	; 0
    2b9c:	02 2e       	mov	r0, r18
    2b9e:	02 c0       	rjmp	.+4      	; 0x2ba4 <Dio_vidconfigChanel+0x12c>
    2ba0:	88 0f       	add	r24, r24
    2ba2:	99 1f       	adc	r25, r25
    2ba4:	0a 94       	dec	r0
    2ba6:	e2 f7       	brpl	.-8      	; 0x2ba0 <Dio_vidconfigChanel+0x128>
    2ba8:	80 95       	com	r24
    2baa:	84 23       	and	r24, r20
    2bac:	8c 93       	st	X, r24
    2bae:	3f c0       	rjmp	.+126    	; 0x2c2e <Dio_vidconfigChanel+0x1b6>
		}
		else
		{
			SET_BIT(DIO_DDRC_REG,pin);
    2bb0:	a4 e3       	ldi	r26, 0x34	; 52
    2bb2:	b0 e0       	ldi	r27, 0x00	; 0
    2bb4:	e4 e3       	ldi	r30, 0x34	; 52
    2bb6:	f0 e0       	ldi	r31, 0x00	; 0
    2bb8:	80 81       	ld	r24, Z
    2bba:	48 2f       	mov	r20, r24
    2bbc:	8a 81       	ldd	r24, Y+2	; 0x02
    2bbe:	28 2f       	mov	r18, r24
    2bc0:	30 e0       	ldi	r19, 0x00	; 0
    2bc2:	81 e0       	ldi	r24, 0x01	; 1
    2bc4:	90 e0       	ldi	r25, 0x00	; 0
    2bc6:	02 2e       	mov	r0, r18
    2bc8:	02 c0       	rjmp	.+4      	; 0x2bce <Dio_vidconfigChanel+0x156>
    2bca:	88 0f       	add	r24, r24
    2bcc:	99 1f       	adc	r25, r25
    2bce:	0a 94       	dec	r0
    2bd0:	e2 f7       	brpl	.-8      	; 0x2bca <Dio_vidconfigChanel+0x152>
    2bd2:	84 2b       	or	r24, r20
    2bd4:	8c 93       	st	X, r24
    2bd6:	2b c0       	rjmp	.+86     	; 0x2c2e <Dio_vidconfigChanel+0x1b6>
		}
		break;

	case DIO_PORTD:
		if (dir == DIO_INPUT)
    2bd8:	8b 81       	ldd	r24, Y+3	; 0x03
    2bda:	88 23       	and	r24, r24
    2bdc:	a9 f4       	brne	.+42     	; 0x2c08 <Dio_vidconfigChanel+0x190>
		{
			CLEAR_BIT(DIO_DDRD_REG,pin);
    2bde:	a1 e3       	ldi	r26, 0x31	; 49
    2be0:	b0 e0       	ldi	r27, 0x00	; 0
    2be2:	e1 e3       	ldi	r30, 0x31	; 49
    2be4:	f0 e0       	ldi	r31, 0x00	; 0
    2be6:	80 81       	ld	r24, Z
    2be8:	48 2f       	mov	r20, r24
    2bea:	8a 81       	ldd	r24, Y+2	; 0x02
    2bec:	28 2f       	mov	r18, r24
    2bee:	30 e0       	ldi	r19, 0x00	; 0
    2bf0:	81 e0       	ldi	r24, 0x01	; 1
    2bf2:	90 e0       	ldi	r25, 0x00	; 0
    2bf4:	02 2e       	mov	r0, r18
    2bf6:	02 c0       	rjmp	.+4      	; 0x2bfc <Dio_vidconfigChanel+0x184>
    2bf8:	88 0f       	add	r24, r24
    2bfa:	99 1f       	adc	r25, r25
    2bfc:	0a 94       	dec	r0
    2bfe:	e2 f7       	brpl	.-8      	; 0x2bf8 <Dio_vidconfigChanel+0x180>
    2c00:	80 95       	com	r24
    2c02:	84 23       	and	r24, r20
    2c04:	8c 93       	st	X, r24
    2c06:	13 c0       	rjmp	.+38     	; 0x2c2e <Dio_vidconfigChanel+0x1b6>
		}
		else
		{
			SET_BIT(DIO_DDRD_REG,pin);
    2c08:	a1 e3       	ldi	r26, 0x31	; 49
    2c0a:	b0 e0       	ldi	r27, 0x00	; 0
    2c0c:	e1 e3       	ldi	r30, 0x31	; 49
    2c0e:	f0 e0       	ldi	r31, 0x00	; 0
    2c10:	80 81       	ld	r24, Z
    2c12:	48 2f       	mov	r20, r24
    2c14:	8a 81       	ldd	r24, Y+2	; 0x02
    2c16:	28 2f       	mov	r18, r24
    2c18:	30 e0       	ldi	r19, 0x00	; 0
    2c1a:	81 e0       	ldi	r24, 0x01	; 1
    2c1c:	90 e0       	ldi	r25, 0x00	; 0
    2c1e:	02 2e       	mov	r0, r18
    2c20:	02 c0       	rjmp	.+4      	; 0x2c26 <Dio_vidconfigChanel+0x1ae>
    2c22:	88 0f       	add	r24, r24
    2c24:	99 1f       	adc	r25, r25
    2c26:	0a 94       	dec	r0
    2c28:	e2 f7       	brpl	.-8      	; 0x2c22 <Dio_vidconfigChanel+0x1aa>
    2c2a:	84 2b       	or	r24, r20
    2c2c:	8c 93       	st	X, r24
		}
		break;
	}
}
    2c2e:	0f 90       	pop	r0
    2c30:	0f 90       	pop	r0
    2c32:	0f 90       	pop	r0
    2c34:	0f 90       	pop	r0
    2c36:	0f 90       	pop	r0
    2c38:	cf 91       	pop	r28
    2c3a:	df 91       	pop	r29
    2c3c:	08 95       	ret

00002c3e <Dio_vidwriteChanel>:

void Dio_vidwriteChanel(dio_port_t port, dio_pin_t pin,dio_level_t level)
{
    2c3e:	df 93       	push	r29
    2c40:	cf 93       	push	r28
    2c42:	00 d0       	rcall	.+0      	; 0x2c44 <Dio_vidwriteChanel+0x6>
    2c44:	00 d0       	rcall	.+0      	; 0x2c46 <Dio_vidwriteChanel+0x8>
    2c46:	0f 92       	push	r0
    2c48:	cd b7       	in	r28, 0x3d	; 61
    2c4a:	de b7       	in	r29, 0x3e	; 62
    2c4c:	89 83       	std	Y+1, r24	; 0x01
    2c4e:	6a 83       	std	Y+2, r22	; 0x02
    2c50:	4b 83       	std	Y+3, r20	; 0x03
	switch (port)
    2c52:	89 81       	ldd	r24, Y+1	; 0x01
    2c54:	28 2f       	mov	r18, r24
    2c56:	30 e0       	ldi	r19, 0x00	; 0
    2c58:	3d 83       	std	Y+5, r19	; 0x05
    2c5a:	2c 83       	std	Y+4, r18	; 0x04
    2c5c:	8c 81       	ldd	r24, Y+4	; 0x04
    2c5e:	9d 81       	ldd	r25, Y+5	; 0x05
    2c60:	81 30       	cpi	r24, 0x01	; 1
    2c62:	91 05       	cpc	r25, r1
    2c64:	09 f4       	brne	.+2      	; 0x2c68 <Dio_vidwriteChanel+0x2a>
    2c66:	43 c0       	rjmp	.+134    	; 0x2cee <Dio_vidwriteChanel+0xb0>
    2c68:	2c 81       	ldd	r18, Y+4	; 0x04
    2c6a:	3d 81       	ldd	r19, Y+5	; 0x05
    2c6c:	22 30       	cpi	r18, 0x02	; 2
    2c6e:	31 05       	cpc	r19, r1
    2c70:	2c f4       	brge	.+10     	; 0x2c7c <Dio_vidwriteChanel+0x3e>
    2c72:	8c 81       	ldd	r24, Y+4	; 0x04
    2c74:	9d 81       	ldd	r25, Y+5	; 0x05
    2c76:	00 97       	sbiw	r24, 0x00	; 0
    2c78:	71 f0       	breq	.+28     	; 0x2c96 <Dio_vidwriteChanel+0x58>
    2c7a:	bc c0       	rjmp	.+376    	; 0x2df4 <Dio_vidwriteChanel+0x1b6>
    2c7c:	2c 81       	ldd	r18, Y+4	; 0x04
    2c7e:	3d 81       	ldd	r19, Y+5	; 0x05
    2c80:	22 30       	cpi	r18, 0x02	; 2
    2c82:	31 05       	cpc	r19, r1
    2c84:	09 f4       	brne	.+2      	; 0x2c88 <Dio_vidwriteChanel+0x4a>
    2c86:	5f c0       	rjmp	.+190    	; 0x2d46 <Dio_vidwriteChanel+0x108>
    2c88:	8c 81       	ldd	r24, Y+4	; 0x04
    2c8a:	9d 81       	ldd	r25, Y+5	; 0x05
    2c8c:	83 30       	cpi	r24, 0x03	; 3
    2c8e:	91 05       	cpc	r25, r1
    2c90:	09 f4       	brne	.+2      	; 0x2c94 <Dio_vidwriteChanel+0x56>
    2c92:	85 c0       	rjmp	.+266    	; 0x2d9e <Dio_vidwriteChanel+0x160>
    2c94:	af c0       	rjmp	.+350    	; 0x2df4 <Dio_vidwriteChanel+0x1b6>
	{
	case DIO_PORTA:
		if (level == DIO_HIGH)
    2c96:	8b 81       	ldd	r24, Y+3	; 0x03
    2c98:	81 30       	cpi	r24, 0x01	; 1
    2c9a:	a1 f4       	brne	.+40     	; 0x2cc4 <Dio_vidwriteChanel+0x86>
		{
			SET_BIT(DIO_PORTA_REG,pin);
    2c9c:	ab e3       	ldi	r26, 0x3B	; 59
    2c9e:	b0 e0       	ldi	r27, 0x00	; 0
    2ca0:	eb e3       	ldi	r30, 0x3B	; 59
    2ca2:	f0 e0       	ldi	r31, 0x00	; 0
    2ca4:	80 81       	ld	r24, Z
    2ca6:	48 2f       	mov	r20, r24
    2ca8:	8a 81       	ldd	r24, Y+2	; 0x02
    2caa:	28 2f       	mov	r18, r24
    2cac:	30 e0       	ldi	r19, 0x00	; 0
    2cae:	81 e0       	ldi	r24, 0x01	; 1
    2cb0:	90 e0       	ldi	r25, 0x00	; 0
    2cb2:	02 2e       	mov	r0, r18
    2cb4:	02 c0       	rjmp	.+4      	; 0x2cba <Dio_vidwriteChanel+0x7c>
    2cb6:	88 0f       	add	r24, r24
    2cb8:	99 1f       	adc	r25, r25
    2cba:	0a 94       	dec	r0
    2cbc:	e2 f7       	brpl	.-8      	; 0x2cb6 <Dio_vidwriteChanel+0x78>
    2cbe:	84 2b       	or	r24, r20
    2cc0:	8c 93       	st	X, r24
    2cc2:	98 c0       	rjmp	.+304    	; 0x2df4 <Dio_vidwriteChanel+0x1b6>
		}
		else
		{
			CLEAR_BIT(DIO_PORTA_REG,pin);
    2cc4:	ab e3       	ldi	r26, 0x3B	; 59
    2cc6:	b0 e0       	ldi	r27, 0x00	; 0
    2cc8:	eb e3       	ldi	r30, 0x3B	; 59
    2cca:	f0 e0       	ldi	r31, 0x00	; 0
    2ccc:	80 81       	ld	r24, Z
    2cce:	48 2f       	mov	r20, r24
    2cd0:	8a 81       	ldd	r24, Y+2	; 0x02
    2cd2:	28 2f       	mov	r18, r24
    2cd4:	30 e0       	ldi	r19, 0x00	; 0
    2cd6:	81 e0       	ldi	r24, 0x01	; 1
    2cd8:	90 e0       	ldi	r25, 0x00	; 0
    2cda:	02 2e       	mov	r0, r18
    2cdc:	02 c0       	rjmp	.+4      	; 0x2ce2 <Dio_vidwriteChanel+0xa4>
    2cde:	88 0f       	add	r24, r24
    2ce0:	99 1f       	adc	r25, r25
    2ce2:	0a 94       	dec	r0
    2ce4:	e2 f7       	brpl	.-8      	; 0x2cde <Dio_vidwriteChanel+0xa0>
    2ce6:	80 95       	com	r24
    2ce8:	84 23       	and	r24, r20
    2cea:	8c 93       	st	X, r24
    2cec:	83 c0       	rjmp	.+262    	; 0x2df4 <Dio_vidwriteChanel+0x1b6>
		}
		break;

	case DIO_PORTB:
		if (level == DIO_HIGH)
    2cee:	8b 81       	ldd	r24, Y+3	; 0x03
    2cf0:	81 30       	cpi	r24, 0x01	; 1
    2cf2:	a1 f4       	brne	.+40     	; 0x2d1c <Dio_vidwriteChanel+0xde>
		{
			SET_BIT(DIO_PORTB_REG,pin);
    2cf4:	a8 e3       	ldi	r26, 0x38	; 56
    2cf6:	b0 e0       	ldi	r27, 0x00	; 0
    2cf8:	e8 e3       	ldi	r30, 0x38	; 56
    2cfa:	f0 e0       	ldi	r31, 0x00	; 0
    2cfc:	80 81       	ld	r24, Z
    2cfe:	48 2f       	mov	r20, r24
    2d00:	8a 81       	ldd	r24, Y+2	; 0x02
    2d02:	28 2f       	mov	r18, r24
    2d04:	30 e0       	ldi	r19, 0x00	; 0
    2d06:	81 e0       	ldi	r24, 0x01	; 1
    2d08:	90 e0       	ldi	r25, 0x00	; 0
    2d0a:	02 2e       	mov	r0, r18
    2d0c:	02 c0       	rjmp	.+4      	; 0x2d12 <Dio_vidwriteChanel+0xd4>
    2d0e:	88 0f       	add	r24, r24
    2d10:	99 1f       	adc	r25, r25
    2d12:	0a 94       	dec	r0
    2d14:	e2 f7       	brpl	.-8      	; 0x2d0e <Dio_vidwriteChanel+0xd0>
    2d16:	84 2b       	or	r24, r20
    2d18:	8c 93       	st	X, r24
    2d1a:	6c c0       	rjmp	.+216    	; 0x2df4 <Dio_vidwriteChanel+0x1b6>
		}
		else
		{
			CLEAR_BIT(DIO_PORTB_REG,pin);
    2d1c:	a8 e3       	ldi	r26, 0x38	; 56
    2d1e:	b0 e0       	ldi	r27, 0x00	; 0
    2d20:	e8 e3       	ldi	r30, 0x38	; 56
    2d22:	f0 e0       	ldi	r31, 0x00	; 0
    2d24:	80 81       	ld	r24, Z
    2d26:	48 2f       	mov	r20, r24
    2d28:	8a 81       	ldd	r24, Y+2	; 0x02
    2d2a:	28 2f       	mov	r18, r24
    2d2c:	30 e0       	ldi	r19, 0x00	; 0
    2d2e:	81 e0       	ldi	r24, 0x01	; 1
    2d30:	90 e0       	ldi	r25, 0x00	; 0
    2d32:	02 2e       	mov	r0, r18
    2d34:	02 c0       	rjmp	.+4      	; 0x2d3a <Dio_vidwriteChanel+0xfc>
    2d36:	88 0f       	add	r24, r24
    2d38:	99 1f       	adc	r25, r25
    2d3a:	0a 94       	dec	r0
    2d3c:	e2 f7       	brpl	.-8      	; 0x2d36 <Dio_vidwriteChanel+0xf8>
    2d3e:	80 95       	com	r24
    2d40:	84 23       	and	r24, r20
    2d42:	8c 93       	st	X, r24
    2d44:	57 c0       	rjmp	.+174    	; 0x2df4 <Dio_vidwriteChanel+0x1b6>
		}
		break;

	case DIO_PORTC:
		if (level == DIO_HIGH)
    2d46:	8b 81       	ldd	r24, Y+3	; 0x03
    2d48:	81 30       	cpi	r24, 0x01	; 1
    2d4a:	a1 f4       	brne	.+40     	; 0x2d74 <Dio_vidwriteChanel+0x136>
		{
			SET_BIT(DIO_PORTC_REG,pin);
    2d4c:	a5 e3       	ldi	r26, 0x35	; 53
    2d4e:	b0 e0       	ldi	r27, 0x00	; 0
    2d50:	e5 e3       	ldi	r30, 0x35	; 53
    2d52:	f0 e0       	ldi	r31, 0x00	; 0
    2d54:	80 81       	ld	r24, Z
    2d56:	48 2f       	mov	r20, r24
    2d58:	8a 81       	ldd	r24, Y+2	; 0x02
    2d5a:	28 2f       	mov	r18, r24
    2d5c:	30 e0       	ldi	r19, 0x00	; 0
    2d5e:	81 e0       	ldi	r24, 0x01	; 1
    2d60:	90 e0       	ldi	r25, 0x00	; 0
    2d62:	02 2e       	mov	r0, r18
    2d64:	02 c0       	rjmp	.+4      	; 0x2d6a <Dio_vidwriteChanel+0x12c>
    2d66:	88 0f       	add	r24, r24
    2d68:	99 1f       	adc	r25, r25
    2d6a:	0a 94       	dec	r0
    2d6c:	e2 f7       	brpl	.-8      	; 0x2d66 <Dio_vidwriteChanel+0x128>
    2d6e:	84 2b       	or	r24, r20
    2d70:	8c 93       	st	X, r24
    2d72:	40 c0       	rjmp	.+128    	; 0x2df4 <Dio_vidwriteChanel+0x1b6>
		}
		else
		{
			CLEAR_BIT(DIO_PORTC_REG,pin);
    2d74:	a5 e3       	ldi	r26, 0x35	; 53
    2d76:	b0 e0       	ldi	r27, 0x00	; 0
    2d78:	e5 e3       	ldi	r30, 0x35	; 53
    2d7a:	f0 e0       	ldi	r31, 0x00	; 0
    2d7c:	80 81       	ld	r24, Z
    2d7e:	48 2f       	mov	r20, r24
    2d80:	8a 81       	ldd	r24, Y+2	; 0x02
    2d82:	28 2f       	mov	r18, r24
    2d84:	30 e0       	ldi	r19, 0x00	; 0
    2d86:	81 e0       	ldi	r24, 0x01	; 1
    2d88:	90 e0       	ldi	r25, 0x00	; 0
    2d8a:	02 2e       	mov	r0, r18
    2d8c:	02 c0       	rjmp	.+4      	; 0x2d92 <Dio_vidwriteChanel+0x154>
    2d8e:	88 0f       	add	r24, r24
    2d90:	99 1f       	adc	r25, r25
    2d92:	0a 94       	dec	r0
    2d94:	e2 f7       	brpl	.-8      	; 0x2d8e <Dio_vidwriteChanel+0x150>
    2d96:	80 95       	com	r24
    2d98:	84 23       	and	r24, r20
    2d9a:	8c 93       	st	X, r24
    2d9c:	2b c0       	rjmp	.+86     	; 0x2df4 <Dio_vidwriteChanel+0x1b6>
		}
		break;

	case DIO_PORTD:
		if (level == DIO_HIGH)
    2d9e:	8b 81       	ldd	r24, Y+3	; 0x03
    2da0:	81 30       	cpi	r24, 0x01	; 1
    2da2:	a1 f4       	brne	.+40     	; 0x2dcc <Dio_vidwriteChanel+0x18e>
		{
			SET_BIT(DIO_PORTD_REG,pin);
    2da4:	a2 e3       	ldi	r26, 0x32	; 50
    2da6:	b0 e0       	ldi	r27, 0x00	; 0
    2da8:	e2 e3       	ldi	r30, 0x32	; 50
    2daa:	f0 e0       	ldi	r31, 0x00	; 0
    2dac:	80 81       	ld	r24, Z
    2dae:	48 2f       	mov	r20, r24
    2db0:	8a 81       	ldd	r24, Y+2	; 0x02
    2db2:	28 2f       	mov	r18, r24
    2db4:	30 e0       	ldi	r19, 0x00	; 0
    2db6:	81 e0       	ldi	r24, 0x01	; 1
    2db8:	90 e0       	ldi	r25, 0x00	; 0
    2dba:	02 2e       	mov	r0, r18
    2dbc:	02 c0       	rjmp	.+4      	; 0x2dc2 <Dio_vidwriteChanel+0x184>
    2dbe:	88 0f       	add	r24, r24
    2dc0:	99 1f       	adc	r25, r25
    2dc2:	0a 94       	dec	r0
    2dc4:	e2 f7       	brpl	.-8      	; 0x2dbe <Dio_vidwriteChanel+0x180>
    2dc6:	84 2b       	or	r24, r20
    2dc8:	8c 93       	st	X, r24
    2dca:	14 c0       	rjmp	.+40     	; 0x2df4 <Dio_vidwriteChanel+0x1b6>
		}
		else
		{
			CLEAR_BIT(DIO_PORTD_REG,pin);
    2dcc:	a2 e3       	ldi	r26, 0x32	; 50
    2dce:	b0 e0       	ldi	r27, 0x00	; 0
    2dd0:	e2 e3       	ldi	r30, 0x32	; 50
    2dd2:	f0 e0       	ldi	r31, 0x00	; 0
    2dd4:	80 81       	ld	r24, Z
    2dd6:	48 2f       	mov	r20, r24
    2dd8:	8a 81       	ldd	r24, Y+2	; 0x02
    2dda:	28 2f       	mov	r18, r24
    2ddc:	30 e0       	ldi	r19, 0x00	; 0
    2dde:	81 e0       	ldi	r24, 0x01	; 1
    2de0:	90 e0       	ldi	r25, 0x00	; 0
    2de2:	02 2e       	mov	r0, r18
    2de4:	02 c0       	rjmp	.+4      	; 0x2dea <Dio_vidwriteChanel+0x1ac>
    2de6:	88 0f       	add	r24, r24
    2de8:	99 1f       	adc	r25, r25
    2dea:	0a 94       	dec	r0
    2dec:	e2 f7       	brpl	.-8      	; 0x2de6 <Dio_vidwriteChanel+0x1a8>
    2dee:	80 95       	com	r24
    2df0:	84 23       	and	r24, r20
    2df2:	8c 93       	st	X, r24
		}
		break;
	}
}
    2df4:	0f 90       	pop	r0
    2df6:	0f 90       	pop	r0
    2df8:	0f 90       	pop	r0
    2dfa:	0f 90       	pop	r0
    2dfc:	0f 90       	pop	r0
    2dfe:	cf 91       	pop	r28
    2e00:	df 91       	pop	r29
    2e02:	08 95       	ret

00002e04 <Dio_vidWriteChanelGroup>:

void Dio_vidWriteChanelGroup(dio_port_t port, u8 data, u8 mask)
{
    2e04:	df 93       	push	r29
    2e06:	cf 93       	push	r28
    2e08:	00 d0       	rcall	.+0      	; 0x2e0a <Dio_vidWriteChanelGroup+0x6>
    2e0a:	00 d0       	rcall	.+0      	; 0x2e0c <Dio_vidWriteChanelGroup+0x8>
    2e0c:	0f 92       	push	r0
    2e0e:	cd b7       	in	r28, 0x3d	; 61
    2e10:	de b7       	in	r29, 0x3e	; 62
    2e12:	89 83       	std	Y+1, r24	; 0x01
    2e14:	6a 83       	std	Y+2, r22	; 0x02
    2e16:	4b 83       	std	Y+3, r20	; 0x03
	switch(port)
    2e18:	89 81       	ldd	r24, Y+1	; 0x01
    2e1a:	28 2f       	mov	r18, r24
    2e1c:	30 e0       	ldi	r19, 0x00	; 0
    2e1e:	3d 83       	std	Y+5, r19	; 0x05
    2e20:	2c 83       	std	Y+4, r18	; 0x04
    2e22:	8c 81       	ldd	r24, Y+4	; 0x04
    2e24:	9d 81       	ldd	r25, Y+5	; 0x05
    2e26:	81 30       	cpi	r24, 0x01	; 1
    2e28:	91 05       	cpc	r25, r1
    2e2a:	01 f1       	breq	.+64     	; 0x2e6c <Dio_vidWriteChanelGroup+0x68>
    2e2c:	2c 81       	ldd	r18, Y+4	; 0x04
    2e2e:	3d 81       	ldd	r19, Y+5	; 0x05
    2e30:	22 30       	cpi	r18, 0x02	; 2
    2e32:	31 05       	cpc	r19, r1
    2e34:	2c f4       	brge	.+10     	; 0x2e40 <Dio_vidWriteChanelGroup+0x3c>
    2e36:	8c 81       	ldd	r24, Y+4	; 0x04
    2e38:	9d 81       	ldd	r25, Y+5	; 0x05
    2e3a:	00 97       	sbiw	r24, 0x00	; 0
    2e3c:	61 f0       	breq	.+24     	; 0x2e56 <Dio_vidWriteChanelGroup+0x52>
    2e3e:	36 c0       	rjmp	.+108    	; 0x2eac <Dio_vidWriteChanelGroup+0xa8>
    2e40:	2c 81       	ldd	r18, Y+4	; 0x04
    2e42:	3d 81       	ldd	r19, Y+5	; 0x05
    2e44:	22 30       	cpi	r18, 0x02	; 2
    2e46:	31 05       	cpc	r19, r1
    2e48:	e1 f0       	breq	.+56     	; 0x2e82 <Dio_vidWriteChanelGroup+0x7e>
    2e4a:	8c 81       	ldd	r24, Y+4	; 0x04
    2e4c:	9d 81       	ldd	r25, Y+5	; 0x05
    2e4e:	83 30       	cpi	r24, 0x03	; 3
    2e50:	91 05       	cpc	r25, r1
    2e52:	11 f1       	breq	.+68     	; 0x2e98 <Dio_vidWriteChanelGroup+0x94>
    2e54:	2b c0       	rjmp	.+86     	; 0x2eac <Dio_vidWriteChanelGroup+0xa8>
	{
	case DIO_PORTA:
		DIO_PORTA_REG = (DIO_PORTA_REG & mask)|(data);
    2e56:	ab e3       	ldi	r26, 0x3B	; 59
    2e58:	b0 e0       	ldi	r27, 0x00	; 0
    2e5a:	eb e3       	ldi	r30, 0x3B	; 59
    2e5c:	f0 e0       	ldi	r31, 0x00	; 0
    2e5e:	90 81       	ld	r25, Z
    2e60:	8b 81       	ldd	r24, Y+3	; 0x03
    2e62:	98 23       	and	r25, r24
    2e64:	8a 81       	ldd	r24, Y+2	; 0x02
    2e66:	89 2b       	or	r24, r25
    2e68:	8c 93       	st	X, r24
    2e6a:	20 c0       	rjmp	.+64     	; 0x2eac <Dio_vidWriteChanelGroup+0xa8>
		break;

	case DIO_PORTB:
		DIO_PORTB_REG = (DIO_PORTB_REG & mask)|(data);
    2e6c:	a8 e3       	ldi	r26, 0x38	; 56
    2e6e:	b0 e0       	ldi	r27, 0x00	; 0
    2e70:	e8 e3       	ldi	r30, 0x38	; 56
    2e72:	f0 e0       	ldi	r31, 0x00	; 0
    2e74:	90 81       	ld	r25, Z
    2e76:	8b 81       	ldd	r24, Y+3	; 0x03
    2e78:	98 23       	and	r25, r24
    2e7a:	8a 81       	ldd	r24, Y+2	; 0x02
    2e7c:	89 2b       	or	r24, r25
    2e7e:	8c 93       	st	X, r24
    2e80:	15 c0       	rjmp	.+42     	; 0x2eac <Dio_vidWriteChanelGroup+0xa8>
		break;

	case DIO_PORTC:
		DIO_PORTC_REG = (DIO_PORTC_REG & mask)|(data);
    2e82:	a5 e3       	ldi	r26, 0x35	; 53
    2e84:	b0 e0       	ldi	r27, 0x00	; 0
    2e86:	e5 e3       	ldi	r30, 0x35	; 53
    2e88:	f0 e0       	ldi	r31, 0x00	; 0
    2e8a:	90 81       	ld	r25, Z
    2e8c:	8b 81       	ldd	r24, Y+3	; 0x03
    2e8e:	98 23       	and	r25, r24
    2e90:	8a 81       	ldd	r24, Y+2	; 0x02
    2e92:	89 2b       	or	r24, r25
    2e94:	8c 93       	st	X, r24
    2e96:	0a c0       	rjmp	.+20     	; 0x2eac <Dio_vidWriteChanelGroup+0xa8>
		break;

	case DIO_PORTD:
		DIO_PORTD_REG = (DIO_PORTD_REG & mask)|(data);
    2e98:	a2 e3       	ldi	r26, 0x32	; 50
    2e9a:	b0 e0       	ldi	r27, 0x00	; 0
    2e9c:	e2 e3       	ldi	r30, 0x32	; 50
    2e9e:	f0 e0       	ldi	r31, 0x00	; 0
    2ea0:	90 81       	ld	r25, Z
    2ea2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ea4:	98 23       	and	r25, r24
    2ea6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ea8:	89 2b       	or	r24, r25
    2eaa:	8c 93       	st	X, r24
		break;
	}
}
    2eac:	0f 90       	pop	r0
    2eae:	0f 90       	pop	r0
    2eb0:	0f 90       	pop	r0
    2eb2:	0f 90       	pop	r0
    2eb4:	0f 90       	pop	r0
    2eb6:	cf 91       	pop	r28
    2eb8:	df 91       	pop	r29
    2eba:	08 95       	ret

00002ebc <Dio_udtreadChanel>:

dio_level_t Dio_udtreadChanel(dio_port_t port, dio_pin_t pin)
{
    2ebc:	df 93       	push	r29
    2ebe:	cf 93       	push	r28
    2ec0:	00 d0       	rcall	.+0      	; 0x2ec2 <Dio_udtreadChanel+0x6>
    2ec2:	00 d0       	rcall	.+0      	; 0x2ec4 <Dio_udtreadChanel+0x8>
    2ec4:	0f 92       	push	r0
    2ec6:	cd b7       	in	r28, 0x3d	; 61
    2ec8:	de b7       	in	r29, 0x3e	; 62
    2eca:	8a 83       	std	Y+2, r24	; 0x02
    2ecc:	6b 83       	std	Y+3, r22	; 0x03
	dio_level_t loc_result = DIO_LOW;
    2ece:	19 82       	std	Y+1, r1	; 0x01

	switch (port)
    2ed0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ed2:	28 2f       	mov	r18, r24
    2ed4:	30 e0       	ldi	r19, 0x00	; 0
    2ed6:	3d 83       	std	Y+5, r19	; 0x05
    2ed8:	2c 83       	std	Y+4, r18	; 0x04
    2eda:	4c 81       	ldd	r20, Y+4	; 0x04
    2edc:	5d 81       	ldd	r21, Y+5	; 0x05
    2ede:	41 30       	cpi	r20, 0x01	; 1
    2ee0:	51 05       	cpc	r21, r1
    2ee2:	79 f1       	breq	.+94     	; 0x2f42 <Dio_udtreadChanel+0x86>
    2ee4:	8c 81       	ldd	r24, Y+4	; 0x04
    2ee6:	9d 81       	ldd	r25, Y+5	; 0x05
    2ee8:	82 30       	cpi	r24, 0x02	; 2
    2eea:	91 05       	cpc	r25, r1
    2eec:	34 f4       	brge	.+12     	; 0x2efa <Dio_udtreadChanel+0x3e>
    2eee:	2c 81       	ldd	r18, Y+4	; 0x04
    2ef0:	3d 81       	ldd	r19, Y+5	; 0x05
    2ef2:	21 15       	cp	r18, r1
    2ef4:	31 05       	cpc	r19, r1
    2ef6:	69 f0       	breq	.+26     	; 0x2f12 <Dio_udtreadChanel+0x56>
    2ef8:	6b c0       	rjmp	.+214    	; 0x2fd0 <Dio_udtreadChanel+0x114>
    2efa:	4c 81       	ldd	r20, Y+4	; 0x04
    2efc:	5d 81       	ldd	r21, Y+5	; 0x05
    2efe:	42 30       	cpi	r20, 0x02	; 2
    2f00:	51 05       	cpc	r21, r1
    2f02:	b9 f1       	breq	.+110    	; 0x2f72 <Dio_udtreadChanel+0xb6>
    2f04:	8c 81       	ldd	r24, Y+4	; 0x04
    2f06:	9d 81       	ldd	r25, Y+5	; 0x05
    2f08:	83 30       	cpi	r24, 0x03	; 3
    2f0a:	91 05       	cpc	r25, r1
    2f0c:	09 f4       	brne	.+2      	; 0x2f10 <Dio_udtreadChanel+0x54>
    2f0e:	49 c0       	rjmp	.+146    	; 0x2fa2 <Dio_udtreadChanel+0xe6>
    2f10:	5f c0       	rjmp	.+190    	; 0x2fd0 <Dio_udtreadChanel+0x114>
	{
	case DIO_PORTA:
		if (CHECK_BIT(DIO_PINA_REG,pin) == 1)
    2f12:	e9 e3       	ldi	r30, 0x39	; 57
    2f14:	f0 e0       	ldi	r31, 0x00	; 0
    2f16:	80 81       	ld	r24, Z
    2f18:	28 2f       	mov	r18, r24
    2f1a:	30 e0       	ldi	r19, 0x00	; 0
    2f1c:	8b 81       	ldd	r24, Y+3	; 0x03
    2f1e:	88 2f       	mov	r24, r24
    2f20:	90 e0       	ldi	r25, 0x00	; 0
    2f22:	a9 01       	movw	r20, r18
    2f24:	02 c0       	rjmp	.+4      	; 0x2f2a <Dio_udtreadChanel+0x6e>
    2f26:	55 95       	asr	r21
    2f28:	47 95       	ror	r20
    2f2a:	8a 95       	dec	r24
    2f2c:	e2 f7       	brpl	.-8      	; 0x2f26 <Dio_udtreadChanel+0x6a>
    2f2e:	ca 01       	movw	r24, r20
    2f30:	81 70       	andi	r24, 0x01	; 1
    2f32:	90 70       	andi	r25, 0x00	; 0
    2f34:	88 23       	and	r24, r24
    2f36:	19 f0       	breq	.+6      	; 0x2f3e <Dio_udtreadChanel+0x82>
		{
			loc_result = DIO_HIGH;
    2f38:	81 e0       	ldi	r24, 0x01	; 1
    2f3a:	89 83       	std	Y+1, r24	; 0x01
    2f3c:	49 c0       	rjmp	.+146    	; 0x2fd0 <Dio_udtreadChanel+0x114>
		}
		else
		{
			loc_result = DIO_LOW;
    2f3e:	19 82       	std	Y+1, r1	; 0x01
    2f40:	47 c0       	rjmp	.+142    	; 0x2fd0 <Dio_udtreadChanel+0x114>
		}
		break;

	case DIO_PORTB:
		if (CHECK_BIT(DIO_PINB_REG,pin) == 1)
    2f42:	e6 e3       	ldi	r30, 0x36	; 54
    2f44:	f0 e0       	ldi	r31, 0x00	; 0
    2f46:	80 81       	ld	r24, Z
    2f48:	28 2f       	mov	r18, r24
    2f4a:	30 e0       	ldi	r19, 0x00	; 0
    2f4c:	8b 81       	ldd	r24, Y+3	; 0x03
    2f4e:	88 2f       	mov	r24, r24
    2f50:	90 e0       	ldi	r25, 0x00	; 0
    2f52:	a9 01       	movw	r20, r18
    2f54:	02 c0       	rjmp	.+4      	; 0x2f5a <Dio_udtreadChanel+0x9e>
    2f56:	55 95       	asr	r21
    2f58:	47 95       	ror	r20
    2f5a:	8a 95       	dec	r24
    2f5c:	e2 f7       	brpl	.-8      	; 0x2f56 <Dio_udtreadChanel+0x9a>
    2f5e:	ca 01       	movw	r24, r20
    2f60:	81 70       	andi	r24, 0x01	; 1
    2f62:	90 70       	andi	r25, 0x00	; 0
    2f64:	88 23       	and	r24, r24
    2f66:	19 f0       	breq	.+6      	; 0x2f6e <Dio_udtreadChanel+0xb2>
		{
			loc_result = DIO_HIGH;
    2f68:	81 e0       	ldi	r24, 0x01	; 1
    2f6a:	89 83       	std	Y+1, r24	; 0x01
    2f6c:	31 c0       	rjmp	.+98     	; 0x2fd0 <Dio_udtreadChanel+0x114>
		}
		else
		{
			loc_result = DIO_LOW;
    2f6e:	19 82       	std	Y+1, r1	; 0x01
    2f70:	2f c0       	rjmp	.+94     	; 0x2fd0 <Dio_udtreadChanel+0x114>
		}
		break;

	case DIO_PORTC:
		if (CHECK_BIT(DIO_PINC_REG,pin) == 1)
    2f72:	e3 e3       	ldi	r30, 0x33	; 51
    2f74:	f0 e0       	ldi	r31, 0x00	; 0
    2f76:	80 81       	ld	r24, Z
    2f78:	28 2f       	mov	r18, r24
    2f7a:	30 e0       	ldi	r19, 0x00	; 0
    2f7c:	8b 81       	ldd	r24, Y+3	; 0x03
    2f7e:	88 2f       	mov	r24, r24
    2f80:	90 e0       	ldi	r25, 0x00	; 0
    2f82:	a9 01       	movw	r20, r18
    2f84:	02 c0       	rjmp	.+4      	; 0x2f8a <Dio_udtreadChanel+0xce>
    2f86:	55 95       	asr	r21
    2f88:	47 95       	ror	r20
    2f8a:	8a 95       	dec	r24
    2f8c:	e2 f7       	brpl	.-8      	; 0x2f86 <Dio_udtreadChanel+0xca>
    2f8e:	ca 01       	movw	r24, r20
    2f90:	81 70       	andi	r24, 0x01	; 1
    2f92:	90 70       	andi	r25, 0x00	; 0
    2f94:	88 23       	and	r24, r24
    2f96:	19 f0       	breq	.+6      	; 0x2f9e <Dio_udtreadChanel+0xe2>
		{
			loc_result = DIO_HIGH;
    2f98:	81 e0       	ldi	r24, 0x01	; 1
    2f9a:	89 83       	std	Y+1, r24	; 0x01
    2f9c:	19 c0       	rjmp	.+50     	; 0x2fd0 <Dio_udtreadChanel+0x114>
		}
		else
		{
			loc_result = DIO_LOW;
    2f9e:	19 82       	std	Y+1, r1	; 0x01
    2fa0:	17 c0       	rjmp	.+46     	; 0x2fd0 <Dio_udtreadChanel+0x114>
		}
		break;

	case DIO_PORTD:
		if (CHECK_BIT(DIO_PIND_REG,pin) == 1)
    2fa2:	e0 e3       	ldi	r30, 0x30	; 48
    2fa4:	f0 e0       	ldi	r31, 0x00	; 0
    2fa6:	80 81       	ld	r24, Z
    2fa8:	28 2f       	mov	r18, r24
    2faa:	30 e0       	ldi	r19, 0x00	; 0
    2fac:	8b 81       	ldd	r24, Y+3	; 0x03
    2fae:	88 2f       	mov	r24, r24
    2fb0:	90 e0       	ldi	r25, 0x00	; 0
    2fb2:	a9 01       	movw	r20, r18
    2fb4:	02 c0       	rjmp	.+4      	; 0x2fba <Dio_udtreadChanel+0xfe>
    2fb6:	55 95       	asr	r21
    2fb8:	47 95       	ror	r20
    2fba:	8a 95       	dec	r24
    2fbc:	e2 f7       	brpl	.-8      	; 0x2fb6 <Dio_udtreadChanel+0xfa>
    2fbe:	ca 01       	movw	r24, r20
    2fc0:	81 70       	andi	r24, 0x01	; 1
    2fc2:	90 70       	andi	r25, 0x00	; 0
    2fc4:	88 23       	and	r24, r24
    2fc6:	19 f0       	breq	.+6      	; 0x2fce <Dio_udtreadChanel+0x112>
		{
			loc_result = DIO_HIGH;
    2fc8:	81 e0       	ldi	r24, 0x01	; 1
    2fca:	89 83       	std	Y+1, r24	; 0x01
    2fcc:	01 c0       	rjmp	.+2      	; 0x2fd0 <Dio_udtreadChanel+0x114>
		}
		else
		{
			loc_result = DIO_LOW;
    2fce:	19 82       	std	Y+1, r1	; 0x01
		}
		break;
	}
	return loc_result;
    2fd0:	89 81       	ldd	r24, Y+1	; 0x01
}
    2fd2:	0f 90       	pop	r0
    2fd4:	0f 90       	pop	r0
    2fd6:	0f 90       	pop	r0
    2fd8:	0f 90       	pop	r0
    2fda:	0f 90       	pop	r0
    2fdc:	cf 91       	pop	r28
    2fde:	df 91       	pop	r29
    2fe0:	08 95       	ret

00002fe2 <Dio_vidflipChanel>:

void Dio_vidflipChanel(dio_port_t port, dio_pin_t pin)
{
    2fe2:	df 93       	push	r29
    2fe4:	cf 93       	push	r28
    2fe6:	00 d0       	rcall	.+0      	; 0x2fe8 <Dio_vidflipChanel+0x6>
    2fe8:	00 d0       	rcall	.+0      	; 0x2fea <Dio_vidflipChanel+0x8>
    2fea:	cd b7       	in	r28, 0x3d	; 61
    2fec:	de b7       	in	r29, 0x3e	; 62
    2fee:	89 83       	std	Y+1, r24	; 0x01
    2ff0:	6a 83       	std	Y+2, r22	; 0x02
	switch (port)
    2ff2:	89 81       	ldd	r24, Y+1	; 0x01
    2ff4:	28 2f       	mov	r18, r24
    2ff6:	30 e0       	ldi	r19, 0x00	; 0
    2ff8:	3c 83       	std	Y+4, r19	; 0x04
    2ffa:	2b 83       	std	Y+3, r18	; 0x03
    2ffc:	8b 81       	ldd	r24, Y+3	; 0x03
    2ffe:	9c 81       	ldd	r25, Y+4	; 0x04
    3000:	81 30       	cpi	r24, 0x01	; 1
    3002:	91 05       	cpc	r25, r1
    3004:	49 f1       	breq	.+82     	; 0x3058 <Dio_vidflipChanel+0x76>
    3006:	2b 81       	ldd	r18, Y+3	; 0x03
    3008:	3c 81       	ldd	r19, Y+4	; 0x04
    300a:	22 30       	cpi	r18, 0x02	; 2
    300c:	31 05       	cpc	r19, r1
    300e:	2c f4       	brge	.+10     	; 0x301a <Dio_vidflipChanel+0x38>
    3010:	8b 81       	ldd	r24, Y+3	; 0x03
    3012:	9c 81       	ldd	r25, Y+4	; 0x04
    3014:	00 97       	sbiw	r24, 0x00	; 0
    3016:	61 f0       	breq	.+24     	; 0x3030 <Dio_vidflipChanel+0x4e>
    3018:	5a c0       	rjmp	.+180    	; 0x30ce <Dio_vidflipChanel+0xec>
    301a:	2b 81       	ldd	r18, Y+3	; 0x03
    301c:	3c 81       	ldd	r19, Y+4	; 0x04
    301e:	22 30       	cpi	r18, 0x02	; 2
    3020:	31 05       	cpc	r19, r1
    3022:	71 f1       	breq	.+92     	; 0x3080 <Dio_vidflipChanel+0x9e>
    3024:	8b 81       	ldd	r24, Y+3	; 0x03
    3026:	9c 81       	ldd	r25, Y+4	; 0x04
    3028:	83 30       	cpi	r24, 0x03	; 3
    302a:	91 05       	cpc	r25, r1
    302c:	e9 f1       	breq	.+122    	; 0x30a8 <Dio_vidflipChanel+0xc6>
    302e:	4f c0       	rjmp	.+158    	; 0x30ce <Dio_vidflipChanel+0xec>
	{
	case DIO_PORTA:
		FLIP_BIT(DIO_PORTA_REG,pin);
    3030:	ab e3       	ldi	r26, 0x3B	; 59
    3032:	b0 e0       	ldi	r27, 0x00	; 0
    3034:	eb e3       	ldi	r30, 0x3B	; 59
    3036:	f0 e0       	ldi	r31, 0x00	; 0
    3038:	80 81       	ld	r24, Z
    303a:	48 2f       	mov	r20, r24
    303c:	8a 81       	ldd	r24, Y+2	; 0x02
    303e:	28 2f       	mov	r18, r24
    3040:	30 e0       	ldi	r19, 0x00	; 0
    3042:	81 e0       	ldi	r24, 0x01	; 1
    3044:	90 e0       	ldi	r25, 0x00	; 0
    3046:	02 2e       	mov	r0, r18
    3048:	02 c0       	rjmp	.+4      	; 0x304e <Dio_vidflipChanel+0x6c>
    304a:	88 0f       	add	r24, r24
    304c:	99 1f       	adc	r25, r25
    304e:	0a 94       	dec	r0
    3050:	e2 f7       	brpl	.-8      	; 0x304a <Dio_vidflipChanel+0x68>
    3052:	84 27       	eor	r24, r20
    3054:	8c 93       	st	X, r24
    3056:	3b c0       	rjmp	.+118    	; 0x30ce <Dio_vidflipChanel+0xec>
		break;

	case DIO_PORTB:
		FLIP_BIT(DIO_PORTB_REG,pin);
    3058:	a8 e3       	ldi	r26, 0x38	; 56
    305a:	b0 e0       	ldi	r27, 0x00	; 0
    305c:	e8 e3       	ldi	r30, 0x38	; 56
    305e:	f0 e0       	ldi	r31, 0x00	; 0
    3060:	80 81       	ld	r24, Z
    3062:	48 2f       	mov	r20, r24
    3064:	8a 81       	ldd	r24, Y+2	; 0x02
    3066:	28 2f       	mov	r18, r24
    3068:	30 e0       	ldi	r19, 0x00	; 0
    306a:	81 e0       	ldi	r24, 0x01	; 1
    306c:	90 e0       	ldi	r25, 0x00	; 0
    306e:	02 2e       	mov	r0, r18
    3070:	02 c0       	rjmp	.+4      	; 0x3076 <Dio_vidflipChanel+0x94>
    3072:	88 0f       	add	r24, r24
    3074:	99 1f       	adc	r25, r25
    3076:	0a 94       	dec	r0
    3078:	e2 f7       	brpl	.-8      	; 0x3072 <Dio_vidflipChanel+0x90>
    307a:	84 27       	eor	r24, r20
    307c:	8c 93       	st	X, r24
    307e:	27 c0       	rjmp	.+78     	; 0x30ce <Dio_vidflipChanel+0xec>
		break;

	case DIO_PORTC:
		FLIP_BIT(DIO_PORTC_REG,pin);
    3080:	a5 e3       	ldi	r26, 0x35	; 53
    3082:	b0 e0       	ldi	r27, 0x00	; 0
    3084:	e5 e3       	ldi	r30, 0x35	; 53
    3086:	f0 e0       	ldi	r31, 0x00	; 0
    3088:	80 81       	ld	r24, Z
    308a:	48 2f       	mov	r20, r24
    308c:	8a 81       	ldd	r24, Y+2	; 0x02
    308e:	28 2f       	mov	r18, r24
    3090:	30 e0       	ldi	r19, 0x00	; 0
    3092:	81 e0       	ldi	r24, 0x01	; 1
    3094:	90 e0       	ldi	r25, 0x00	; 0
    3096:	02 2e       	mov	r0, r18
    3098:	02 c0       	rjmp	.+4      	; 0x309e <Dio_vidflipChanel+0xbc>
    309a:	88 0f       	add	r24, r24
    309c:	99 1f       	adc	r25, r25
    309e:	0a 94       	dec	r0
    30a0:	e2 f7       	brpl	.-8      	; 0x309a <Dio_vidflipChanel+0xb8>
    30a2:	84 27       	eor	r24, r20
    30a4:	8c 93       	st	X, r24
    30a6:	13 c0       	rjmp	.+38     	; 0x30ce <Dio_vidflipChanel+0xec>
		break;

	case DIO_PORTD:
		FLIP_BIT(DIO_PORTD_REG,pin);
    30a8:	a2 e3       	ldi	r26, 0x32	; 50
    30aa:	b0 e0       	ldi	r27, 0x00	; 0
    30ac:	e2 e3       	ldi	r30, 0x32	; 50
    30ae:	f0 e0       	ldi	r31, 0x00	; 0
    30b0:	80 81       	ld	r24, Z
    30b2:	48 2f       	mov	r20, r24
    30b4:	8a 81       	ldd	r24, Y+2	; 0x02
    30b6:	28 2f       	mov	r18, r24
    30b8:	30 e0       	ldi	r19, 0x00	; 0
    30ba:	81 e0       	ldi	r24, 0x01	; 1
    30bc:	90 e0       	ldi	r25, 0x00	; 0
    30be:	02 2e       	mov	r0, r18
    30c0:	02 c0       	rjmp	.+4      	; 0x30c6 <Dio_vidflipChanel+0xe4>
    30c2:	88 0f       	add	r24, r24
    30c4:	99 1f       	adc	r25, r25
    30c6:	0a 94       	dec	r0
    30c8:	e2 f7       	brpl	.-8      	; 0x30c2 <Dio_vidflipChanel+0xe0>
    30ca:	84 27       	eor	r24, r20
    30cc:	8c 93       	st	X, r24
		break;
	}
}
    30ce:	0f 90       	pop	r0
    30d0:	0f 90       	pop	r0
    30d2:	0f 90       	pop	r0
    30d4:	0f 90       	pop	r0
    30d6:	cf 91       	pop	r28
    30d8:	df 91       	pop	r29
    30da:	08 95       	ret

000030dc <Dio_vidPullUpEn>:
void Dio_vidPullUpEn(dio_port_t port, dio_pin_t pin)
{
    30dc:	df 93       	push	r29
    30de:	cf 93       	push	r28
    30e0:	00 d0       	rcall	.+0      	; 0x30e2 <Dio_vidPullUpEn+0x6>
    30e2:	00 d0       	rcall	.+0      	; 0x30e4 <Dio_vidPullUpEn+0x8>
    30e4:	cd b7       	in	r28, 0x3d	; 61
    30e6:	de b7       	in	r29, 0x3e	; 62
    30e8:	89 83       	std	Y+1, r24	; 0x01
    30ea:	6a 83       	std	Y+2, r22	; 0x02
	switch (port)
    30ec:	89 81       	ldd	r24, Y+1	; 0x01
    30ee:	28 2f       	mov	r18, r24
    30f0:	30 e0       	ldi	r19, 0x00	; 0
    30f2:	3c 83       	std	Y+4, r19	; 0x04
    30f4:	2b 83       	std	Y+3, r18	; 0x03
    30f6:	8b 81       	ldd	r24, Y+3	; 0x03
    30f8:	9c 81       	ldd	r25, Y+4	; 0x04
    30fa:	81 30       	cpi	r24, 0x01	; 1
    30fc:	91 05       	cpc	r25, r1
    30fe:	49 f1       	breq	.+82     	; 0x3152 <Dio_vidPullUpEn+0x76>
    3100:	2b 81       	ldd	r18, Y+3	; 0x03
    3102:	3c 81       	ldd	r19, Y+4	; 0x04
    3104:	22 30       	cpi	r18, 0x02	; 2
    3106:	31 05       	cpc	r19, r1
    3108:	2c f4       	brge	.+10     	; 0x3114 <Dio_vidPullUpEn+0x38>
    310a:	8b 81       	ldd	r24, Y+3	; 0x03
    310c:	9c 81       	ldd	r25, Y+4	; 0x04
    310e:	00 97       	sbiw	r24, 0x00	; 0
    3110:	61 f0       	breq	.+24     	; 0x312a <Dio_vidPullUpEn+0x4e>
    3112:	5a c0       	rjmp	.+180    	; 0x31c8 <Dio_vidPullUpEn+0xec>
    3114:	2b 81       	ldd	r18, Y+3	; 0x03
    3116:	3c 81       	ldd	r19, Y+4	; 0x04
    3118:	22 30       	cpi	r18, 0x02	; 2
    311a:	31 05       	cpc	r19, r1
    311c:	71 f1       	breq	.+92     	; 0x317a <Dio_vidPullUpEn+0x9e>
    311e:	8b 81       	ldd	r24, Y+3	; 0x03
    3120:	9c 81       	ldd	r25, Y+4	; 0x04
    3122:	83 30       	cpi	r24, 0x03	; 3
    3124:	91 05       	cpc	r25, r1
    3126:	e9 f1       	breq	.+122    	; 0x31a2 <Dio_vidPullUpEn+0xc6>
    3128:	4f c0       	rjmp	.+158    	; 0x31c8 <Dio_vidPullUpEn+0xec>
	{
	case DIO_PORTA:
		SET_BIT(DIO_PORTA_REG,pin);
    312a:	ab e3       	ldi	r26, 0x3B	; 59
    312c:	b0 e0       	ldi	r27, 0x00	; 0
    312e:	eb e3       	ldi	r30, 0x3B	; 59
    3130:	f0 e0       	ldi	r31, 0x00	; 0
    3132:	80 81       	ld	r24, Z
    3134:	48 2f       	mov	r20, r24
    3136:	8a 81       	ldd	r24, Y+2	; 0x02
    3138:	28 2f       	mov	r18, r24
    313a:	30 e0       	ldi	r19, 0x00	; 0
    313c:	81 e0       	ldi	r24, 0x01	; 1
    313e:	90 e0       	ldi	r25, 0x00	; 0
    3140:	02 2e       	mov	r0, r18
    3142:	02 c0       	rjmp	.+4      	; 0x3148 <Dio_vidPullUpEn+0x6c>
    3144:	88 0f       	add	r24, r24
    3146:	99 1f       	adc	r25, r25
    3148:	0a 94       	dec	r0
    314a:	e2 f7       	brpl	.-8      	; 0x3144 <Dio_vidPullUpEn+0x68>
    314c:	84 2b       	or	r24, r20
    314e:	8c 93       	st	X, r24
    3150:	3b c0       	rjmp	.+118    	; 0x31c8 <Dio_vidPullUpEn+0xec>
		break;

	case DIO_PORTB:
		SET_BIT(DIO_PORTB_REG,pin);
    3152:	a8 e3       	ldi	r26, 0x38	; 56
    3154:	b0 e0       	ldi	r27, 0x00	; 0
    3156:	e8 e3       	ldi	r30, 0x38	; 56
    3158:	f0 e0       	ldi	r31, 0x00	; 0
    315a:	80 81       	ld	r24, Z
    315c:	48 2f       	mov	r20, r24
    315e:	8a 81       	ldd	r24, Y+2	; 0x02
    3160:	28 2f       	mov	r18, r24
    3162:	30 e0       	ldi	r19, 0x00	; 0
    3164:	81 e0       	ldi	r24, 0x01	; 1
    3166:	90 e0       	ldi	r25, 0x00	; 0
    3168:	02 2e       	mov	r0, r18
    316a:	02 c0       	rjmp	.+4      	; 0x3170 <Dio_vidPullUpEn+0x94>
    316c:	88 0f       	add	r24, r24
    316e:	99 1f       	adc	r25, r25
    3170:	0a 94       	dec	r0
    3172:	e2 f7       	brpl	.-8      	; 0x316c <Dio_vidPullUpEn+0x90>
    3174:	84 2b       	or	r24, r20
    3176:	8c 93       	st	X, r24
    3178:	27 c0       	rjmp	.+78     	; 0x31c8 <Dio_vidPullUpEn+0xec>
		break;

	case DIO_PORTC:
		SET_BIT(DIO_PORTC_REG,pin);
    317a:	a5 e3       	ldi	r26, 0x35	; 53
    317c:	b0 e0       	ldi	r27, 0x00	; 0
    317e:	e5 e3       	ldi	r30, 0x35	; 53
    3180:	f0 e0       	ldi	r31, 0x00	; 0
    3182:	80 81       	ld	r24, Z
    3184:	48 2f       	mov	r20, r24
    3186:	8a 81       	ldd	r24, Y+2	; 0x02
    3188:	28 2f       	mov	r18, r24
    318a:	30 e0       	ldi	r19, 0x00	; 0
    318c:	81 e0       	ldi	r24, 0x01	; 1
    318e:	90 e0       	ldi	r25, 0x00	; 0
    3190:	02 2e       	mov	r0, r18
    3192:	02 c0       	rjmp	.+4      	; 0x3198 <Dio_vidPullUpEn+0xbc>
    3194:	88 0f       	add	r24, r24
    3196:	99 1f       	adc	r25, r25
    3198:	0a 94       	dec	r0
    319a:	e2 f7       	brpl	.-8      	; 0x3194 <Dio_vidPullUpEn+0xb8>
    319c:	84 2b       	or	r24, r20
    319e:	8c 93       	st	X, r24
    31a0:	13 c0       	rjmp	.+38     	; 0x31c8 <Dio_vidPullUpEn+0xec>
		break;

	case DIO_PORTD:
		SET_BIT(DIO_PORTD_REG,pin);
    31a2:	a2 e3       	ldi	r26, 0x32	; 50
    31a4:	b0 e0       	ldi	r27, 0x00	; 0
    31a6:	e2 e3       	ldi	r30, 0x32	; 50
    31a8:	f0 e0       	ldi	r31, 0x00	; 0
    31aa:	80 81       	ld	r24, Z
    31ac:	48 2f       	mov	r20, r24
    31ae:	8a 81       	ldd	r24, Y+2	; 0x02
    31b0:	28 2f       	mov	r18, r24
    31b2:	30 e0       	ldi	r19, 0x00	; 0
    31b4:	81 e0       	ldi	r24, 0x01	; 1
    31b6:	90 e0       	ldi	r25, 0x00	; 0
    31b8:	02 2e       	mov	r0, r18
    31ba:	02 c0       	rjmp	.+4      	; 0x31c0 <Dio_vidPullUpEn+0xe4>
    31bc:	88 0f       	add	r24, r24
    31be:	99 1f       	adc	r25, r25
    31c0:	0a 94       	dec	r0
    31c2:	e2 f7       	brpl	.-8      	; 0x31bc <Dio_vidPullUpEn+0xe0>
    31c4:	84 2b       	or	r24, r20
    31c6:	8c 93       	st	X, r24
		break;
	}
}
    31c8:	0f 90       	pop	r0
    31ca:	0f 90       	pop	r0
    31cc:	0f 90       	pop	r0
    31ce:	0f 90       	pop	r0
    31d0:	cf 91       	pop	r28
    31d2:	df 91       	pop	r29
    31d4:	08 95       	ret

000031d6 <Adc_vidInit>:
#include "Adc_Reg.h"
#include "Adc_Types.h"
#include "Bit_Math.h"

void Adc_vidInit(void)
{
    31d6:	df 93       	push	r29
    31d8:	cf 93       	push	r28
    31da:	cd b7       	in	r28, 0x3d	; 61
    31dc:	de b7       	in	r29, 0x3e	; 62

	/*	Enable ADC	*/
	SET_BIT(ADC_ADCSRA_REG, 7);
    31de:	a6 e2       	ldi	r26, 0x26	; 38
    31e0:	b0 e0       	ldi	r27, 0x00	; 0
    31e2:	e6 e2       	ldi	r30, 0x26	; 38
    31e4:	f0 e0       	ldi	r31, 0x00	; 0
    31e6:	80 81       	ld	r24, Z
    31e8:	80 68       	ori	r24, 0x80	; 128
    31ea:	8c 93       	st	X, r24
	/*	Configure ADC prescaler	 /128	*/
	ADC_ADCSRA_REG |= 7 /*0000 0111*/;
    31ec:	a6 e2       	ldi	r26, 0x26	; 38
    31ee:	b0 e0       	ldi	r27, 0x00	; 0
    31f0:	e6 e2       	ldi	r30, 0x26	; 38
    31f2:	f0 e0       	ldi	r31, 0x00	; 0
    31f4:	80 81       	ld	r24, Z
    31f6:	87 60       	ori	r24, 0x07	; 7
    31f8:	8c 93       	st	X, r24
	/*	Select Vref +	AVCC	*/
	SET_BIT(ADC_ADMUX_REG,6);
    31fa:	a7 e2       	ldi	r26, 0x27	; 39
    31fc:	b0 e0       	ldi	r27, 0x00	; 0
    31fe:	e7 e2       	ldi	r30, 0x27	; 39
    3200:	f0 e0       	ldi	r31, 0x00	; 0
    3202:	80 81       	ld	r24, Z
    3204:	80 64       	ori	r24, 0x40	; 64
    3206:	8c 93       	st	X, r24
}
    3208:	cf 91       	pop	r28
    320a:	df 91       	pop	r29
    320c:	08 95       	ret

0000320e <Adc_u16AdcRead>:

f64 Adc_u16AdcRead(adc_channlId_t channel)
{
    320e:	df 93       	push	r29
    3210:	cf 93       	push	r28
    3212:	cd b7       	in	r28, 0x3d	; 61
    3214:	de b7       	in	r29, 0x3e	; 62
    3216:	27 97       	sbiw	r28, 0x07	; 7
    3218:	0f b6       	in	r0, 0x3f	; 63
    321a:	f8 94       	cli
    321c:	de bf       	out	0x3e, r29	; 62
    321e:	0f be       	out	0x3f, r0	; 63
    3220:	cd bf       	out	0x3d, r28	; 61
    3222:	8f 83       	std	Y+7, r24	; 0x07
	u16 loc_adcResult = 0;
    3224:	1e 82       	std	Y+6, r1	; 0x06
    3226:	1d 82       	std	Y+5, r1	; 0x05
	f64 loc_volt =0;
    3228:	80 e0       	ldi	r24, 0x00	; 0
    322a:	90 e0       	ldi	r25, 0x00	; 0
    322c:	a0 e0       	ldi	r26, 0x00	; 0
    322e:	b0 e0       	ldi	r27, 0x00	; 0
    3230:	89 83       	std	Y+1, r24	; 0x01
    3232:	9a 83       	std	Y+2, r25	; 0x02
    3234:	ab 83       	std	Y+3, r26	; 0x03
    3236:	bc 83       	std	Y+4, r27	; 0x04
	/*	select ADC channel	*/
	ADC_ADMUX_REG =  (ADC_ADMUX_REG & 0xF8)| channel;
    3238:	a7 e2       	ldi	r26, 0x27	; 39
    323a:	b0 e0       	ldi	r27, 0x00	; 0
    323c:	e7 e2       	ldi	r30, 0x27	; 39
    323e:	f0 e0       	ldi	r31, 0x00	; 0
    3240:	80 81       	ld	r24, Z
    3242:	98 2f       	mov	r25, r24
    3244:	98 7f       	andi	r25, 0xF8	; 248
    3246:	8f 81       	ldd	r24, Y+7	; 0x07
    3248:	89 2b       	or	r24, r25
    324a:	8c 93       	st	X, r24
	/*	Start ADC conversion	*/
	SET_BIT(ADC_ADCSRA_REG,6);
    324c:	a6 e2       	ldi	r26, 0x26	; 38
    324e:	b0 e0       	ldi	r27, 0x00	; 0
    3250:	e6 e2       	ldi	r30, 0x26	; 38
    3252:	f0 e0       	ldi	r31, 0x00	; 0
    3254:	80 81       	ld	r24, Z
    3256:	80 64       	ori	r24, 0x40	; 64
    3258:	8c 93       	st	X, r24

	/*	wait until ADIF flag become 1 */
	while(CHECK_BIT(ADC_ADCSRA_REG,4) !=1)
    325a:	e6 e2       	ldi	r30, 0x26	; 38
    325c:	f0 e0       	ldi	r31, 0x00	; 0
    325e:	80 81       	ld	r24, Z
    3260:	82 95       	swap	r24
    3262:	8f 70       	andi	r24, 0x0F	; 15
    3264:	88 2f       	mov	r24, r24
    3266:	90 e0       	ldi	r25, 0x00	; 0
    3268:	81 70       	andi	r24, 0x01	; 1
    326a:	90 70       	andi	r25, 0x00	; 0
    326c:	00 97       	sbiw	r24, 0x00	; 0
    326e:	a9 f3       	breq	.-22     	; 0x325a <Adc_u16AdcRead+0x4c>
	{
		/*	Do Nothing	*/
	}

	/*	clear ADIF by writing 1 	*/
	SET_BIT(ADC_ADCSRA_REG,4);
    3270:	a6 e2       	ldi	r26, 0x26	; 38
    3272:	b0 e0       	ldi	r27, 0x00	; 0
    3274:	e6 e2       	ldi	r30, 0x26	; 38
    3276:	f0 e0       	ldi	r31, 0x00	; 0
    3278:	80 81       	ld	r24, Z
    327a:	80 61       	ori	r24, 0x10	; 16
    327c:	8c 93       	st	X, r24

	/*	read ADC result form ADCL, ADCH	*/
	loc_adcResult=(ADC_ADCL_REG|(ADC_ADCH_REG<<8));
    327e:	e4 e2       	ldi	r30, 0x24	; 36
    3280:	f0 e0       	ldi	r31, 0x00	; 0
    3282:	80 81       	ld	r24, Z
    3284:	28 2f       	mov	r18, r24
    3286:	30 e0       	ldi	r19, 0x00	; 0
    3288:	e5 e2       	ldi	r30, 0x25	; 37
    328a:	f0 e0       	ldi	r31, 0x00	; 0
    328c:	80 81       	ld	r24, Z
    328e:	88 2f       	mov	r24, r24
    3290:	90 e0       	ldi	r25, 0x00	; 0
    3292:	98 2f       	mov	r25, r24
    3294:	88 27       	eor	r24, r24
    3296:	82 2b       	or	r24, r18
    3298:	93 2b       	or	r25, r19
    329a:	9e 83       	std	Y+6, r25	; 0x06
    329c:	8d 83       	std	Y+5, r24	; 0x05

	loc_volt = loc_adcResult * ADC_STEP;
    329e:	8d 81       	ldd	r24, Y+5	; 0x05
    32a0:	9e 81       	ldd	r25, Y+6	; 0x06
    32a2:	cc 01       	movw	r24, r24
    32a4:	a0 e0       	ldi	r26, 0x00	; 0
    32a6:	b0 e0       	ldi	r27, 0x00	; 0
    32a8:	bc 01       	movw	r22, r24
    32aa:	cd 01       	movw	r24, r26
    32ac:	0e 94 a1 04 	call	0x942	; 0x942 <__floatunsisf>
    32b0:	dc 01       	movw	r26, r24
    32b2:	cb 01       	movw	r24, r22
    32b4:	bc 01       	movw	r22, r24
    32b6:	cd 01       	movw	r24, r26
    32b8:	2a e9       	ldi	r18, 0x9A	; 154
    32ba:	39 e9       	ldi	r19, 0x99	; 153
    32bc:	49 e9       	ldi	r20, 0x99	; 153
    32be:	50 e4       	ldi	r21, 0x40	; 64
    32c0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    32c4:	dc 01       	movw	r26, r24
    32c6:	cb 01       	movw	r24, r22
    32c8:	89 83       	std	Y+1, r24	; 0x01
    32ca:	9a 83       	std	Y+2, r25	; 0x02
    32cc:	ab 83       	std	Y+3, r26	; 0x03
    32ce:	bc 83       	std	Y+4, r27	; 0x04
	return loc_volt;
    32d0:	89 81       	ldd	r24, Y+1	; 0x01
    32d2:	9a 81       	ldd	r25, Y+2	; 0x02
    32d4:	ab 81       	ldd	r26, Y+3	; 0x03
    32d6:	bc 81       	ldd	r27, Y+4	; 0x04
}
    32d8:	bc 01       	movw	r22, r24
    32da:	cd 01       	movw	r24, r26
    32dc:	27 96       	adiw	r28, 0x07	; 7
    32de:	0f b6       	in	r0, 0x3f	; 63
    32e0:	f8 94       	cli
    32e2:	de bf       	out	0x3e, r29	; 62
    32e4:	0f be       	out	0x3f, r0	; 63
    32e6:	cd bf       	out	0x3d, r28	; 61
    32e8:	cf 91       	pop	r28
    32ea:	df 91       	pop	r29
    32ec:	08 95       	ret

000032ee <__udivmodqi4>:
    32ee:	99 1b       	sub	r25, r25
    32f0:	79 e0       	ldi	r23, 0x09	; 9
    32f2:	04 c0       	rjmp	.+8      	; 0x32fc <__udivmodqi4_ep>

000032f4 <__udivmodqi4_loop>:
    32f4:	99 1f       	adc	r25, r25
    32f6:	96 17       	cp	r25, r22
    32f8:	08 f0       	brcs	.+2      	; 0x32fc <__udivmodqi4_ep>
    32fa:	96 1b       	sub	r25, r22

000032fc <__udivmodqi4_ep>:
    32fc:	88 1f       	adc	r24, r24
    32fe:	7a 95       	dec	r23
    3300:	c9 f7       	brne	.-14     	; 0x32f4 <__udivmodqi4_loop>
    3302:	80 95       	com	r24
    3304:	08 95       	ret

00003306 <__udivmodsi4>:
    3306:	a1 e2       	ldi	r26, 0x21	; 33
    3308:	1a 2e       	mov	r1, r26
    330a:	aa 1b       	sub	r26, r26
    330c:	bb 1b       	sub	r27, r27
    330e:	fd 01       	movw	r30, r26
    3310:	0d c0       	rjmp	.+26     	; 0x332c <__udivmodsi4_ep>

00003312 <__udivmodsi4_loop>:
    3312:	aa 1f       	adc	r26, r26
    3314:	bb 1f       	adc	r27, r27
    3316:	ee 1f       	adc	r30, r30
    3318:	ff 1f       	adc	r31, r31
    331a:	a2 17       	cp	r26, r18
    331c:	b3 07       	cpc	r27, r19
    331e:	e4 07       	cpc	r30, r20
    3320:	f5 07       	cpc	r31, r21
    3322:	20 f0       	brcs	.+8      	; 0x332c <__udivmodsi4_ep>
    3324:	a2 1b       	sub	r26, r18
    3326:	b3 0b       	sbc	r27, r19
    3328:	e4 0b       	sbc	r30, r20
    332a:	f5 0b       	sbc	r31, r21

0000332c <__udivmodsi4_ep>:
    332c:	66 1f       	adc	r22, r22
    332e:	77 1f       	adc	r23, r23
    3330:	88 1f       	adc	r24, r24
    3332:	99 1f       	adc	r25, r25
    3334:	1a 94       	dec	r1
    3336:	69 f7       	brne	.-38     	; 0x3312 <__udivmodsi4_loop>
    3338:	60 95       	com	r22
    333a:	70 95       	com	r23
    333c:	80 95       	com	r24
    333e:	90 95       	com	r25
    3340:	9b 01       	movw	r18, r22
    3342:	ac 01       	movw	r20, r24
    3344:	bd 01       	movw	r22, r26
    3346:	cf 01       	movw	r24, r30
    3348:	08 95       	ret

0000334a <__prologue_saves__>:
    334a:	2f 92       	push	r2
    334c:	3f 92       	push	r3
    334e:	4f 92       	push	r4
    3350:	5f 92       	push	r5
    3352:	6f 92       	push	r6
    3354:	7f 92       	push	r7
    3356:	8f 92       	push	r8
    3358:	9f 92       	push	r9
    335a:	af 92       	push	r10
    335c:	bf 92       	push	r11
    335e:	cf 92       	push	r12
    3360:	df 92       	push	r13
    3362:	ef 92       	push	r14
    3364:	ff 92       	push	r15
    3366:	0f 93       	push	r16
    3368:	1f 93       	push	r17
    336a:	cf 93       	push	r28
    336c:	df 93       	push	r29
    336e:	cd b7       	in	r28, 0x3d	; 61
    3370:	de b7       	in	r29, 0x3e	; 62
    3372:	ca 1b       	sub	r28, r26
    3374:	db 0b       	sbc	r29, r27
    3376:	0f b6       	in	r0, 0x3f	; 63
    3378:	f8 94       	cli
    337a:	de bf       	out	0x3e, r29	; 62
    337c:	0f be       	out	0x3f, r0	; 63
    337e:	cd bf       	out	0x3d, r28	; 61
    3380:	09 94       	ijmp

00003382 <__epilogue_restores__>:
    3382:	2a 88       	ldd	r2, Y+18	; 0x12
    3384:	39 88       	ldd	r3, Y+17	; 0x11
    3386:	48 88       	ldd	r4, Y+16	; 0x10
    3388:	5f 84       	ldd	r5, Y+15	; 0x0f
    338a:	6e 84       	ldd	r6, Y+14	; 0x0e
    338c:	7d 84       	ldd	r7, Y+13	; 0x0d
    338e:	8c 84       	ldd	r8, Y+12	; 0x0c
    3390:	9b 84       	ldd	r9, Y+11	; 0x0b
    3392:	aa 84       	ldd	r10, Y+10	; 0x0a
    3394:	b9 84       	ldd	r11, Y+9	; 0x09
    3396:	c8 84       	ldd	r12, Y+8	; 0x08
    3398:	df 80       	ldd	r13, Y+7	; 0x07
    339a:	ee 80       	ldd	r14, Y+6	; 0x06
    339c:	fd 80       	ldd	r15, Y+5	; 0x05
    339e:	0c 81       	ldd	r16, Y+4	; 0x04
    33a0:	1b 81       	ldd	r17, Y+3	; 0x03
    33a2:	aa 81       	ldd	r26, Y+2	; 0x02
    33a4:	b9 81       	ldd	r27, Y+1	; 0x01
    33a6:	ce 0f       	add	r28, r30
    33a8:	d1 1d       	adc	r29, r1
    33aa:	0f b6       	in	r0, 0x3f	; 63
    33ac:	f8 94       	cli
    33ae:	de bf       	out	0x3e, r29	; 62
    33b0:	0f be       	out	0x3f, r0	; 63
    33b2:	cd bf       	out	0x3d, r28	; 61
    33b4:	ed 01       	movw	r28, r26
    33b6:	08 95       	ret

000033b8 <sprintf>:
    33b8:	ae e0       	ldi	r26, 0x0E	; 14
    33ba:	b0 e0       	ldi	r27, 0x00	; 0
    33bc:	e2 ee       	ldi	r30, 0xE2	; 226
    33be:	f9 e1       	ldi	r31, 0x19	; 25
    33c0:	0c 94 b3 19 	jmp	0x3366	; 0x3366 <__prologue_saves__+0x1c>
    33c4:	0d 89       	ldd	r16, Y+21	; 0x15
    33c6:	1e 89       	ldd	r17, Y+22	; 0x16
    33c8:	86 e0       	ldi	r24, 0x06	; 6
    33ca:	8c 83       	std	Y+4, r24	; 0x04
    33cc:	1a 83       	std	Y+2, r17	; 0x02
    33ce:	09 83       	std	Y+1, r16	; 0x01
    33d0:	8f ef       	ldi	r24, 0xFF	; 255
    33d2:	9f e7       	ldi	r25, 0x7F	; 127
    33d4:	9e 83       	std	Y+6, r25	; 0x06
    33d6:	8d 83       	std	Y+5, r24	; 0x05
    33d8:	9e 01       	movw	r18, r28
    33da:	27 5e       	subi	r18, 0xE7	; 231
    33dc:	3f 4f       	sbci	r19, 0xFF	; 255
    33de:	ce 01       	movw	r24, r28
    33e0:	01 96       	adiw	r24, 0x01	; 1
    33e2:	6f 89       	ldd	r22, Y+23	; 0x17
    33e4:	78 8d       	ldd	r23, Y+24	; 0x18
    33e6:	a9 01       	movw	r20, r18
    33e8:	0e 94 00 1a 	call	0x3400	; 0x3400 <vfprintf>
    33ec:	2f 81       	ldd	r18, Y+7	; 0x07
    33ee:	38 85       	ldd	r19, Y+8	; 0x08
    33f0:	02 0f       	add	r16, r18
    33f2:	13 1f       	adc	r17, r19
    33f4:	f8 01       	movw	r30, r16
    33f6:	10 82       	st	Z, r1
    33f8:	2e 96       	adiw	r28, 0x0e	; 14
    33fa:	e4 e0       	ldi	r30, 0x04	; 4
    33fc:	0c 94 cf 19 	jmp	0x339e	; 0x339e <__epilogue_restores__+0x1c>

00003400 <vfprintf>:
    3400:	ab e0       	ldi	r26, 0x0B	; 11
    3402:	b0 e0       	ldi	r27, 0x00	; 0
    3404:	e6 e0       	ldi	r30, 0x06	; 6
    3406:	fa e1       	ldi	r31, 0x1A	; 26
    3408:	0c 94 a5 19 	jmp	0x334a	; 0x334a <__prologue_saves__>
    340c:	3c 01       	movw	r6, r24
    340e:	2b 01       	movw	r4, r22
    3410:	5a 01       	movw	r10, r20
    3412:	fc 01       	movw	r30, r24
    3414:	17 82       	std	Z+7, r1	; 0x07
    3416:	16 82       	std	Z+6, r1	; 0x06
    3418:	83 81       	ldd	r24, Z+3	; 0x03
    341a:	81 fd       	sbrc	r24, 1
    341c:	03 c0       	rjmp	.+6      	; 0x3424 <vfprintf+0x24>
    341e:	6f ef       	ldi	r22, 0xFF	; 255
    3420:	7f ef       	ldi	r23, 0xFF	; 255
    3422:	c6 c1       	rjmp	.+908    	; 0x37b0 <vfprintf+0x3b0>
    3424:	9a e0       	ldi	r25, 0x0A	; 10
    3426:	89 2e       	mov	r8, r25
    3428:	1e 01       	movw	r2, r28
    342a:	08 94       	sec
    342c:	21 1c       	adc	r2, r1
    342e:	31 1c       	adc	r3, r1
    3430:	f3 01       	movw	r30, r6
    3432:	23 81       	ldd	r18, Z+3	; 0x03
    3434:	f2 01       	movw	r30, r4
    3436:	23 fd       	sbrc	r18, 3
    3438:	85 91       	lpm	r24, Z+
    343a:	23 ff       	sbrs	r18, 3
    343c:	81 91       	ld	r24, Z+
    343e:	2f 01       	movw	r4, r30
    3440:	88 23       	and	r24, r24
    3442:	09 f4       	brne	.+2      	; 0x3446 <vfprintf+0x46>
    3444:	b2 c1       	rjmp	.+868    	; 0x37aa <vfprintf+0x3aa>
    3446:	85 32       	cpi	r24, 0x25	; 37
    3448:	39 f4       	brne	.+14     	; 0x3458 <vfprintf+0x58>
    344a:	23 fd       	sbrc	r18, 3
    344c:	85 91       	lpm	r24, Z+
    344e:	23 ff       	sbrs	r18, 3
    3450:	81 91       	ld	r24, Z+
    3452:	2f 01       	movw	r4, r30
    3454:	85 32       	cpi	r24, 0x25	; 37
    3456:	29 f4       	brne	.+10     	; 0x3462 <vfprintf+0x62>
    3458:	90 e0       	ldi	r25, 0x00	; 0
    345a:	b3 01       	movw	r22, r6
    345c:	0e 94 f3 1b 	call	0x37e6	; 0x37e6 <fputc>
    3460:	e7 cf       	rjmp	.-50     	; 0x3430 <vfprintf+0x30>
    3462:	98 2f       	mov	r25, r24
    3464:	ff 24       	eor	r15, r15
    3466:	ee 24       	eor	r14, r14
    3468:	99 24       	eor	r9, r9
    346a:	ff e1       	ldi	r31, 0x1F	; 31
    346c:	ff 15       	cp	r31, r15
    346e:	d0 f0       	brcs	.+52     	; 0x34a4 <vfprintf+0xa4>
    3470:	9b 32       	cpi	r25, 0x2B	; 43
    3472:	69 f0       	breq	.+26     	; 0x348e <vfprintf+0x8e>
    3474:	9c 32       	cpi	r25, 0x2C	; 44
    3476:	28 f4       	brcc	.+10     	; 0x3482 <vfprintf+0x82>
    3478:	90 32       	cpi	r25, 0x20	; 32
    347a:	59 f0       	breq	.+22     	; 0x3492 <vfprintf+0x92>
    347c:	93 32       	cpi	r25, 0x23	; 35
    347e:	91 f4       	brne	.+36     	; 0x34a4 <vfprintf+0xa4>
    3480:	0e c0       	rjmp	.+28     	; 0x349e <vfprintf+0x9e>
    3482:	9d 32       	cpi	r25, 0x2D	; 45
    3484:	49 f0       	breq	.+18     	; 0x3498 <vfprintf+0x98>
    3486:	90 33       	cpi	r25, 0x30	; 48
    3488:	69 f4       	brne	.+26     	; 0x34a4 <vfprintf+0xa4>
    348a:	41 e0       	ldi	r20, 0x01	; 1
    348c:	24 c0       	rjmp	.+72     	; 0x34d6 <vfprintf+0xd6>
    348e:	52 e0       	ldi	r21, 0x02	; 2
    3490:	f5 2a       	or	r15, r21
    3492:	84 e0       	ldi	r24, 0x04	; 4
    3494:	f8 2a       	or	r15, r24
    3496:	28 c0       	rjmp	.+80     	; 0x34e8 <vfprintf+0xe8>
    3498:	98 e0       	ldi	r25, 0x08	; 8
    349a:	f9 2a       	or	r15, r25
    349c:	25 c0       	rjmp	.+74     	; 0x34e8 <vfprintf+0xe8>
    349e:	e0 e1       	ldi	r30, 0x10	; 16
    34a0:	fe 2a       	or	r15, r30
    34a2:	22 c0       	rjmp	.+68     	; 0x34e8 <vfprintf+0xe8>
    34a4:	f7 fc       	sbrc	r15, 7
    34a6:	29 c0       	rjmp	.+82     	; 0x34fa <vfprintf+0xfa>
    34a8:	89 2f       	mov	r24, r25
    34aa:	80 53       	subi	r24, 0x30	; 48
    34ac:	8a 30       	cpi	r24, 0x0A	; 10
    34ae:	70 f4       	brcc	.+28     	; 0x34cc <vfprintf+0xcc>
    34b0:	f6 fe       	sbrs	r15, 6
    34b2:	05 c0       	rjmp	.+10     	; 0x34be <vfprintf+0xbe>
    34b4:	98 9c       	mul	r9, r8
    34b6:	90 2c       	mov	r9, r0
    34b8:	11 24       	eor	r1, r1
    34ba:	98 0e       	add	r9, r24
    34bc:	15 c0       	rjmp	.+42     	; 0x34e8 <vfprintf+0xe8>
    34be:	e8 9c       	mul	r14, r8
    34c0:	e0 2c       	mov	r14, r0
    34c2:	11 24       	eor	r1, r1
    34c4:	e8 0e       	add	r14, r24
    34c6:	f0 e2       	ldi	r31, 0x20	; 32
    34c8:	ff 2a       	or	r15, r31
    34ca:	0e c0       	rjmp	.+28     	; 0x34e8 <vfprintf+0xe8>
    34cc:	9e 32       	cpi	r25, 0x2E	; 46
    34ce:	29 f4       	brne	.+10     	; 0x34da <vfprintf+0xda>
    34d0:	f6 fc       	sbrc	r15, 6
    34d2:	6b c1       	rjmp	.+726    	; 0x37aa <vfprintf+0x3aa>
    34d4:	40 e4       	ldi	r20, 0x40	; 64
    34d6:	f4 2a       	or	r15, r20
    34d8:	07 c0       	rjmp	.+14     	; 0x34e8 <vfprintf+0xe8>
    34da:	9c 36       	cpi	r25, 0x6C	; 108
    34dc:	19 f4       	brne	.+6      	; 0x34e4 <vfprintf+0xe4>
    34de:	50 e8       	ldi	r21, 0x80	; 128
    34e0:	f5 2a       	or	r15, r21
    34e2:	02 c0       	rjmp	.+4      	; 0x34e8 <vfprintf+0xe8>
    34e4:	98 36       	cpi	r25, 0x68	; 104
    34e6:	49 f4       	brne	.+18     	; 0x34fa <vfprintf+0xfa>
    34e8:	f2 01       	movw	r30, r4
    34ea:	23 fd       	sbrc	r18, 3
    34ec:	95 91       	lpm	r25, Z+
    34ee:	23 ff       	sbrs	r18, 3
    34f0:	91 91       	ld	r25, Z+
    34f2:	2f 01       	movw	r4, r30
    34f4:	99 23       	and	r25, r25
    34f6:	09 f0       	breq	.+2      	; 0x34fa <vfprintf+0xfa>
    34f8:	b8 cf       	rjmp	.-144    	; 0x346a <vfprintf+0x6a>
    34fa:	89 2f       	mov	r24, r25
    34fc:	85 54       	subi	r24, 0x45	; 69
    34fe:	83 30       	cpi	r24, 0x03	; 3
    3500:	18 f0       	brcs	.+6      	; 0x3508 <vfprintf+0x108>
    3502:	80 52       	subi	r24, 0x20	; 32
    3504:	83 30       	cpi	r24, 0x03	; 3
    3506:	38 f4       	brcc	.+14     	; 0x3516 <vfprintf+0x116>
    3508:	44 e0       	ldi	r20, 0x04	; 4
    350a:	50 e0       	ldi	r21, 0x00	; 0
    350c:	a4 0e       	add	r10, r20
    350e:	b5 1e       	adc	r11, r21
    3510:	5f e3       	ldi	r21, 0x3F	; 63
    3512:	59 83       	std	Y+1, r21	; 0x01
    3514:	0f c0       	rjmp	.+30     	; 0x3534 <vfprintf+0x134>
    3516:	93 36       	cpi	r25, 0x63	; 99
    3518:	31 f0       	breq	.+12     	; 0x3526 <vfprintf+0x126>
    351a:	93 37       	cpi	r25, 0x73	; 115
    351c:	79 f0       	breq	.+30     	; 0x353c <vfprintf+0x13c>
    351e:	93 35       	cpi	r25, 0x53	; 83
    3520:	09 f0       	breq	.+2      	; 0x3524 <vfprintf+0x124>
    3522:	56 c0       	rjmp	.+172    	; 0x35d0 <vfprintf+0x1d0>
    3524:	20 c0       	rjmp	.+64     	; 0x3566 <vfprintf+0x166>
    3526:	f5 01       	movw	r30, r10
    3528:	80 81       	ld	r24, Z
    352a:	89 83       	std	Y+1, r24	; 0x01
    352c:	42 e0       	ldi	r20, 0x02	; 2
    352e:	50 e0       	ldi	r21, 0x00	; 0
    3530:	a4 0e       	add	r10, r20
    3532:	b5 1e       	adc	r11, r21
    3534:	61 01       	movw	r12, r2
    3536:	01 e0       	ldi	r16, 0x01	; 1
    3538:	10 e0       	ldi	r17, 0x00	; 0
    353a:	12 c0       	rjmp	.+36     	; 0x3560 <vfprintf+0x160>
    353c:	f5 01       	movw	r30, r10
    353e:	c0 80       	ld	r12, Z
    3540:	d1 80       	ldd	r13, Z+1	; 0x01
    3542:	f6 fc       	sbrc	r15, 6
    3544:	03 c0       	rjmp	.+6      	; 0x354c <vfprintf+0x14c>
    3546:	6f ef       	ldi	r22, 0xFF	; 255
    3548:	7f ef       	ldi	r23, 0xFF	; 255
    354a:	02 c0       	rjmp	.+4      	; 0x3550 <vfprintf+0x150>
    354c:	69 2d       	mov	r22, r9
    354e:	70 e0       	ldi	r23, 0x00	; 0
    3550:	42 e0       	ldi	r20, 0x02	; 2
    3552:	50 e0       	ldi	r21, 0x00	; 0
    3554:	a4 0e       	add	r10, r20
    3556:	b5 1e       	adc	r11, r21
    3558:	c6 01       	movw	r24, r12
    355a:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <strnlen>
    355e:	8c 01       	movw	r16, r24
    3560:	5f e7       	ldi	r21, 0x7F	; 127
    3562:	f5 22       	and	r15, r21
    3564:	14 c0       	rjmp	.+40     	; 0x358e <vfprintf+0x18e>
    3566:	f5 01       	movw	r30, r10
    3568:	c0 80       	ld	r12, Z
    356a:	d1 80       	ldd	r13, Z+1	; 0x01
    356c:	f6 fc       	sbrc	r15, 6
    356e:	03 c0       	rjmp	.+6      	; 0x3576 <vfprintf+0x176>
    3570:	6f ef       	ldi	r22, 0xFF	; 255
    3572:	7f ef       	ldi	r23, 0xFF	; 255
    3574:	02 c0       	rjmp	.+4      	; 0x357a <vfprintf+0x17a>
    3576:	69 2d       	mov	r22, r9
    3578:	70 e0       	ldi	r23, 0x00	; 0
    357a:	42 e0       	ldi	r20, 0x02	; 2
    357c:	50 e0       	ldi	r21, 0x00	; 0
    357e:	a4 0e       	add	r10, r20
    3580:	b5 1e       	adc	r11, r21
    3582:	c6 01       	movw	r24, r12
    3584:	0e 94 dd 1b 	call	0x37ba	; 0x37ba <strnlen_P>
    3588:	8c 01       	movw	r16, r24
    358a:	50 e8       	ldi	r21, 0x80	; 128
    358c:	f5 2a       	or	r15, r21
    358e:	f3 fe       	sbrs	r15, 3
    3590:	07 c0       	rjmp	.+14     	; 0x35a0 <vfprintf+0x1a0>
    3592:	1a c0       	rjmp	.+52     	; 0x35c8 <vfprintf+0x1c8>
    3594:	80 e2       	ldi	r24, 0x20	; 32
    3596:	90 e0       	ldi	r25, 0x00	; 0
    3598:	b3 01       	movw	r22, r6
    359a:	0e 94 f3 1b 	call	0x37e6	; 0x37e6 <fputc>
    359e:	ea 94       	dec	r14
    35a0:	8e 2d       	mov	r24, r14
    35a2:	90 e0       	ldi	r25, 0x00	; 0
    35a4:	08 17       	cp	r16, r24
    35a6:	19 07       	cpc	r17, r25
    35a8:	a8 f3       	brcs	.-22     	; 0x3594 <vfprintf+0x194>
    35aa:	0e c0       	rjmp	.+28     	; 0x35c8 <vfprintf+0x1c8>
    35ac:	f6 01       	movw	r30, r12
    35ae:	f7 fc       	sbrc	r15, 7
    35b0:	85 91       	lpm	r24, Z+
    35b2:	f7 fe       	sbrs	r15, 7
    35b4:	81 91       	ld	r24, Z+
    35b6:	6f 01       	movw	r12, r30
    35b8:	90 e0       	ldi	r25, 0x00	; 0
    35ba:	b3 01       	movw	r22, r6
    35bc:	0e 94 f3 1b 	call	0x37e6	; 0x37e6 <fputc>
    35c0:	e1 10       	cpse	r14, r1
    35c2:	ea 94       	dec	r14
    35c4:	01 50       	subi	r16, 0x01	; 1
    35c6:	10 40       	sbci	r17, 0x00	; 0
    35c8:	01 15       	cp	r16, r1
    35ca:	11 05       	cpc	r17, r1
    35cc:	79 f7       	brne	.-34     	; 0x35ac <vfprintf+0x1ac>
    35ce:	ea c0       	rjmp	.+468    	; 0x37a4 <vfprintf+0x3a4>
    35d0:	94 36       	cpi	r25, 0x64	; 100
    35d2:	11 f0       	breq	.+4      	; 0x35d8 <vfprintf+0x1d8>
    35d4:	99 36       	cpi	r25, 0x69	; 105
    35d6:	69 f5       	brne	.+90     	; 0x3632 <vfprintf+0x232>
    35d8:	f7 fe       	sbrs	r15, 7
    35da:	08 c0       	rjmp	.+16     	; 0x35ec <vfprintf+0x1ec>
    35dc:	f5 01       	movw	r30, r10
    35de:	20 81       	ld	r18, Z
    35e0:	31 81       	ldd	r19, Z+1	; 0x01
    35e2:	42 81       	ldd	r20, Z+2	; 0x02
    35e4:	53 81       	ldd	r21, Z+3	; 0x03
    35e6:	84 e0       	ldi	r24, 0x04	; 4
    35e8:	90 e0       	ldi	r25, 0x00	; 0
    35ea:	0a c0       	rjmp	.+20     	; 0x3600 <vfprintf+0x200>
    35ec:	f5 01       	movw	r30, r10
    35ee:	80 81       	ld	r24, Z
    35f0:	91 81       	ldd	r25, Z+1	; 0x01
    35f2:	9c 01       	movw	r18, r24
    35f4:	44 27       	eor	r20, r20
    35f6:	37 fd       	sbrc	r19, 7
    35f8:	40 95       	com	r20
    35fa:	54 2f       	mov	r21, r20
    35fc:	82 e0       	ldi	r24, 0x02	; 2
    35fe:	90 e0       	ldi	r25, 0x00	; 0
    3600:	a8 0e       	add	r10, r24
    3602:	b9 1e       	adc	r11, r25
    3604:	9f e6       	ldi	r25, 0x6F	; 111
    3606:	f9 22       	and	r15, r25
    3608:	57 ff       	sbrs	r21, 7
    360a:	09 c0       	rjmp	.+18     	; 0x361e <vfprintf+0x21e>
    360c:	50 95       	com	r21
    360e:	40 95       	com	r20
    3610:	30 95       	com	r19
    3612:	21 95       	neg	r18
    3614:	3f 4f       	sbci	r19, 0xFF	; 255
    3616:	4f 4f       	sbci	r20, 0xFF	; 255
    3618:	5f 4f       	sbci	r21, 0xFF	; 255
    361a:	e0 e8       	ldi	r30, 0x80	; 128
    361c:	fe 2a       	or	r15, r30
    361e:	ca 01       	movw	r24, r20
    3620:	b9 01       	movw	r22, r18
    3622:	a1 01       	movw	r20, r2
    3624:	2a e0       	ldi	r18, 0x0A	; 10
    3626:	30 e0       	ldi	r19, 0x00	; 0
    3628:	0e 94 1f 1c 	call	0x383e	; 0x383e <__ultoa_invert>
    362c:	d8 2e       	mov	r13, r24
    362e:	d2 18       	sub	r13, r2
    3630:	40 c0       	rjmp	.+128    	; 0x36b2 <vfprintf+0x2b2>
    3632:	95 37       	cpi	r25, 0x75	; 117
    3634:	29 f4       	brne	.+10     	; 0x3640 <vfprintf+0x240>
    3636:	1f 2d       	mov	r17, r15
    3638:	1f 7e       	andi	r17, 0xEF	; 239
    363a:	2a e0       	ldi	r18, 0x0A	; 10
    363c:	30 e0       	ldi	r19, 0x00	; 0
    363e:	1d c0       	rjmp	.+58     	; 0x367a <vfprintf+0x27a>
    3640:	1f 2d       	mov	r17, r15
    3642:	19 7f       	andi	r17, 0xF9	; 249
    3644:	9f 36       	cpi	r25, 0x6F	; 111
    3646:	61 f0       	breq	.+24     	; 0x3660 <vfprintf+0x260>
    3648:	90 37       	cpi	r25, 0x70	; 112
    364a:	20 f4       	brcc	.+8      	; 0x3654 <vfprintf+0x254>
    364c:	98 35       	cpi	r25, 0x58	; 88
    364e:	09 f0       	breq	.+2      	; 0x3652 <vfprintf+0x252>
    3650:	ac c0       	rjmp	.+344    	; 0x37aa <vfprintf+0x3aa>
    3652:	0f c0       	rjmp	.+30     	; 0x3672 <vfprintf+0x272>
    3654:	90 37       	cpi	r25, 0x70	; 112
    3656:	39 f0       	breq	.+14     	; 0x3666 <vfprintf+0x266>
    3658:	98 37       	cpi	r25, 0x78	; 120
    365a:	09 f0       	breq	.+2      	; 0x365e <vfprintf+0x25e>
    365c:	a6 c0       	rjmp	.+332    	; 0x37aa <vfprintf+0x3aa>
    365e:	04 c0       	rjmp	.+8      	; 0x3668 <vfprintf+0x268>
    3660:	28 e0       	ldi	r18, 0x08	; 8
    3662:	30 e0       	ldi	r19, 0x00	; 0
    3664:	0a c0       	rjmp	.+20     	; 0x367a <vfprintf+0x27a>
    3666:	10 61       	ori	r17, 0x10	; 16
    3668:	14 fd       	sbrc	r17, 4
    366a:	14 60       	ori	r17, 0x04	; 4
    366c:	20 e1       	ldi	r18, 0x10	; 16
    366e:	30 e0       	ldi	r19, 0x00	; 0
    3670:	04 c0       	rjmp	.+8      	; 0x367a <vfprintf+0x27a>
    3672:	14 fd       	sbrc	r17, 4
    3674:	16 60       	ori	r17, 0x06	; 6
    3676:	20 e1       	ldi	r18, 0x10	; 16
    3678:	32 e0       	ldi	r19, 0x02	; 2
    367a:	17 ff       	sbrs	r17, 7
    367c:	08 c0       	rjmp	.+16     	; 0x368e <vfprintf+0x28e>
    367e:	f5 01       	movw	r30, r10
    3680:	60 81       	ld	r22, Z
    3682:	71 81       	ldd	r23, Z+1	; 0x01
    3684:	82 81       	ldd	r24, Z+2	; 0x02
    3686:	93 81       	ldd	r25, Z+3	; 0x03
    3688:	44 e0       	ldi	r20, 0x04	; 4
    368a:	50 e0       	ldi	r21, 0x00	; 0
    368c:	08 c0       	rjmp	.+16     	; 0x369e <vfprintf+0x29e>
    368e:	f5 01       	movw	r30, r10
    3690:	80 81       	ld	r24, Z
    3692:	91 81       	ldd	r25, Z+1	; 0x01
    3694:	bc 01       	movw	r22, r24
    3696:	80 e0       	ldi	r24, 0x00	; 0
    3698:	90 e0       	ldi	r25, 0x00	; 0
    369a:	42 e0       	ldi	r20, 0x02	; 2
    369c:	50 e0       	ldi	r21, 0x00	; 0
    369e:	a4 0e       	add	r10, r20
    36a0:	b5 1e       	adc	r11, r21
    36a2:	a1 01       	movw	r20, r2
    36a4:	0e 94 1f 1c 	call	0x383e	; 0x383e <__ultoa_invert>
    36a8:	d8 2e       	mov	r13, r24
    36aa:	d2 18       	sub	r13, r2
    36ac:	8f e7       	ldi	r24, 0x7F	; 127
    36ae:	f8 2e       	mov	r15, r24
    36b0:	f1 22       	and	r15, r17
    36b2:	f6 fe       	sbrs	r15, 6
    36b4:	0b c0       	rjmp	.+22     	; 0x36cc <vfprintf+0x2cc>
    36b6:	5e ef       	ldi	r21, 0xFE	; 254
    36b8:	f5 22       	and	r15, r21
    36ba:	d9 14       	cp	r13, r9
    36bc:	38 f4       	brcc	.+14     	; 0x36cc <vfprintf+0x2cc>
    36be:	f4 fe       	sbrs	r15, 4
    36c0:	07 c0       	rjmp	.+14     	; 0x36d0 <vfprintf+0x2d0>
    36c2:	f2 fc       	sbrc	r15, 2
    36c4:	05 c0       	rjmp	.+10     	; 0x36d0 <vfprintf+0x2d0>
    36c6:	8f ee       	ldi	r24, 0xEF	; 239
    36c8:	f8 22       	and	r15, r24
    36ca:	02 c0       	rjmp	.+4      	; 0x36d0 <vfprintf+0x2d0>
    36cc:	1d 2d       	mov	r17, r13
    36ce:	01 c0       	rjmp	.+2      	; 0x36d2 <vfprintf+0x2d2>
    36d0:	19 2d       	mov	r17, r9
    36d2:	f4 fe       	sbrs	r15, 4
    36d4:	0d c0       	rjmp	.+26     	; 0x36f0 <vfprintf+0x2f0>
    36d6:	fe 01       	movw	r30, r28
    36d8:	ed 0d       	add	r30, r13
    36da:	f1 1d       	adc	r31, r1
    36dc:	80 81       	ld	r24, Z
    36de:	80 33       	cpi	r24, 0x30	; 48
    36e0:	19 f4       	brne	.+6      	; 0x36e8 <vfprintf+0x2e8>
    36e2:	99 ee       	ldi	r25, 0xE9	; 233
    36e4:	f9 22       	and	r15, r25
    36e6:	08 c0       	rjmp	.+16     	; 0x36f8 <vfprintf+0x2f8>
    36e8:	1f 5f       	subi	r17, 0xFF	; 255
    36ea:	f2 fe       	sbrs	r15, 2
    36ec:	05 c0       	rjmp	.+10     	; 0x36f8 <vfprintf+0x2f8>
    36ee:	03 c0       	rjmp	.+6      	; 0x36f6 <vfprintf+0x2f6>
    36f0:	8f 2d       	mov	r24, r15
    36f2:	86 78       	andi	r24, 0x86	; 134
    36f4:	09 f0       	breq	.+2      	; 0x36f8 <vfprintf+0x2f8>
    36f6:	1f 5f       	subi	r17, 0xFF	; 255
    36f8:	0f 2d       	mov	r16, r15
    36fa:	f3 fc       	sbrc	r15, 3
    36fc:	14 c0       	rjmp	.+40     	; 0x3726 <vfprintf+0x326>
    36fe:	f0 fe       	sbrs	r15, 0
    3700:	0f c0       	rjmp	.+30     	; 0x3720 <vfprintf+0x320>
    3702:	1e 15       	cp	r17, r14
    3704:	10 f0       	brcs	.+4      	; 0x370a <vfprintf+0x30a>
    3706:	9d 2c       	mov	r9, r13
    3708:	0b c0       	rjmp	.+22     	; 0x3720 <vfprintf+0x320>
    370a:	9d 2c       	mov	r9, r13
    370c:	9e 0c       	add	r9, r14
    370e:	91 1a       	sub	r9, r17
    3710:	1e 2d       	mov	r17, r14
    3712:	06 c0       	rjmp	.+12     	; 0x3720 <vfprintf+0x320>
    3714:	80 e2       	ldi	r24, 0x20	; 32
    3716:	90 e0       	ldi	r25, 0x00	; 0
    3718:	b3 01       	movw	r22, r6
    371a:	0e 94 f3 1b 	call	0x37e6	; 0x37e6 <fputc>
    371e:	1f 5f       	subi	r17, 0xFF	; 255
    3720:	1e 15       	cp	r17, r14
    3722:	c0 f3       	brcs	.-16     	; 0x3714 <vfprintf+0x314>
    3724:	04 c0       	rjmp	.+8      	; 0x372e <vfprintf+0x32e>
    3726:	1e 15       	cp	r17, r14
    3728:	10 f4       	brcc	.+4      	; 0x372e <vfprintf+0x32e>
    372a:	e1 1a       	sub	r14, r17
    372c:	01 c0       	rjmp	.+2      	; 0x3730 <vfprintf+0x330>
    372e:	ee 24       	eor	r14, r14
    3730:	04 ff       	sbrs	r16, 4
    3732:	0f c0       	rjmp	.+30     	; 0x3752 <vfprintf+0x352>
    3734:	80 e3       	ldi	r24, 0x30	; 48
    3736:	90 e0       	ldi	r25, 0x00	; 0
    3738:	b3 01       	movw	r22, r6
    373a:	0e 94 f3 1b 	call	0x37e6	; 0x37e6 <fputc>
    373e:	02 ff       	sbrs	r16, 2
    3740:	1d c0       	rjmp	.+58     	; 0x377c <vfprintf+0x37c>
    3742:	01 fd       	sbrc	r16, 1
    3744:	03 c0       	rjmp	.+6      	; 0x374c <vfprintf+0x34c>
    3746:	88 e7       	ldi	r24, 0x78	; 120
    3748:	90 e0       	ldi	r25, 0x00	; 0
    374a:	0e c0       	rjmp	.+28     	; 0x3768 <vfprintf+0x368>
    374c:	88 e5       	ldi	r24, 0x58	; 88
    374e:	90 e0       	ldi	r25, 0x00	; 0
    3750:	0b c0       	rjmp	.+22     	; 0x3768 <vfprintf+0x368>
    3752:	80 2f       	mov	r24, r16
    3754:	86 78       	andi	r24, 0x86	; 134
    3756:	91 f0       	breq	.+36     	; 0x377c <vfprintf+0x37c>
    3758:	01 ff       	sbrs	r16, 1
    375a:	02 c0       	rjmp	.+4      	; 0x3760 <vfprintf+0x360>
    375c:	8b e2       	ldi	r24, 0x2B	; 43
    375e:	01 c0       	rjmp	.+2      	; 0x3762 <vfprintf+0x362>
    3760:	80 e2       	ldi	r24, 0x20	; 32
    3762:	f7 fc       	sbrc	r15, 7
    3764:	8d e2       	ldi	r24, 0x2D	; 45
    3766:	90 e0       	ldi	r25, 0x00	; 0
    3768:	b3 01       	movw	r22, r6
    376a:	0e 94 f3 1b 	call	0x37e6	; 0x37e6 <fputc>
    376e:	06 c0       	rjmp	.+12     	; 0x377c <vfprintf+0x37c>
    3770:	80 e3       	ldi	r24, 0x30	; 48
    3772:	90 e0       	ldi	r25, 0x00	; 0
    3774:	b3 01       	movw	r22, r6
    3776:	0e 94 f3 1b 	call	0x37e6	; 0x37e6 <fputc>
    377a:	9a 94       	dec	r9
    377c:	d9 14       	cp	r13, r9
    377e:	c0 f3       	brcs	.-16     	; 0x3770 <vfprintf+0x370>
    3780:	da 94       	dec	r13
    3782:	f1 01       	movw	r30, r2
    3784:	ed 0d       	add	r30, r13
    3786:	f1 1d       	adc	r31, r1
    3788:	80 81       	ld	r24, Z
    378a:	90 e0       	ldi	r25, 0x00	; 0
    378c:	b3 01       	movw	r22, r6
    378e:	0e 94 f3 1b 	call	0x37e6	; 0x37e6 <fputc>
    3792:	dd 20       	and	r13, r13
    3794:	a9 f7       	brne	.-22     	; 0x3780 <vfprintf+0x380>
    3796:	06 c0       	rjmp	.+12     	; 0x37a4 <vfprintf+0x3a4>
    3798:	80 e2       	ldi	r24, 0x20	; 32
    379a:	90 e0       	ldi	r25, 0x00	; 0
    379c:	b3 01       	movw	r22, r6
    379e:	0e 94 f3 1b 	call	0x37e6	; 0x37e6 <fputc>
    37a2:	ea 94       	dec	r14
    37a4:	ee 20       	and	r14, r14
    37a6:	c1 f7       	brne	.-16     	; 0x3798 <vfprintf+0x398>
    37a8:	43 ce       	rjmp	.-890    	; 0x3430 <vfprintf+0x30>
    37aa:	f3 01       	movw	r30, r6
    37ac:	66 81       	ldd	r22, Z+6	; 0x06
    37ae:	77 81       	ldd	r23, Z+7	; 0x07
    37b0:	cb 01       	movw	r24, r22
    37b2:	2b 96       	adiw	r28, 0x0b	; 11
    37b4:	e2 e1       	ldi	r30, 0x12	; 18
    37b6:	0c 94 c1 19 	jmp	0x3382	; 0x3382 <__epilogue_restores__>

000037ba <strnlen_P>:
    37ba:	fc 01       	movw	r30, r24
    37bc:	05 90       	lpm	r0, Z+
    37be:	61 50       	subi	r22, 0x01	; 1
    37c0:	70 40       	sbci	r23, 0x00	; 0
    37c2:	01 10       	cpse	r0, r1
    37c4:	d8 f7       	brcc	.-10     	; 0x37bc <strnlen_P+0x2>
    37c6:	80 95       	com	r24
    37c8:	90 95       	com	r25
    37ca:	8e 0f       	add	r24, r30
    37cc:	9f 1f       	adc	r25, r31
    37ce:	08 95       	ret

000037d0 <strnlen>:
    37d0:	fc 01       	movw	r30, r24
    37d2:	61 50       	subi	r22, 0x01	; 1
    37d4:	70 40       	sbci	r23, 0x00	; 0
    37d6:	01 90       	ld	r0, Z+
    37d8:	01 10       	cpse	r0, r1
    37da:	d8 f7       	brcc	.-10     	; 0x37d2 <strnlen+0x2>
    37dc:	80 95       	com	r24
    37de:	90 95       	com	r25
    37e0:	8e 0f       	add	r24, r30
    37e2:	9f 1f       	adc	r25, r31
    37e4:	08 95       	ret

000037e6 <fputc>:
    37e6:	0f 93       	push	r16
    37e8:	1f 93       	push	r17
    37ea:	cf 93       	push	r28
    37ec:	df 93       	push	r29
    37ee:	8c 01       	movw	r16, r24
    37f0:	eb 01       	movw	r28, r22
    37f2:	8b 81       	ldd	r24, Y+3	; 0x03
    37f4:	81 ff       	sbrs	r24, 1
    37f6:	1b c0       	rjmp	.+54     	; 0x382e <fputc+0x48>
    37f8:	82 ff       	sbrs	r24, 2
    37fa:	0d c0       	rjmp	.+26     	; 0x3816 <fputc+0x30>
    37fc:	2e 81       	ldd	r18, Y+6	; 0x06
    37fe:	3f 81       	ldd	r19, Y+7	; 0x07
    3800:	8c 81       	ldd	r24, Y+4	; 0x04
    3802:	9d 81       	ldd	r25, Y+5	; 0x05
    3804:	28 17       	cp	r18, r24
    3806:	39 07       	cpc	r19, r25
    3808:	64 f4       	brge	.+24     	; 0x3822 <fputc+0x3c>
    380a:	e8 81       	ld	r30, Y
    380c:	f9 81       	ldd	r31, Y+1	; 0x01
    380e:	01 93       	st	Z+, r16
    3810:	f9 83       	std	Y+1, r31	; 0x01
    3812:	e8 83       	st	Y, r30
    3814:	06 c0       	rjmp	.+12     	; 0x3822 <fputc+0x3c>
    3816:	e8 85       	ldd	r30, Y+8	; 0x08
    3818:	f9 85       	ldd	r31, Y+9	; 0x09
    381a:	80 2f       	mov	r24, r16
    381c:	09 95       	icall
    381e:	89 2b       	or	r24, r25
    3820:	31 f4       	brne	.+12     	; 0x382e <fputc+0x48>
    3822:	8e 81       	ldd	r24, Y+6	; 0x06
    3824:	9f 81       	ldd	r25, Y+7	; 0x07
    3826:	01 96       	adiw	r24, 0x01	; 1
    3828:	9f 83       	std	Y+7, r25	; 0x07
    382a:	8e 83       	std	Y+6, r24	; 0x06
    382c:	02 c0       	rjmp	.+4      	; 0x3832 <fputc+0x4c>
    382e:	0f ef       	ldi	r16, 0xFF	; 255
    3830:	1f ef       	ldi	r17, 0xFF	; 255
    3832:	c8 01       	movw	r24, r16
    3834:	df 91       	pop	r29
    3836:	cf 91       	pop	r28
    3838:	1f 91       	pop	r17
    383a:	0f 91       	pop	r16
    383c:	08 95       	ret

0000383e <__ultoa_invert>:
    383e:	fa 01       	movw	r30, r20
    3840:	aa 27       	eor	r26, r26
    3842:	28 30       	cpi	r18, 0x08	; 8
    3844:	51 f1       	breq	.+84     	; 0x389a <__ultoa_invert+0x5c>
    3846:	20 31       	cpi	r18, 0x10	; 16
    3848:	81 f1       	breq	.+96     	; 0x38aa <__ultoa_invert+0x6c>
    384a:	e8 94       	clt
    384c:	6f 93       	push	r22
    384e:	6e 7f       	andi	r22, 0xFE	; 254
    3850:	6e 5f       	subi	r22, 0xFE	; 254
    3852:	7f 4f       	sbci	r23, 0xFF	; 255
    3854:	8f 4f       	sbci	r24, 0xFF	; 255
    3856:	9f 4f       	sbci	r25, 0xFF	; 255
    3858:	af 4f       	sbci	r26, 0xFF	; 255
    385a:	b1 e0       	ldi	r27, 0x01	; 1
    385c:	3e d0       	rcall	.+124    	; 0x38da <__ultoa_invert+0x9c>
    385e:	b4 e0       	ldi	r27, 0x04	; 4
    3860:	3c d0       	rcall	.+120    	; 0x38da <__ultoa_invert+0x9c>
    3862:	67 0f       	add	r22, r23
    3864:	78 1f       	adc	r23, r24
    3866:	89 1f       	adc	r24, r25
    3868:	9a 1f       	adc	r25, r26
    386a:	a1 1d       	adc	r26, r1
    386c:	68 0f       	add	r22, r24
    386e:	79 1f       	adc	r23, r25
    3870:	8a 1f       	adc	r24, r26
    3872:	91 1d       	adc	r25, r1
    3874:	a1 1d       	adc	r26, r1
    3876:	6a 0f       	add	r22, r26
    3878:	71 1d       	adc	r23, r1
    387a:	81 1d       	adc	r24, r1
    387c:	91 1d       	adc	r25, r1
    387e:	a1 1d       	adc	r26, r1
    3880:	20 d0       	rcall	.+64     	; 0x38c2 <__ultoa_invert+0x84>
    3882:	09 f4       	brne	.+2      	; 0x3886 <__ultoa_invert+0x48>
    3884:	68 94       	set
    3886:	3f 91       	pop	r19
    3888:	2a e0       	ldi	r18, 0x0A	; 10
    388a:	26 9f       	mul	r18, r22
    388c:	11 24       	eor	r1, r1
    388e:	30 19       	sub	r19, r0
    3890:	30 5d       	subi	r19, 0xD0	; 208
    3892:	31 93       	st	Z+, r19
    3894:	de f6       	brtc	.-74     	; 0x384c <__ultoa_invert+0xe>
    3896:	cf 01       	movw	r24, r30
    3898:	08 95       	ret
    389a:	46 2f       	mov	r20, r22
    389c:	47 70       	andi	r20, 0x07	; 7
    389e:	40 5d       	subi	r20, 0xD0	; 208
    38a0:	41 93       	st	Z+, r20
    38a2:	b3 e0       	ldi	r27, 0x03	; 3
    38a4:	0f d0       	rcall	.+30     	; 0x38c4 <__ultoa_invert+0x86>
    38a6:	c9 f7       	brne	.-14     	; 0x389a <__ultoa_invert+0x5c>
    38a8:	f6 cf       	rjmp	.-20     	; 0x3896 <__ultoa_invert+0x58>
    38aa:	46 2f       	mov	r20, r22
    38ac:	4f 70       	andi	r20, 0x0F	; 15
    38ae:	40 5d       	subi	r20, 0xD0	; 208
    38b0:	4a 33       	cpi	r20, 0x3A	; 58
    38b2:	18 f0       	brcs	.+6      	; 0x38ba <__ultoa_invert+0x7c>
    38b4:	49 5d       	subi	r20, 0xD9	; 217
    38b6:	31 fd       	sbrc	r19, 1
    38b8:	40 52       	subi	r20, 0x20	; 32
    38ba:	41 93       	st	Z+, r20
    38bc:	02 d0       	rcall	.+4      	; 0x38c2 <__ultoa_invert+0x84>
    38be:	a9 f7       	brne	.-22     	; 0x38aa <__ultoa_invert+0x6c>
    38c0:	ea cf       	rjmp	.-44     	; 0x3896 <__ultoa_invert+0x58>
    38c2:	b4 e0       	ldi	r27, 0x04	; 4
    38c4:	a6 95       	lsr	r26
    38c6:	97 95       	ror	r25
    38c8:	87 95       	ror	r24
    38ca:	77 95       	ror	r23
    38cc:	67 95       	ror	r22
    38ce:	ba 95       	dec	r27
    38d0:	c9 f7       	brne	.-14     	; 0x38c4 <__ultoa_invert+0x86>
    38d2:	00 97       	sbiw	r24, 0x00	; 0
    38d4:	61 05       	cpc	r22, r1
    38d6:	71 05       	cpc	r23, r1
    38d8:	08 95       	ret
    38da:	9b 01       	movw	r18, r22
    38dc:	ac 01       	movw	r20, r24
    38de:	0a 2e       	mov	r0, r26
    38e0:	06 94       	lsr	r0
    38e2:	57 95       	ror	r21
    38e4:	47 95       	ror	r20
    38e6:	37 95       	ror	r19
    38e8:	27 95       	ror	r18
    38ea:	ba 95       	dec	r27
    38ec:	c9 f7       	brne	.-14     	; 0x38e0 <__ultoa_invert+0xa2>
    38ee:	62 0f       	add	r22, r18
    38f0:	73 1f       	adc	r23, r19
    38f2:	84 1f       	adc	r24, r20
    38f4:	95 1f       	adc	r25, r21
    38f6:	a0 1d       	adc	r26, r0
    38f8:	08 95       	ret

000038fa <_exit>:
    38fa:	f8 94       	cli

000038fc <__stop_program>:
    38fc:	ff cf       	rjmp	.-2      	; 0x38fc <__stop_program>
