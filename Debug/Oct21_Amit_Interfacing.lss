
Oct21_Amit_Interfacing.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000361e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000120  00800060  0000361e  000036b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800180  00800180  000037d2  2**0
                  ALLOC
  3 .stab         00003750  00000000  00000000  000037d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001e76  00000000  00000000  00006f24  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00008d9a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00008f3a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0000912c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000b537  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000c8bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000da94  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000dc54  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000df4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000e8b8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 17 07 	jmp	0xe2e	; 0xe2e <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e1       	ldi	r30, 0x1E	; 30
      68:	f6 e3       	ldi	r31, 0x36	; 54
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 38       	cpi	r26, 0x80	; 128
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 e8       	ldi	r26, 0x80	; 128
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 38       	cpi	r26, 0x81	; 129
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 53 07 	call	0xea6	; 0xea6 <main>
      8a:	0c 94 0d 1b 	jmp	0x361a	; 0x361a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 35 18 	jmp	0x306a	; 0x306a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a6 e6       	ldi	r26, 0x66	; 102
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 51 18 	jmp	0x30a2	; 0x30a2 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 41 18 	jmp	0x3082	; 0x3082 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 5d 18 	jmp	0x30ba	; 0x30ba <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 41 18 	jmp	0x3082	; 0x3082 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 5d 18 	jmp	0x30ba	; 0x30ba <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 35 18 	jmp	0x306a	; 0x306a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	86 e6       	ldi	r24, 0x66	; 102
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 51 18 	jmp	0x30a2	; 0x30a2 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 3d 18 	jmp	0x307a	; 0x307a <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	66 e6       	ldi	r22, 0x66	; 102
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 59 18 	jmp	0x30b2	; 0x30b2 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 41 18 	jmp	0x3082	; 0x3082 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 5d 18 	jmp	0x30ba	; 0x30ba <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 41 18 	jmp	0x3082	; 0x3082 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 5d 18 	jmp	0x30ba	; 0x30ba <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 41 18 	jmp	0x3082	; 0x3082 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 5d 18 	jmp	0x30ba	; 0x30ba <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 45 18 	jmp	0x308a	; 0x308a <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 61 18 	jmp	0x30c2	; 0x30c2 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 3d 18 	jmp	0x307a	; 0x307a <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 59 18 	jmp	0x30b2	; 0x30b2 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e2 59       	subi	r30, 0x92	; 146
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <__vector_13>:
#include "Lm35.h"
#include "Uart.h"

u8 glb_uartRx = 0;
ISR(USART_RXC_vect)
{
     e2e:	1f 92       	push	r1
     e30:	0f 92       	push	r0
     e32:	0f b6       	in	r0, 0x3f	; 63
     e34:	0f 92       	push	r0
     e36:	11 24       	eor	r1, r1
     e38:	2f 93       	push	r18
     e3a:	3f 93       	push	r19
     e3c:	4f 93       	push	r20
     e3e:	5f 93       	push	r21
     e40:	6f 93       	push	r22
     e42:	7f 93       	push	r23
     e44:	8f 93       	push	r24
     e46:	9f 93       	push	r25
     e48:	af 93       	push	r26
     e4a:	bf 93       	push	r27
     e4c:	ef 93       	push	r30
     e4e:	ff 93       	push	r31
     e50:	df 93       	push	r29
     e52:	cf 93       	push	r28
     e54:	cd b7       	in	r28, 0x3d	; 61
     e56:	de b7       	in	r29, 0x3e	; 62
	 glb_uartRx = UART_UDR_REG;
     e58:	ec e2       	ldi	r30, 0x2C	; 44
     e5a:	f0 e0       	ldi	r31, 0x00	; 0
     e5c:	80 81       	ld	r24, Z
     e5e:	80 93 80 01 	sts	0x0180, r24

	if (glb_uartRx == 'b')
     e62:	80 91 80 01 	lds	r24, 0x0180
     e66:	82 36       	cpi	r24, 0x62	; 98
     e68:	21 f4       	brne	.+8      	; 0xe72 <__vector_13+0x44>
	{
		Led_vidledToggle(LED1);
     e6a:	81 e0       	ldi	r24, 0x01	; 1
     e6c:	0e 94 77 0a 	call	0x14ee	; 0x14ee <Led_vidledToggle>
     e70:	07 c0       	rjmp	.+14     	; 0xe80 <__vector_13+0x52>
	}
	else if (glb_uartRx == 'a')
     e72:	80 91 80 01 	lds	r24, 0x0180
     e76:	81 36       	cpi	r24, 0x61	; 97
     e78:	19 f4       	brne	.+6      	; 0xe80 <__vector_13+0x52>
	{
		Led_vidledToggle(LED0);
     e7a:	80 e0       	ldi	r24, 0x00	; 0
     e7c:	0e 94 77 0a 	call	0x14ee	; 0x14ee <Led_vidledToggle>
	}
}
     e80:	cf 91       	pop	r28
     e82:	df 91       	pop	r29
     e84:	ff 91       	pop	r31
     e86:	ef 91       	pop	r30
     e88:	bf 91       	pop	r27
     e8a:	af 91       	pop	r26
     e8c:	9f 91       	pop	r25
     e8e:	8f 91       	pop	r24
     e90:	7f 91       	pop	r23
     e92:	6f 91       	pop	r22
     e94:	5f 91       	pop	r21
     e96:	4f 91       	pop	r20
     e98:	3f 91       	pop	r19
     e9a:	2f 91       	pop	r18
     e9c:	0f 90       	pop	r0
     e9e:	0f be       	out	0x3f, r0	; 63
     ea0:	0f 90       	pop	r0
     ea2:	1f 90       	pop	r1
     ea4:	18 95       	reti

00000ea6 <main>:

int main()
{
     ea6:	df 93       	push	r29
     ea8:	cf 93       	push	r28
     eaa:	cd b7       	in	r28, 0x3d	; 61
     eac:	de b7       	in	r29, 0x3e	; 62
     eae:	2e 97       	sbiw	r28, 0x0e	; 14
     eb0:	0f b6       	in	r0, 0x3f	; 63
     eb2:	f8 94       	cli
     eb4:	de bf       	out	0x3e, r29	; 62
     eb6:	0f be       	out	0x3f, r0	; 63
     eb8:	cd bf       	out	0x3d, r28	; 61
	USART_Init(9600);
     eba:	60 e8       	ldi	r22, 0x80	; 128
     ebc:	75 e2       	ldi	r23, 0x25	; 37
     ebe:	80 e0       	ldi	r24, 0x00	; 0
     ec0:	90 e0       	ldi	r25, 0x00	; 0
     ec2:	0e 94 aa 11 	call	0x2354	; 0x2354 <USART_Init>
	USART_Receive_InterruptEnable();
     ec6:	0e 94 5c 12 	call	0x24b8	; 0x24b8 <USART_Receive_InterruptEnable>
	GINT_vidEnableAllInterrupts();
     eca:	0e 94 9a 12 	call	0x2534	; 0x2534 <GINT_vidEnableAllInterrupts>
	Led_vidinit();
     ece:	0e 94 ff 09 	call	0x13fe	; 0x13fe <Led_vidinit>

while (1)
	{
		Led_vidledToggle(LED2);
     ed2:	82 e0       	ldi	r24, 0x02	; 2
     ed4:	0e 94 77 0a 	call	0x14ee	; 0x14ee <Led_vidledToggle>
     ed8:	80 e0       	ldi	r24, 0x00	; 0
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	aa ef       	ldi	r26, 0xFA	; 250
     ede:	b3 e4       	ldi	r27, 0x43	; 67
     ee0:	8b 87       	std	Y+11, r24	; 0x0b
     ee2:	9c 87       	std	Y+12, r25	; 0x0c
     ee4:	ad 87       	std	Y+13, r26	; 0x0d
     ee6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ee8:	6b 85       	ldd	r22, Y+11	; 0x0b
     eea:	7c 85       	ldd	r23, Y+12	; 0x0c
     eec:	8d 85       	ldd	r24, Y+13	; 0x0d
     eee:	9e 85       	ldd	r25, Y+14	; 0x0e
     ef0:	20 e0       	ldi	r18, 0x00	; 0
     ef2:	30 e0       	ldi	r19, 0x00	; 0
     ef4:	4a e7       	ldi	r20, 0x7A	; 122
     ef6:	55 e4       	ldi	r21, 0x45	; 69
     ef8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     efc:	dc 01       	movw	r26, r24
     efe:	cb 01       	movw	r24, r22
     f00:	8f 83       	std	Y+7, r24	; 0x07
     f02:	98 87       	std	Y+8, r25	; 0x08
     f04:	a9 87       	std	Y+9, r26	; 0x09
     f06:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     f08:	6f 81       	ldd	r22, Y+7	; 0x07
     f0a:	78 85       	ldd	r23, Y+8	; 0x08
     f0c:	89 85       	ldd	r24, Y+9	; 0x09
     f0e:	9a 85       	ldd	r25, Y+10	; 0x0a
     f10:	20 e0       	ldi	r18, 0x00	; 0
     f12:	30 e0       	ldi	r19, 0x00	; 0
     f14:	40 e8       	ldi	r20, 0x80	; 128
     f16:	5f e3       	ldi	r21, 0x3F	; 63
     f18:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     f1c:	88 23       	and	r24, r24
     f1e:	2c f4       	brge	.+10     	; 0xf2a <main+0x84>
		__ticks = 1;
     f20:	81 e0       	ldi	r24, 0x01	; 1
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	9e 83       	std	Y+6, r25	; 0x06
     f26:	8d 83       	std	Y+5, r24	; 0x05
     f28:	3f c0       	rjmp	.+126    	; 0xfa8 <main+0x102>
	else if (__tmp > 65535)
     f2a:	6f 81       	ldd	r22, Y+7	; 0x07
     f2c:	78 85       	ldd	r23, Y+8	; 0x08
     f2e:	89 85       	ldd	r24, Y+9	; 0x09
     f30:	9a 85       	ldd	r25, Y+10	; 0x0a
     f32:	20 e0       	ldi	r18, 0x00	; 0
     f34:	3f ef       	ldi	r19, 0xFF	; 255
     f36:	4f e7       	ldi	r20, 0x7F	; 127
     f38:	57 e4       	ldi	r21, 0x47	; 71
     f3a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     f3e:	18 16       	cp	r1, r24
     f40:	4c f5       	brge	.+82     	; 0xf94 <main+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f42:	6b 85       	ldd	r22, Y+11	; 0x0b
     f44:	7c 85       	ldd	r23, Y+12	; 0x0c
     f46:	8d 85       	ldd	r24, Y+13	; 0x0d
     f48:	9e 85       	ldd	r25, Y+14	; 0x0e
     f4a:	20 e0       	ldi	r18, 0x00	; 0
     f4c:	30 e0       	ldi	r19, 0x00	; 0
     f4e:	40 e2       	ldi	r20, 0x20	; 32
     f50:	51 e4       	ldi	r21, 0x41	; 65
     f52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f56:	dc 01       	movw	r26, r24
     f58:	cb 01       	movw	r24, r22
     f5a:	bc 01       	movw	r22, r24
     f5c:	cd 01       	movw	r24, r26
     f5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f62:	dc 01       	movw	r26, r24
     f64:	cb 01       	movw	r24, r22
     f66:	9e 83       	std	Y+6, r25	; 0x06
     f68:	8d 83       	std	Y+5, r24	; 0x05
     f6a:	0f c0       	rjmp	.+30     	; 0xf8a <main+0xe4>
     f6c:	80 e9       	ldi	r24, 0x90	; 144
     f6e:	91 e0       	ldi	r25, 0x01	; 1
     f70:	9c 83       	std	Y+4, r25	; 0x04
     f72:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     f74:	8b 81       	ldd	r24, Y+3	; 0x03
     f76:	9c 81       	ldd	r25, Y+4	; 0x04
     f78:	01 97       	sbiw	r24, 0x01	; 1
     f7a:	f1 f7       	brne	.-4      	; 0xf78 <main+0xd2>
     f7c:	9c 83       	std	Y+4, r25	; 0x04
     f7e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f80:	8d 81       	ldd	r24, Y+5	; 0x05
     f82:	9e 81       	ldd	r25, Y+6	; 0x06
     f84:	01 97       	sbiw	r24, 0x01	; 1
     f86:	9e 83       	std	Y+6, r25	; 0x06
     f88:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f8a:	8d 81       	ldd	r24, Y+5	; 0x05
     f8c:	9e 81       	ldd	r25, Y+6	; 0x06
     f8e:	00 97       	sbiw	r24, 0x00	; 0
     f90:	69 f7       	brne	.-38     	; 0xf6c <main+0xc6>
     f92:	9f cf       	rjmp	.-194    	; 0xed2 <main+0x2c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f94:	6f 81       	ldd	r22, Y+7	; 0x07
     f96:	78 85       	ldd	r23, Y+8	; 0x08
     f98:	89 85       	ldd	r24, Y+9	; 0x09
     f9a:	9a 85       	ldd	r25, Y+10	; 0x0a
     f9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fa0:	dc 01       	movw	r26, r24
     fa2:	cb 01       	movw	r24, r22
     fa4:	9e 83       	std	Y+6, r25	; 0x06
     fa6:	8d 83       	std	Y+5, r24	; 0x05
     fa8:	8d 81       	ldd	r24, Y+5	; 0x05
     faa:	9e 81       	ldd	r25, Y+6	; 0x06
     fac:	9a 83       	std	Y+2, r25	; 0x02
     fae:	89 83       	std	Y+1, r24	; 0x01
     fb0:	89 81       	ldd	r24, Y+1	; 0x01
     fb2:	9a 81       	ldd	r25, Y+2	; 0x02
     fb4:	01 97       	sbiw	r24, 0x01	; 1
     fb6:	f1 f7       	brne	.-4      	; 0xfb4 <main+0x10e>
     fb8:	9a 83       	std	Y+2, r25	; 0x02
     fba:	89 83       	std	Y+1, r24	; 0x01
     fbc:	8a cf       	rjmp	.-236    	; 0xed2 <main+0x2c>

00000fbe <SSD_vidinit>:
#include "SSD.h"
#include "Dio.h"
#include <util/delay.h>

void SSD_vidinit(void)
{
     fbe:	df 93       	push	r29
     fc0:	cf 93       	push	r28
     fc2:	cd b7       	in	r28, 0x3d	; 61
     fc4:	de b7       	in	r29, 0x3e	; 62
	Dio_vidconfigChanel(DIO_PORTB, DIO_PIN1, DIO_OUTPUT);
     fc6:	81 e0       	ldi	r24, 0x01	; 1
     fc8:	61 e0       	ldi	r22, 0x01	; 1
     fca:	41 e0       	ldi	r20, 0x01	; 1
     fcc:	0e 94 cc 13 	call	0x2798	; 0x2798 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTB, DIO_PIN2, DIO_OUTPUT);
     fd0:	81 e0       	ldi	r24, 0x01	; 1
     fd2:	62 e0       	ldi	r22, 0x02	; 2
     fd4:	41 e0       	ldi	r20, 0x01	; 1
     fd6:	0e 94 cc 13 	call	0x2798	; 0x2798 <Dio_vidconfigChanel>

	Dio_vidconfigChanel(DIO_PORTA, DIO_PIN4, DIO_OUTPUT);
     fda:	80 e0       	ldi	r24, 0x00	; 0
     fdc:	64 e0       	ldi	r22, 0x04	; 4
     fde:	41 e0       	ldi	r20, 0x01	; 1
     fe0:	0e 94 cc 13 	call	0x2798	; 0x2798 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTA, DIO_PIN5, DIO_OUTPUT);
     fe4:	80 e0       	ldi	r24, 0x00	; 0
     fe6:	65 e0       	ldi	r22, 0x05	; 5
     fe8:	41 e0       	ldi	r20, 0x01	; 1
     fea:	0e 94 cc 13 	call	0x2798	; 0x2798 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTA, DIO_PIN6, DIO_OUTPUT);
     fee:	80 e0       	ldi	r24, 0x00	; 0
     ff0:	66 e0       	ldi	r22, 0x06	; 6
     ff2:	41 e0       	ldi	r20, 0x01	; 1
     ff4:	0e 94 cc 13 	call	0x2798	; 0x2798 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTA, DIO_PIN7, DIO_OUTPUT);
     ff8:	80 e0       	ldi	r24, 0x00	; 0
     ffa:	67 e0       	ldi	r22, 0x07	; 7
     ffc:	41 e0       	ldi	r20, 0x01	; 1
     ffe:	0e 94 cc 13 	call	0x2798	; 0x2798 <Dio_vidconfigChanel>
}
    1002:	cf 91       	pop	r28
    1004:	df 91       	pop	r29
    1006:	08 95       	ret

00001008 <SSD_viddisplyNum>:

void SSD_viddisplyNum(u8 num)
{
    1008:	df 93       	push	r29
    100a:	cf 93       	push	r28
    100c:	cd b7       	in	r28, 0x3d	; 61
    100e:	de b7       	in	r29, 0x3e	; 62
    1010:	e3 97       	sbiw	r28, 0x33	; 51
    1012:	0f b6       	in	r0, 0x3f	; 63
    1014:	f8 94       	cli
    1016:	de bf       	out	0x3e, r29	; 62
    1018:	0f be       	out	0x3f, r0	; 63
    101a:	cd bf       	out	0x3d, r28	; 61
    101c:	8b ab       	std	Y+51, r24	; 0x33
	u8 loc_secondDigit =  (num%10)<<4;
    101e:	8b a9       	ldd	r24, Y+51	; 0x33
    1020:	9a e0       	ldi	r25, 0x0A	; 10
    1022:	69 2f       	mov	r22, r25
    1024:	0e 94 07 18 	call	0x300e	; 0x300e <__udivmodqi4>
    1028:	89 2f       	mov	r24, r25
    102a:	82 95       	swap	r24
    102c:	80 7f       	andi	r24, 0xF0	; 240
    102e:	8a ab       	std	Y+50, r24	; 0x32
	u8 loc_firstDigit = (num/10)<<4;
    1030:	8b a9       	ldd	r24, Y+51	; 0x33
    1032:	9a e0       	ldi	r25, 0x0A	; 10
    1034:	69 2f       	mov	r22, r25
    1036:	0e 94 07 18 	call	0x300e	; 0x300e <__udivmodqi4>
    103a:	82 95       	swap	r24
    103c:	80 7f       	andi	r24, 0xF0	; 240
    103e:	89 ab       	std	Y+49, r24	; 0x31
	static boolean loc_once = TRUE;

	/* Enable SSD 1	-> EN1 = High	*/
	Dio_vidwriteChanel(DIO_PORTB, DIO_PIN2, DIO_HIGH);
    1040:	81 e0       	ldi	r24, 0x01	; 1
    1042:	62 e0       	ldi	r22, 0x02	; 2
    1044:	41 e0       	ldi	r20, 0x01	; 1
    1046:	0e 94 af 14 	call	0x295e	; 0x295e <Dio_vidwriteChanel>
	/* Disable SSD 2 -> EN2 =Low	*/
	Dio_vidwriteChanel(DIO_PORTB, DIO_PIN1, DIO_LOW);
    104a:	81 e0       	ldi	r24, 0x01	; 1
    104c:	61 e0       	ldi	r22, 0x01	; 1
    104e:	40 e0       	ldi	r20, 0x00	; 0
    1050:	0e 94 af 14 	call	0x295e	; 0x295e <Dio_vidwriteChanel>
	/* Write first digit */
	Dio_vidWriteChanelGroup(DIO_PORTA, loc_firstDigit, SSD_MASK);
    1054:	80 e0       	ldi	r24, 0x00	; 0
    1056:	69 a9       	ldd	r22, Y+49	; 0x31
    1058:	4f e0       	ldi	r20, 0x0F	; 15
    105a:	0e 94 92 15 	call	0x2b24	; 0x2b24 <Dio_vidWriteChanelGroup>
    105e:	80 e0       	ldi	r24, 0x00	; 0
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	aa ef       	ldi	r26, 0xFA	; 250
    1064:	b3 e4       	ldi	r27, 0x43	; 67
    1066:	8d a7       	std	Y+45, r24	; 0x2d
    1068:	9e a7       	std	Y+46, r25	; 0x2e
    106a:	af a7       	std	Y+47, r26	; 0x2f
    106c:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    106e:	6d a5       	ldd	r22, Y+45	; 0x2d
    1070:	7e a5       	ldd	r23, Y+46	; 0x2e
    1072:	8f a5       	ldd	r24, Y+47	; 0x2f
    1074:	98 a9       	ldd	r25, Y+48	; 0x30
    1076:	2b ea       	ldi	r18, 0xAB	; 171
    1078:	3a ea       	ldi	r19, 0xAA	; 170
    107a:	4a ea       	ldi	r20, 0xAA	; 170
    107c:	50 e4       	ldi	r21, 0x40	; 64
    107e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1082:	dc 01       	movw	r26, r24
    1084:	cb 01       	movw	r24, r22
    1086:	89 a7       	std	Y+41, r24	; 0x29
    1088:	9a a7       	std	Y+42, r25	; 0x2a
    108a:	ab a7       	std	Y+43, r26	; 0x2b
    108c:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    108e:	69 a5       	ldd	r22, Y+41	; 0x29
    1090:	7a a5       	ldd	r23, Y+42	; 0x2a
    1092:	8b a5       	ldd	r24, Y+43	; 0x2b
    1094:	9c a5       	ldd	r25, Y+44	; 0x2c
    1096:	20 e0       	ldi	r18, 0x00	; 0
    1098:	30 e0       	ldi	r19, 0x00	; 0
    109a:	40 e8       	ldi	r20, 0x80	; 128
    109c:	5f e3       	ldi	r21, 0x3F	; 63
    109e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    10a2:	88 23       	and	r24, r24
    10a4:	1c f4       	brge	.+6      	; 0x10ac <SSD_viddisplyNum+0xa4>
		__ticks = 1;
    10a6:	81 e0       	ldi	r24, 0x01	; 1
    10a8:	88 a7       	std	Y+40, r24	; 0x28
    10aa:	91 c0       	rjmp	.+290    	; 0x11ce <SSD_viddisplyNum+0x1c6>
	else if (__tmp > 255)
    10ac:	69 a5       	ldd	r22, Y+41	; 0x29
    10ae:	7a a5       	ldd	r23, Y+42	; 0x2a
    10b0:	8b a5       	ldd	r24, Y+43	; 0x2b
    10b2:	9c a5       	ldd	r25, Y+44	; 0x2c
    10b4:	20 e0       	ldi	r18, 0x00	; 0
    10b6:	30 e0       	ldi	r19, 0x00	; 0
    10b8:	4f e7       	ldi	r20, 0x7F	; 127
    10ba:	53 e4       	ldi	r21, 0x43	; 67
    10bc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    10c0:	18 16       	cp	r1, r24
    10c2:	0c f0       	brlt	.+2      	; 0x10c6 <SSD_viddisplyNum+0xbe>
    10c4:	7b c0       	rjmp	.+246    	; 0x11bc <SSD_viddisplyNum+0x1b4>
	{
		_delay_ms(__us / 1000.0);
    10c6:	6d a5       	ldd	r22, Y+45	; 0x2d
    10c8:	7e a5       	ldd	r23, Y+46	; 0x2e
    10ca:	8f a5       	ldd	r24, Y+47	; 0x2f
    10cc:	98 a9       	ldd	r25, Y+48	; 0x30
    10ce:	20 e0       	ldi	r18, 0x00	; 0
    10d0:	30 e0       	ldi	r19, 0x00	; 0
    10d2:	4a e7       	ldi	r20, 0x7A	; 122
    10d4:	54 e4       	ldi	r21, 0x44	; 68
    10d6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    10da:	dc 01       	movw	r26, r24
    10dc:	cb 01       	movw	r24, r22
    10de:	8c a3       	std	Y+36, r24	; 0x24
    10e0:	9d a3       	std	Y+37, r25	; 0x25
    10e2:	ae a3       	std	Y+38, r26	; 0x26
    10e4:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10e6:	6c a1       	ldd	r22, Y+36	; 0x24
    10e8:	7d a1       	ldd	r23, Y+37	; 0x25
    10ea:	8e a1       	ldd	r24, Y+38	; 0x26
    10ec:	9f a1       	ldd	r25, Y+39	; 0x27
    10ee:	20 e0       	ldi	r18, 0x00	; 0
    10f0:	30 e0       	ldi	r19, 0x00	; 0
    10f2:	4a e7       	ldi	r20, 0x7A	; 122
    10f4:	55 e4       	ldi	r21, 0x45	; 69
    10f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10fa:	dc 01       	movw	r26, r24
    10fc:	cb 01       	movw	r24, r22
    10fe:	88 a3       	std	Y+32, r24	; 0x20
    1100:	99 a3       	std	Y+33, r25	; 0x21
    1102:	aa a3       	std	Y+34, r26	; 0x22
    1104:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    1106:	68 a1       	ldd	r22, Y+32	; 0x20
    1108:	79 a1       	ldd	r23, Y+33	; 0x21
    110a:	8a a1       	ldd	r24, Y+34	; 0x22
    110c:	9b a1       	ldd	r25, Y+35	; 0x23
    110e:	20 e0       	ldi	r18, 0x00	; 0
    1110:	30 e0       	ldi	r19, 0x00	; 0
    1112:	40 e8       	ldi	r20, 0x80	; 128
    1114:	5f e3       	ldi	r21, 0x3F	; 63
    1116:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    111a:	88 23       	and	r24, r24
    111c:	2c f4       	brge	.+10     	; 0x1128 <SSD_viddisplyNum+0x120>
		__ticks = 1;
    111e:	81 e0       	ldi	r24, 0x01	; 1
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	9f 8f       	std	Y+31, r25	; 0x1f
    1124:	8e 8f       	std	Y+30, r24	; 0x1e
    1126:	3f c0       	rjmp	.+126    	; 0x11a6 <SSD_viddisplyNum+0x19e>
	else if (__tmp > 65535)
    1128:	68 a1       	ldd	r22, Y+32	; 0x20
    112a:	79 a1       	ldd	r23, Y+33	; 0x21
    112c:	8a a1       	ldd	r24, Y+34	; 0x22
    112e:	9b a1       	ldd	r25, Y+35	; 0x23
    1130:	20 e0       	ldi	r18, 0x00	; 0
    1132:	3f ef       	ldi	r19, 0xFF	; 255
    1134:	4f e7       	ldi	r20, 0x7F	; 127
    1136:	57 e4       	ldi	r21, 0x47	; 71
    1138:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    113c:	18 16       	cp	r1, r24
    113e:	4c f5       	brge	.+82     	; 0x1192 <SSD_viddisplyNum+0x18a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1140:	6c a1       	ldd	r22, Y+36	; 0x24
    1142:	7d a1       	ldd	r23, Y+37	; 0x25
    1144:	8e a1       	ldd	r24, Y+38	; 0x26
    1146:	9f a1       	ldd	r25, Y+39	; 0x27
    1148:	20 e0       	ldi	r18, 0x00	; 0
    114a:	30 e0       	ldi	r19, 0x00	; 0
    114c:	40 e2       	ldi	r20, 0x20	; 32
    114e:	51 e4       	ldi	r21, 0x41	; 65
    1150:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1154:	dc 01       	movw	r26, r24
    1156:	cb 01       	movw	r24, r22
    1158:	bc 01       	movw	r22, r24
    115a:	cd 01       	movw	r24, r26
    115c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1160:	dc 01       	movw	r26, r24
    1162:	cb 01       	movw	r24, r22
    1164:	9f 8f       	std	Y+31, r25	; 0x1f
    1166:	8e 8f       	std	Y+30, r24	; 0x1e
    1168:	0f c0       	rjmp	.+30     	; 0x1188 <SSD_viddisplyNum+0x180>
    116a:	80 e9       	ldi	r24, 0x90	; 144
    116c:	91 e0       	ldi	r25, 0x01	; 1
    116e:	9d 8f       	std	Y+29, r25	; 0x1d
    1170:	8c 8f       	std	Y+28, r24	; 0x1c
    1172:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1174:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1176:	01 97       	sbiw	r24, 0x01	; 1
    1178:	f1 f7       	brne	.-4      	; 0x1176 <SSD_viddisplyNum+0x16e>
    117a:	9d 8f       	std	Y+29, r25	; 0x1d
    117c:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    117e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1180:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1182:	01 97       	sbiw	r24, 0x01	; 1
    1184:	9f 8f       	std	Y+31, r25	; 0x1f
    1186:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1188:	8e 8d       	ldd	r24, Y+30	; 0x1e
    118a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    118c:	00 97       	sbiw	r24, 0x00	; 0
    118e:	69 f7       	brne	.-38     	; 0x116a <SSD_viddisplyNum+0x162>
    1190:	24 c0       	rjmp	.+72     	; 0x11da <SSD_viddisplyNum+0x1d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1192:	68 a1       	ldd	r22, Y+32	; 0x20
    1194:	79 a1       	ldd	r23, Y+33	; 0x21
    1196:	8a a1       	ldd	r24, Y+34	; 0x22
    1198:	9b a1       	ldd	r25, Y+35	; 0x23
    119a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    119e:	dc 01       	movw	r26, r24
    11a0:	cb 01       	movw	r24, r22
    11a2:	9f 8f       	std	Y+31, r25	; 0x1f
    11a4:	8e 8f       	std	Y+30, r24	; 0x1e
    11a6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    11a8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    11aa:	9b 8f       	std	Y+27, r25	; 0x1b
    11ac:	8a 8f       	std	Y+26, r24	; 0x1a
    11ae:	8a 8d       	ldd	r24, Y+26	; 0x1a
    11b0:	9b 8d       	ldd	r25, Y+27	; 0x1b
    11b2:	01 97       	sbiw	r24, 0x01	; 1
    11b4:	f1 f7       	brne	.-4      	; 0x11b2 <SSD_viddisplyNum+0x1aa>
    11b6:	9b 8f       	std	Y+27, r25	; 0x1b
    11b8:	8a 8f       	std	Y+26, r24	; 0x1a
    11ba:	0f c0       	rjmp	.+30     	; 0x11da <SSD_viddisplyNum+0x1d2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    11bc:	69 a5       	ldd	r22, Y+41	; 0x29
    11be:	7a a5       	ldd	r23, Y+42	; 0x2a
    11c0:	8b a5       	ldd	r24, Y+43	; 0x2b
    11c2:	9c a5       	ldd	r25, Y+44	; 0x2c
    11c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11c8:	dc 01       	movw	r26, r24
    11ca:	cb 01       	movw	r24, r22
    11cc:	88 a7       	std	Y+40, r24	; 0x28
    11ce:	88 a5       	ldd	r24, Y+40	; 0x28
    11d0:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    11d2:	89 8d       	ldd	r24, Y+25	; 0x19
    11d4:	8a 95       	dec	r24
    11d6:	f1 f7       	brne	.-4      	; 0x11d4 <SSD_viddisplyNum+0x1cc>
    11d8:	89 8f       	std	Y+25, r24	; 0x19

	_delay_us(500);

	/* Disable SSD 1	-> EN1 = Low	*/
	Dio_vidwriteChanel(DIO_PORTB, DIO_PIN2, DIO_LOW);
    11da:	81 e0       	ldi	r24, 0x01	; 1
    11dc:	62 e0       	ldi	r22, 0x02	; 2
    11de:	40 e0       	ldi	r20, 0x00	; 0
    11e0:	0e 94 af 14 	call	0x295e	; 0x295e <Dio_vidwriteChanel>
	/* Enable SSD 2 -> EN2 = High	*/
	Dio_vidwriteChanel(DIO_PORTB, DIO_PIN1, DIO_HIGH);
    11e4:	81 e0       	ldi	r24, 0x01	; 1
    11e6:	61 e0       	ldi	r22, 0x01	; 1
    11e8:	41 e0       	ldi	r20, 0x01	; 1
    11ea:	0e 94 af 14 	call	0x295e	; 0x295e <Dio_vidwriteChanel>
	/* Write second digit */
	Dio_vidWriteChanelGroup(DIO_PORTA, loc_secondDigit, SSD_MASK);
    11ee:	80 e0       	ldi	r24, 0x00	; 0
    11f0:	6a a9       	ldd	r22, Y+50	; 0x32
    11f2:	4f e0       	ldi	r20, 0x0F	; 15
    11f4:	0e 94 92 15 	call	0x2b24	; 0x2b24 <Dio_vidWriteChanelGroup>
    11f8:	80 e0       	ldi	r24, 0x00	; 0
    11fa:	90 e0       	ldi	r25, 0x00	; 0
    11fc:	aa ef       	ldi	r26, 0xFA	; 250
    11fe:	b3 e4       	ldi	r27, 0x43	; 67
    1200:	8d 8b       	std	Y+21, r24	; 0x15
    1202:	9e 8b       	std	Y+22, r25	; 0x16
    1204:	af 8b       	std	Y+23, r26	; 0x17
    1206:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1208:	6d 89       	ldd	r22, Y+21	; 0x15
    120a:	7e 89       	ldd	r23, Y+22	; 0x16
    120c:	8f 89       	ldd	r24, Y+23	; 0x17
    120e:	98 8d       	ldd	r25, Y+24	; 0x18
    1210:	2b ea       	ldi	r18, 0xAB	; 171
    1212:	3a ea       	ldi	r19, 0xAA	; 170
    1214:	4a ea       	ldi	r20, 0xAA	; 170
    1216:	50 e4       	ldi	r21, 0x40	; 64
    1218:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    121c:	dc 01       	movw	r26, r24
    121e:	cb 01       	movw	r24, r22
    1220:	89 8b       	std	Y+17, r24	; 0x11
    1222:	9a 8b       	std	Y+18, r25	; 0x12
    1224:	ab 8b       	std	Y+19, r26	; 0x13
    1226:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1228:	69 89       	ldd	r22, Y+17	; 0x11
    122a:	7a 89       	ldd	r23, Y+18	; 0x12
    122c:	8b 89       	ldd	r24, Y+19	; 0x13
    122e:	9c 89       	ldd	r25, Y+20	; 0x14
    1230:	20 e0       	ldi	r18, 0x00	; 0
    1232:	30 e0       	ldi	r19, 0x00	; 0
    1234:	40 e8       	ldi	r20, 0x80	; 128
    1236:	5f e3       	ldi	r21, 0x3F	; 63
    1238:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    123c:	88 23       	and	r24, r24
    123e:	1c f4       	brge	.+6      	; 0x1246 <SSD_viddisplyNum+0x23e>
		__ticks = 1;
    1240:	81 e0       	ldi	r24, 0x01	; 1
    1242:	88 8b       	std	Y+16, r24	; 0x10
    1244:	91 c0       	rjmp	.+290    	; 0x1368 <SSD_viddisplyNum+0x360>
	else if (__tmp > 255)
    1246:	69 89       	ldd	r22, Y+17	; 0x11
    1248:	7a 89       	ldd	r23, Y+18	; 0x12
    124a:	8b 89       	ldd	r24, Y+19	; 0x13
    124c:	9c 89       	ldd	r25, Y+20	; 0x14
    124e:	20 e0       	ldi	r18, 0x00	; 0
    1250:	30 e0       	ldi	r19, 0x00	; 0
    1252:	4f e7       	ldi	r20, 0x7F	; 127
    1254:	53 e4       	ldi	r21, 0x43	; 67
    1256:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    125a:	18 16       	cp	r1, r24
    125c:	0c f0       	brlt	.+2      	; 0x1260 <SSD_viddisplyNum+0x258>
    125e:	7b c0       	rjmp	.+246    	; 0x1356 <SSD_viddisplyNum+0x34e>
	{
		_delay_ms(__us / 1000.0);
    1260:	6d 89       	ldd	r22, Y+21	; 0x15
    1262:	7e 89       	ldd	r23, Y+22	; 0x16
    1264:	8f 89       	ldd	r24, Y+23	; 0x17
    1266:	98 8d       	ldd	r25, Y+24	; 0x18
    1268:	20 e0       	ldi	r18, 0x00	; 0
    126a:	30 e0       	ldi	r19, 0x00	; 0
    126c:	4a e7       	ldi	r20, 0x7A	; 122
    126e:	54 e4       	ldi	r21, 0x44	; 68
    1270:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1274:	dc 01       	movw	r26, r24
    1276:	cb 01       	movw	r24, r22
    1278:	8c 87       	std	Y+12, r24	; 0x0c
    127a:	9d 87       	std	Y+13, r25	; 0x0d
    127c:	ae 87       	std	Y+14, r26	; 0x0e
    127e:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1280:	6c 85       	ldd	r22, Y+12	; 0x0c
    1282:	7d 85       	ldd	r23, Y+13	; 0x0d
    1284:	8e 85       	ldd	r24, Y+14	; 0x0e
    1286:	9f 85       	ldd	r25, Y+15	; 0x0f
    1288:	20 e0       	ldi	r18, 0x00	; 0
    128a:	30 e0       	ldi	r19, 0x00	; 0
    128c:	4a e7       	ldi	r20, 0x7A	; 122
    128e:	55 e4       	ldi	r21, 0x45	; 69
    1290:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1294:	dc 01       	movw	r26, r24
    1296:	cb 01       	movw	r24, r22
    1298:	88 87       	std	Y+8, r24	; 0x08
    129a:	99 87       	std	Y+9, r25	; 0x09
    129c:	aa 87       	std	Y+10, r26	; 0x0a
    129e:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    12a0:	68 85       	ldd	r22, Y+8	; 0x08
    12a2:	79 85       	ldd	r23, Y+9	; 0x09
    12a4:	8a 85       	ldd	r24, Y+10	; 0x0a
    12a6:	9b 85       	ldd	r25, Y+11	; 0x0b
    12a8:	20 e0       	ldi	r18, 0x00	; 0
    12aa:	30 e0       	ldi	r19, 0x00	; 0
    12ac:	40 e8       	ldi	r20, 0x80	; 128
    12ae:	5f e3       	ldi	r21, 0x3F	; 63
    12b0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    12b4:	88 23       	and	r24, r24
    12b6:	2c f4       	brge	.+10     	; 0x12c2 <SSD_viddisplyNum+0x2ba>
		__ticks = 1;
    12b8:	81 e0       	ldi	r24, 0x01	; 1
    12ba:	90 e0       	ldi	r25, 0x00	; 0
    12bc:	9f 83       	std	Y+7, r25	; 0x07
    12be:	8e 83       	std	Y+6, r24	; 0x06
    12c0:	3f c0       	rjmp	.+126    	; 0x1340 <SSD_viddisplyNum+0x338>
	else if (__tmp > 65535)
    12c2:	68 85       	ldd	r22, Y+8	; 0x08
    12c4:	79 85       	ldd	r23, Y+9	; 0x09
    12c6:	8a 85       	ldd	r24, Y+10	; 0x0a
    12c8:	9b 85       	ldd	r25, Y+11	; 0x0b
    12ca:	20 e0       	ldi	r18, 0x00	; 0
    12cc:	3f ef       	ldi	r19, 0xFF	; 255
    12ce:	4f e7       	ldi	r20, 0x7F	; 127
    12d0:	57 e4       	ldi	r21, 0x47	; 71
    12d2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    12d6:	18 16       	cp	r1, r24
    12d8:	4c f5       	brge	.+82     	; 0x132c <SSD_viddisplyNum+0x324>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12da:	6c 85       	ldd	r22, Y+12	; 0x0c
    12dc:	7d 85       	ldd	r23, Y+13	; 0x0d
    12de:	8e 85       	ldd	r24, Y+14	; 0x0e
    12e0:	9f 85       	ldd	r25, Y+15	; 0x0f
    12e2:	20 e0       	ldi	r18, 0x00	; 0
    12e4:	30 e0       	ldi	r19, 0x00	; 0
    12e6:	40 e2       	ldi	r20, 0x20	; 32
    12e8:	51 e4       	ldi	r21, 0x41	; 65
    12ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12ee:	dc 01       	movw	r26, r24
    12f0:	cb 01       	movw	r24, r22
    12f2:	bc 01       	movw	r22, r24
    12f4:	cd 01       	movw	r24, r26
    12f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12fa:	dc 01       	movw	r26, r24
    12fc:	cb 01       	movw	r24, r22
    12fe:	9f 83       	std	Y+7, r25	; 0x07
    1300:	8e 83       	std	Y+6, r24	; 0x06
    1302:	0f c0       	rjmp	.+30     	; 0x1322 <SSD_viddisplyNum+0x31a>
    1304:	80 e9       	ldi	r24, 0x90	; 144
    1306:	91 e0       	ldi	r25, 0x01	; 1
    1308:	9d 83       	std	Y+5, r25	; 0x05
    130a:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    130c:	8c 81       	ldd	r24, Y+4	; 0x04
    130e:	9d 81       	ldd	r25, Y+5	; 0x05
    1310:	01 97       	sbiw	r24, 0x01	; 1
    1312:	f1 f7       	brne	.-4      	; 0x1310 <SSD_viddisplyNum+0x308>
    1314:	9d 83       	std	Y+5, r25	; 0x05
    1316:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1318:	8e 81       	ldd	r24, Y+6	; 0x06
    131a:	9f 81       	ldd	r25, Y+7	; 0x07
    131c:	01 97       	sbiw	r24, 0x01	; 1
    131e:	9f 83       	std	Y+7, r25	; 0x07
    1320:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1322:	8e 81       	ldd	r24, Y+6	; 0x06
    1324:	9f 81       	ldd	r25, Y+7	; 0x07
    1326:	00 97       	sbiw	r24, 0x00	; 0
    1328:	69 f7       	brne	.-38     	; 0x1304 <SSD_viddisplyNum+0x2fc>
    132a:	24 c0       	rjmp	.+72     	; 0x1374 <SSD_viddisplyNum+0x36c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    132c:	68 85       	ldd	r22, Y+8	; 0x08
    132e:	79 85       	ldd	r23, Y+9	; 0x09
    1330:	8a 85       	ldd	r24, Y+10	; 0x0a
    1332:	9b 85       	ldd	r25, Y+11	; 0x0b
    1334:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1338:	dc 01       	movw	r26, r24
    133a:	cb 01       	movw	r24, r22
    133c:	9f 83       	std	Y+7, r25	; 0x07
    133e:	8e 83       	std	Y+6, r24	; 0x06
    1340:	8e 81       	ldd	r24, Y+6	; 0x06
    1342:	9f 81       	ldd	r25, Y+7	; 0x07
    1344:	9b 83       	std	Y+3, r25	; 0x03
    1346:	8a 83       	std	Y+2, r24	; 0x02
    1348:	8a 81       	ldd	r24, Y+2	; 0x02
    134a:	9b 81       	ldd	r25, Y+3	; 0x03
    134c:	01 97       	sbiw	r24, 0x01	; 1
    134e:	f1 f7       	brne	.-4      	; 0x134c <SSD_viddisplyNum+0x344>
    1350:	9b 83       	std	Y+3, r25	; 0x03
    1352:	8a 83       	std	Y+2, r24	; 0x02
    1354:	0f c0       	rjmp	.+30     	; 0x1374 <SSD_viddisplyNum+0x36c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1356:	69 89       	ldd	r22, Y+17	; 0x11
    1358:	7a 89       	ldd	r23, Y+18	; 0x12
    135a:	8b 89       	ldd	r24, Y+19	; 0x13
    135c:	9c 89       	ldd	r25, Y+20	; 0x14
    135e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1362:	dc 01       	movw	r26, r24
    1364:	cb 01       	movw	r24, r22
    1366:	88 8b       	std	Y+16, r24	; 0x10
    1368:	88 89       	ldd	r24, Y+16	; 0x10
    136a:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    136c:	89 81       	ldd	r24, Y+1	; 0x01
    136e:	8a 95       	dec	r24
    1370:	f1 f7       	brne	.-4      	; 0x136e <SSD_viddisplyNum+0x366>
    1372:	89 83       	std	Y+1, r24	; 0x01


	_delay_us(500);
}
    1374:	e3 96       	adiw	r28, 0x33	; 51
    1376:	0f b6       	in	r0, 0x3f	; 63
    1378:	f8 94       	cli
    137a:	de bf       	out	0x3e, r29	; 62
    137c:	0f be       	out	0x3f, r0	; 63
    137e:	cd bf       	out	0x3d, r28	; 61
    1380:	cf 91       	pop	r28
    1382:	df 91       	pop	r29
    1384:	08 95       	ret

00001386 <SSD_viddelayWithDisplay_ms>:

void SSD_viddelayWithDisplay_ms(u8 num,u32 delay)
{
    1386:	df 93       	push	r29
    1388:	cf 93       	push	r28
    138a:	cd b7       	in	r28, 0x3d	; 61
    138c:	de b7       	in	r29, 0x3e	; 62
    138e:	29 97       	sbiw	r28, 0x09	; 9
    1390:	0f b6       	in	r0, 0x3f	; 63
    1392:	f8 94       	cli
    1394:	de bf       	out	0x3e, r29	; 62
    1396:	0f be       	out	0x3f, r0	; 63
    1398:	cd bf       	out	0x3d, r28	; 61
    139a:	8d 83       	std	Y+5, r24	; 0x05
    139c:	4e 83       	std	Y+6, r20	; 0x06
    139e:	5f 83       	std	Y+7, r21	; 0x07
    13a0:	68 87       	std	Y+8, r22	; 0x08
    13a2:	79 87       	std	Y+9, r23	; 0x09
	u32 loc_iter =0;
    13a4:	19 82       	std	Y+1, r1	; 0x01
    13a6:	1a 82       	std	Y+2, r1	; 0x02
    13a8:	1b 82       	std	Y+3, r1	; 0x03
    13aa:	1c 82       	std	Y+4, r1	; 0x04

	for(loc_iter=0; loc_iter<delay; loc_iter++)
    13ac:	19 82       	std	Y+1, r1	; 0x01
    13ae:	1a 82       	std	Y+2, r1	; 0x02
    13b0:	1b 82       	std	Y+3, r1	; 0x03
    13b2:	1c 82       	std	Y+4, r1	; 0x04
    13b4:	0e c0       	rjmp	.+28     	; 0x13d2 <SSD_viddelayWithDisplay_ms+0x4c>
	{
		SSD_viddisplyNum(num);
    13b6:	8d 81       	ldd	r24, Y+5	; 0x05
    13b8:	0e 94 04 08 	call	0x1008	; 0x1008 <SSD_viddisplyNum>

void SSD_viddelayWithDisplay_ms(u8 num,u32 delay)
{
	u32 loc_iter =0;

	for(loc_iter=0; loc_iter<delay; loc_iter++)
    13bc:	89 81       	ldd	r24, Y+1	; 0x01
    13be:	9a 81       	ldd	r25, Y+2	; 0x02
    13c0:	ab 81       	ldd	r26, Y+3	; 0x03
    13c2:	bc 81       	ldd	r27, Y+4	; 0x04
    13c4:	01 96       	adiw	r24, 0x01	; 1
    13c6:	a1 1d       	adc	r26, r1
    13c8:	b1 1d       	adc	r27, r1
    13ca:	89 83       	std	Y+1, r24	; 0x01
    13cc:	9a 83       	std	Y+2, r25	; 0x02
    13ce:	ab 83       	std	Y+3, r26	; 0x03
    13d0:	bc 83       	std	Y+4, r27	; 0x04
    13d2:	29 81       	ldd	r18, Y+1	; 0x01
    13d4:	3a 81       	ldd	r19, Y+2	; 0x02
    13d6:	4b 81       	ldd	r20, Y+3	; 0x03
    13d8:	5c 81       	ldd	r21, Y+4	; 0x04
    13da:	8e 81       	ldd	r24, Y+6	; 0x06
    13dc:	9f 81       	ldd	r25, Y+7	; 0x07
    13de:	a8 85       	ldd	r26, Y+8	; 0x08
    13e0:	b9 85       	ldd	r27, Y+9	; 0x09
    13e2:	28 17       	cp	r18, r24
    13e4:	39 07       	cpc	r19, r25
    13e6:	4a 07       	cpc	r20, r26
    13e8:	5b 07       	cpc	r21, r27
    13ea:	28 f3       	brcs	.-54     	; 0x13b6 <SSD_viddelayWithDisplay_ms+0x30>
	{
		SSD_viddisplyNum(num);
	}
}
    13ec:	29 96       	adiw	r28, 0x09	; 9
    13ee:	0f b6       	in	r0, 0x3f	; 63
    13f0:	f8 94       	cli
    13f2:	de bf       	out	0x3e, r29	; 62
    13f4:	0f be       	out	0x3f, r0	; 63
    13f6:	cd bf       	out	0x3d, r28	; 61
    13f8:	cf 91       	pop	r28
    13fa:	df 91       	pop	r29
    13fc:	08 95       	ret

000013fe <Led_vidinit>:

#include "Dio.h"
#include "Led.h"

void Led_vidinit(void)
{
    13fe:	df 93       	push	r29
    1400:	cf 93       	push	r28
    1402:	cd b7       	in	r28, 0x3d	; 61
    1404:	de b7       	in	r29, 0x3e	; 62
	Dio_vidconfigChanel(DIO_PORTC, DIO_PIN2,DIO_OUTPUT);
    1406:	82 e0       	ldi	r24, 0x02	; 2
    1408:	62 e0       	ldi	r22, 0x02	; 2
    140a:	41 e0       	ldi	r20, 0x01	; 1
    140c:	0e 94 cc 13 	call	0x2798	; 0x2798 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTC, DIO_PIN7,DIO_OUTPUT);
    1410:	82 e0       	ldi	r24, 0x02	; 2
    1412:	67 e0       	ldi	r22, 0x07	; 7
    1414:	41 e0       	ldi	r20, 0x01	; 1
    1416:	0e 94 cc 13 	call	0x2798	; 0x2798 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTD, DIO_PIN3,DIO_OUTPUT);
    141a:	83 e0       	ldi	r24, 0x03	; 3
    141c:	63 e0       	ldi	r22, 0x03	; 3
    141e:	41 e0       	ldi	r20, 0x01	; 1
    1420:	0e 94 cc 13 	call	0x2798	; 0x2798 <Dio_vidconfigChanel>
}
    1424:	cf 91       	pop	r28
    1426:	df 91       	pop	r29
    1428:	08 95       	ret

0000142a <Led_vidledOn>:

void Led_vidledOn(led_ledId_t ledId)
{
    142a:	df 93       	push	r29
    142c:	cf 93       	push	r28
    142e:	00 d0       	rcall	.+0      	; 0x1430 <Led_vidledOn+0x6>
    1430:	0f 92       	push	r0
    1432:	cd b7       	in	r28, 0x3d	; 61
    1434:	de b7       	in	r29, 0x3e	; 62
    1436:	89 83       	std	Y+1, r24	; 0x01
	switch (ledId)
    1438:	89 81       	ldd	r24, Y+1	; 0x01
    143a:	28 2f       	mov	r18, r24
    143c:	30 e0       	ldi	r19, 0x00	; 0
    143e:	3b 83       	std	Y+3, r19	; 0x03
    1440:	2a 83       	std	Y+2, r18	; 0x02
    1442:	8a 81       	ldd	r24, Y+2	; 0x02
    1444:	9b 81       	ldd	r25, Y+3	; 0x03
    1446:	81 30       	cpi	r24, 0x01	; 1
    1448:	91 05       	cpc	r25, r1
    144a:	79 f0       	breq	.+30     	; 0x146a <Led_vidledOn+0x40>
    144c:	2a 81       	ldd	r18, Y+2	; 0x02
    144e:	3b 81       	ldd	r19, Y+3	; 0x03
    1450:	22 30       	cpi	r18, 0x02	; 2
    1452:	31 05       	cpc	r19, r1
    1454:	81 f0       	breq	.+32     	; 0x1476 <Led_vidledOn+0x4c>
    1456:	8a 81       	ldd	r24, Y+2	; 0x02
    1458:	9b 81       	ldd	r25, Y+3	; 0x03
    145a:	00 97       	sbiw	r24, 0x00	; 0
    145c:	89 f4       	brne	.+34     	; 0x1480 <Led_vidledOn+0x56>
	{
	case LED0:
		Dio_vidwriteChanel(DIO_PORTC, DIO_PIN2, DIO_HIGH);
    145e:	82 e0       	ldi	r24, 0x02	; 2
    1460:	62 e0       	ldi	r22, 0x02	; 2
    1462:	41 e0       	ldi	r20, 0x01	; 1
    1464:	0e 94 af 14 	call	0x295e	; 0x295e <Dio_vidwriteChanel>
    1468:	0b c0       	rjmp	.+22     	; 0x1480 <Led_vidledOn+0x56>
		break;

	case LED1:
		Dio_vidwriteChanel(DIO_PORTC, DIO_PIN7, DIO_HIGH);
    146a:	82 e0       	ldi	r24, 0x02	; 2
    146c:	67 e0       	ldi	r22, 0x07	; 7
    146e:	41 e0       	ldi	r20, 0x01	; 1
    1470:	0e 94 af 14 	call	0x295e	; 0x295e <Dio_vidwriteChanel>
    1474:	05 c0       	rjmp	.+10     	; 0x1480 <Led_vidledOn+0x56>
		break;

	case LED2:
		Dio_vidwriteChanel(DIO_PORTD, DIO_PIN3, DIO_HIGH);
    1476:	83 e0       	ldi	r24, 0x03	; 3
    1478:	63 e0       	ldi	r22, 0x03	; 3
    147a:	41 e0       	ldi	r20, 0x01	; 1
    147c:	0e 94 af 14 	call	0x295e	; 0x295e <Dio_vidwriteChanel>
		break;
	}
}
    1480:	0f 90       	pop	r0
    1482:	0f 90       	pop	r0
    1484:	0f 90       	pop	r0
    1486:	cf 91       	pop	r28
    1488:	df 91       	pop	r29
    148a:	08 95       	ret

0000148c <Led_vidledOff>:

void Led_vidledOff(led_ledId_t ledId)
{
    148c:	df 93       	push	r29
    148e:	cf 93       	push	r28
    1490:	00 d0       	rcall	.+0      	; 0x1492 <Led_vidledOff+0x6>
    1492:	0f 92       	push	r0
    1494:	cd b7       	in	r28, 0x3d	; 61
    1496:	de b7       	in	r29, 0x3e	; 62
    1498:	89 83       	std	Y+1, r24	; 0x01
	switch (ledId)
    149a:	89 81       	ldd	r24, Y+1	; 0x01
    149c:	28 2f       	mov	r18, r24
    149e:	30 e0       	ldi	r19, 0x00	; 0
    14a0:	3b 83       	std	Y+3, r19	; 0x03
    14a2:	2a 83       	std	Y+2, r18	; 0x02
    14a4:	8a 81       	ldd	r24, Y+2	; 0x02
    14a6:	9b 81       	ldd	r25, Y+3	; 0x03
    14a8:	81 30       	cpi	r24, 0x01	; 1
    14aa:	91 05       	cpc	r25, r1
    14ac:	79 f0       	breq	.+30     	; 0x14cc <Led_vidledOff+0x40>
    14ae:	2a 81       	ldd	r18, Y+2	; 0x02
    14b0:	3b 81       	ldd	r19, Y+3	; 0x03
    14b2:	22 30       	cpi	r18, 0x02	; 2
    14b4:	31 05       	cpc	r19, r1
    14b6:	81 f0       	breq	.+32     	; 0x14d8 <Led_vidledOff+0x4c>
    14b8:	8a 81       	ldd	r24, Y+2	; 0x02
    14ba:	9b 81       	ldd	r25, Y+3	; 0x03
    14bc:	00 97       	sbiw	r24, 0x00	; 0
    14be:	89 f4       	brne	.+34     	; 0x14e2 <Led_vidledOff+0x56>
	{
	case LED0:
		Dio_vidwriteChanel(DIO_PORTC, DIO_PIN2, DIO_LOW);
    14c0:	82 e0       	ldi	r24, 0x02	; 2
    14c2:	62 e0       	ldi	r22, 0x02	; 2
    14c4:	40 e0       	ldi	r20, 0x00	; 0
    14c6:	0e 94 af 14 	call	0x295e	; 0x295e <Dio_vidwriteChanel>
    14ca:	0b c0       	rjmp	.+22     	; 0x14e2 <Led_vidledOff+0x56>
		break;

	case LED1:
		Dio_vidwriteChanel(DIO_PORTC, DIO_PIN7, DIO_LOW);
    14cc:	82 e0       	ldi	r24, 0x02	; 2
    14ce:	67 e0       	ldi	r22, 0x07	; 7
    14d0:	40 e0       	ldi	r20, 0x00	; 0
    14d2:	0e 94 af 14 	call	0x295e	; 0x295e <Dio_vidwriteChanel>
    14d6:	05 c0       	rjmp	.+10     	; 0x14e2 <Led_vidledOff+0x56>
		break;

	case LED2:
		Dio_vidwriteChanel(DIO_PORTD, DIO_PIN3, DIO_LOW);
    14d8:	83 e0       	ldi	r24, 0x03	; 3
    14da:	63 e0       	ldi	r22, 0x03	; 3
    14dc:	40 e0       	ldi	r20, 0x00	; 0
    14de:	0e 94 af 14 	call	0x295e	; 0x295e <Dio_vidwriteChanel>
		break;
	}
}
    14e2:	0f 90       	pop	r0
    14e4:	0f 90       	pop	r0
    14e6:	0f 90       	pop	r0
    14e8:	cf 91       	pop	r28
    14ea:	df 91       	pop	r29
    14ec:	08 95       	ret

000014ee <Led_vidledToggle>:
void Led_vidledToggle(led_ledId_t ledId)
{
    14ee:	df 93       	push	r29
    14f0:	cf 93       	push	r28
    14f2:	00 d0       	rcall	.+0      	; 0x14f4 <Led_vidledToggle+0x6>
    14f4:	0f 92       	push	r0
    14f6:	cd b7       	in	r28, 0x3d	; 61
    14f8:	de b7       	in	r29, 0x3e	; 62
    14fa:	89 83       	std	Y+1, r24	; 0x01
	switch (ledId)
    14fc:	89 81       	ldd	r24, Y+1	; 0x01
    14fe:	28 2f       	mov	r18, r24
    1500:	30 e0       	ldi	r19, 0x00	; 0
    1502:	3b 83       	std	Y+3, r19	; 0x03
    1504:	2a 83       	std	Y+2, r18	; 0x02
    1506:	8a 81       	ldd	r24, Y+2	; 0x02
    1508:	9b 81       	ldd	r25, Y+3	; 0x03
    150a:	81 30       	cpi	r24, 0x01	; 1
    150c:	91 05       	cpc	r25, r1
    150e:	71 f0       	breq	.+28     	; 0x152c <Led_vidledToggle+0x3e>
    1510:	2a 81       	ldd	r18, Y+2	; 0x02
    1512:	3b 81       	ldd	r19, Y+3	; 0x03
    1514:	22 30       	cpi	r18, 0x02	; 2
    1516:	31 05       	cpc	r19, r1
    1518:	71 f0       	breq	.+28     	; 0x1536 <Led_vidledToggle+0x48>
    151a:	8a 81       	ldd	r24, Y+2	; 0x02
    151c:	9b 81       	ldd	r25, Y+3	; 0x03
    151e:	00 97       	sbiw	r24, 0x00	; 0
    1520:	71 f4       	brne	.+28     	; 0x153e <Led_vidledToggle+0x50>
	{
	case LED0:
		Dio_vidflipChanel(DIO_PORTC, DIO_PIN2);
    1522:	82 e0       	ldi	r24, 0x02	; 2
    1524:	62 e0       	ldi	r22, 0x02	; 2
    1526:	0e 94 81 16 	call	0x2d02	; 0x2d02 <Dio_vidflipChanel>
    152a:	09 c0       	rjmp	.+18     	; 0x153e <Led_vidledToggle+0x50>
		break;

	case LED1:
		Dio_vidflipChanel(DIO_PORTC, DIO_PIN7);
    152c:	82 e0       	ldi	r24, 0x02	; 2
    152e:	67 e0       	ldi	r22, 0x07	; 7
    1530:	0e 94 81 16 	call	0x2d02	; 0x2d02 <Dio_vidflipChanel>
    1534:	04 c0       	rjmp	.+8      	; 0x153e <Led_vidledToggle+0x50>
		break;

	case LED2:
		Dio_vidflipChanel(DIO_PORTD, DIO_PIN3);
    1536:	83 e0       	ldi	r24, 0x03	; 3
    1538:	63 e0       	ldi	r22, 0x03	; 3
    153a:	0e 94 81 16 	call	0x2d02	; 0x2d02 <Dio_vidflipChanel>
		break;
	}
}
    153e:	0f 90       	pop	r0
    1540:	0f 90       	pop	r0
    1542:	0f 90       	pop	r0
    1544:	cf 91       	pop	r28
    1546:	df 91       	pop	r29
    1548:	08 95       	ret

0000154a <Lm35_vidInit>:

#include "Std_Types.h"
#include "Adc.h"

void Lm35_vidInit(void)
{
    154a:	df 93       	push	r29
    154c:	cf 93       	push	r28
    154e:	cd b7       	in	r28, 0x3d	; 61
    1550:	de b7       	in	r29, 0x3e	; 62
	Adc_vidInit();
    1552:	0e 94 7b 17 	call	0x2ef6	; 0x2ef6 <Adc_vidInit>
}
    1556:	cf 91       	pop	r28
    1558:	df 91       	pop	r29
    155a:	08 95       	ret

0000155c <Lm35_u8TempRead>:
u16 Lm35_u8TempRead(void)
{
    155c:	df 93       	push	r29
    155e:	cf 93       	push	r28
    1560:	00 d0       	rcall	.+0      	; 0x1562 <Lm35_u8TempRead+0x6>
    1562:	00 d0       	rcall	.+0      	; 0x1564 <Lm35_u8TempRead+0x8>
    1564:	00 d0       	rcall	.+0      	; 0x1566 <Lm35_u8TempRead+0xa>
    1566:	cd b7       	in	r28, 0x3d	; 61
    1568:	de b7       	in	r29, 0x3e	; 62
	f64 loc_adcRead = 0;
    156a:	80 e0       	ldi	r24, 0x00	; 0
    156c:	90 e0       	ldi	r25, 0x00	; 0
    156e:	a0 e0       	ldi	r26, 0x00	; 0
    1570:	b0 e0       	ldi	r27, 0x00	; 0
    1572:	8b 83       	std	Y+3, r24	; 0x03
    1574:	9c 83       	std	Y+4, r25	; 0x04
    1576:	ad 83       	std	Y+5, r26	; 0x05
    1578:	be 83       	std	Y+6, r27	; 0x06
	u16 loc_temp = 0;
    157a:	1a 82       	std	Y+2, r1	; 0x02
    157c:	19 82       	std	Y+1, r1	; 0x01

	loc_adcRead = Adc_u16AdcRead(ADC_CHANNEL1);
    157e:	81 e0       	ldi	r24, 0x01	; 1
    1580:	0e 94 97 17 	call	0x2f2e	; 0x2f2e <Adc_u16AdcRead>
    1584:	dc 01       	movw	r26, r24
    1586:	cb 01       	movw	r24, r22
    1588:	8b 83       	std	Y+3, r24	; 0x03
    158a:	9c 83       	std	Y+4, r25	; 0x04
    158c:	ad 83       	std	Y+5, r26	; 0x05
    158e:	be 83       	std	Y+6, r27	; 0x06
	loc_temp = loc_adcRead/10;
    1590:	6b 81       	ldd	r22, Y+3	; 0x03
    1592:	7c 81       	ldd	r23, Y+4	; 0x04
    1594:	8d 81       	ldd	r24, Y+5	; 0x05
    1596:	9e 81       	ldd	r25, Y+6	; 0x06
    1598:	20 e0       	ldi	r18, 0x00	; 0
    159a:	30 e0       	ldi	r19, 0x00	; 0
    159c:	40 e2       	ldi	r20, 0x20	; 32
    159e:	51 e4       	ldi	r21, 0x41	; 65
    15a0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    15a4:	dc 01       	movw	r26, r24
    15a6:	cb 01       	movw	r24, r22
    15a8:	bc 01       	movw	r22, r24
    15aa:	cd 01       	movw	r24, r26
    15ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15b0:	dc 01       	movw	r26, r24
    15b2:	cb 01       	movw	r24, r22
    15b4:	9a 83       	std	Y+2, r25	; 0x02
    15b6:	89 83       	std	Y+1, r24	; 0x01

	return loc_temp;
    15b8:	89 81       	ldd	r24, Y+1	; 0x01
    15ba:	9a 81       	ldd	r25, Y+2	; 0x02
}
    15bc:	26 96       	adiw	r28, 0x06	; 6
    15be:	0f b6       	in	r0, 0x3f	; 63
    15c0:	f8 94       	cli
    15c2:	de bf       	out	0x3e, r29	; 62
    15c4:	0f be       	out	0x3f, r0	; 63
    15c6:	cd bf       	out	0x3d, r28	; 61
    15c8:	cf 91       	pop	r28
    15ca:	df 91       	pop	r29
    15cc:	08 95       	ret

000015ce <Lcd_vidinit>:
#include "util/delay.h"
#include <stdio.h>


void Lcd_vidinit(void)
{
    15ce:	df 93       	push	r29
    15d0:	cf 93       	push	r28
    15d2:	cd b7       	in	r28, 0x3d	; 61
    15d4:	de b7       	in	r29, 0x3e	; 62
    15d6:	e4 97       	sbiw	r28, 0x34	; 52
    15d8:	0f b6       	in	r0, 0x3f	; 63
    15da:	f8 94       	cli
    15dc:	de bf       	out	0x3e, r29	; 62
    15de:	0f be       	out	0x3f, r0	; 63
    15e0:	cd bf       	out	0x3d, r28	; 61
	/*	configure control pins as output	*/
	Dio_vidconfigChanel(DIO_PORTB, DIO_PIN1, DIO_OUTPUT);
    15e2:	81 e0       	ldi	r24, 0x01	; 1
    15e4:	61 e0       	ldi	r22, 0x01	; 1
    15e6:	41 e0       	ldi	r20, 0x01	; 1
    15e8:	0e 94 cc 13 	call	0x2798	; 0x2798 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTB, DIO_PIN2, DIO_OUTPUT);
    15ec:	81 e0       	ldi	r24, 0x01	; 1
    15ee:	62 e0       	ldi	r22, 0x02	; 2
    15f0:	41 e0       	ldi	r20, 0x01	; 1
    15f2:	0e 94 cc 13 	call	0x2798	; 0x2798 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTB, DIO_PIN3, DIO_OUTPUT);
    15f6:	81 e0       	ldi	r24, 0x01	; 1
    15f8:	63 e0       	ldi	r22, 0x03	; 3
    15fa:	41 e0       	ldi	r20, 0x01	; 1
    15fc:	0e 94 cc 13 	call	0x2798	; 0x2798 <Dio_vidconfigChanel>

	/*	configure data pins as output	*/
	Dio_vidconfigChanel(DIO_PORTA, DIO_PIN4, DIO_OUTPUT);
    1600:	80 e0       	ldi	r24, 0x00	; 0
    1602:	64 e0       	ldi	r22, 0x04	; 4
    1604:	41 e0       	ldi	r20, 0x01	; 1
    1606:	0e 94 cc 13 	call	0x2798	; 0x2798 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTA, DIO_PIN5, DIO_OUTPUT);
    160a:	80 e0       	ldi	r24, 0x00	; 0
    160c:	65 e0       	ldi	r22, 0x05	; 5
    160e:	41 e0       	ldi	r20, 0x01	; 1
    1610:	0e 94 cc 13 	call	0x2798	; 0x2798 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTA, DIO_PIN6, DIO_OUTPUT);
    1614:	80 e0       	ldi	r24, 0x00	; 0
    1616:	66 e0       	ldi	r22, 0x06	; 6
    1618:	41 e0       	ldi	r20, 0x01	; 1
    161a:	0e 94 cc 13 	call	0x2798	; 0x2798 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTA, DIO_PIN7, DIO_OUTPUT);
    161e:	80 e0       	ldi	r24, 0x00	; 0
    1620:	67 e0       	ldi	r22, 0x07	; 7
    1622:	41 e0       	ldi	r20, 0x01	; 1
    1624:	0e 94 cc 13 	call	0x2798	; 0x2798 <Dio_vidconfigChanel>

	Dio_vidwriteChanel(DIO_PORTB, DIO_PIN2, DIO_LOW);
    1628:	81 e0       	ldi	r24, 0x01	; 1
    162a:	62 e0       	ldi	r22, 0x02	; 2
    162c:	40 e0       	ldi	r20, 0x00	; 0
    162e:	0e 94 af 14 	call	0x295e	; 0x295e <Dio_vidwriteChanel>
    1632:	80 e0       	ldi	r24, 0x00	; 0
    1634:	90 e0       	ldi	r25, 0x00	; 0
    1636:	a0 e7       	ldi	r26, 0x70	; 112
    1638:	b1 e4       	ldi	r27, 0x41	; 65
    163a:	89 ab       	std	Y+49, r24	; 0x31
    163c:	9a ab       	std	Y+50, r25	; 0x32
    163e:	ab ab       	std	Y+51, r26	; 0x33
    1640:	bc ab       	std	Y+52, r27	; 0x34
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1642:	69 a9       	ldd	r22, Y+49	; 0x31
    1644:	7a a9       	ldd	r23, Y+50	; 0x32
    1646:	8b a9       	ldd	r24, Y+51	; 0x33
    1648:	9c a9       	ldd	r25, Y+52	; 0x34
    164a:	20 e0       	ldi	r18, 0x00	; 0
    164c:	30 e0       	ldi	r19, 0x00	; 0
    164e:	4a e7       	ldi	r20, 0x7A	; 122
    1650:	55 e4       	ldi	r21, 0x45	; 69
    1652:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1656:	dc 01       	movw	r26, r24
    1658:	cb 01       	movw	r24, r22
    165a:	8d a7       	std	Y+45, r24	; 0x2d
    165c:	9e a7       	std	Y+46, r25	; 0x2e
    165e:	af a7       	std	Y+47, r26	; 0x2f
    1660:	b8 ab       	std	Y+48, r27	; 0x30
	if (__tmp < 1.0)
    1662:	6d a5       	ldd	r22, Y+45	; 0x2d
    1664:	7e a5       	ldd	r23, Y+46	; 0x2e
    1666:	8f a5       	ldd	r24, Y+47	; 0x2f
    1668:	98 a9       	ldd	r25, Y+48	; 0x30
    166a:	20 e0       	ldi	r18, 0x00	; 0
    166c:	30 e0       	ldi	r19, 0x00	; 0
    166e:	40 e8       	ldi	r20, 0x80	; 128
    1670:	5f e3       	ldi	r21, 0x3F	; 63
    1672:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1676:	88 23       	and	r24, r24
    1678:	2c f4       	brge	.+10     	; 0x1684 <Lcd_vidinit+0xb6>
		__ticks = 1;
    167a:	81 e0       	ldi	r24, 0x01	; 1
    167c:	90 e0       	ldi	r25, 0x00	; 0
    167e:	9c a7       	std	Y+44, r25	; 0x2c
    1680:	8b a7       	std	Y+43, r24	; 0x2b
    1682:	3f c0       	rjmp	.+126    	; 0x1702 <Lcd_vidinit+0x134>
	else if (__tmp > 65535)
    1684:	6d a5       	ldd	r22, Y+45	; 0x2d
    1686:	7e a5       	ldd	r23, Y+46	; 0x2e
    1688:	8f a5       	ldd	r24, Y+47	; 0x2f
    168a:	98 a9       	ldd	r25, Y+48	; 0x30
    168c:	20 e0       	ldi	r18, 0x00	; 0
    168e:	3f ef       	ldi	r19, 0xFF	; 255
    1690:	4f e7       	ldi	r20, 0x7F	; 127
    1692:	57 e4       	ldi	r21, 0x47	; 71
    1694:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1698:	18 16       	cp	r1, r24
    169a:	4c f5       	brge	.+82     	; 0x16ee <Lcd_vidinit+0x120>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    169c:	69 a9       	ldd	r22, Y+49	; 0x31
    169e:	7a a9       	ldd	r23, Y+50	; 0x32
    16a0:	8b a9       	ldd	r24, Y+51	; 0x33
    16a2:	9c a9       	ldd	r25, Y+52	; 0x34
    16a4:	20 e0       	ldi	r18, 0x00	; 0
    16a6:	30 e0       	ldi	r19, 0x00	; 0
    16a8:	40 e2       	ldi	r20, 0x20	; 32
    16aa:	51 e4       	ldi	r21, 0x41	; 65
    16ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16b0:	dc 01       	movw	r26, r24
    16b2:	cb 01       	movw	r24, r22
    16b4:	bc 01       	movw	r22, r24
    16b6:	cd 01       	movw	r24, r26
    16b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16bc:	dc 01       	movw	r26, r24
    16be:	cb 01       	movw	r24, r22
    16c0:	9c a7       	std	Y+44, r25	; 0x2c
    16c2:	8b a7       	std	Y+43, r24	; 0x2b
    16c4:	0f c0       	rjmp	.+30     	; 0x16e4 <Lcd_vidinit+0x116>
    16c6:	80 e9       	ldi	r24, 0x90	; 144
    16c8:	91 e0       	ldi	r25, 0x01	; 1
    16ca:	9a a7       	std	Y+42, r25	; 0x2a
    16cc:	89 a7       	std	Y+41, r24	; 0x29
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    16ce:	89 a5       	ldd	r24, Y+41	; 0x29
    16d0:	9a a5       	ldd	r25, Y+42	; 0x2a
    16d2:	01 97       	sbiw	r24, 0x01	; 1
    16d4:	f1 f7       	brne	.-4      	; 0x16d2 <Lcd_vidinit+0x104>
    16d6:	9a a7       	std	Y+42, r25	; 0x2a
    16d8:	89 a7       	std	Y+41, r24	; 0x29
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16da:	8b a5       	ldd	r24, Y+43	; 0x2b
    16dc:	9c a5       	ldd	r25, Y+44	; 0x2c
    16de:	01 97       	sbiw	r24, 0x01	; 1
    16e0:	9c a7       	std	Y+44, r25	; 0x2c
    16e2:	8b a7       	std	Y+43, r24	; 0x2b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16e4:	8b a5       	ldd	r24, Y+43	; 0x2b
    16e6:	9c a5       	ldd	r25, Y+44	; 0x2c
    16e8:	00 97       	sbiw	r24, 0x00	; 0
    16ea:	69 f7       	brne	.-38     	; 0x16c6 <Lcd_vidinit+0xf8>
    16ec:	14 c0       	rjmp	.+40     	; 0x1716 <Lcd_vidinit+0x148>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16ee:	6d a5       	ldd	r22, Y+45	; 0x2d
    16f0:	7e a5       	ldd	r23, Y+46	; 0x2e
    16f2:	8f a5       	ldd	r24, Y+47	; 0x2f
    16f4:	98 a9       	ldd	r25, Y+48	; 0x30
    16f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16fa:	dc 01       	movw	r26, r24
    16fc:	cb 01       	movw	r24, r22
    16fe:	9c a7       	std	Y+44, r25	; 0x2c
    1700:	8b a7       	std	Y+43, r24	; 0x2b
    1702:	8b a5       	ldd	r24, Y+43	; 0x2b
    1704:	9c a5       	ldd	r25, Y+44	; 0x2c
    1706:	98 a7       	std	Y+40, r25	; 0x28
    1708:	8f a3       	std	Y+39, r24	; 0x27
    170a:	8f a1       	ldd	r24, Y+39	; 0x27
    170c:	98 a5       	ldd	r25, Y+40	; 0x28
    170e:	01 97       	sbiw	r24, 0x01	; 1
    1710:	f1 f7       	brne	.-4      	; 0x170e <Lcd_vidinit+0x140>
    1712:	98 a7       	std	Y+40, r25	; 0x28
    1714:	8f a3       	std	Y+39, r24	; 0x27

	_delay_ms(15);

	Lcd_vidCmd(0x03);
    1716:	83 e0       	ldi	r24, 0x03	; 3
    1718:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <Lcd_vidCmd>
    171c:	80 e0       	ldi	r24, 0x00	; 0
    171e:	90 e0       	ldi	r25, 0x00	; 0
    1720:	a0 ea       	ldi	r26, 0xA0	; 160
    1722:	b0 e4       	ldi	r27, 0x40	; 64
    1724:	8b a3       	std	Y+35, r24	; 0x23
    1726:	9c a3       	std	Y+36, r25	; 0x24
    1728:	ad a3       	std	Y+37, r26	; 0x25
    172a:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    172c:	6b a1       	ldd	r22, Y+35	; 0x23
    172e:	7c a1       	ldd	r23, Y+36	; 0x24
    1730:	8d a1       	ldd	r24, Y+37	; 0x25
    1732:	9e a1       	ldd	r25, Y+38	; 0x26
    1734:	20 e0       	ldi	r18, 0x00	; 0
    1736:	30 e0       	ldi	r19, 0x00	; 0
    1738:	4a e7       	ldi	r20, 0x7A	; 122
    173a:	55 e4       	ldi	r21, 0x45	; 69
    173c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1740:	dc 01       	movw	r26, r24
    1742:	cb 01       	movw	r24, r22
    1744:	8f 8f       	std	Y+31, r24	; 0x1f
    1746:	98 a3       	std	Y+32, r25	; 0x20
    1748:	a9 a3       	std	Y+33, r26	; 0x21
    174a:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    174c:	6f 8d       	ldd	r22, Y+31	; 0x1f
    174e:	78 a1       	ldd	r23, Y+32	; 0x20
    1750:	89 a1       	ldd	r24, Y+33	; 0x21
    1752:	9a a1       	ldd	r25, Y+34	; 0x22
    1754:	20 e0       	ldi	r18, 0x00	; 0
    1756:	30 e0       	ldi	r19, 0x00	; 0
    1758:	40 e8       	ldi	r20, 0x80	; 128
    175a:	5f e3       	ldi	r21, 0x3F	; 63
    175c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1760:	88 23       	and	r24, r24
    1762:	2c f4       	brge	.+10     	; 0x176e <Lcd_vidinit+0x1a0>
		__ticks = 1;
    1764:	81 e0       	ldi	r24, 0x01	; 1
    1766:	90 e0       	ldi	r25, 0x00	; 0
    1768:	9e 8f       	std	Y+30, r25	; 0x1e
    176a:	8d 8f       	std	Y+29, r24	; 0x1d
    176c:	3f c0       	rjmp	.+126    	; 0x17ec <Lcd_vidinit+0x21e>
	else if (__tmp > 65535)
    176e:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1770:	78 a1       	ldd	r23, Y+32	; 0x20
    1772:	89 a1       	ldd	r24, Y+33	; 0x21
    1774:	9a a1       	ldd	r25, Y+34	; 0x22
    1776:	20 e0       	ldi	r18, 0x00	; 0
    1778:	3f ef       	ldi	r19, 0xFF	; 255
    177a:	4f e7       	ldi	r20, 0x7F	; 127
    177c:	57 e4       	ldi	r21, 0x47	; 71
    177e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1782:	18 16       	cp	r1, r24
    1784:	4c f5       	brge	.+82     	; 0x17d8 <Lcd_vidinit+0x20a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1786:	6b a1       	ldd	r22, Y+35	; 0x23
    1788:	7c a1       	ldd	r23, Y+36	; 0x24
    178a:	8d a1       	ldd	r24, Y+37	; 0x25
    178c:	9e a1       	ldd	r25, Y+38	; 0x26
    178e:	20 e0       	ldi	r18, 0x00	; 0
    1790:	30 e0       	ldi	r19, 0x00	; 0
    1792:	40 e2       	ldi	r20, 0x20	; 32
    1794:	51 e4       	ldi	r21, 0x41	; 65
    1796:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    179a:	dc 01       	movw	r26, r24
    179c:	cb 01       	movw	r24, r22
    179e:	bc 01       	movw	r22, r24
    17a0:	cd 01       	movw	r24, r26
    17a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17a6:	dc 01       	movw	r26, r24
    17a8:	cb 01       	movw	r24, r22
    17aa:	9e 8f       	std	Y+30, r25	; 0x1e
    17ac:	8d 8f       	std	Y+29, r24	; 0x1d
    17ae:	0f c0       	rjmp	.+30     	; 0x17ce <Lcd_vidinit+0x200>
    17b0:	80 e9       	ldi	r24, 0x90	; 144
    17b2:	91 e0       	ldi	r25, 0x01	; 1
    17b4:	9c 8f       	std	Y+28, r25	; 0x1c
    17b6:	8b 8f       	std	Y+27, r24	; 0x1b
    17b8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    17ba:	9c 8d       	ldd	r25, Y+28	; 0x1c
    17bc:	01 97       	sbiw	r24, 0x01	; 1
    17be:	f1 f7       	brne	.-4      	; 0x17bc <Lcd_vidinit+0x1ee>
    17c0:	9c 8f       	std	Y+28, r25	; 0x1c
    17c2:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17c4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    17c6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    17c8:	01 97       	sbiw	r24, 0x01	; 1
    17ca:	9e 8f       	std	Y+30, r25	; 0x1e
    17cc:	8d 8f       	std	Y+29, r24	; 0x1d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17ce:	8d 8d       	ldd	r24, Y+29	; 0x1d
    17d0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    17d2:	00 97       	sbiw	r24, 0x00	; 0
    17d4:	69 f7       	brne	.-38     	; 0x17b0 <Lcd_vidinit+0x1e2>
    17d6:	14 c0       	rjmp	.+40     	; 0x1800 <Lcd_vidinit+0x232>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17d8:	6f 8d       	ldd	r22, Y+31	; 0x1f
    17da:	78 a1       	ldd	r23, Y+32	; 0x20
    17dc:	89 a1       	ldd	r24, Y+33	; 0x21
    17de:	9a a1       	ldd	r25, Y+34	; 0x22
    17e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17e4:	dc 01       	movw	r26, r24
    17e6:	cb 01       	movw	r24, r22
    17e8:	9e 8f       	std	Y+30, r25	; 0x1e
    17ea:	8d 8f       	std	Y+29, r24	; 0x1d
    17ec:	8d 8d       	ldd	r24, Y+29	; 0x1d
    17ee:	9e 8d       	ldd	r25, Y+30	; 0x1e
    17f0:	9a 8f       	std	Y+26, r25	; 0x1a
    17f2:	89 8f       	std	Y+25, r24	; 0x19
    17f4:	89 8d       	ldd	r24, Y+25	; 0x19
    17f6:	9a 8d       	ldd	r25, Y+26	; 0x1a
    17f8:	01 97       	sbiw	r24, 0x01	; 1
    17fa:	f1 f7       	brne	.-4      	; 0x17f8 <Lcd_vidinit+0x22a>
    17fc:	9a 8f       	std	Y+26, r25	; 0x1a
    17fe:	89 8f       	std	Y+25, r24	; 0x19
	_delay_ms(5);
	Lcd_vidCmd(0x03);
    1800:	83 e0       	ldi	r24, 0x03	; 3
    1802:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <Lcd_vidCmd>
    1806:	80 e0       	ldi	r24, 0x00	; 0
    1808:	90 e0       	ldi	r25, 0x00	; 0
    180a:	a8 ec       	ldi	r26, 0xC8	; 200
    180c:	b2 e4       	ldi	r27, 0x42	; 66
    180e:	8d 8b       	std	Y+21, r24	; 0x15
    1810:	9e 8b       	std	Y+22, r25	; 0x16
    1812:	af 8b       	std	Y+23, r26	; 0x17
    1814:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1816:	6d 89       	ldd	r22, Y+21	; 0x15
    1818:	7e 89       	ldd	r23, Y+22	; 0x16
    181a:	8f 89       	ldd	r24, Y+23	; 0x17
    181c:	98 8d       	ldd	r25, Y+24	; 0x18
    181e:	2b ea       	ldi	r18, 0xAB	; 171
    1820:	3a ea       	ldi	r19, 0xAA	; 170
    1822:	4a ea       	ldi	r20, 0xAA	; 170
    1824:	50 e4       	ldi	r21, 0x40	; 64
    1826:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    182a:	dc 01       	movw	r26, r24
    182c:	cb 01       	movw	r24, r22
    182e:	89 8b       	std	Y+17, r24	; 0x11
    1830:	9a 8b       	std	Y+18, r25	; 0x12
    1832:	ab 8b       	std	Y+19, r26	; 0x13
    1834:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1836:	69 89       	ldd	r22, Y+17	; 0x11
    1838:	7a 89       	ldd	r23, Y+18	; 0x12
    183a:	8b 89       	ldd	r24, Y+19	; 0x13
    183c:	9c 89       	ldd	r25, Y+20	; 0x14
    183e:	20 e0       	ldi	r18, 0x00	; 0
    1840:	30 e0       	ldi	r19, 0x00	; 0
    1842:	40 e8       	ldi	r20, 0x80	; 128
    1844:	5f e3       	ldi	r21, 0x3F	; 63
    1846:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    184a:	88 23       	and	r24, r24
    184c:	1c f4       	brge	.+6      	; 0x1854 <Lcd_vidinit+0x286>
		__ticks = 1;
    184e:	81 e0       	ldi	r24, 0x01	; 1
    1850:	88 8b       	std	Y+16, r24	; 0x10
    1852:	91 c0       	rjmp	.+290    	; 0x1976 <Lcd_vidinit+0x3a8>
	else if (__tmp > 255)
    1854:	69 89       	ldd	r22, Y+17	; 0x11
    1856:	7a 89       	ldd	r23, Y+18	; 0x12
    1858:	8b 89       	ldd	r24, Y+19	; 0x13
    185a:	9c 89       	ldd	r25, Y+20	; 0x14
    185c:	20 e0       	ldi	r18, 0x00	; 0
    185e:	30 e0       	ldi	r19, 0x00	; 0
    1860:	4f e7       	ldi	r20, 0x7F	; 127
    1862:	53 e4       	ldi	r21, 0x43	; 67
    1864:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1868:	18 16       	cp	r1, r24
    186a:	0c f0       	brlt	.+2      	; 0x186e <Lcd_vidinit+0x2a0>
    186c:	7b c0       	rjmp	.+246    	; 0x1964 <Lcd_vidinit+0x396>
	{
		_delay_ms(__us / 1000.0);
    186e:	6d 89       	ldd	r22, Y+21	; 0x15
    1870:	7e 89       	ldd	r23, Y+22	; 0x16
    1872:	8f 89       	ldd	r24, Y+23	; 0x17
    1874:	98 8d       	ldd	r25, Y+24	; 0x18
    1876:	20 e0       	ldi	r18, 0x00	; 0
    1878:	30 e0       	ldi	r19, 0x00	; 0
    187a:	4a e7       	ldi	r20, 0x7A	; 122
    187c:	54 e4       	ldi	r21, 0x44	; 68
    187e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1882:	dc 01       	movw	r26, r24
    1884:	cb 01       	movw	r24, r22
    1886:	8c 87       	std	Y+12, r24	; 0x0c
    1888:	9d 87       	std	Y+13, r25	; 0x0d
    188a:	ae 87       	std	Y+14, r26	; 0x0e
    188c:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    188e:	6c 85       	ldd	r22, Y+12	; 0x0c
    1890:	7d 85       	ldd	r23, Y+13	; 0x0d
    1892:	8e 85       	ldd	r24, Y+14	; 0x0e
    1894:	9f 85       	ldd	r25, Y+15	; 0x0f
    1896:	20 e0       	ldi	r18, 0x00	; 0
    1898:	30 e0       	ldi	r19, 0x00	; 0
    189a:	4a e7       	ldi	r20, 0x7A	; 122
    189c:	55 e4       	ldi	r21, 0x45	; 69
    189e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18a2:	dc 01       	movw	r26, r24
    18a4:	cb 01       	movw	r24, r22
    18a6:	88 87       	std	Y+8, r24	; 0x08
    18a8:	99 87       	std	Y+9, r25	; 0x09
    18aa:	aa 87       	std	Y+10, r26	; 0x0a
    18ac:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    18ae:	68 85       	ldd	r22, Y+8	; 0x08
    18b0:	79 85       	ldd	r23, Y+9	; 0x09
    18b2:	8a 85       	ldd	r24, Y+10	; 0x0a
    18b4:	9b 85       	ldd	r25, Y+11	; 0x0b
    18b6:	20 e0       	ldi	r18, 0x00	; 0
    18b8:	30 e0       	ldi	r19, 0x00	; 0
    18ba:	40 e8       	ldi	r20, 0x80	; 128
    18bc:	5f e3       	ldi	r21, 0x3F	; 63
    18be:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    18c2:	88 23       	and	r24, r24
    18c4:	2c f4       	brge	.+10     	; 0x18d0 <Lcd_vidinit+0x302>
		__ticks = 1;
    18c6:	81 e0       	ldi	r24, 0x01	; 1
    18c8:	90 e0       	ldi	r25, 0x00	; 0
    18ca:	9f 83       	std	Y+7, r25	; 0x07
    18cc:	8e 83       	std	Y+6, r24	; 0x06
    18ce:	3f c0       	rjmp	.+126    	; 0x194e <Lcd_vidinit+0x380>
	else if (__tmp > 65535)
    18d0:	68 85       	ldd	r22, Y+8	; 0x08
    18d2:	79 85       	ldd	r23, Y+9	; 0x09
    18d4:	8a 85       	ldd	r24, Y+10	; 0x0a
    18d6:	9b 85       	ldd	r25, Y+11	; 0x0b
    18d8:	20 e0       	ldi	r18, 0x00	; 0
    18da:	3f ef       	ldi	r19, 0xFF	; 255
    18dc:	4f e7       	ldi	r20, 0x7F	; 127
    18de:	57 e4       	ldi	r21, 0x47	; 71
    18e0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    18e4:	18 16       	cp	r1, r24
    18e6:	4c f5       	brge	.+82     	; 0x193a <Lcd_vidinit+0x36c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18e8:	6c 85       	ldd	r22, Y+12	; 0x0c
    18ea:	7d 85       	ldd	r23, Y+13	; 0x0d
    18ec:	8e 85       	ldd	r24, Y+14	; 0x0e
    18ee:	9f 85       	ldd	r25, Y+15	; 0x0f
    18f0:	20 e0       	ldi	r18, 0x00	; 0
    18f2:	30 e0       	ldi	r19, 0x00	; 0
    18f4:	40 e2       	ldi	r20, 0x20	; 32
    18f6:	51 e4       	ldi	r21, 0x41	; 65
    18f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18fc:	dc 01       	movw	r26, r24
    18fe:	cb 01       	movw	r24, r22
    1900:	bc 01       	movw	r22, r24
    1902:	cd 01       	movw	r24, r26
    1904:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1908:	dc 01       	movw	r26, r24
    190a:	cb 01       	movw	r24, r22
    190c:	9f 83       	std	Y+7, r25	; 0x07
    190e:	8e 83       	std	Y+6, r24	; 0x06
    1910:	0f c0       	rjmp	.+30     	; 0x1930 <Lcd_vidinit+0x362>
    1912:	80 e9       	ldi	r24, 0x90	; 144
    1914:	91 e0       	ldi	r25, 0x01	; 1
    1916:	9d 83       	std	Y+5, r25	; 0x05
    1918:	8c 83       	std	Y+4, r24	; 0x04
    191a:	8c 81       	ldd	r24, Y+4	; 0x04
    191c:	9d 81       	ldd	r25, Y+5	; 0x05
    191e:	01 97       	sbiw	r24, 0x01	; 1
    1920:	f1 f7       	brne	.-4      	; 0x191e <Lcd_vidinit+0x350>
    1922:	9d 83       	std	Y+5, r25	; 0x05
    1924:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1926:	8e 81       	ldd	r24, Y+6	; 0x06
    1928:	9f 81       	ldd	r25, Y+7	; 0x07
    192a:	01 97       	sbiw	r24, 0x01	; 1
    192c:	9f 83       	std	Y+7, r25	; 0x07
    192e:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1930:	8e 81       	ldd	r24, Y+6	; 0x06
    1932:	9f 81       	ldd	r25, Y+7	; 0x07
    1934:	00 97       	sbiw	r24, 0x00	; 0
    1936:	69 f7       	brne	.-38     	; 0x1912 <Lcd_vidinit+0x344>
    1938:	24 c0       	rjmp	.+72     	; 0x1982 <Lcd_vidinit+0x3b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    193a:	68 85       	ldd	r22, Y+8	; 0x08
    193c:	79 85       	ldd	r23, Y+9	; 0x09
    193e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1940:	9b 85       	ldd	r25, Y+11	; 0x0b
    1942:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1946:	dc 01       	movw	r26, r24
    1948:	cb 01       	movw	r24, r22
    194a:	9f 83       	std	Y+7, r25	; 0x07
    194c:	8e 83       	std	Y+6, r24	; 0x06
    194e:	8e 81       	ldd	r24, Y+6	; 0x06
    1950:	9f 81       	ldd	r25, Y+7	; 0x07
    1952:	9b 83       	std	Y+3, r25	; 0x03
    1954:	8a 83       	std	Y+2, r24	; 0x02
    1956:	8a 81       	ldd	r24, Y+2	; 0x02
    1958:	9b 81       	ldd	r25, Y+3	; 0x03
    195a:	01 97       	sbiw	r24, 0x01	; 1
    195c:	f1 f7       	brne	.-4      	; 0x195a <Lcd_vidinit+0x38c>
    195e:	9b 83       	std	Y+3, r25	; 0x03
    1960:	8a 83       	std	Y+2, r24	; 0x02
    1962:	0f c0       	rjmp	.+30     	; 0x1982 <Lcd_vidinit+0x3b4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1964:	69 89       	ldd	r22, Y+17	; 0x11
    1966:	7a 89       	ldd	r23, Y+18	; 0x12
    1968:	8b 89       	ldd	r24, Y+19	; 0x13
    196a:	9c 89       	ldd	r25, Y+20	; 0x14
    196c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1970:	dc 01       	movw	r26, r24
    1972:	cb 01       	movw	r24, r22
    1974:	88 8b       	std	Y+16, r24	; 0x10
    1976:	88 89       	ldd	r24, Y+16	; 0x10
    1978:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    197a:	89 81       	ldd	r24, Y+1	; 0x01
    197c:	8a 95       	dec	r24
    197e:	f1 f7       	brne	.-4      	; 0x197c <Lcd_vidinit+0x3ae>
    1980:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(100);
	Lcd_vidCmd(0x03);
    1982:	83 e0       	ldi	r24, 0x03	; 3
    1984:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <Lcd_vidCmd>
	Lcd_vidCmd(0x02);
    1988:	82 e0       	ldi	r24, 0x02	; 2
    198a:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <Lcd_vidCmd>
	Lcd_vidCmd(_LCD_4BIT_MODE);
    198e:	88 e2       	ldi	r24, 0x28	; 40
    1990:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <Lcd_vidCmd>
}
    1994:	e4 96       	adiw	r28, 0x34	; 52
    1996:	0f b6       	in	r0, 0x3f	; 63
    1998:	f8 94       	cli
    199a:	de bf       	out	0x3e, r29	; 62
    199c:	0f be       	out	0x3f, r0	; 63
    199e:	cd bf       	out	0x3d, r28	; 61
    19a0:	cf 91       	pop	r28
    19a2:	df 91       	pop	r29
    19a4:	08 95       	ret

000019a6 <Lcd_videnablePulse>:

static void Lcd_videnablePulse(void)
{
    19a6:	df 93       	push	r29
    19a8:	cf 93       	push	r28
    19aa:	cd b7       	in	r28, 0x3d	; 61
    19ac:	de b7       	in	r29, 0x3e	; 62
    19ae:	a6 97       	sbiw	r28, 0x26	; 38
    19b0:	0f b6       	in	r0, 0x3f	; 63
    19b2:	f8 94       	cli
    19b4:	de bf       	out	0x3e, r29	; 62
    19b6:	0f be       	out	0x3f, r0	; 63
    19b8:	cd bf       	out	0x3d, r28	; 61
	//send Enable pulse
	Dio_vidwriteChanel(DIO_PORTB, DIO_PIN3, DIO_HIGH);
    19ba:	81 e0       	ldi	r24, 0x01	; 1
    19bc:	63 e0       	ldi	r22, 0x03	; 3
    19be:	41 e0       	ldi	r20, 0x01	; 1
    19c0:	0e 94 af 14 	call	0x295e	; 0x295e <Dio_vidwriteChanel>
    19c4:	80 e0       	ldi	r24, 0x00	; 0
    19c6:	90 e0       	ldi	r25, 0x00	; 0
    19c8:	a0 e8       	ldi	r26, 0x80	; 128
    19ca:	bf e3       	ldi	r27, 0x3F	; 63
    19cc:	8b a3       	std	Y+35, r24	; 0x23
    19ce:	9c a3       	std	Y+36, r25	; 0x24
    19d0:	ad a3       	std	Y+37, r26	; 0x25
    19d2:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    19d4:	6b a1       	ldd	r22, Y+35	; 0x23
    19d6:	7c a1       	ldd	r23, Y+36	; 0x24
    19d8:	8d a1       	ldd	r24, Y+37	; 0x25
    19da:	9e a1       	ldd	r25, Y+38	; 0x26
    19dc:	2b ea       	ldi	r18, 0xAB	; 171
    19de:	3a ea       	ldi	r19, 0xAA	; 170
    19e0:	4a ea       	ldi	r20, 0xAA	; 170
    19e2:	50 e4       	ldi	r21, 0x40	; 64
    19e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19e8:	dc 01       	movw	r26, r24
    19ea:	cb 01       	movw	r24, r22
    19ec:	8f 8f       	std	Y+31, r24	; 0x1f
    19ee:	98 a3       	std	Y+32, r25	; 0x20
    19f0:	a9 a3       	std	Y+33, r26	; 0x21
    19f2:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    19f4:	6f 8d       	ldd	r22, Y+31	; 0x1f
    19f6:	78 a1       	ldd	r23, Y+32	; 0x20
    19f8:	89 a1       	ldd	r24, Y+33	; 0x21
    19fa:	9a a1       	ldd	r25, Y+34	; 0x22
    19fc:	20 e0       	ldi	r18, 0x00	; 0
    19fe:	30 e0       	ldi	r19, 0x00	; 0
    1a00:	40 e8       	ldi	r20, 0x80	; 128
    1a02:	5f e3       	ldi	r21, 0x3F	; 63
    1a04:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a08:	88 23       	and	r24, r24
    1a0a:	1c f4       	brge	.+6      	; 0x1a12 <Lcd_videnablePulse+0x6c>
		__ticks = 1;
    1a0c:	81 e0       	ldi	r24, 0x01	; 1
    1a0e:	8e 8f       	std	Y+30, r24	; 0x1e
    1a10:	91 c0       	rjmp	.+290    	; 0x1b34 <Lcd_videnablePulse+0x18e>
	else if (__tmp > 255)
    1a12:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1a14:	78 a1       	ldd	r23, Y+32	; 0x20
    1a16:	89 a1       	ldd	r24, Y+33	; 0x21
    1a18:	9a a1       	ldd	r25, Y+34	; 0x22
    1a1a:	20 e0       	ldi	r18, 0x00	; 0
    1a1c:	30 e0       	ldi	r19, 0x00	; 0
    1a1e:	4f e7       	ldi	r20, 0x7F	; 127
    1a20:	53 e4       	ldi	r21, 0x43	; 67
    1a22:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a26:	18 16       	cp	r1, r24
    1a28:	0c f0       	brlt	.+2      	; 0x1a2c <Lcd_videnablePulse+0x86>
    1a2a:	7b c0       	rjmp	.+246    	; 0x1b22 <Lcd_videnablePulse+0x17c>
	{
		_delay_ms(__us / 1000.0);
    1a2c:	6b a1       	ldd	r22, Y+35	; 0x23
    1a2e:	7c a1       	ldd	r23, Y+36	; 0x24
    1a30:	8d a1       	ldd	r24, Y+37	; 0x25
    1a32:	9e a1       	ldd	r25, Y+38	; 0x26
    1a34:	20 e0       	ldi	r18, 0x00	; 0
    1a36:	30 e0       	ldi	r19, 0x00	; 0
    1a38:	4a e7       	ldi	r20, 0x7A	; 122
    1a3a:	54 e4       	ldi	r21, 0x44	; 68
    1a3c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1a40:	dc 01       	movw	r26, r24
    1a42:	cb 01       	movw	r24, r22
    1a44:	8a 8f       	std	Y+26, r24	; 0x1a
    1a46:	9b 8f       	std	Y+27, r25	; 0x1b
    1a48:	ac 8f       	std	Y+28, r26	; 0x1c
    1a4a:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a4c:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1a4e:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1a50:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1a52:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1a54:	20 e0       	ldi	r18, 0x00	; 0
    1a56:	30 e0       	ldi	r19, 0x00	; 0
    1a58:	4a e7       	ldi	r20, 0x7A	; 122
    1a5a:	55 e4       	ldi	r21, 0x45	; 69
    1a5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a60:	dc 01       	movw	r26, r24
    1a62:	cb 01       	movw	r24, r22
    1a64:	8e 8b       	std	Y+22, r24	; 0x16
    1a66:	9f 8b       	std	Y+23, r25	; 0x17
    1a68:	a8 8f       	std	Y+24, r26	; 0x18
    1a6a:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    1a6c:	6e 89       	ldd	r22, Y+22	; 0x16
    1a6e:	7f 89       	ldd	r23, Y+23	; 0x17
    1a70:	88 8d       	ldd	r24, Y+24	; 0x18
    1a72:	99 8d       	ldd	r25, Y+25	; 0x19
    1a74:	20 e0       	ldi	r18, 0x00	; 0
    1a76:	30 e0       	ldi	r19, 0x00	; 0
    1a78:	40 e8       	ldi	r20, 0x80	; 128
    1a7a:	5f e3       	ldi	r21, 0x3F	; 63
    1a7c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a80:	88 23       	and	r24, r24
    1a82:	2c f4       	brge	.+10     	; 0x1a8e <Lcd_videnablePulse+0xe8>
		__ticks = 1;
    1a84:	81 e0       	ldi	r24, 0x01	; 1
    1a86:	90 e0       	ldi	r25, 0x00	; 0
    1a88:	9d 8b       	std	Y+21, r25	; 0x15
    1a8a:	8c 8b       	std	Y+20, r24	; 0x14
    1a8c:	3f c0       	rjmp	.+126    	; 0x1b0c <Lcd_videnablePulse+0x166>
	else if (__tmp > 65535)
    1a8e:	6e 89       	ldd	r22, Y+22	; 0x16
    1a90:	7f 89       	ldd	r23, Y+23	; 0x17
    1a92:	88 8d       	ldd	r24, Y+24	; 0x18
    1a94:	99 8d       	ldd	r25, Y+25	; 0x19
    1a96:	20 e0       	ldi	r18, 0x00	; 0
    1a98:	3f ef       	ldi	r19, 0xFF	; 255
    1a9a:	4f e7       	ldi	r20, 0x7F	; 127
    1a9c:	57 e4       	ldi	r21, 0x47	; 71
    1a9e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1aa2:	18 16       	cp	r1, r24
    1aa4:	4c f5       	brge	.+82     	; 0x1af8 <Lcd_videnablePulse+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1aa6:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1aa8:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1aaa:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1aac:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1aae:	20 e0       	ldi	r18, 0x00	; 0
    1ab0:	30 e0       	ldi	r19, 0x00	; 0
    1ab2:	40 e2       	ldi	r20, 0x20	; 32
    1ab4:	51 e4       	ldi	r21, 0x41	; 65
    1ab6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aba:	dc 01       	movw	r26, r24
    1abc:	cb 01       	movw	r24, r22
    1abe:	bc 01       	movw	r22, r24
    1ac0:	cd 01       	movw	r24, r26
    1ac2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ac6:	dc 01       	movw	r26, r24
    1ac8:	cb 01       	movw	r24, r22
    1aca:	9d 8b       	std	Y+21, r25	; 0x15
    1acc:	8c 8b       	std	Y+20, r24	; 0x14
    1ace:	0f c0       	rjmp	.+30     	; 0x1aee <Lcd_videnablePulse+0x148>
    1ad0:	80 e9       	ldi	r24, 0x90	; 144
    1ad2:	91 e0       	ldi	r25, 0x01	; 1
    1ad4:	9b 8b       	std	Y+19, r25	; 0x13
    1ad6:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1ad8:	8a 89       	ldd	r24, Y+18	; 0x12
    1ada:	9b 89       	ldd	r25, Y+19	; 0x13
    1adc:	01 97       	sbiw	r24, 0x01	; 1
    1ade:	f1 f7       	brne	.-4      	; 0x1adc <Lcd_videnablePulse+0x136>
    1ae0:	9b 8b       	std	Y+19, r25	; 0x13
    1ae2:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ae4:	8c 89       	ldd	r24, Y+20	; 0x14
    1ae6:	9d 89       	ldd	r25, Y+21	; 0x15
    1ae8:	01 97       	sbiw	r24, 0x01	; 1
    1aea:	9d 8b       	std	Y+21, r25	; 0x15
    1aec:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1aee:	8c 89       	ldd	r24, Y+20	; 0x14
    1af0:	9d 89       	ldd	r25, Y+21	; 0x15
    1af2:	00 97       	sbiw	r24, 0x00	; 0
    1af4:	69 f7       	brne	.-38     	; 0x1ad0 <Lcd_videnablePulse+0x12a>
    1af6:	24 c0       	rjmp	.+72     	; 0x1b40 <Lcd_videnablePulse+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1af8:	6e 89       	ldd	r22, Y+22	; 0x16
    1afa:	7f 89       	ldd	r23, Y+23	; 0x17
    1afc:	88 8d       	ldd	r24, Y+24	; 0x18
    1afe:	99 8d       	ldd	r25, Y+25	; 0x19
    1b00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b04:	dc 01       	movw	r26, r24
    1b06:	cb 01       	movw	r24, r22
    1b08:	9d 8b       	std	Y+21, r25	; 0x15
    1b0a:	8c 8b       	std	Y+20, r24	; 0x14
    1b0c:	8c 89       	ldd	r24, Y+20	; 0x14
    1b0e:	9d 89       	ldd	r25, Y+21	; 0x15
    1b10:	99 8b       	std	Y+17, r25	; 0x11
    1b12:	88 8b       	std	Y+16, r24	; 0x10
    1b14:	88 89       	ldd	r24, Y+16	; 0x10
    1b16:	99 89       	ldd	r25, Y+17	; 0x11
    1b18:	01 97       	sbiw	r24, 0x01	; 1
    1b1a:	f1 f7       	brne	.-4      	; 0x1b18 <Lcd_videnablePulse+0x172>
    1b1c:	99 8b       	std	Y+17, r25	; 0x11
    1b1e:	88 8b       	std	Y+16, r24	; 0x10
    1b20:	0f c0       	rjmp	.+30     	; 0x1b40 <Lcd_videnablePulse+0x19a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1b22:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1b24:	78 a1       	ldd	r23, Y+32	; 0x20
    1b26:	89 a1       	ldd	r24, Y+33	; 0x21
    1b28:	9a a1       	ldd	r25, Y+34	; 0x22
    1b2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b2e:	dc 01       	movw	r26, r24
    1b30:	cb 01       	movw	r24, r22
    1b32:	8e 8f       	std	Y+30, r24	; 0x1e
    1b34:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1b36:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1b38:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b3a:	8a 95       	dec	r24
    1b3c:	f1 f7       	brne	.-4      	; 0x1b3a <Lcd_videnablePulse+0x194>
    1b3e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(1);
	Dio_vidwriteChanel(DIO_PORTB, DIO_PIN3, DIO_LOW);
    1b40:	81 e0       	ldi	r24, 0x01	; 1
    1b42:	63 e0       	ldi	r22, 0x03	; 3
    1b44:	40 e0       	ldi	r20, 0x00	; 0
    1b46:	0e 94 af 14 	call	0x295e	; 0x295e <Dio_vidwriteChanel>
    1b4a:	80 e0       	ldi	r24, 0x00	; 0
    1b4c:	90 e0       	ldi	r25, 0x00	; 0
    1b4e:	a0 e0       	ldi	r26, 0x00	; 0
    1b50:	b0 e4       	ldi	r27, 0x40	; 64
    1b52:	8b 87       	std	Y+11, r24	; 0x0b
    1b54:	9c 87       	std	Y+12, r25	; 0x0c
    1b56:	ad 87       	std	Y+13, r26	; 0x0d
    1b58:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b5a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b5c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b5e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b60:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b62:	20 e0       	ldi	r18, 0x00	; 0
    1b64:	30 e0       	ldi	r19, 0x00	; 0
    1b66:	4a e7       	ldi	r20, 0x7A	; 122
    1b68:	55 e4       	ldi	r21, 0x45	; 69
    1b6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b6e:	dc 01       	movw	r26, r24
    1b70:	cb 01       	movw	r24, r22
    1b72:	8f 83       	std	Y+7, r24	; 0x07
    1b74:	98 87       	std	Y+8, r25	; 0x08
    1b76:	a9 87       	std	Y+9, r26	; 0x09
    1b78:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b7a:	6f 81       	ldd	r22, Y+7	; 0x07
    1b7c:	78 85       	ldd	r23, Y+8	; 0x08
    1b7e:	89 85       	ldd	r24, Y+9	; 0x09
    1b80:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b82:	20 e0       	ldi	r18, 0x00	; 0
    1b84:	30 e0       	ldi	r19, 0x00	; 0
    1b86:	40 e8       	ldi	r20, 0x80	; 128
    1b88:	5f e3       	ldi	r21, 0x3F	; 63
    1b8a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b8e:	88 23       	and	r24, r24
    1b90:	2c f4       	brge	.+10     	; 0x1b9c <Lcd_videnablePulse+0x1f6>
		__ticks = 1;
    1b92:	81 e0       	ldi	r24, 0x01	; 1
    1b94:	90 e0       	ldi	r25, 0x00	; 0
    1b96:	9e 83       	std	Y+6, r25	; 0x06
    1b98:	8d 83       	std	Y+5, r24	; 0x05
    1b9a:	3f c0       	rjmp	.+126    	; 0x1c1a <Lcd_videnablePulse+0x274>
	else if (__tmp > 65535)
    1b9c:	6f 81       	ldd	r22, Y+7	; 0x07
    1b9e:	78 85       	ldd	r23, Y+8	; 0x08
    1ba0:	89 85       	ldd	r24, Y+9	; 0x09
    1ba2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ba4:	20 e0       	ldi	r18, 0x00	; 0
    1ba6:	3f ef       	ldi	r19, 0xFF	; 255
    1ba8:	4f e7       	ldi	r20, 0x7F	; 127
    1baa:	57 e4       	ldi	r21, 0x47	; 71
    1bac:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1bb0:	18 16       	cp	r1, r24
    1bb2:	4c f5       	brge	.+82     	; 0x1c06 <Lcd_videnablePulse+0x260>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bb4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bb6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bb8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bba:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bbc:	20 e0       	ldi	r18, 0x00	; 0
    1bbe:	30 e0       	ldi	r19, 0x00	; 0
    1bc0:	40 e2       	ldi	r20, 0x20	; 32
    1bc2:	51 e4       	ldi	r21, 0x41	; 65
    1bc4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bc8:	dc 01       	movw	r26, r24
    1bca:	cb 01       	movw	r24, r22
    1bcc:	bc 01       	movw	r22, r24
    1bce:	cd 01       	movw	r24, r26
    1bd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bd4:	dc 01       	movw	r26, r24
    1bd6:	cb 01       	movw	r24, r22
    1bd8:	9e 83       	std	Y+6, r25	; 0x06
    1bda:	8d 83       	std	Y+5, r24	; 0x05
    1bdc:	0f c0       	rjmp	.+30     	; 0x1bfc <Lcd_videnablePulse+0x256>
    1bde:	80 e9       	ldi	r24, 0x90	; 144
    1be0:	91 e0       	ldi	r25, 0x01	; 1
    1be2:	9c 83       	std	Y+4, r25	; 0x04
    1be4:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1be6:	8b 81       	ldd	r24, Y+3	; 0x03
    1be8:	9c 81       	ldd	r25, Y+4	; 0x04
    1bea:	01 97       	sbiw	r24, 0x01	; 1
    1bec:	f1 f7       	brne	.-4      	; 0x1bea <Lcd_videnablePulse+0x244>
    1bee:	9c 83       	std	Y+4, r25	; 0x04
    1bf0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bf2:	8d 81       	ldd	r24, Y+5	; 0x05
    1bf4:	9e 81       	ldd	r25, Y+6	; 0x06
    1bf6:	01 97       	sbiw	r24, 0x01	; 1
    1bf8:	9e 83       	std	Y+6, r25	; 0x06
    1bfa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bfc:	8d 81       	ldd	r24, Y+5	; 0x05
    1bfe:	9e 81       	ldd	r25, Y+6	; 0x06
    1c00:	00 97       	sbiw	r24, 0x00	; 0
    1c02:	69 f7       	brne	.-38     	; 0x1bde <Lcd_videnablePulse+0x238>
    1c04:	14 c0       	rjmp	.+40     	; 0x1c2e <Lcd_videnablePulse+0x288>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c06:	6f 81       	ldd	r22, Y+7	; 0x07
    1c08:	78 85       	ldd	r23, Y+8	; 0x08
    1c0a:	89 85       	ldd	r24, Y+9	; 0x09
    1c0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c12:	dc 01       	movw	r26, r24
    1c14:	cb 01       	movw	r24, r22
    1c16:	9e 83       	std	Y+6, r25	; 0x06
    1c18:	8d 83       	std	Y+5, r24	; 0x05
    1c1a:	8d 81       	ldd	r24, Y+5	; 0x05
    1c1c:	9e 81       	ldd	r25, Y+6	; 0x06
    1c1e:	9a 83       	std	Y+2, r25	; 0x02
    1c20:	89 83       	std	Y+1, r24	; 0x01
    1c22:	89 81       	ldd	r24, Y+1	; 0x01
    1c24:	9a 81       	ldd	r25, Y+2	; 0x02
    1c26:	01 97       	sbiw	r24, 0x01	; 1
    1c28:	f1 f7       	brne	.-4      	; 0x1c26 <Lcd_videnablePulse+0x280>
    1c2a:	9a 83       	std	Y+2, r25	; 0x02
    1c2c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    1c2e:	a6 96       	adiw	r28, 0x26	; 38
    1c30:	0f b6       	in	r0, 0x3f	; 63
    1c32:	f8 94       	cli
    1c34:	de bf       	out	0x3e, r29	; 62
    1c36:	0f be       	out	0x3f, r0	; 63
    1c38:	cd bf       	out	0x3d, r28	; 61
    1c3a:	cf 91       	pop	r28
    1c3c:	df 91       	pop	r29
    1c3e:	08 95       	ret

00001c40 <Lcd_vidDisplayChar>:
void Lcd_vidDisplayChar(u8 chr)
{
    1c40:	df 93       	push	r29
    1c42:	cf 93       	push	r28
    1c44:	00 d0       	rcall	.+0      	; 0x1c46 <Lcd_vidDisplayChar+0x6>
    1c46:	0f 92       	push	r0
    1c48:	cd b7       	in	r28, 0x3d	; 61
    1c4a:	de b7       	in	r29, 0x3e	; 62
    1c4c:	8b 83       	std	Y+3, r24	; 0x03
	0b1101  1001

	1101   0000
	1001   0000
*/
	u8 loc_MSB = (chr & ~LCD_MASK);
    1c4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c50:	80 7f       	andi	r24, 0xF0	; 240
    1c52:	8a 83       	std	Y+2, r24	; 0x02
	u8 loc_LSB = (chr<<4);
    1c54:	8b 81       	ldd	r24, Y+3	; 0x03
    1c56:	82 95       	swap	r24
    1c58:	80 7f       	andi	r24, 0xF0	; 240
    1c5a:	89 83       	std	Y+1, r24	; 0x01
	//RS->1
	Dio_vidwriteChanel(DIO_PORTB, DIO_PIN1, DIO_HIGH);
    1c5c:	81 e0       	ldi	r24, 0x01	; 1
    1c5e:	61 e0       	ldi	r22, 0x01	; 1
    1c60:	41 e0       	ldi	r20, 0x01	; 1
    1c62:	0e 94 af 14 	call	0x295e	; 0x295e <Dio_vidwriteChanel>

	//write data MSB to LCD
	Dio_vidWriteChanelGroup(DIO_PORTA, loc_MSB, LCD_MASK);
    1c66:	80 e0       	ldi	r24, 0x00	; 0
    1c68:	6a 81       	ldd	r22, Y+2	; 0x02
    1c6a:	4f e0       	ldi	r20, 0x0F	; 15
    1c6c:	0e 94 92 15 	call	0x2b24	; 0x2b24 <Dio_vidWriteChanelGroup>
	//send Enable pulse
	Lcd_videnablePulse();
    1c70:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <Lcd_videnablePulse>

	//write data LSB to LCD
	Dio_vidWriteChanelGroup(DIO_PORTA, loc_LSB, LCD_MASK);
    1c74:	80 e0       	ldi	r24, 0x00	; 0
    1c76:	69 81       	ldd	r22, Y+1	; 0x01
    1c78:	4f e0       	ldi	r20, 0x0F	; 15
    1c7a:	0e 94 92 15 	call	0x2b24	; 0x2b24 <Dio_vidWriteChanelGroup>
	//send Enable pulse
	Lcd_videnablePulse();
    1c7e:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <Lcd_videnablePulse>
}
    1c82:	0f 90       	pop	r0
    1c84:	0f 90       	pop	r0
    1c86:	0f 90       	pop	r0
    1c88:	cf 91       	pop	r28
    1c8a:	df 91       	pop	r29
    1c8c:	08 95       	ret

00001c8e <Lcd_vidCmd>:
void Lcd_vidCmd(lcd_Cmd_t cmd)
{
    1c8e:	df 93       	push	r29
    1c90:	cf 93       	push	r28
    1c92:	00 d0       	rcall	.+0      	; 0x1c94 <Lcd_vidCmd+0x6>
    1c94:	0f 92       	push	r0
    1c96:	cd b7       	in	r28, 0x3d	; 61
    1c98:	de b7       	in	r29, 0x3e	; 62
    1c9a:	8b 83       	std	Y+3, r24	; 0x03
	u8 loc_MSB = cmd & ~LCD_MASK;
    1c9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c9e:	80 7f       	andi	r24, 0xF0	; 240
    1ca0:	8a 83       	std	Y+2, r24	; 0x02
	u8 loc_LSB = cmd<<4;
    1ca2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca4:	82 95       	swap	r24
    1ca6:	80 7f       	andi	r24, 0xF0	; 240
    1ca8:	89 83       	std	Y+1, r24	; 0x01
	//RS->0
	Dio_vidwriteChanel(DIO_PORTB, DIO_PIN1, DIO_LOW);
    1caa:	81 e0       	ldi	r24, 0x01	; 1
    1cac:	61 e0       	ldi	r22, 0x01	; 1
    1cae:	40 e0       	ldi	r20, 0x00	; 0
    1cb0:	0e 94 af 14 	call	0x295e	; 0x295e <Dio_vidwriteChanel>

	//write data MSB to LCD
	Dio_vidWriteChanelGroup(DIO_PORTA, loc_MSB, LCD_MASK);
    1cb4:	80 e0       	ldi	r24, 0x00	; 0
    1cb6:	6a 81       	ldd	r22, Y+2	; 0x02
    1cb8:	4f e0       	ldi	r20, 0x0F	; 15
    1cba:	0e 94 92 15 	call	0x2b24	; 0x2b24 <Dio_vidWriteChanelGroup>
	//send Enable pulse
	Lcd_videnablePulse();
    1cbe:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <Lcd_videnablePulse>

	//write data LSB to LCD
	Dio_vidWriteChanelGroup(DIO_PORTA, loc_LSB, LCD_MASK);
    1cc2:	80 e0       	ldi	r24, 0x00	; 0
    1cc4:	69 81       	ldd	r22, Y+1	; 0x01
    1cc6:	4f e0       	ldi	r20, 0x0F	; 15
    1cc8:	0e 94 92 15 	call	0x2b24	; 0x2b24 <Dio_vidWriteChanelGroup>
	//send Enable pulse
	Lcd_videnablePulse();
    1ccc:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <Lcd_videnablePulse>
}
    1cd0:	0f 90       	pop	r0
    1cd2:	0f 90       	pop	r0
    1cd4:	0f 90       	pop	r0
    1cd6:	cf 91       	pop	r28
    1cd8:	df 91       	pop	r29
    1cda:	08 95       	ret

00001cdc <Lcd_vidRowColumn>:

void Lcd_vidRowColumn(u8 row, u8 col)
{
    1cdc:	df 93       	push	r29
    1cde:	cf 93       	push	r28
    1ce0:	00 d0       	rcall	.+0      	; 0x1ce2 <Lcd_vidRowColumn+0x6>
    1ce2:	00 d0       	rcall	.+0      	; 0x1ce4 <Lcd_vidRowColumn+0x8>
    1ce4:	cd b7       	in	r28, 0x3d	; 61
    1ce6:	de b7       	in	r29, 0x3e	; 62
    1ce8:	89 83       	std	Y+1, r24	; 0x01
    1cea:	6a 83       	std	Y+2, r22	; 0x02
	switch (row)
    1cec:	89 81       	ldd	r24, Y+1	; 0x01
    1cee:	28 2f       	mov	r18, r24
    1cf0:	30 e0       	ldi	r19, 0x00	; 0
    1cf2:	3c 83       	std	Y+4, r19	; 0x04
    1cf4:	2b 83       	std	Y+3, r18	; 0x03
    1cf6:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf8:	9c 81       	ldd	r25, Y+4	; 0x04
    1cfa:	00 97       	sbiw	r24, 0x00	; 0
    1cfc:	31 f0       	breq	.+12     	; 0x1d0a <Lcd_vidRowColumn+0x2e>
    1cfe:	2b 81       	ldd	r18, Y+3	; 0x03
    1d00:	3c 81       	ldd	r19, Y+4	; 0x04
    1d02:	21 30       	cpi	r18, 0x01	; 1
    1d04:	31 05       	cpc	r19, r1
    1d06:	31 f0       	breq	.+12     	; 0x1d14 <Lcd_vidRowColumn+0x38>
    1d08:	09 c0       	rjmp	.+18     	; 0x1d1c <Lcd_vidRowColumn+0x40>
	{
	case 0:
		Lcd_vidCmd(0x80 + col);
    1d0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d0c:	80 58       	subi	r24, 0x80	; 128
    1d0e:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <Lcd_vidCmd>
    1d12:	04 c0       	rjmp	.+8      	; 0x1d1c <Lcd_vidRowColumn+0x40>
		break;

	case 1:
		Lcd_vidCmd(0xC0 + col);
    1d14:	8a 81       	ldd	r24, Y+2	; 0x02
    1d16:	80 54       	subi	r24, 0x40	; 64
    1d18:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <Lcd_vidCmd>
		break;
	}
}
    1d1c:	0f 90       	pop	r0
    1d1e:	0f 90       	pop	r0
    1d20:	0f 90       	pop	r0
    1d22:	0f 90       	pop	r0
    1d24:	cf 91       	pop	r28
    1d26:	df 91       	pop	r29
    1d28:	08 95       	ret

00001d2a <Lcd_vidDisplyStr>:
void Lcd_vidDisplyStr(u8* str)
{
    1d2a:	df 93       	push	r29
    1d2c:	cf 93       	push	r28
    1d2e:	00 d0       	rcall	.+0      	; 0x1d30 <Lcd_vidDisplyStr+0x6>
    1d30:	cd b7       	in	r28, 0x3d	; 61
    1d32:	de b7       	in	r29, 0x3e	; 62
    1d34:	9a 83       	std	Y+2, r25	; 0x02
    1d36:	89 83       	std	Y+1, r24	; 0x01
    1d38:	0a c0       	rjmp	.+20     	; 0x1d4e <Lcd_vidDisplyStr+0x24>
	while (*str != '\0')
	{
		Lcd_vidDisplayChar(*str);
    1d3a:	e9 81       	ldd	r30, Y+1	; 0x01
    1d3c:	fa 81       	ldd	r31, Y+2	; 0x02
    1d3e:	80 81       	ld	r24, Z
    1d40:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <Lcd_vidDisplayChar>
		str++;
    1d44:	89 81       	ldd	r24, Y+1	; 0x01
    1d46:	9a 81       	ldd	r25, Y+2	; 0x02
    1d48:	01 96       	adiw	r24, 0x01	; 1
    1d4a:	9a 83       	std	Y+2, r25	; 0x02
    1d4c:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
}
void Lcd_vidDisplyStr(u8* str)
{
	while (*str != '\0')
    1d4e:	e9 81       	ldd	r30, Y+1	; 0x01
    1d50:	fa 81       	ldd	r31, Y+2	; 0x02
    1d52:	80 81       	ld	r24, Z
    1d54:	88 23       	and	r24, r24
    1d56:	89 f7       	brne	.-30     	; 0x1d3a <Lcd_vidDisplyStr+0x10>
	{
		Lcd_vidDisplayChar(*str);
		str++;
	}
}
    1d58:	0f 90       	pop	r0
    1d5a:	0f 90       	pop	r0
    1d5c:	cf 91       	pop	r28
    1d5e:	df 91       	pop	r29
    1d60:	08 95       	ret

00001d62 <Lcd_vidDisplyInt>:

void Lcd_vidDisplyInt(u32 num)
{
    1d62:	df 93       	push	r29
    1d64:	cf 93       	push	r28
    1d66:	cd b7       	in	r28, 0x3d	; 61
    1d68:	de b7       	in	r29, 0x3e	; 62
    1d6a:	29 97       	sbiw	r28, 0x09	; 9
    1d6c:	0f b6       	in	r0, 0x3f	; 63
    1d6e:	f8 94       	cli
    1d70:	de bf       	out	0x3e, r29	; 62
    1d72:	0f be       	out	0x3f, r0	; 63
    1d74:	cd bf       	out	0x3d, r28	; 61
    1d76:	6e 83       	std	Y+6, r22	; 0x06
    1d78:	7f 83       	std	Y+7, r23	; 0x07
    1d7a:	88 87       	std	Y+8, r24	; 0x08
    1d7c:	99 87       	std	Y+9, r25	; 0x09
	u8 buffer[5];
	sprintf(buffer,"%d",num);
    1d7e:	8d b7       	in	r24, 0x3d	; 61
    1d80:	9e b7       	in	r25, 0x3e	; 62
    1d82:	08 97       	sbiw	r24, 0x08	; 8
    1d84:	0f b6       	in	r0, 0x3f	; 63
    1d86:	f8 94       	cli
    1d88:	9e bf       	out	0x3e, r25	; 62
    1d8a:	0f be       	out	0x3f, r0	; 63
    1d8c:	8d bf       	out	0x3d, r24	; 61
    1d8e:	ed b7       	in	r30, 0x3d	; 61
    1d90:	fe b7       	in	r31, 0x3e	; 62
    1d92:	31 96       	adiw	r30, 0x01	; 1
    1d94:	ce 01       	movw	r24, r28
    1d96:	01 96       	adiw	r24, 0x01	; 1
    1d98:	91 83       	std	Z+1, r25	; 0x01
    1d9a:	80 83       	st	Z, r24
    1d9c:	80 e6       	ldi	r24, 0x60	; 96
    1d9e:	90 e0       	ldi	r25, 0x00	; 0
    1da0:	93 83       	std	Z+3, r25	; 0x03
    1da2:	82 83       	std	Z+2, r24	; 0x02
    1da4:	8e 81       	ldd	r24, Y+6	; 0x06
    1da6:	9f 81       	ldd	r25, Y+7	; 0x07
    1da8:	a8 85       	ldd	r26, Y+8	; 0x08
    1daa:	b9 85       	ldd	r27, Y+9	; 0x09
    1dac:	84 83       	std	Z+4, r24	; 0x04
    1dae:	95 83       	std	Z+5, r25	; 0x05
    1db0:	a6 83       	std	Z+6, r26	; 0x06
    1db2:	b7 83       	std	Z+7, r27	; 0x07
    1db4:	0e 94 6c 18 	call	0x30d8	; 0x30d8 <sprintf>
    1db8:	8d b7       	in	r24, 0x3d	; 61
    1dba:	9e b7       	in	r25, 0x3e	; 62
    1dbc:	08 96       	adiw	r24, 0x08	; 8
    1dbe:	0f b6       	in	r0, 0x3f	; 63
    1dc0:	f8 94       	cli
    1dc2:	9e bf       	out	0x3e, r25	; 62
    1dc4:	0f be       	out	0x3f, r0	; 63
    1dc6:	8d bf       	out	0x3d, r24	; 61
	Lcd_vidDisplyStr(buffer);
    1dc8:	ce 01       	movw	r24, r28
    1dca:	01 96       	adiw	r24, 0x01	; 1
    1dcc:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <Lcd_vidDisplyStr>
}
    1dd0:	29 96       	adiw	r28, 0x09	; 9
    1dd2:	0f b6       	in	r0, 0x3f	; 63
    1dd4:	f8 94       	cli
    1dd6:	de bf       	out	0x3e, r29	; 62
    1dd8:	0f be       	out	0x3f, r0	; 63
    1dda:	cd bf       	out	0x3d, r28	; 61
    1ddc:	cf 91       	pop	r28
    1dde:	df 91       	pop	r29
    1de0:	08 95       	ret

00001de2 <Lcd_vidDisplyFlot>:
void Lcd_vidDisplyFlot(f64 num)
{
    1de2:	df 93       	push	r29
    1de4:	cf 93       	push	r28
    1de6:	cd b7       	in	r28, 0x3d	; 61
    1de8:	de b7       	in	r29, 0x3e	; 62
    1dea:	68 97       	sbiw	r28, 0x18	; 24
    1dec:	0f b6       	in	r0, 0x3f	; 63
    1dee:	f8 94       	cli
    1df0:	de bf       	out	0x3e, r29	; 62
    1df2:	0f be       	out	0x3f, r0	; 63
    1df4:	cd bf       	out	0x3d, r28	; 61
    1df6:	6d 8b       	std	Y+21, r22	; 0x15
    1df8:	7e 8b       	std	Y+22, r23	; 0x16
    1dfa:	8f 8b       	std	Y+23, r24	; 0x17
    1dfc:	98 8f       	std	Y+24, r25	; 0x18
	u8 buffer[20];
	sprintf(buffer,"%f",num);
    1dfe:	8d b7       	in	r24, 0x3d	; 61
    1e00:	9e b7       	in	r25, 0x3e	; 62
    1e02:	08 97       	sbiw	r24, 0x08	; 8
    1e04:	0f b6       	in	r0, 0x3f	; 63
    1e06:	f8 94       	cli
    1e08:	9e bf       	out	0x3e, r25	; 62
    1e0a:	0f be       	out	0x3f, r0	; 63
    1e0c:	8d bf       	out	0x3d, r24	; 61
    1e0e:	ed b7       	in	r30, 0x3d	; 61
    1e10:	fe b7       	in	r31, 0x3e	; 62
    1e12:	31 96       	adiw	r30, 0x01	; 1
    1e14:	ce 01       	movw	r24, r28
    1e16:	01 96       	adiw	r24, 0x01	; 1
    1e18:	91 83       	std	Z+1, r25	; 0x01
    1e1a:	80 83       	st	Z, r24
    1e1c:	83 e6       	ldi	r24, 0x63	; 99
    1e1e:	90 e0       	ldi	r25, 0x00	; 0
    1e20:	93 83       	std	Z+3, r25	; 0x03
    1e22:	82 83       	std	Z+2, r24	; 0x02
    1e24:	8d 89       	ldd	r24, Y+21	; 0x15
    1e26:	9e 89       	ldd	r25, Y+22	; 0x16
    1e28:	af 89       	ldd	r26, Y+23	; 0x17
    1e2a:	b8 8d       	ldd	r27, Y+24	; 0x18
    1e2c:	84 83       	std	Z+4, r24	; 0x04
    1e2e:	95 83       	std	Z+5, r25	; 0x05
    1e30:	a6 83       	std	Z+6, r26	; 0x06
    1e32:	b7 83       	std	Z+7, r27	; 0x07
    1e34:	0e 94 6c 18 	call	0x30d8	; 0x30d8 <sprintf>
    1e38:	8d b7       	in	r24, 0x3d	; 61
    1e3a:	9e b7       	in	r25, 0x3e	; 62
    1e3c:	08 96       	adiw	r24, 0x08	; 8
    1e3e:	0f b6       	in	r0, 0x3f	; 63
    1e40:	f8 94       	cli
    1e42:	9e bf       	out	0x3e, r25	; 62
    1e44:	0f be       	out	0x3f, r0	; 63
    1e46:	8d bf       	out	0x3d, r24	; 61
	Lcd_vidDisplyStr(buffer);
    1e48:	ce 01       	movw	r24, r28
    1e4a:	01 96       	adiw	r24, 0x01	; 1
    1e4c:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <Lcd_vidDisplyStr>
}
    1e50:	68 96       	adiw	r28, 0x18	; 24
    1e52:	0f b6       	in	r0, 0x3f	; 63
    1e54:	f8 94       	cli
    1e56:	de bf       	out	0x3e, r29	; 62
    1e58:	0f be       	out	0x3f, r0	; 63
    1e5a:	cd bf       	out	0x3d, r28	; 61
    1e5c:	cf 91       	pop	r28
    1e5e:	df 91       	pop	r29
    1e60:	08 95       	ret

00001e62 <Keypad_vidInit>:
		{'7','8','9','C'},
		{'*','0','#','D'}
};

void Keypad_vidInit(void)
{
    1e62:	df 93       	push	r29
    1e64:	cf 93       	push	r28
    1e66:	cd b7       	in	r28, 0x3d	; 61
    1e68:	de b7       	in	r29, 0x3e	; 62
	/*	Configure Rows Pins as input	*/
	Dio_vidconfigChanel(DIO_PORTC, DIO_PIN0, DIO_INPUT);/* ROW0	*/
    1e6a:	82 e0       	ldi	r24, 0x02	; 2
    1e6c:	60 e0       	ldi	r22, 0x00	; 0
    1e6e:	40 e0       	ldi	r20, 0x00	; 0
    1e70:	0e 94 cc 13 	call	0x2798	; 0x2798 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTC, DIO_PIN1, DIO_INPUT);/* ROW1	*/
    1e74:	82 e0       	ldi	r24, 0x02	; 2
    1e76:	61 e0       	ldi	r22, 0x01	; 1
    1e78:	40 e0       	ldi	r20, 0x00	; 0
    1e7a:	0e 94 cc 13 	call	0x2798	; 0x2798 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTC, DIO_PIN2, DIO_INPUT);/* ROW2	*/
    1e7e:	82 e0       	ldi	r24, 0x02	; 2
    1e80:	62 e0       	ldi	r22, 0x02	; 2
    1e82:	40 e0       	ldi	r20, 0x00	; 0
    1e84:	0e 94 cc 13 	call	0x2798	; 0x2798 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTC, DIO_PIN3, DIO_INPUT);/* ROW3 */
    1e88:	82 e0       	ldi	r24, 0x02	; 2
    1e8a:	63 e0       	ldi	r22, 0x03	; 3
    1e8c:	40 e0       	ldi	r20, 0x00	; 0
    1e8e:	0e 94 cc 13 	call	0x2798	; 0x2798 <Dio_vidconfigChanel>

	/*	Configure Columns Pins as output	*/
	Dio_vidconfigChanel(DIO_PORTC, DIO_PIN4, DIO_OUTPUT);/*	COL0 */
    1e92:	82 e0       	ldi	r24, 0x02	; 2
    1e94:	64 e0       	ldi	r22, 0x04	; 4
    1e96:	41 e0       	ldi	r20, 0x01	; 1
    1e98:	0e 94 cc 13 	call	0x2798	; 0x2798 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTC, DIO_PIN5, DIO_OUTPUT);/* COL1 */
    1e9c:	82 e0       	ldi	r24, 0x02	; 2
    1e9e:	65 e0       	ldi	r22, 0x05	; 5
    1ea0:	41 e0       	ldi	r20, 0x01	; 1
    1ea2:	0e 94 cc 13 	call	0x2798	; 0x2798 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTC, DIO_PIN6, DIO_OUTPUT);/* COL2 */
    1ea6:	82 e0       	ldi	r24, 0x02	; 2
    1ea8:	66 e0       	ldi	r22, 0x06	; 6
    1eaa:	41 e0       	ldi	r20, 0x01	; 1
    1eac:	0e 94 cc 13 	call	0x2798	; 0x2798 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTC, DIO_PIN7, DIO_OUTPUT);/* COL3 */
    1eb0:	82 e0       	ldi	r24, 0x02	; 2
    1eb2:	67 e0       	ldi	r22, 0x07	; 7
    1eb4:	41 e0       	ldi	r20, 0x01	; 1
    1eb6:	0e 94 cc 13 	call	0x2798	; 0x2798 <Dio_vidconfigChanel>

	Dio_vidPullUpEn(DIO_PORTC, DIO_PIN0);
    1eba:	82 e0       	ldi	r24, 0x02	; 2
    1ebc:	60 e0       	ldi	r22, 0x00	; 0
    1ebe:	0e 94 fe 16 	call	0x2dfc	; 0x2dfc <Dio_vidPullUpEn>
	Dio_vidPullUpEn(DIO_PORTC, DIO_PIN1);
    1ec2:	82 e0       	ldi	r24, 0x02	; 2
    1ec4:	61 e0       	ldi	r22, 0x01	; 1
    1ec6:	0e 94 fe 16 	call	0x2dfc	; 0x2dfc <Dio_vidPullUpEn>
	Dio_vidPullUpEn(DIO_PORTC, DIO_PIN2);
    1eca:	82 e0       	ldi	r24, 0x02	; 2
    1ecc:	62 e0       	ldi	r22, 0x02	; 2
    1ece:	0e 94 fe 16 	call	0x2dfc	; 0x2dfc <Dio_vidPullUpEn>
	Dio_vidPullUpEn(DIO_PORTC, DIO_PIN3);
    1ed2:	82 e0       	ldi	r24, 0x02	; 2
    1ed4:	63 e0       	ldi	r22, 0x03	; 3
    1ed6:	0e 94 fe 16 	call	0x2dfc	; 0x2dfc <Dio_vidPullUpEn>


	Dio_vidwriteChanel(DIO_PORTC, DIO_PIN4, DIO_LOW);
    1eda:	82 e0       	ldi	r24, 0x02	; 2
    1edc:	64 e0       	ldi	r22, 0x04	; 4
    1ede:	40 e0       	ldi	r20, 0x00	; 0
    1ee0:	0e 94 af 14 	call	0x295e	; 0x295e <Dio_vidwriteChanel>
	Dio_vidwriteChanel(DIO_PORTC, DIO_PIN5, DIO_LOW);
    1ee4:	82 e0       	ldi	r24, 0x02	; 2
    1ee6:	65 e0       	ldi	r22, 0x05	; 5
    1ee8:	40 e0       	ldi	r20, 0x00	; 0
    1eea:	0e 94 af 14 	call	0x295e	; 0x295e <Dio_vidwriteChanel>
	Dio_vidwriteChanel(DIO_PORTC, DIO_PIN6, DIO_LOW);
    1eee:	82 e0       	ldi	r24, 0x02	; 2
    1ef0:	66 e0       	ldi	r22, 0x06	; 6
    1ef2:	40 e0       	ldi	r20, 0x00	; 0
    1ef4:	0e 94 af 14 	call	0x295e	; 0x295e <Dio_vidwriteChanel>
	Dio_vidwriteChanel(DIO_PORTC, DIO_PIN7, DIO_LOW);
    1ef8:	82 e0       	ldi	r24, 0x02	; 2
    1efa:	67 e0       	ldi	r22, 0x07	; 7
    1efc:	40 e0       	ldi	r20, 0x00	; 0
    1efe:	0e 94 af 14 	call	0x295e	; 0x295e <Dio_vidwriteChanel>
}
    1f02:	cf 91       	pop	r28
    1f04:	df 91       	pop	r29
    1f06:	08 95       	ret

00001f08 <Keypad_IsPressed>:

static boolean Keypad_IsPressed(void)
{
    1f08:	df 93       	push	r29
    1f0a:	cf 93       	push	r28
    1f0c:	0f 92       	push	r0
    1f0e:	cd b7       	in	r28, 0x3d	; 61
    1f10:	de b7       	in	r29, 0x3e	; 62
	if (
    1f12:	82 e0       	ldi	r24, 0x02	; 2
    1f14:	60 e0       	ldi	r22, 0x00	; 0
    1f16:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <Dio_udtreadChanel>
    1f1a:	88 23       	and	r24, r24
    1f1c:	91 f0       	breq	.+36     	; 0x1f42 <Keypad_IsPressed+0x3a>
    1f1e:	82 e0       	ldi	r24, 0x02	; 2
    1f20:	61 e0       	ldi	r22, 0x01	; 1
    1f22:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <Dio_udtreadChanel>
    1f26:	88 23       	and	r24, r24
    1f28:	61 f0       	breq	.+24     	; 0x1f42 <Keypad_IsPressed+0x3a>
    1f2a:	82 e0       	ldi	r24, 0x02	; 2
    1f2c:	62 e0       	ldi	r22, 0x02	; 2
    1f2e:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <Dio_udtreadChanel>
    1f32:	88 23       	and	r24, r24
    1f34:	31 f0       	breq	.+12     	; 0x1f42 <Keypad_IsPressed+0x3a>
    1f36:	82 e0       	ldi	r24, 0x02	; 2
    1f38:	63 e0       	ldi	r22, 0x03	; 3
    1f3a:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <Dio_udtreadChanel>
    1f3e:	88 23       	and	r24, r24
    1f40:	19 f4       	brne	.+6      	; 0x1f48 <Keypad_IsPressed+0x40>
			Dio_udtreadChanel(DIO_PORTC, DIO_PIN1) == DIO_LOW ||
			Dio_udtreadChanel(DIO_PORTC, DIO_PIN2) == DIO_LOW ||
			Dio_udtreadChanel(DIO_PORTC, DIO_PIN3) == DIO_LOW
	)
	{
		return TRUE;
    1f42:	81 e0       	ldi	r24, 0x01	; 1
    1f44:	89 83       	std	Y+1, r24	; 0x01
    1f46:	01 c0       	rjmp	.+2      	; 0x1f4a <Keypad_IsPressed+0x42>
	}
	else
	{
		return FALSE;
    1f48:	19 82       	std	Y+1, r1	; 0x01
    1f4a:	89 81       	ldd	r24, Y+1	; 0x01
	}
}
    1f4c:	0f 90       	pop	r0
    1f4e:	cf 91       	pop	r28
    1f50:	df 91       	pop	r29
    1f52:	08 95       	ret

00001f54 <Keypad_GetRow>:


static kp_row_t Keypad_GetRow(void)
{
    1f54:	df 93       	push	r29
    1f56:	cf 93       	push	r28
    1f58:	0f 92       	push	r0
    1f5a:	cd b7       	in	r28, 0x3d	; 61
    1f5c:	de b7       	in	r29, 0x3e	; 62
	kp_row_t loc_ButtonRow = KP_NOROW;
    1f5e:	8f ef       	ldi	r24, 0xFF	; 255
    1f60:	89 83       	std	Y+1, r24	; 0x01
	if (Dio_udtreadChanel(DIO_PORTC, DIO_PIN0) == DIO_LOW)
    1f62:	82 e0       	ldi	r24, 0x02	; 2
    1f64:	60 e0       	ldi	r22, 0x00	; 0
    1f66:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <Dio_udtreadChanel>
    1f6a:	88 23       	and	r24, r24
    1f6c:	11 f4       	brne	.+4      	; 0x1f72 <Keypad_GetRow+0x1e>
	{
		loc_ButtonRow = KP_ROW0;
    1f6e:	19 82       	std	Y+1, r1	; 0x01
    1f70:	1d c0       	rjmp	.+58     	; 0x1fac <Keypad_GetRow+0x58>
	}
	else if (Dio_udtreadChanel(DIO_PORTC, DIO_PIN1) == DIO_LOW)
    1f72:	82 e0       	ldi	r24, 0x02	; 2
    1f74:	61 e0       	ldi	r22, 0x01	; 1
    1f76:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <Dio_udtreadChanel>
    1f7a:	88 23       	and	r24, r24
    1f7c:	19 f4       	brne	.+6      	; 0x1f84 <Keypad_GetRow+0x30>
	{
		loc_ButtonRow = KP_ROW1;
    1f7e:	81 e0       	ldi	r24, 0x01	; 1
    1f80:	89 83       	std	Y+1, r24	; 0x01
    1f82:	14 c0       	rjmp	.+40     	; 0x1fac <Keypad_GetRow+0x58>
	}
	else if (Dio_udtreadChanel(DIO_PORTC, DIO_PIN2) == DIO_LOW)
    1f84:	82 e0       	ldi	r24, 0x02	; 2
    1f86:	62 e0       	ldi	r22, 0x02	; 2
    1f88:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <Dio_udtreadChanel>
    1f8c:	88 23       	and	r24, r24
    1f8e:	19 f4       	brne	.+6      	; 0x1f96 <Keypad_GetRow+0x42>
	{
		loc_ButtonRow = KP_ROW2;
    1f90:	82 e0       	ldi	r24, 0x02	; 2
    1f92:	89 83       	std	Y+1, r24	; 0x01
    1f94:	0b c0       	rjmp	.+22     	; 0x1fac <Keypad_GetRow+0x58>
	}
	else if (Dio_udtreadChanel(DIO_PORTC, DIO_PIN3) == DIO_LOW)
    1f96:	82 e0       	ldi	r24, 0x02	; 2
    1f98:	63 e0       	ldi	r22, 0x03	; 3
    1f9a:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <Dio_udtreadChanel>
    1f9e:	88 23       	and	r24, r24
    1fa0:	19 f4       	brne	.+6      	; 0x1fa8 <Keypad_GetRow+0x54>
	{
		loc_ButtonRow = KP_ROW3;
    1fa2:	83 e0       	ldi	r24, 0x03	; 3
    1fa4:	89 83       	std	Y+1, r24	; 0x01
    1fa6:	02 c0       	rjmp	.+4      	; 0x1fac <Keypad_GetRow+0x58>
	}
	else
	{
		loc_ButtonRow = KP_NOROW;
    1fa8:	8f ef       	ldi	r24, 0xFF	; 255
    1faa:	89 83       	std	Y+1, r24	; 0x01
	}
	return loc_ButtonRow;
    1fac:	89 81       	ldd	r24, Y+1	; 0x01
}
    1fae:	0f 90       	pop	r0
    1fb0:	cf 91       	pop	r28
    1fb2:	df 91       	pop	r29
    1fb4:	08 95       	ret

00001fb6 <Keypad_GetCol>:

static kp_col_t Keypad_GetCol(kp_row_t current_row)
{
    1fb6:	df 93       	push	r29
    1fb8:	cf 93       	push	r28
    1fba:	00 d0       	rcall	.+0      	; 0x1fbc <Keypad_GetCol+0x6>
    1fbc:	cd b7       	in	r28, 0x3d	; 61
    1fbe:	de b7       	in	r29, 0x3e	; 62
    1fc0:	8a 83       	std	Y+2, r24	; 0x02
	kp_col_t loc_ButtonCol = KP_NOCOL;
    1fc2:	8f ef       	ldi	r24, 0xFF	; 255
    1fc4:	89 83       	std	Y+1, r24	; 0x01

	Dio_vidwriteChanel(DIO_PORTC, DIO_PIN4, DIO_LOW);
    1fc6:	82 e0       	ldi	r24, 0x02	; 2
    1fc8:	64 e0       	ldi	r22, 0x04	; 4
    1fca:	40 e0       	ldi	r20, 0x00	; 0
    1fcc:	0e 94 af 14 	call	0x295e	; 0x295e <Dio_vidwriteChanel>
	Dio_vidwriteChanel(DIO_PORTC, DIO_PIN5, DIO_HIGH);
    1fd0:	82 e0       	ldi	r24, 0x02	; 2
    1fd2:	65 e0       	ldi	r22, 0x05	; 5
    1fd4:	41 e0       	ldi	r20, 0x01	; 1
    1fd6:	0e 94 af 14 	call	0x295e	; 0x295e <Dio_vidwriteChanel>
	Dio_vidwriteChanel(DIO_PORTC, DIO_PIN6, DIO_HIGH);
    1fda:	82 e0       	ldi	r24, 0x02	; 2
    1fdc:	66 e0       	ldi	r22, 0x06	; 6
    1fde:	41 e0       	ldi	r20, 0x01	; 1
    1fe0:	0e 94 af 14 	call	0x295e	; 0x295e <Dio_vidwriteChanel>
	Dio_vidwriteChanel(DIO_PORTC, DIO_PIN7, DIO_HIGH);
    1fe4:	82 e0       	ldi	r24, 0x02	; 2
    1fe6:	67 e0       	ldi	r22, 0x07	; 7
    1fe8:	41 e0       	ldi	r20, 0x01	; 1
    1fea:	0e 94 af 14 	call	0x295e	; 0x295e <Dio_vidwriteChanel>

	if (Keypad_GetRow() == current_row)
    1fee:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <Keypad_GetRow>
    1ff2:	98 2f       	mov	r25, r24
    1ff4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ff6:	98 17       	cp	r25, r24
    1ff8:	11 f4       	brne	.+4      	; 0x1ffe <Keypad_GetCol+0x48>
	{
		loc_ButtonCol = KP_COL0;
    1ffa:	19 82       	std	Y+1, r1	; 0x01
    1ffc:	59 c0       	rjmp	.+178    	; 0x20b0 <Keypad_GetCol+0xfa>
	}
	else
	{
		Dio_vidwriteChanel(DIO_PORTC, DIO_PIN4, DIO_HIGH);
    1ffe:	82 e0       	ldi	r24, 0x02	; 2
    2000:	64 e0       	ldi	r22, 0x04	; 4
    2002:	41 e0       	ldi	r20, 0x01	; 1
    2004:	0e 94 af 14 	call	0x295e	; 0x295e <Dio_vidwriteChanel>
		Dio_vidwriteChanel(DIO_PORTC, DIO_PIN5, DIO_LOW);
    2008:	82 e0       	ldi	r24, 0x02	; 2
    200a:	65 e0       	ldi	r22, 0x05	; 5
    200c:	40 e0       	ldi	r20, 0x00	; 0
    200e:	0e 94 af 14 	call	0x295e	; 0x295e <Dio_vidwriteChanel>
		Dio_vidwriteChanel(DIO_PORTC, DIO_PIN6, DIO_HIGH);
    2012:	82 e0       	ldi	r24, 0x02	; 2
    2014:	66 e0       	ldi	r22, 0x06	; 6
    2016:	41 e0       	ldi	r20, 0x01	; 1
    2018:	0e 94 af 14 	call	0x295e	; 0x295e <Dio_vidwriteChanel>
		Dio_vidwriteChanel(DIO_PORTC, DIO_PIN7, DIO_HIGH);
    201c:	82 e0       	ldi	r24, 0x02	; 2
    201e:	67 e0       	ldi	r22, 0x07	; 7
    2020:	41 e0       	ldi	r20, 0x01	; 1
    2022:	0e 94 af 14 	call	0x295e	; 0x295e <Dio_vidwriteChanel>

		if (Keypad_GetRow() == current_row)
    2026:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <Keypad_GetRow>
    202a:	98 2f       	mov	r25, r24
    202c:	8a 81       	ldd	r24, Y+2	; 0x02
    202e:	98 17       	cp	r25, r24
    2030:	19 f4       	brne	.+6      	; 0x2038 <Keypad_GetCol+0x82>
		{
			loc_ButtonCol = KP_COL1;
    2032:	81 e0       	ldi	r24, 0x01	; 1
    2034:	89 83       	std	Y+1, r24	; 0x01
    2036:	3c c0       	rjmp	.+120    	; 0x20b0 <Keypad_GetCol+0xfa>
		}
		else
		{
			Dio_vidwriteChanel(DIO_PORTC, DIO_PIN4, DIO_HIGH);
    2038:	82 e0       	ldi	r24, 0x02	; 2
    203a:	64 e0       	ldi	r22, 0x04	; 4
    203c:	41 e0       	ldi	r20, 0x01	; 1
    203e:	0e 94 af 14 	call	0x295e	; 0x295e <Dio_vidwriteChanel>
			Dio_vidwriteChanel(DIO_PORTC, DIO_PIN5, DIO_HIGH);
    2042:	82 e0       	ldi	r24, 0x02	; 2
    2044:	65 e0       	ldi	r22, 0x05	; 5
    2046:	41 e0       	ldi	r20, 0x01	; 1
    2048:	0e 94 af 14 	call	0x295e	; 0x295e <Dio_vidwriteChanel>
			Dio_vidwriteChanel(DIO_PORTC, DIO_PIN6, DIO_LOW);
    204c:	82 e0       	ldi	r24, 0x02	; 2
    204e:	66 e0       	ldi	r22, 0x06	; 6
    2050:	40 e0       	ldi	r20, 0x00	; 0
    2052:	0e 94 af 14 	call	0x295e	; 0x295e <Dio_vidwriteChanel>
			Dio_vidwriteChanel(DIO_PORTC, DIO_PIN7, DIO_HIGH);
    2056:	82 e0       	ldi	r24, 0x02	; 2
    2058:	67 e0       	ldi	r22, 0x07	; 7
    205a:	41 e0       	ldi	r20, 0x01	; 1
    205c:	0e 94 af 14 	call	0x295e	; 0x295e <Dio_vidwriteChanel>

			if (Keypad_GetRow() == current_row)
    2060:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <Keypad_GetRow>
    2064:	98 2f       	mov	r25, r24
    2066:	8a 81       	ldd	r24, Y+2	; 0x02
    2068:	98 17       	cp	r25, r24
    206a:	19 f4       	brne	.+6      	; 0x2072 <Keypad_GetCol+0xbc>
			{
				loc_ButtonCol = KP_COL2;
    206c:	82 e0       	ldi	r24, 0x02	; 2
    206e:	89 83       	std	Y+1, r24	; 0x01
    2070:	1f c0       	rjmp	.+62     	; 0x20b0 <Keypad_GetCol+0xfa>
			}
			else
			{
				Dio_vidwriteChanel(DIO_PORTC, DIO_PIN4, DIO_HIGH);
    2072:	82 e0       	ldi	r24, 0x02	; 2
    2074:	64 e0       	ldi	r22, 0x04	; 4
    2076:	41 e0       	ldi	r20, 0x01	; 1
    2078:	0e 94 af 14 	call	0x295e	; 0x295e <Dio_vidwriteChanel>
				Dio_vidwriteChanel(DIO_PORTC, DIO_PIN5, DIO_HIGH);
    207c:	82 e0       	ldi	r24, 0x02	; 2
    207e:	65 e0       	ldi	r22, 0x05	; 5
    2080:	41 e0       	ldi	r20, 0x01	; 1
    2082:	0e 94 af 14 	call	0x295e	; 0x295e <Dio_vidwriteChanel>
				Dio_vidwriteChanel(DIO_PORTC, DIO_PIN6, DIO_HIGH);
    2086:	82 e0       	ldi	r24, 0x02	; 2
    2088:	66 e0       	ldi	r22, 0x06	; 6
    208a:	41 e0       	ldi	r20, 0x01	; 1
    208c:	0e 94 af 14 	call	0x295e	; 0x295e <Dio_vidwriteChanel>
				Dio_vidwriteChanel(DIO_PORTC, DIO_PIN7, DIO_LOW);
    2090:	82 e0       	ldi	r24, 0x02	; 2
    2092:	67 e0       	ldi	r22, 0x07	; 7
    2094:	40 e0       	ldi	r20, 0x00	; 0
    2096:	0e 94 af 14 	call	0x295e	; 0x295e <Dio_vidwriteChanel>

				if (Keypad_GetRow() == current_row)
    209a:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <Keypad_GetRow>
    209e:	98 2f       	mov	r25, r24
    20a0:	8a 81       	ldd	r24, Y+2	; 0x02
    20a2:	98 17       	cp	r25, r24
    20a4:	19 f4       	brne	.+6      	; 0x20ac <Keypad_GetCol+0xf6>
				{
					loc_ButtonCol = KP_COL3;
    20a6:	83 e0       	ldi	r24, 0x03	; 3
    20a8:	89 83       	std	Y+1, r24	; 0x01
    20aa:	02 c0       	rjmp	.+4      	; 0x20b0 <Keypad_GetCol+0xfa>
				}
				else
				{
					loc_ButtonCol = KP_NOCOL;
    20ac:	8f ef       	ldi	r24, 0xFF	; 255
    20ae:	89 83       	std	Y+1, r24	; 0x01
				}
			}
		}
	}
	return loc_ButtonCol;
    20b0:	89 81       	ldd	r24, Y+1	; 0x01
}
    20b2:	0f 90       	pop	r0
    20b4:	0f 90       	pop	r0
    20b6:	cf 91       	pop	r28
    20b8:	df 91       	pop	r29
    20ba:	08 95       	ret

000020bc <Keypad_u8GetKey>:

u8 Keypad_u8GetKey(void)
{
    20bc:	df 93       	push	r29
    20be:	cf 93       	push	r28
    20c0:	00 d0       	rcall	.+0      	; 0x20c2 <Keypad_u8GetKey+0x6>
    20c2:	0f 92       	push	r0
    20c4:	cd b7       	in	r28, 0x3d	; 61
    20c6:	de b7       	in	r29, 0x3e	; 62
	u8 loc_key = 0xFF;
    20c8:	8f ef       	ldi	r24, 0xFF	; 255
    20ca:	8b 83       	std	Y+3, r24	; 0x03
	kp_row_t loc_Row = KP_NOROW;
    20cc:	8f ef       	ldi	r24, 0xFF	; 255
    20ce:	8a 83       	std	Y+2, r24	; 0x02
	kp_row_t loc_Col = KP_NOCOL;
    20d0:	8f ef       	ldi	r24, 0xFF	; 255
    20d2:	89 83       	std	Y+1, r24	; 0x01

	Keypad_vidInit();
    20d4:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <Keypad_vidInit>
	/*	Check If Keypad Pressed*/
	if (Keypad_IsPressed() == TRUE)
    20d8:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <Keypad_IsPressed>
    20dc:	81 30       	cpi	r24, 0x01	; 1
    20de:	f1 f4       	brne	.+60     	; 0x211c <Keypad_u8GetKey+0x60>
	{
		/*	Get pressed key ROW*/
		loc_Row = Keypad_GetRow();
    20e0:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <Keypad_GetRow>
    20e4:	8a 83       	std	Y+2, r24	; 0x02
		/*	Get pressed key COLUMN	*/
		loc_Col = Keypad_GetCol(loc_Row);
    20e6:	8a 81       	ldd	r24, Y+2	; 0x02
    20e8:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <Keypad_GetCol>
    20ec:	89 83       	std	Y+1, r24	; 0x01
		/* loc_key = Keypad_layout[ROW][COLUMN]	*/
		loc_key = Keypad_layout[loc_Row][loc_Col];
    20ee:	8a 81       	ldd	r24, Y+2	; 0x02
    20f0:	48 2f       	mov	r20, r24
    20f2:	55 27       	eor	r21, r21
    20f4:	47 fd       	sbrc	r20, 7
    20f6:	50 95       	com	r21
    20f8:	89 81       	ldd	r24, Y+1	; 0x01
    20fa:	28 2f       	mov	r18, r24
    20fc:	33 27       	eor	r19, r19
    20fe:	27 fd       	sbrc	r18, 7
    2100:	30 95       	com	r19
    2102:	ca 01       	movw	r24, r20
    2104:	88 0f       	add	r24, r24
    2106:	99 1f       	adc	r25, r25
    2108:	88 0f       	add	r24, r24
    210a:	99 1f       	adc	r25, r25
    210c:	82 0f       	add	r24, r18
    210e:	93 1f       	adc	r25, r19
    2110:	fc 01       	movw	r30, r24
    2112:	e1 59       	subi	r30, 0x91	; 145
    2114:	fe 4f       	sbci	r31, 0xFE	; 254
    2116:	80 81       	ld	r24, Z
    2118:	8b 83       	std	Y+3, r24	; 0x03
    211a:	02 c0       	rjmp	.+4      	; 0x2120 <Keypad_u8GetKey+0x64>
	}
	else
	{
		/*	Do Nothing	*/
		loc_key = 0xFF;
    211c:	8f ef       	ldi	r24, 0xFF	; 255
    211e:	8b 83       	std	Y+3, r24	; 0x03
	}
	return loc_key;
    2120:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2122:	0f 90       	pop	r0
    2124:	0f 90       	pop	r0
    2126:	0f 90       	pop	r0
    2128:	cf 91       	pop	r28
    212a:	df 91       	pop	r29
    212c:	08 95       	ret

0000212e <Dc_Motor_vidInit>:

#include "Dc_Motor.h"
#include "util/delay.h"

void Dc_Motor_vidInit(void)
{
    212e:	df 93       	push	r29
    2130:	cf 93       	push	r28
    2132:	cd b7       	in	r28, 0x3d	; 61
    2134:	de b7       	in	r29, 0x3e	; 62
	/*	Configure Motor Control Pins as Outputs	*/

	/*	Make Sure Motor is Stop	*/

}
    2136:	cf 91       	pop	r28
    2138:	df 91       	pop	r29
    213a:	08 95       	ret

0000213c <Dc_Motor_vidStart>:
void Dc_Motor_vidStart(motor_dir_t dir)
{
    213c:	df 93       	push	r29
    213e:	cf 93       	push	r28
    2140:	0f 92       	push	r0
    2142:	cd b7       	in	r28, 0x3d	; 61
    2144:	de b7       	in	r29, 0x3e	; 62
    2146:	89 83       	std	Y+1, r24	; 0x01

	}

	/*	Set EN1 Pin	*/

}
    2148:	0f 90       	pop	r0
    214a:	cf 91       	pop	r28
    214c:	df 91       	pop	r29
    214e:	08 95       	ret

00002150 <Dc_Motor_vidStop>:
void Dc_Motor_vidStop(void)
{
    2150:	df 93       	push	r29
    2152:	cf 93       	push	r28
    2154:	cd b7       	in	r28, 0x3d	; 61
    2156:	de b7       	in	r29, 0x3e	; 62
    2158:	2e 97       	sbiw	r28, 0x0e	; 14
    215a:	0f b6       	in	r0, 0x3f	; 63
    215c:	f8 94       	cli
    215e:	de bf       	out	0x3e, r29	; 62
    2160:	0f be       	out	0x3f, r0	; 63
    2162:	cd bf       	out	0x3d, r28	; 61
    2164:	80 e0       	ldi	r24, 0x00	; 0
    2166:	90 e8       	ldi	r25, 0x80	; 128
    2168:	ab e3       	ldi	r26, 0x3B	; 59
    216a:	b5 e4       	ldi	r27, 0x45	; 69
    216c:	8b 87       	std	Y+11, r24	; 0x0b
    216e:	9c 87       	std	Y+12, r25	; 0x0c
    2170:	ad 87       	std	Y+13, r26	; 0x0d
    2172:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2174:	6b 85       	ldd	r22, Y+11	; 0x0b
    2176:	7c 85       	ldd	r23, Y+12	; 0x0c
    2178:	8d 85       	ldd	r24, Y+13	; 0x0d
    217a:	9e 85       	ldd	r25, Y+14	; 0x0e
    217c:	20 e0       	ldi	r18, 0x00	; 0
    217e:	30 e0       	ldi	r19, 0x00	; 0
    2180:	4a e7       	ldi	r20, 0x7A	; 122
    2182:	55 e4       	ldi	r21, 0x45	; 69
    2184:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2188:	dc 01       	movw	r26, r24
    218a:	cb 01       	movw	r24, r22
    218c:	8f 83       	std	Y+7, r24	; 0x07
    218e:	98 87       	std	Y+8, r25	; 0x08
    2190:	a9 87       	std	Y+9, r26	; 0x09
    2192:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2194:	6f 81       	ldd	r22, Y+7	; 0x07
    2196:	78 85       	ldd	r23, Y+8	; 0x08
    2198:	89 85       	ldd	r24, Y+9	; 0x09
    219a:	9a 85       	ldd	r25, Y+10	; 0x0a
    219c:	20 e0       	ldi	r18, 0x00	; 0
    219e:	30 e0       	ldi	r19, 0x00	; 0
    21a0:	40 e8       	ldi	r20, 0x80	; 128
    21a2:	5f e3       	ldi	r21, 0x3F	; 63
    21a4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    21a8:	88 23       	and	r24, r24
    21aa:	2c f4       	brge	.+10     	; 0x21b6 <Dc_Motor_vidStop+0x66>
		__ticks = 1;
    21ac:	81 e0       	ldi	r24, 0x01	; 1
    21ae:	90 e0       	ldi	r25, 0x00	; 0
    21b0:	9e 83       	std	Y+6, r25	; 0x06
    21b2:	8d 83       	std	Y+5, r24	; 0x05
    21b4:	3f c0       	rjmp	.+126    	; 0x2234 <Dc_Motor_vidStop+0xe4>
	else if (__tmp > 65535)
    21b6:	6f 81       	ldd	r22, Y+7	; 0x07
    21b8:	78 85       	ldd	r23, Y+8	; 0x08
    21ba:	89 85       	ldd	r24, Y+9	; 0x09
    21bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    21be:	20 e0       	ldi	r18, 0x00	; 0
    21c0:	3f ef       	ldi	r19, 0xFF	; 255
    21c2:	4f e7       	ldi	r20, 0x7F	; 127
    21c4:	57 e4       	ldi	r21, 0x47	; 71
    21c6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    21ca:	18 16       	cp	r1, r24
    21cc:	4c f5       	brge	.+82     	; 0x2220 <Dc_Motor_vidStop+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21ce:	6b 85       	ldd	r22, Y+11	; 0x0b
    21d0:	7c 85       	ldd	r23, Y+12	; 0x0c
    21d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    21d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    21d6:	20 e0       	ldi	r18, 0x00	; 0
    21d8:	30 e0       	ldi	r19, 0x00	; 0
    21da:	40 e2       	ldi	r20, 0x20	; 32
    21dc:	51 e4       	ldi	r21, 0x41	; 65
    21de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21e2:	dc 01       	movw	r26, r24
    21e4:	cb 01       	movw	r24, r22
    21e6:	bc 01       	movw	r22, r24
    21e8:	cd 01       	movw	r24, r26
    21ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21ee:	dc 01       	movw	r26, r24
    21f0:	cb 01       	movw	r24, r22
    21f2:	9e 83       	std	Y+6, r25	; 0x06
    21f4:	8d 83       	std	Y+5, r24	; 0x05
    21f6:	0f c0       	rjmp	.+30     	; 0x2216 <Dc_Motor_vidStop+0xc6>
    21f8:	80 e9       	ldi	r24, 0x90	; 144
    21fa:	91 e0       	ldi	r25, 0x01	; 1
    21fc:	9c 83       	std	Y+4, r25	; 0x04
    21fe:	8b 83       	std	Y+3, r24	; 0x03
    2200:	8b 81       	ldd	r24, Y+3	; 0x03
    2202:	9c 81       	ldd	r25, Y+4	; 0x04
    2204:	01 97       	sbiw	r24, 0x01	; 1
    2206:	f1 f7       	brne	.-4      	; 0x2204 <Dc_Motor_vidStop+0xb4>
    2208:	9c 83       	std	Y+4, r25	; 0x04
    220a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    220c:	8d 81       	ldd	r24, Y+5	; 0x05
    220e:	9e 81       	ldd	r25, Y+6	; 0x06
    2210:	01 97       	sbiw	r24, 0x01	; 1
    2212:	9e 83       	std	Y+6, r25	; 0x06
    2214:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2216:	8d 81       	ldd	r24, Y+5	; 0x05
    2218:	9e 81       	ldd	r25, Y+6	; 0x06
    221a:	00 97       	sbiw	r24, 0x00	; 0
    221c:	69 f7       	brne	.-38     	; 0x21f8 <Dc_Motor_vidStop+0xa8>
    221e:	14 c0       	rjmp	.+40     	; 0x2248 <Dc_Motor_vidStop+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2220:	6f 81       	ldd	r22, Y+7	; 0x07
    2222:	78 85       	ldd	r23, Y+8	; 0x08
    2224:	89 85       	ldd	r24, Y+9	; 0x09
    2226:	9a 85       	ldd	r25, Y+10	; 0x0a
    2228:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    222c:	dc 01       	movw	r26, r24
    222e:	cb 01       	movw	r24, r22
    2230:	9e 83       	std	Y+6, r25	; 0x06
    2232:	8d 83       	std	Y+5, r24	; 0x05
    2234:	8d 81       	ldd	r24, Y+5	; 0x05
    2236:	9e 81       	ldd	r25, Y+6	; 0x06
    2238:	9a 83       	std	Y+2, r25	; 0x02
    223a:	89 83       	std	Y+1, r24	; 0x01
    223c:	89 81       	ldd	r24, Y+1	; 0x01
    223e:	9a 81       	ldd	r25, Y+2	; 0x02
    2240:	01 97       	sbiw	r24, 0x01	; 1
    2242:	f1 f7       	brne	.-4      	; 0x2240 <Dc_Motor_vidStop+0xf0>
    2244:	9a 83       	std	Y+2, r25	; 0x02
    2246:	89 83       	std	Y+1, r24	; 0x01
	/*	Clear EN1 Pin	*/

	/*	Wait Till Motor Stop	*/
	_delay_ms(3000);
}
    2248:	2e 96       	adiw	r28, 0x0e	; 14
    224a:	0f b6       	in	r0, 0x3f	; 63
    224c:	f8 94       	cli
    224e:	de bf       	out	0x3e, r29	; 62
    2250:	0f be       	out	0x3f, r0	; 63
    2252:	cd bf       	out	0x3d, r28	; 61
    2254:	cf 91       	pop	r28
    2256:	df 91       	pop	r29
    2258:	08 95       	ret

0000225a <Buzzer_vidinit>:
 *      Author: Eng_Fawzi
 */
#include "Dio.h"

void Buzzer_vidinit(void)
{
    225a:	df 93       	push	r29
    225c:	cf 93       	push	r28
    225e:	cd b7       	in	r28, 0x3d	; 61
    2260:	de b7       	in	r29, 0x3e	; 62
	Dio_vidconfigChanel(DIO_PORTA,DIO_PIN3,DIO_OUTPUT);
    2262:	80 e0       	ldi	r24, 0x00	; 0
    2264:	63 e0       	ldi	r22, 0x03	; 3
    2266:	41 e0       	ldi	r20, 0x01	; 1
    2268:	0e 94 cc 13 	call	0x2798	; 0x2798 <Dio_vidconfigChanel>
}
    226c:	cf 91       	pop	r28
    226e:	df 91       	pop	r29
    2270:	08 95       	ret

00002272 <Buzzer_vidbuzzerOn>:
void Buzzer_vidbuzzerOn(void)
{
    2272:	df 93       	push	r29
    2274:	cf 93       	push	r28
    2276:	cd b7       	in	r28, 0x3d	; 61
    2278:	de b7       	in	r29, 0x3e	; 62
	Dio_vidwriteChanel(DIO_PORTA, DIO_PIN3, DIO_HIGH);
    227a:	80 e0       	ldi	r24, 0x00	; 0
    227c:	63 e0       	ldi	r22, 0x03	; 3
    227e:	41 e0       	ldi	r20, 0x01	; 1
    2280:	0e 94 af 14 	call	0x295e	; 0x295e <Dio_vidwriteChanel>
}
    2284:	cf 91       	pop	r28
    2286:	df 91       	pop	r29
    2288:	08 95       	ret

0000228a <Buzzer_vidbuzzerOff>:
void Buzzer_vidbuzzerOff(void)
{
    228a:	df 93       	push	r29
    228c:	cf 93       	push	r28
    228e:	cd b7       	in	r28, 0x3d	; 61
    2290:	de b7       	in	r29, 0x3e	; 62
	Dio_vidwriteChanel(DIO_PORTA, DIO_PIN3, DIO_LOW);
    2292:	80 e0       	ldi	r24, 0x00	; 0
    2294:	63 e0       	ldi	r22, 0x03	; 3
    2296:	40 e0       	ldi	r20, 0x00	; 0
    2298:	0e 94 af 14 	call	0x295e	; 0x295e <Dio_vidwriteChanel>
}
    229c:	cf 91       	pop	r28
    229e:	df 91       	pop	r29
    22a0:	08 95       	ret

000022a2 <Button_vidbuttonInit>:
 */
#include "Button.h"
#include "Dio.h"

void Button_vidbuttonInit(void)
{
    22a2:	df 93       	push	r29
    22a4:	cf 93       	push	r28
    22a6:	cd b7       	in	r28, 0x3d	; 61
    22a8:	de b7       	in	r29, 0x3e	; 62
	Dio_vidconfigChanel(DIO_PORTB, DIO_PIN0, DIO_INPUT);
    22aa:	81 e0       	ldi	r24, 0x01	; 1
    22ac:	60 e0       	ldi	r22, 0x00	; 0
    22ae:	40 e0       	ldi	r20, 0x00	; 0
    22b0:	0e 94 cc 13 	call	0x2798	; 0x2798 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTD, DIO_PIN6, DIO_INPUT);
    22b4:	83 e0       	ldi	r24, 0x03	; 3
    22b6:	66 e0       	ldi	r22, 0x06	; 6
    22b8:	40 e0       	ldi	r20, 0x00	; 0
    22ba:	0e 94 cc 13 	call	0x2798	; 0x2798 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTD, DIO_PIN2, DIO_INPUT);
    22be:	83 e0       	ldi	r24, 0x03	; 3
    22c0:	62 e0       	ldi	r22, 0x02	; 2
    22c2:	40 e0       	ldi	r20, 0x00	; 0
    22c4:	0e 94 cc 13 	call	0x2798	; 0x2798 <Dio_vidconfigChanel>
}
    22c8:	cf 91       	pop	r28
    22ca:	df 91       	pop	r29
    22cc:	08 95       	ret

000022ce <Button_udtbuttonStatus>:


button_butStatus_t Button_udtbuttonStatus(button_buttonId_t butnId)
{
    22ce:	df 93       	push	r29
    22d0:	cf 93       	push	r28
    22d2:	00 d0       	rcall	.+0      	; 0x22d4 <Button_udtbuttonStatus+0x6>
    22d4:	00 d0       	rcall	.+0      	; 0x22d6 <Button_udtbuttonStatus+0x8>
    22d6:	cd b7       	in	r28, 0x3d	; 61
    22d8:	de b7       	in	r29, 0x3e	; 62
    22da:	8a 83       	std	Y+2, r24	; 0x02
	button_butStatus_t locBtnStatus = RELAEASED;
    22dc:	19 82       	std	Y+1, r1	; 0x01
	switch (butnId)
    22de:	8a 81       	ldd	r24, Y+2	; 0x02
    22e0:	28 2f       	mov	r18, r24
    22e2:	30 e0       	ldi	r19, 0x00	; 0
    22e4:	3c 83       	std	Y+4, r19	; 0x04
    22e6:	2b 83       	std	Y+3, r18	; 0x03
    22e8:	8b 81       	ldd	r24, Y+3	; 0x03
    22ea:	9c 81       	ldd	r25, Y+4	; 0x04
    22ec:	81 30       	cpi	r24, 0x01	; 1
    22ee:	91 05       	cpc	r25, r1
    22f0:	a1 f0       	breq	.+40     	; 0x231a <Button_udtbuttonStatus+0x4c>
    22f2:	2b 81       	ldd	r18, Y+3	; 0x03
    22f4:	3c 81       	ldd	r19, Y+4	; 0x04
    22f6:	22 30       	cpi	r18, 0x02	; 2
    22f8:	31 05       	cpc	r19, r1
    22fa:	d1 f0       	breq	.+52     	; 0x2330 <Button_udtbuttonStatus+0x62>
    22fc:	8b 81       	ldd	r24, Y+3	; 0x03
    22fe:	9c 81       	ldd	r25, Y+4	; 0x04
    2300:	00 97       	sbiw	r24, 0x00	; 0
    2302:	01 f5       	brne	.+64     	; 0x2344 <Button_udtbuttonStatus+0x76>
	{
		case BUTTON0:
			if (Dio_udtreadChanel(DIO_PORTB, DIO_PIN0) == DIO_HIGH)
    2304:	81 e0       	ldi	r24, 0x01	; 1
    2306:	60 e0       	ldi	r22, 0x00	; 0
    2308:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <Dio_udtreadChanel>
    230c:	81 30       	cpi	r24, 0x01	; 1
    230e:	19 f4       	brne	.+6      	; 0x2316 <Button_udtbuttonStatus+0x48>
			{
				locBtnStatus = PRESSED;
    2310:	81 e0       	ldi	r24, 0x01	; 1
    2312:	89 83       	std	Y+1, r24	; 0x01
    2314:	17 c0       	rjmp	.+46     	; 0x2344 <Button_udtbuttonStatus+0x76>
			}
			else
			{
				locBtnStatus = RELAEASED;
    2316:	19 82       	std	Y+1, r1	; 0x01
    2318:	15 c0       	rjmp	.+42     	; 0x2344 <Button_udtbuttonStatus+0x76>
			}
			break;

		case BUTTON1:
			if (Dio_udtreadChanel(DIO_PORTD, DIO_PIN6) == DIO_HIGH)
    231a:	83 e0       	ldi	r24, 0x03	; 3
    231c:	66 e0       	ldi	r22, 0x06	; 6
    231e:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <Dio_udtreadChanel>
    2322:	81 30       	cpi	r24, 0x01	; 1
    2324:	19 f4       	brne	.+6      	; 0x232c <Button_udtbuttonStatus+0x5e>
			{
				locBtnStatus = PRESSED;
    2326:	81 e0       	ldi	r24, 0x01	; 1
    2328:	89 83       	std	Y+1, r24	; 0x01
    232a:	0c c0       	rjmp	.+24     	; 0x2344 <Button_udtbuttonStatus+0x76>
			}
			else
			{
				locBtnStatus = RELAEASED;
    232c:	19 82       	std	Y+1, r1	; 0x01
    232e:	0a c0       	rjmp	.+20     	; 0x2344 <Button_udtbuttonStatus+0x76>
			}
			break;

		case BUTTON2:
			if (Dio_udtreadChanel(DIO_PORTD, DIO_PIN2) == DIO_HIGH)
    2330:	83 e0       	ldi	r24, 0x03	; 3
    2332:	62 e0       	ldi	r22, 0x02	; 2
    2334:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <Dio_udtreadChanel>
    2338:	81 30       	cpi	r24, 0x01	; 1
    233a:	19 f4       	brne	.+6      	; 0x2342 <Button_udtbuttonStatus+0x74>
			{
				locBtnStatus = PRESSED;
    233c:	81 e0       	ldi	r24, 0x01	; 1
    233e:	89 83       	std	Y+1, r24	; 0x01
    2340:	01 c0       	rjmp	.+2      	; 0x2344 <Button_udtbuttonStatus+0x76>
			}
			else
			{
				locBtnStatus = RELAEASED;
    2342:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
	}
	return locBtnStatus;
    2344:	89 81       	ldd	r24, Y+1	; 0x01
}
    2346:	0f 90       	pop	r0
    2348:	0f 90       	pop	r0
    234a:	0f 90       	pop	r0
    234c:	0f 90       	pop	r0
    234e:	cf 91       	pop	r28
    2350:	df 91       	pop	r29
    2352:	08 95       	ret

00002354 <USART_Init>:
#include "Uart.h"
#include "Std_Types.h"
#include "Bit_Math.h"

void USART_Init(u32 baud)
{
    2354:	df 93       	push	r29
    2356:	cf 93       	push	r28
    2358:	cd b7       	in	r28, 0x3d	; 61
    235a:	de b7       	in	r29, 0x3e	; 62
    235c:	28 97       	sbiw	r28, 0x08	; 8
    235e:	0f b6       	in	r0, 0x3f	; 63
    2360:	f8 94       	cli
    2362:	de bf       	out	0x3e, r29	; 62
    2364:	0f be       	out	0x3f, r0	; 63
    2366:	cd bf       	out	0x3d, r28	; 61
    2368:	6d 83       	std	Y+5, r22	; 0x05
    236a:	7e 83       	std	Y+6, r23	; 0x06
    236c:	8f 83       	std	Y+7, r24	; 0x07
    236e:	98 87       	std	Y+8, r25	; 0x08
	/*	Calculate UBRR Value	*/
	u32 loc_UBBR_val = ((F_OSC/(16*baud))-1);
    2370:	8d 81       	ldd	r24, Y+5	; 0x05
    2372:	9e 81       	ldd	r25, Y+6	; 0x06
    2374:	af 81       	ldd	r26, Y+7	; 0x07
    2376:	b8 85       	ldd	r27, Y+8	; 0x08
    2378:	88 0f       	add	r24, r24
    237a:	99 1f       	adc	r25, r25
    237c:	aa 1f       	adc	r26, r26
    237e:	bb 1f       	adc	r27, r27
    2380:	88 0f       	add	r24, r24
    2382:	99 1f       	adc	r25, r25
    2384:	aa 1f       	adc	r26, r26
    2386:	bb 1f       	adc	r27, r27
    2388:	88 0f       	add	r24, r24
    238a:	99 1f       	adc	r25, r25
    238c:	aa 1f       	adc	r26, r26
    238e:	bb 1f       	adc	r27, r27
    2390:	88 0f       	add	r24, r24
    2392:	99 1f       	adc	r25, r25
    2394:	aa 1f       	adc	r26, r26
    2396:	bb 1f       	adc	r27, r27
    2398:	9c 01       	movw	r18, r24
    239a:	ad 01       	movw	r20, r26
    239c:	80 e0       	ldi	r24, 0x00	; 0
    239e:	94 e2       	ldi	r25, 0x24	; 36
    23a0:	a4 ef       	ldi	r26, 0xF4	; 244
    23a2:	b0 e0       	ldi	r27, 0x00	; 0
    23a4:	bc 01       	movw	r22, r24
    23a6:	cd 01       	movw	r24, r26
    23a8:	0e 94 13 18 	call	0x3026	; 0x3026 <__udivmodsi4>
    23ac:	da 01       	movw	r26, r20
    23ae:	c9 01       	movw	r24, r18
    23b0:	01 97       	sbiw	r24, 0x01	; 1
    23b2:	a1 09       	sbc	r26, r1
    23b4:	b1 09       	sbc	r27, r1
    23b6:	89 83       	std	Y+1, r24	; 0x01
    23b8:	9a 83       	std	Y+2, r25	; 0x02
    23ba:	ab 83       	std	Y+3, r26	; 0x03
    23bc:	bc 83       	std	Y+4, r27	; 0x04
	/* Set baud rate */
	UART_UBRRH_REG = loc_UBBR_val>>8;
    23be:	e0 e4       	ldi	r30, 0x40	; 64
    23c0:	f0 e0       	ldi	r31, 0x00	; 0
    23c2:	89 81       	ldd	r24, Y+1	; 0x01
    23c4:	9a 81       	ldd	r25, Y+2	; 0x02
    23c6:	ab 81       	ldd	r26, Y+3	; 0x03
    23c8:	bc 81       	ldd	r27, Y+4	; 0x04
    23ca:	89 2f       	mov	r24, r25
    23cc:	9a 2f       	mov	r25, r26
    23ce:	ab 2f       	mov	r26, r27
    23d0:	bb 27       	eor	r27, r27
    23d2:	80 83       	st	Z, r24
	UART_UBRRL_REG = loc_UBBR_val;
    23d4:	e9 e2       	ldi	r30, 0x29	; 41
    23d6:	f0 e0       	ldi	r31, 0x00	; 0
    23d8:	89 81       	ldd	r24, Y+1	; 0x01
    23da:	80 83       	st	Z, r24
	/* Enable receiver and transmitter */
	UART_UCSRB_REG = (1<<UART_RXEN_BIT)|(1<<UART_TXEN_BIT);
    23dc:	ea e2       	ldi	r30, 0x2A	; 42
    23de:	f0 e0       	ldi	r31, 0x00	; 0
    23e0:	88 e1       	ldi	r24, 0x18	; 24
    23e2:	80 83       	st	Z, r24
	/* Set frame format: 8data, 2stop bit */
	UART_UCSRC_REG = (1<<UART_URSEL_BIT)|(1<<UART_USBS_BIT)|(3<<UART_UCSZ0_BIT);
    23e4:	e0 e4       	ldi	r30, 0x40	; 64
    23e6:	f0 e0       	ldi	r31, 0x00	; 0
    23e8:	8e e8       	ldi	r24, 0x8E	; 142
    23ea:	80 83       	st	Z, r24
}
    23ec:	28 96       	adiw	r28, 0x08	; 8
    23ee:	0f b6       	in	r0, 0x3f	; 63
    23f0:	f8 94       	cli
    23f2:	de bf       	out	0x3e, r29	; 62
    23f4:	0f be       	out	0x3f, r0	; 63
    23f6:	cd bf       	out	0x3d, r28	; 61
    23f8:	cf 91       	pop	r28
    23fa:	df 91       	pop	r29
    23fc:	08 95       	ret

000023fe <USART_TransmitChar>:

void USART_TransmitChar(u8 data)
{
    23fe:	df 93       	push	r29
    2400:	cf 93       	push	r28
    2402:	0f 92       	push	r0
    2404:	cd b7       	in	r28, 0x3d	; 61
    2406:	de b7       	in	r29, 0x3e	; 62
    2408:	89 83       	std	Y+1, r24	; 0x01
	/* Wait for empty transmit buffer */
	while (CHECK_BIT(UART_UCSRA_REG,UART_UDRE_BIT) == 0)
    240a:	eb e2       	ldi	r30, 0x2B	; 43
    240c:	f0 e0       	ldi	r31, 0x00	; 0
    240e:	80 81       	ld	r24, Z
    2410:	82 95       	swap	r24
    2412:	86 95       	lsr	r24
    2414:	87 70       	andi	r24, 0x07	; 7
    2416:	88 2f       	mov	r24, r24
    2418:	90 e0       	ldi	r25, 0x00	; 0
    241a:	81 70       	andi	r24, 0x01	; 1
    241c:	90 70       	andi	r25, 0x00	; 0
    241e:	00 97       	sbiw	r24, 0x00	; 0
    2420:	a1 f3       	breq	.-24     	; 0x240a <USART_TransmitChar+0xc>
	{
		;
	}
		/* Put data into buffer, sends the data */
	UART_UDR_REG = data;
    2422:	ec e2       	ldi	r30, 0x2C	; 44
    2424:	f0 e0       	ldi	r31, 0x00	; 0
    2426:	89 81       	ldd	r24, Y+1	; 0x01
    2428:	80 83       	st	Z, r24
}
    242a:	0f 90       	pop	r0
    242c:	cf 91       	pop	r28
    242e:	df 91       	pop	r29
    2430:	08 95       	ret

00002432 <USART_Receive_Blocking>:

u8 USART_Receive_Blocking(void)
{
    2432:	df 93       	push	r29
    2434:	cf 93       	push	r28
    2436:	cd b7       	in	r28, 0x3d	; 61
    2438:	de b7       	in	r29, 0x3e	; 62
	/* Wait for data to be received */
	while (CHECK_BIT(UART_UCSRA_REG,UART_RXC_BIT) == 0)
    243a:	eb e2       	ldi	r30, 0x2B	; 43
    243c:	f0 e0       	ldi	r31, 0x00	; 0
    243e:	80 81       	ld	r24, Z
    2440:	88 23       	and	r24, r24
    2442:	dc f7       	brge	.-10     	; 0x243a <USART_Receive_Blocking+0x8>
	{
		;
	}
	/* Get and return received data from buffer */
	return UART_UDR_REG;
    2444:	ec e2       	ldi	r30, 0x2C	; 44
    2446:	f0 e0       	ldi	r31, 0x00	; 0
    2448:	80 81       	ld	r24, Z
}
    244a:	cf 91       	pop	r28
    244c:	df 91       	pop	r29
    244e:	08 95       	ret

00002450 <USART_Receive_NonBlocking>:
u8 USART_Receive_NonBlocking(void)
{
    2450:	df 93       	push	r29
    2452:	cf 93       	push	r28
    2454:	0f 92       	push	r0
    2456:	cd b7       	in	r28, 0x3d	; 61
    2458:	de b7       	in	r29, 0x3e	; 62
	/* Wait for data to be received */
	if (CHECK_BIT(UART_UCSRA_REG,UART_RXC_BIT) == 1)
    245a:	eb e2       	ldi	r30, 0x2B	; 43
    245c:	f0 e0       	ldi	r31, 0x00	; 0
    245e:	80 81       	ld	r24, Z
    2460:	88 1f       	adc	r24, r24
    2462:	88 27       	eor	r24, r24
    2464:	88 1f       	adc	r24, r24
    2466:	81 30       	cpi	r24, 0x01	; 1
    2468:	29 f4       	brne	.+10     	; 0x2474 <USART_Receive_NonBlocking+0x24>
	{
		/* Get and return received data from buffer */
		return UART_UDR_REG;
    246a:	ec e2       	ldi	r30, 0x2C	; 44
    246c:	f0 e0       	ldi	r31, 0x00	; 0
    246e:	80 81       	ld	r24, Z
    2470:	89 83       	std	Y+1, r24	; 0x01
    2472:	01 c0       	rjmp	.+2      	; 0x2476 <USART_Receive_NonBlocking+0x26>
	}
	else
	{
		return 0;
    2474:	19 82       	std	Y+1, r1	; 0x01
    2476:	89 81       	ldd	r24, Y+1	; 0x01
	}

}
    2478:	0f 90       	pop	r0
    247a:	cf 91       	pop	r28
    247c:	df 91       	pop	r29
    247e:	08 95       	ret

00002480 <USART_TransmitStr>:
void USART_TransmitStr(u8 *str)
{
    2480:	df 93       	push	r29
    2482:	cf 93       	push	r28
    2484:	00 d0       	rcall	.+0      	; 0x2486 <USART_TransmitStr+0x6>
    2486:	cd b7       	in	r28, 0x3d	; 61
    2488:	de b7       	in	r29, 0x3e	; 62
    248a:	9a 83       	std	Y+2, r25	; 0x02
    248c:	89 83       	std	Y+1, r24	; 0x01
    248e:	0a c0       	rjmp	.+20     	; 0x24a4 <USART_TransmitStr+0x24>
	while (*str != '\0')
	{
		USART_TransmitChar(*str);
    2490:	e9 81       	ldd	r30, Y+1	; 0x01
    2492:	fa 81       	ldd	r31, Y+2	; 0x02
    2494:	80 81       	ld	r24, Z
    2496:	0e 94 ff 11 	call	0x23fe	; 0x23fe <USART_TransmitChar>
		str++;
    249a:	89 81       	ldd	r24, Y+1	; 0x01
    249c:	9a 81       	ldd	r25, Y+2	; 0x02
    249e:	01 96       	adiw	r24, 0x01	; 1
    24a0:	9a 83       	std	Y+2, r25	; 0x02
    24a2:	89 83       	std	Y+1, r24	; 0x01
	}

}
void USART_TransmitStr(u8 *str)
{
	while (*str != '\0')
    24a4:	e9 81       	ldd	r30, Y+1	; 0x01
    24a6:	fa 81       	ldd	r31, Y+2	; 0x02
    24a8:	80 81       	ld	r24, Z
    24aa:	88 23       	and	r24, r24
    24ac:	89 f7       	brne	.-30     	; 0x2490 <USART_TransmitStr+0x10>
	{
		USART_TransmitChar(*str);
		str++;
	}
}
    24ae:	0f 90       	pop	r0
    24b0:	0f 90       	pop	r0
    24b2:	cf 91       	pop	r28
    24b4:	df 91       	pop	r29
    24b6:	08 95       	ret

000024b8 <USART_Receive_InterruptEnable>:
void USART_Receive_InterruptEnable(void)
{
    24b8:	df 93       	push	r29
    24ba:	cf 93       	push	r28
    24bc:	cd b7       	in	r28, 0x3d	; 61
    24be:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(UART_UCSRB_REG,UART_RXCIE_BIT);
    24c0:	aa e2       	ldi	r26, 0x2A	; 42
    24c2:	b0 e0       	ldi	r27, 0x00	; 0
    24c4:	ea e2       	ldi	r30, 0x2A	; 42
    24c6:	f0 e0       	ldi	r31, 0x00	; 0
    24c8:	80 81       	ld	r24, Z
    24ca:	80 68       	ori	r24, 0x80	; 128
    24cc:	8c 93       	st	X, r24
}
    24ce:	cf 91       	pop	r28
    24d0:	df 91       	pop	r29
    24d2:	08 95       	ret

000024d4 <Timer0_vidInit>:

#include "Timer0.h"

void Timer0_vidInit(void)
{
    24d4:	df 93       	push	r29
    24d6:	cf 93       	push	r28
    24d8:	cd b7       	in	r28, 0x3d	; 61
    24da:	de b7       	in	r29, 0x3e	; 62

}
    24dc:	cf 91       	pop	r28
    24de:	df 91       	pop	r29
    24e0:	08 95       	ret

000024e2 <Timer0_vidSetPreload>:

void Timer0_vidSetPreload(u8 preload)
{
    24e2:	df 93       	push	r29
    24e4:	cf 93       	push	r28
    24e6:	0f 92       	push	r0
    24e8:	cd b7       	in	r28, 0x3d	; 61
    24ea:	de b7       	in	r29, 0x3e	; 62
    24ec:	89 83       	std	Y+1, r24	; 0x01

}
    24ee:	0f 90       	pop	r0
    24f0:	cf 91       	pop	r28
    24f2:	df 91       	pop	r29
    24f4:	08 95       	ret

000024f6 <Timer0_vidTimerStart>:

void Timer0_vidTimerStart(timer0_clk_t clk)
{
    24f6:	df 93       	push	r29
    24f8:	cf 93       	push	r28
    24fa:	0f 92       	push	r0
    24fc:	cd b7       	in	r28, 0x3d	; 61
    24fe:	de b7       	in	r29, 0x3e	; 62
    2500:	89 83       	std	Y+1, r24	; 0x01

}
    2502:	0f 90       	pop	r0
    2504:	cf 91       	pop	r28
    2506:	df 91       	pop	r29
    2508:	08 95       	ret

0000250a <Timer0_vidTimerStop>:

void Timer0_vidTimerStop(void)
{
    250a:	df 93       	push	r29
    250c:	cf 93       	push	r28
    250e:	cd b7       	in	r28, 0x3d	; 61
    2510:	de b7       	in	r29, 0x3e	; 62

}
    2512:	cf 91       	pop	r28
    2514:	df 91       	pop	r29
    2516:	08 95       	ret

00002518 <Timer0_vidEnableOVInterrupt>:

void Timer0_vidEnableOVInterrupt(void)
{
    2518:	df 93       	push	r29
    251a:	cf 93       	push	r28
    251c:	cd b7       	in	r28, 0x3d	; 61
    251e:	de b7       	in	r29, 0x3e	; 62

}
    2520:	cf 91       	pop	r28
    2522:	df 91       	pop	r29
    2524:	08 95       	ret

00002526 <Timer0_vidDisableOVInterrupt>:
void Timer0_vidDisableOVInterrupt(void)
{
    2526:	df 93       	push	r29
    2528:	cf 93       	push	r28
    252a:	cd b7       	in	r28, 0x3d	; 61
    252c:	de b7       	in	r29, 0x3e	; 62

}
    252e:	cf 91       	pop	r28
    2530:	df 91       	pop	r29
    2532:	08 95       	ret

00002534 <GINT_vidEnableAllInterrupts>:

#include "GINT_Reg.h"
#include "Bit_Math.h"

void GINT_vidEnableAllInterrupts(void)
{
    2534:	df 93       	push	r29
    2536:	cf 93       	push	r28
    2538:	cd b7       	in	r28, 0x3d	; 61
    253a:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GINT_SREG_REG,7);
    253c:	af e5       	ldi	r26, 0x5F	; 95
    253e:	b0 e0       	ldi	r27, 0x00	; 0
    2540:	ef e5       	ldi	r30, 0x5F	; 95
    2542:	f0 e0       	ldi	r31, 0x00	; 0
    2544:	80 81       	ld	r24, Z
    2546:	80 68       	ori	r24, 0x80	; 128
    2548:	8c 93       	st	X, r24
}
    254a:	cf 91       	pop	r28
    254c:	df 91       	pop	r29
    254e:	08 95       	ret

00002550 <GINT_vidDisableAllInterrupts>:

void GINT_vidDisableAllInterrupts(void)
{
    2550:	df 93       	push	r29
    2552:	cf 93       	push	r28
    2554:	cd b7       	in	r28, 0x3d	; 61
    2556:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(GINT_SREG_REG,7);
    2558:	af e5       	ldi	r26, 0x5F	; 95
    255a:	b0 e0       	ldi	r27, 0x00	; 0
    255c:	ef e5       	ldi	r30, 0x5F	; 95
    255e:	f0 e0       	ldi	r31, 0x00	; 0
    2560:	80 81       	ld	r24, Z
    2562:	8f 77       	andi	r24, 0x7F	; 127
    2564:	8c 93       	st	X, r24
}
    2566:	cf 91       	pop	r28
    2568:	df 91       	pop	r29
    256a:	08 95       	ret

0000256c <ExtInt_vidConfigExtInt>:
#include "ExtInt_Reg.h"
#include "ExtInt.h"
#include "Std_Types.h"

void ExtInt_vidConfigExtInt(extint_id_t intId, extint_sensectrl_t sensCtrl)
{
    256c:	df 93       	push	r29
    256e:	cf 93       	push	r28
    2570:	00 d0       	rcall	.+0      	; 0x2572 <ExtInt_vidConfigExtInt+0x6>
    2572:	00 d0       	rcall	.+0      	; 0x2574 <ExtInt_vidConfigExtInt+0x8>
    2574:	cd b7       	in	r28, 0x3d	; 61
    2576:	de b7       	in	r29, 0x3e	; 62
    2578:	89 83       	std	Y+1, r24	; 0x01
    257a:	6a 83       	std	Y+2, r22	; 0x02
	switch(intId)
    257c:	89 81       	ldd	r24, Y+1	; 0x01
    257e:	28 2f       	mov	r18, r24
    2580:	30 e0       	ldi	r19, 0x00	; 0
    2582:	3c 83       	std	Y+4, r19	; 0x04
    2584:	2b 83       	std	Y+3, r18	; 0x03
    2586:	8b 81       	ldd	r24, Y+3	; 0x03
    2588:	9c 81       	ldd	r25, Y+4	; 0x04
    258a:	81 30       	cpi	r24, 0x01	; 1
    258c:	91 05       	cpc	r25, r1
    258e:	09 f4       	brne	.+2      	; 0x2592 <ExtInt_vidConfigExtInt+0x26>
    2590:	5a c0       	rjmp	.+180    	; 0x2646 <ExtInt_vidConfigExtInt+0xda>
    2592:	2b 81       	ldd	r18, Y+3	; 0x03
    2594:	3c 81       	ldd	r19, Y+4	; 0x04
    2596:	22 30       	cpi	r18, 0x02	; 2
    2598:	31 05       	cpc	r19, r1
    259a:	09 f4       	brne	.+2      	; 0x259e <ExtInt_vidConfigExtInt+0x32>
    259c:	a3 c0       	rjmp	.+326    	; 0x26e4 <ExtInt_vidConfigExtInt+0x178>
    259e:	8b 81       	ldd	r24, Y+3	; 0x03
    25a0:	9c 81       	ldd	r25, Y+4	; 0x04
    25a2:	00 97       	sbiw	r24, 0x00	; 0
    25a4:	09 f0       	breq	.+2      	; 0x25a8 <ExtInt_vidConfigExtInt+0x3c>
    25a6:	ba c0       	rjmp	.+372    	; 0x271c <ExtInt_vidConfigExtInt+0x1b0>
	{
	case EXT_INT0:
		/*	configure sense control	*/
		if (sensCtrl == EXT_RISING_EDGE)
    25a8:	8a 81       	ldd	r24, Y+2	; 0x02
    25aa:	81 30       	cpi	r24, 0x01	; 1
    25ac:	79 f4       	brne	.+30     	; 0x25cc <ExtInt_vidConfigExtInt+0x60>
		{
			SET_BIT(EXTINT_MCUCR_REG,0);
    25ae:	a5 e5       	ldi	r26, 0x55	; 85
    25b0:	b0 e0       	ldi	r27, 0x00	; 0
    25b2:	e5 e5       	ldi	r30, 0x55	; 85
    25b4:	f0 e0       	ldi	r31, 0x00	; 0
    25b6:	80 81       	ld	r24, Z
    25b8:	81 60       	ori	r24, 0x01	; 1
    25ba:	8c 93       	st	X, r24
			SET_BIT(EXTINT_MCUCR_REG,1);
    25bc:	a5 e5       	ldi	r26, 0x55	; 85
    25be:	b0 e0       	ldi	r27, 0x00	; 0
    25c0:	e5 e5       	ldi	r30, 0x55	; 85
    25c2:	f0 e0       	ldi	r31, 0x00	; 0
    25c4:	80 81       	ld	r24, Z
    25c6:	82 60       	ori	r24, 0x02	; 2
    25c8:	8c 93       	st	X, r24
    25ca:	35 c0       	rjmp	.+106    	; 0x2636 <ExtInt_vidConfigExtInt+0xca>
		}
		else if (sensCtrl == EXT_FAILING_EDGE)
    25cc:	8a 81       	ldd	r24, Y+2	; 0x02
    25ce:	88 23       	and	r24, r24
    25d0:	79 f4       	brne	.+30     	; 0x25f0 <ExtInt_vidConfigExtInt+0x84>
		{
			CLEAR_BIT(EXTINT_MCUCR_REG,0);
    25d2:	a5 e5       	ldi	r26, 0x55	; 85
    25d4:	b0 e0       	ldi	r27, 0x00	; 0
    25d6:	e5 e5       	ldi	r30, 0x55	; 85
    25d8:	f0 e0       	ldi	r31, 0x00	; 0
    25da:	80 81       	ld	r24, Z
    25dc:	8e 7f       	andi	r24, 0xFE	; 254
    25de:	8c 93       	st	X, r24
			SET_BIT(EXTINT_MCUCR_REG,1);
    25e0:	a5 e5       	ldi	r26, 0x55	; 85
    25e2:	b0 e0       	ldi	r27, 0x00	; 0
    25e4:	e5 e5       	ldi	r30, 0x55	; 85
    25e6:	f0 e0       	ldi	r31, 0x00	; 0
    25e8:	80 81       	ld	r24, Z
    25ea:	82 60       	ori	r24, 0x02	; 2
    25ec:	8c 93       	st	X, r24
    25ee:	23 c0       	rjmp	.+70     	; 0x2636 <ExtInt_vidConfigExtInt+0xca>
		}
		else if (sensCtrl == EXT_BOTH_EDGE)
    25f0:	8a 81       	ldd	r24, Y+2	; 0x02
    25f2:	82 30       	cpi	r24, 0x02	; 2
    25f4:	79 f4       	brne	.+30     	; 0x2614 <ExtInt_vidConfigExtInt+0xa8>
		{
			SET_BIT(EXTINT_MCUCR_REG,0);
    25f6:	a5 e5       	ldi	r26, 0x55	; 85
    25f8:	b0 e0       	ldi	r27, 0x00	; 0
    25fa:	e5 e5       	ldi	r30, 0x55	; 85
    25fc:	f0 e0       	ldi	r31, 0x00	; 0
    25fe:	80 81       	ld	r24, Z
    2600:	81 60       	ori	r24, 0x01	; 1
    2602:	8c 93       	st	X, r24
			CLEAR_BIT(EXTINT_MCUCR_REG,1);
    2604:	a5 e5       	ldi	r26, 0x55	; 85
    2606:	b0 e0       	ldi	r27, 0x00	; 0
    2608:	e5 e5       	ldi	r30, 0x55	; 85
    260a:	f0 e0       	ldi	r31, 0x00	; 0
    260c:	80 81       	ld	r24, Z
    260e:	8d 7f       	andi	r24, 0xFD	; 253
    2610:	8c 93       	st	X, r24
    2612:	11 c0       	rjmp	.+34     	; 0x2636 <ExtInt_vidConfigExtInt+0xca>
		}
		else if (sensCtrl == EXT_LOW_LEVEL)
    2614:	8a 81       	ldd	r24, Y+2	; 0x02
    2616:	83 30       	cpi	r24, 0x03	; 3
    2618:	71 f4       	brne	.+28     	; 0x2636 <ExtInt_vidConfigExtInt+0xca>
		{
			CLEAR_BIT(EXTINT_MCUCR_REG,0);
    261a:	a5 e5       	ldi	r26, 0x55	; 85
    261c:	b0 e0       	ldi	r27, 0x00	; 0
    261e:	e5 e5       	ldi	r30, 0x55	; 85
    2620:	f0 e0       	ldi	r31, 0x00	; 0
    2622:	80 81       	ld	r24, Z
    2624:	8e 7f       	andi	r24, 0xFE	; 254
    2626:	8c 93       	st	X, r24
			CLEAR_BIT(EXTINT_MCUCR_REG,1);
    2628:	a5 e5       	ldi	r26, 0x55	; 85
    262a:	b0 e0       	ldi	r27, 0x00	; 0
    262c:	e5 e5       	ldi	r30, 0x55	; 85
    262e:	f0 e0       	ldi	r31, 0x00	; 0
    2630:	80 81       	ld	r24, Z
    2632:	8d 7f       	andi	r24, 0xFD	; 253
    2634:	8c 93       	st	X, r24
		else
		{
			/*	Do Nothing	*/
		}
		/*	Enable Int0 Interrupt	*/
		SET_BIT(EXTINT_GICR_REG,INT0_EN_BIT);
    2636:	ab e5       	ldi	r26, 0x5B	; 91
    2638:	b0 e0       	ldi	r27, 0x00	; 0
    263a:	eb e5       	ldi	r30, 0x5B	; 91
    263c:	f0 e0       	ldi	r31, 0x00	; 0
    263e:	80 81       	ld	r24, Z
    2640:	80 64       	ori	r24, 0x40	; 64
    2642:	8c 93       	st	X, r24
    2644:	6b c0       	rjmp	.+214    	; 0x271c <ExtInt_vidConfigExtInt+0x1b0>
		break;

	case EXT_INT1:

		/*	configure sense control	*/
				if (sensCtrl == EXT_RISING_EDGE)
    2646:	8a 81       	ldd	r24, Y+2	; 0x02
    2648:	81 30       	cpi	r24, 0x01	; 1
    264a:	79 f4       	brne	.+30     	; 0x266a <ExtInt_vidConfigExtInt+0xfe>
				{
					SET_BIT(EXTINT_MCUCR_REG,2);
    264c:	a5 e5       	ldi	r26, 0x55	; 85
    264e:	b0 e0       	ldi	r27, 0x00	; 0
    2650:	e5 e5       	ldi	r30, 0x55	; 85
    2652:	f0 e0       	ldi	r31, 0x00	; 0
    2654:	80 81       	ld	r24, Z
    2656:	84 60       	ori	r24, 0x04	; 4
    2658:	8c 93       	st	X, r24
					SET_BIT(EXTINT_MCUCR_REG,3);
    265a:	a5 e5       	ldi	r26, 0x55	; 85
    265c:	b0 e0       	ldi	r27, 0x00	; 0
    265e:	e5 e5       	ldi	r30, 0x55	; 85
    2660:	f0 e0       	ldi	r31, 0x00	; 0
    2662:	80 81       	ld	r24, Z
    2664:	88 60       	ori	r24, 0x08	; 8
    2666:	8c 93       	st	X, r24
    2668:	35 c0       	rjmp	.+106    	; 0x26d4 <ExtInt_vidConfigExtInt+0x168>
				}
				else if (sensCtrl == EXT_FAILING_EDGE)
    266a:	8a 81       	ldd	r24, Y+2	; 0x02
    266c:	88 23       	and	r24, r24
    266e:	79 f4       	brne	.+30     	; 0x268e <ExtInt_vidConfigExtInt+0x122>
				{
					CLEAR_BIT(EXTINT_MCUCR_REG,2);
    2670:	a5 e5       	ldi	r26, 0x55	; 85
    2672:	b0 e0       	ldi	r27, 0x00	; 0
    2674:	e5 e5       	ldi	r30, 0x55	; 85
    2676:	f0 e0       	ldi	r31, 0x00	; 0
    2678:	80 81       	ld	r24, Z
    267a:	8b 7f       	andi	r24, 0xFB	; 251
    267c:	8c 93       	st	X, r24
					SET_BIT(EXTINT_MCUCR_REG,3);
    267e:	a5 e5       	ldi	r26, 0x55	; 85
    2680:	b0 e0       	ldi	r27, 0x00	; 0
    2682:	e5 e5       	ldi	r30, 0x55	; 85
    2684:	f0 e0       	ldi	r31, 0x00	; 0
    2686:	80 81       	ld	r24, Z
    2688:	88 60       	ori	r24, 0x08	; 8
    268a:	8c 93       	st	X, r24
    268c:	23 c0       	rjmp	.+70     	; 0x26d4 <ExtInt_vidConfigExtInt+0x168>
				}
				else if (sensCtrl == EXT_BOTH_EDGE)
    268e:	8a 81       	ldd	r24, Y+2	; 0x02
    2690:	82 30       	cpi	r24, 0x02	; 2
    2692:	79 f4       	brne	.+30     	; 0x26b2 <ExtInt_vidConfigExtInt+0x146>
				{
					SET_BIT(EXTINT_MCUCR_REG,2);
    2694:	a5 e5       	ldi	r26, 0x55	; 85
    2696:	b0 e0       	ldi	r27, 0x00	; 0
    2698:	e5 e5       	ldi	r30, 0x55	; 85
    269a:	f0 e0       	ldi	r31, 0x00	; 0
    269c:	80 81       	ld	r24, Z
    269e:	84 60       	ori	r24, 0x04	; 4
    26a0:	8c 93       	st	X, r24
					CLEAR_BIT(EXTINT_MCUCR_REG,3);
    26a2:	a5 e5       	ldi	r26, 0x55	; 85
    26a4:	b0 e0       	ldi	r27, 0x00	; 0
    26a6:	e5 e5       	ldi	r30, 0x55	; 85
    26a8:	f0 e0       	ldi	r31, 0x00	; 0
    26aa:	80 81       	ld	r24, Z
    26ac:	87 7f       	andi	r24, 0xF7	; 247
    26ae:	8c 93       	st	X, r24
    26b0:	11 c0       	rjmp	.+34     	; 0x26d4 <ExtInt_vidConfigExtInt+0x168>
				}
				else if (sensCtrl == EXT_LOW_LEVEL)
    26b2:	8a 81       	ldd	r24, Y+2	; 0x02
    26b4:	83 30       	cpi	r24, 0x03	; 3
    26b6:	71 f4       	brne	.+28     	; 0x26d4 <ExtInt_vidConfigExtInt+0x168>
				{
					CLEAR_BIT(EXTINT_MCUCR_REG,2);
    26b8:	a5 e5       	ldi	r26, 0x55	; 85
    26ba:	b0 e0       	ldi	r27, 0x00	; 0
    26bc:	e5 e5       	ldi	r30, 0x55	; 85
    26be:	f0 e0       	ldi	r31, 0x00	; 0
    26c0:	80 81       	ld	r24, Z
    26c2:	8b 7f       	andi	r24, 0xFB	; 251
    26c4:	8c 93       	st	X, r24
					CLEAR_BIT(EXTINT_MCUCR_REG,3);
    26c6:	a5 e5       	ldi	r26, 0x55	; 85
    26c8:	b0 e0       	ldi	r27, 0x00	; 0
    26ca:	e5 e5       	ldi	r30, 0x55	; 85
    26cc:	f0 e0       	ldi	r31, 0x00	; 0
    26ce:	80 81       	ld	r24, Z
    26d0:	87 7f       	andi	r24, 0xF7	; 247
    26d2:	8c 93       	st	X, r24
				else
				{
					/*	Do Nothing	*/
				}

		SET_BIT(EXTINT_GICR_REG,INT1_EN_BIT);
    26d4:	ab e5       	ldi	r26, 0x5B	; 91
    26d6:	b0 e0       	ldi	r27, 0x00	; 0
    26d8:	eb e5       	ldi	r30, 0x5B	; 91
    26da:	f0 e0       	ldi	r31, 0x00	; 0
    26dc:	80 81       	ld	r24, Z
    26de:	80 68       	ori	r24, 0x80	; 128
    26e0:	8c 93       	st	X, r24
    26e2:	1c c0       	rjmp	.+56     	; 0x271c <ExtInt_vidConfigExtInt+0x1b0>
		break;

	case EXT_INT2:

		if (sensCtrl == EXT_FAILING_EDGE)
    26e4:	8a 81       	ldd	r24, Y+2	; 0x02
    26e6:	88 23       	and	r24, r24
    26e8:	41 f4       	brne	.+16     	; 0x26fa <ExtInt_vidConfigExtInt+0x18e>
		{
			CLEAR_BIT(EXTINT_MCUCSR_REG,6);
    26ea:	a4 e5       	ldi	r26, 0x54	; 84
    26ec:	b0 e0       	ldi	r27, 0x00	; 0
    26ee:	e4 e5       	ldi	r30, 0x54	; 84
    26f0:	f0 e0       	ldi	r31, 0x00	; 0
    26f2:	80 81       	ld	r24, Z
    26f4:	8f 7b       	andi	r24, 0xBF	; 191
    26f6:	8c 93       	st	X, r24
    26f8:	0a c0       	rjmp	.+20     	; 0x270e <ExtInt_vidConfigExtInt+0x1a2>
		}
		else if (sensCtrl == EXT_RISING_EDGE)
    26fa:	8a 81       	ldd	r24, Y+2	; 0x02
    26fc:	81 30       	cpi	r24, 0x01	; 1
    26fe:	39 f4       	brne	.+14     	; 0x270e <ExtInt_vidConfigExtInt+0x1a2>
		{
			SET_BIT(EXTINT_MCUCSR_REG,6);
    2700:	a4 e5       	ldi	r26, 0x54	; 84
    2702:	b0 e0       	ldi	r27, 0x00	; 0
    2704:	e4 e5       	ldi	r30, 0x54	; 84
    2706:	f0 e0       	ldi	r31, 0x00	; 0
    2708:	80 81       	ld	r24, Z
    270a:	80 64       	ori	r24, 0x40	; 64
    270c:	8c 93       	st	X, r24
		}
		else
		{
			/*	Do Nothing	*/
		}
		SET_BIT(EXTINT_GICR_REG,INT2_EN_BIT);
    270e:	ab e5       	ldi	r26, 0x5B	; 91
    2710:	b0 e0       	ldi	r27, 0x00	; 0
    2712:	eb e5       	ldi	r30, 0x5B	; 91
    2714:	f0 e0       	ldi	r31, 0x00	; 0
    2716:	80 81       	ld	r24, Z
    2718:	80 62       	ori	r24, 0x20	; 32
    271a:	8c 93       	st	X, r24
		break;
	}
}
    271c:	0f 90       	pop	r0
    271e:	0f 90       	pop	r0
    2720:	0f 90       	pop	r0
    2722:	0f 90       	pop	r0
    2724:	cf 91       	pop	r28
    2726:	df 91       	pop	r29
    2728:	08 95       	ret

0000272a <ExtInt_vidDisableExtInt>:

void ExtInt_vidDisableExtInt(extint_id_t intId)
{
    272a:	df 93       	push	r29
    272c:	cf 93       	push	r28
    272e:	00 d0       	rcall	.+0      	; 0x2730 <ExtInt_vidDisableExtInt+0x6>
    2730:	0f 92       	push	r0
    2732:	cd b7       	in	r28, 0x3d	; 61
    2734:	de b7       	in	r29, 0x3e	; 62
    2736:	89 83       	std	Y+1, r24	; 0x01
	switch (intId)
    2738:	89 81       	ldd	r24, Y+1	; 0x01
    273a:	28 2f       	mov	r18, r24
    273c:	30 e0       	ldi	r19, 0x00	; 0
    273e:	3b 83       	std	Y+3, r19	; 0x03
    2740:	2a 83       	std	Y+2, r18	; 0x02
    2742:	8a 81       	ldd	r24, Y+2	; 0x02
    2744:	9b 81       	ldd	r25, Y+3	; 0x03
    2746:	81 30       	cpi	r24, 0x01	; 1
    2748:	91 05       	cpc	r25, r1
    274a:	89 f0       	breq	.+34     	; 0x276e <ExtInt_vidDisableExtInt+0x44>
    274c:	2a 81       	ldd	r18, Y+2	; 0x02
    274e:	3b 81       	ldd	r19, Y+3	; 0x03
    2750:	22 30       	cpi	r18, 0x02	; 2
    2752:	31 05       	cpc	r19, r1
    2754:	a1 f0       	breq	.+40     	; 0x277e <ExtInt_vidDisableExtInt+0x54>
    2756:	8a 81       	ldd	r24, Y+2	; 0x02
    2758:	9b 81       	ldd	r25, Y+3	; 0x03
    275a:	00 97       	sbiw	r24, 0x00	; 0
    275c:	b9 f4       	brne	.+46     	; 0x278c <ExtInt_vidDisableExtInt+0x62>
	{
	case EXT_INT0:
		SET_BIT(EXTINT_GICR_REG,INT0_EN_BIT);
    275e:	ab e5       	ldi	r26, 0x5B	; 91
    2760:	b0 e0       	ldi	r27, 0x00	; 0
    2762:	eb e5       	ldi	r30, 0x5B	; 91
    2764:	f0 e0       	ldi	r31, 0x00	; 0
    2766:	80 81       	ld	r24, Z
    2768:	80 64       	ori	r24, 0x40	; 64
    276a:	8c 93       	st	X, r24
    276c:	0f c0       	rjmp	.+30     	; 0x278c <ExtInt_vidDisableExtInt+0x62>
		break;

	case EXT_INT1:
		SET_BIT(EXTINT_GICR_REG,INT1_EN_BIT);
    276e:	ab e5       	ldi	r26, 0x5B	; 91
    2770:	b0 e0       	ldi	r27, 0x00	; 0
    2772:	eb e5       	ldi	r30, 0x5B	; 91
    2774:	f0 e0       	ldi	r31, 0x00	; 0
    2776:	80 81       	ld	r24, Z
    2778:	80 68       	ori	r24, 0x80	; 128
    277a:	8c 93       	st	X, r24
    277c:	07 c0       	rjmp	.+14     	; 0x278c <ExtInt_vidDisableExtInt+0x62>
		break;

	case EXT_INT2:
		SET_BIT(EXTINT_GICR_REG,INT2_EN_BIT);
    277e:	ab e5       	ldi	r26, 0x5B	; 91
    2780:	b0 e0       	ldi	r27, 0x00	; 0
    2782:	eb e5       	ldi	r30, 0x5B	; 91
    2784:	f0 e0       	ldi	r31, 0x00	; 0
    2786:	80 81       	ld	r24, Z
    2788:	80 62       	ori	r24, 0x20	; 32
    278a:	8c 93       	st	X, r24
		break;
	}
}
    278c:	0f 90       	pop	r0
    278e:	0f 90       	pop	r0
    2790:	0f 90       	pop	r0
    2792:	cf 91       	pop	r28
    2794:	df 91       	pop	r29
    2796:	08 95       	ret

00002798 <Dio_vidconfigChanel>:
 */
#include "Dio.h"
#include "Bit_Math.h"

void Dio_vidconfigChanel(dio_port_t port, dio_pin_t pin,dio_dir_t dir)
{
    2798:	df 93       	push	r29
    279a:	cf 93       	push	r28
    279c:	00 d0       	rcall	.+0      	; 0x279e <Dio_vidconfigChanel+0x6>
    279e:	00 d0       	rcall	.+0      	; 0x27a0 <Dio_vidconfigChanel+0x8>
    27a0:	0f 92       	push	r0
    27a2:	cd b7       	in	r28, 0x3d	; 61
    27a4:	de b7       	in	r29, 0x3e	; 62
    27a6:	89 83       	std	Y+1, r24	; 0x01
    27a8:	6a 83       	std	Y+2, r22	; 0x02
    27aa:	4b 83       	std	Y+3, r20	; 0x03
	switch(port)
    27ac:	89 81       	ldd	r24, Y+1	; 0x01
    27ae:	28 2f       	mov	r18, r24
    27b0:	30 e0       	ldi	r19, 0x00	; 0
    27b2:	3d 83       	std	Y+5, r19	; 0x05
    27b4:	2c 83       	std	Y+4, r18	; 0x04
    27b6:	8c 81       	ldd	r24, Y+4	; 0x04
    27b8:	9d 81       	ldd	r25, Y+5	; 0x05
    27ba:	81 30       	cpi	r24, 0x01	; 1
    27bc:	91 05       	cpc	r25, r1
    27be:	09 f4       	brne	.+2      	; 0x27c2 <Dio_vidconfigChanel+0x2a>
    27c0:	43 c0       	rjmp	.+134    	; 0x2848 <Dio_vidconfigChanel+0xb0>
    27c2:	2c 81       	ldd	r18, Y+4	; 0x04
    27c4:	3d 81       	ldd	r19, Y+5	; 0x05
    27c6:	22 30       	cpi	r18, 0x02	; 2
    27c8:	31 05       	cpc	r19, r1
    27ca:	2c f4       	brge	.+10     	; 0x27d6 <Dio_vidconfigChanel+0x3e>
    27cc:	8c 81       	ldd	r24, Y+4	; 0x04
    27ce:	9d 81       	ldd	r25, Y+5	; 0x05
    27d0:	00 97       	sbiw	r24, 0x00	; 0
    27d2:	71 f0       	breq	.+28     	; 0x27f0 <Dio_vidconfigChanel+0x58>
    27d4:	bc c0       	rjmp	.+376    	; 0x294e <Dio_vidconfigChanel+0x1b6>
    27d6:	2c 81       	ldd	r18, Y+4	; 0x04
    27d8:	3d 81       	ldd	r19, Y+5	; 0x05
    27da:	22 30       	cpi	r18, 0x02	; 2
    27dc:	31 05       	cpc	r19, r1
    27de:	09 f4       	brne	.+2      	; 0x27e2 <Dio_vidconfigChanel+0x4a>
    27e0:	5f c0       	rjmp	.+190    	; 0x28a0 <Dio_vidconfigChanel+0x108>
    27e2:	8c 81       	ldd	r24, Y+4	; 0x04
    27e4:	9d 81       	ldd	r25, Y+5	; 0x05
    27e6:	83 30       	cpi	r24, 0x03	; 3
    27e8:	91 05       	cpc	r25, r1
    27ea:	09 f4       	brne	.+2      	; 0x27ee <Dio_vidconfigChanel+0x56>
    27ec:	85 c0       	rjmp	.+266    	; 0x28f8 <Dio_vidconfigChanel+0x160>
    27ee:	af c0       	rjmp	.+350    	; 0x294e <Dio_vidconfigChanel+0x1b6>
	{
	case DIO_PORTA:
		if (dir == DIO_INPUT)
    27f0:	8b 81       	ldd	r24, Y+3	; 0x03
    27f2:	88 23       	and	r24, r24
    27f4:	a9 f4       	brne	.+42     	; 0x2820 <Dio_vidconfigChanel+0x88>
		{
			CLEAR_BIT(DIO_DDRA_REG,pin);
    27f6:	aa e3       	ldi	r26, 0x3A	; 58
    27f8:	b0 e0       	ldi	r27, 0x00	; 0
    27fa:	ea e3       	ldi	r30, 0x3A	; 58
    27fc:	f0 e0       	ldi	r31, 0x00	; 0
    27fe:	80 81       	ld	r24, Z
    2800:	48 2f       	mov	r20, r24
    2802:	8a 81       	ldd	r24, Y+2	; 0x02
    2804:	28 2f       	mov	r18, r24
    2806:	30 e0       	ldi	r19, 0x00	; 0
    2808:	81 e0       	ldi	r24, 0x01	; 1
    280a:	90 e0       	ldi	r25, 0x00	; 0
    280c:	02 2e       	mov	r0, r18
    280e:	02 c0       	rjmp	.+4      	; 0x2814 <Dio_vidconfigChanel+0x7c>
    2810:	88 0f       	add	r24, r24
    2812:	99 1f       	adc	r25, r25
    2814:	0a 94       	dec	r0
    2816:	e2 f7       	brpl	.-8      	; 0x2810 <Dio_vidconfigChanel+0x78>
    2818:	80 95       	com	r24
    281a:	84 23       	and	r24, r20
    281c:	8c 93       	st	X, r24
    281e:	97 c0       	rjmp	.+302    	; 0x294e <Dio_vidconfigChanel+0x1b6>
		}
		else
		{
			SET_BIT(DIO_DDRA_REG,pin);
    2820:	aa e3       	ldi	r26, 0x3A	; 58
    2822:	b0 e0       	ldi	r27, 0x00	; 0
    2824:	ea e3       	ldi	r30, 0x3A	; 58
    2826:	f0 e0       	ldi	r31, 0x00	; 0
    2828:	80 81       	ld	r24, Z
    282a:	48 2f       	mov	r20, r24
    282c:	8a 81       	ldd	r24, Y+2	; 0x02
    282e:	28 2f       	mov	r18, r24
    2830:	30 e0       	ldi	r19, 0x00	; 0
    2832:	81 e0       	ldi	r24, 0x01	; 1
    2834:	90 e0       	ldi	r25, 0x00	; 0
    2836:	02 2e       	mov	r0, r18
    2838:	02 c0       	rjmp	.+4      	; 0x283e <Dio_vidconfigChanel+0xa6>
    283a:	88 0f       	add	r24, r24
    283c:	99 1f       	adc	r25, r25
    283e:	0a 94       	dec	r0
    2840:	e2 f7       	brpl	.-8      	; 0x283a <Dio_vidconfigChanel+0xa2>
    2842:	84 2b       	or	r24, r20
    2844:	8c 93       	st	X, r24
    2846:	83 c0       	rjmp	.+262    	; 0x294e <Dio_vidconfigChanel+0x1b6>
		}
		break;

	case DIO_PORTB:
		if (dir == DIO_INPUT)
    2848:	8b 81       	ldd	r24, Y+3	; 0x03
    284a:	88 23       	and	r24, r24
    284c:	a9 f4       	brne	.+42     	; 0x2878 <Dio_vidconfigChanel+0xe0>
		{
			CLEAR_BIT(DIO_DDRB_REG,pin);
    284e:	a7 e3       	ldi	r26, 0x37	; 55
    2850:	b0 e0       	ldi	r27, 0x00	; 0
    2852:	e7 e3       	ldi	r30, 0x37	; 55
    2854:	f0 e0       	ldi	r31, 0x00	; 0
    2856:	80 81       	ld	r24, Z
    2858:	48 2f       	mov	r20, r24
    285a:	8a 81       	ldd	r24, Y+2	; 0x02
    285c:	28 2f       	mov	r18, r24
    285e:	30 e0       	ldi	r19, 0x00	; 0
    2860:	81 e0       	ldi	r24, 0x01	; 1
    2862:	90 e0       	ldi	r25, 0x00	; 0
    2864:	02 2e       	mov	r0, r18
    2866:	02 c0       	rjmp	.+4      	; 0x286c <Dio_vidconfigChanel+0xd4>
    2868:	88 0f       	add	r24, r24
    286a:	99 1f       	adc	r25, r25
    286c:	0a 94       	dec	r0
    286e:	e2 f7       	brpl	.-8      	; 0x2868 <Dio_vidconfigChanel+0xd0>
    2870:	80 95       	com	r24
    2872:	84 23       	and	r24, r20
    2874:	8c 93       	st	X, r24
    2876:	6b c0       	rjmp	.+214    	; 0x294e <Dio_vidconfigChanel+0x1b6>
		}
		else
		{
			SET_BIT(DIO_DDRB_REG,pin);
    2878:	a7 e3       	ldi	r26, 0x37	; 55
    287a:	b0 e0       	ldi	r27, 0x00	; 0
    287c:	e7 e3       	ldi	r30, 0x37	; 55
    287e:	f0 e0       	ldi	r31, 0x00	; 0
    2880:	80 81       	ld	r24, Z
    2882:	48 2f       	mov	r20, r24
    2884:	8a 81       	ldd	r24, Y+2	; 0x02
    2886:	28 2f       	mov	r18, r24
    2888:	30 e0       	ldi	r19, 0x00	; 0
    288a:	81 e0       	ldi	r24, 0x01	; 1
    288c:	90 e0       	ldi	r25, 0x00	; 0
    288e:	02 2e       	mov	r0, r18
    2890:	02 c0       	rjmp	.+4      	; 0x2896 <Dio_vidconfigChanel+0xfe>
    2892:	88 0f       	add	r24, r24
    2894:	99 1f       	adc	r25, r25
    2896:	0a 94       	dec	r0
    2898:	e2 f7       	brpl	.-8      	; 0x2892 <Dio_vidconfigChanel+0xfa>
    289a:	84 2b       	or	r24, r20
    289c:	8c 93       	st	X, r24
    289e:	57 c0       	rjmp	.+174    	; 0x294e <Dio_vidconfigChanel+0x1b6>
		}
		break;

	case DIO_PORTC:
		if (dir == DIO_INPUT)
    28a0:	8b 81       	ldd	r24, Y+3	; 0x03
    28a2:	88 23       	and	r24, r24
    28a4:	a9 f4       	brne	.+42     	; 0x28d0 <Dio_vidconfigChanel+0x138>
		{
			CLEAR_BIT(DIO_DDRC_REG,pin);
    28a6:	a4 e3       	ldi	r26, 0x34	; 52
    28a8:	b0 e0       	ldi	r27, 0x00	; 0
    28aa:	e4 e3       	ldi	r30, 0x34	; 52
    28ac:	f0 e0       	ldi	r31, 0x00	; 0
    28ae:	80 81       	ld	r24, Z
    28b0:	48 2f       	mov	r20, r24
    28b2:	8a 81       	ldd	r24, Y+2	; 0x02
    28b4:	28 2f       	mov	r18, r24
    28b6:	30 e0       	ldi	r19, 0x00	; 0
    28b8:	81 e0       	ldi	r24, 0x01	; 1
    28ba:	90 e0       	ldi	r25, 0x00	; 0
    28bc:	02 2e       	mov	r0, r18
    28be:	02 c0       	rjmp	.+4      	; 0x28c4 <Dio_vidconfigChanel+0x12c>
    28c0:	88 0f       	add	r24, r24
    28c2:	99 1f       	adc	r25, r25
    28c4:	0a 94       	dec	r0
    28c6:	e2 f7       	brpl	.-8      	; 0x28c0 <Dio_vidconfigChanel+0x128>
    28c8:	80 95       	com	r24
    28ca:	84 23       	and	r24, r20
    28cc:	8c 93       	st	X, r24
    28ce:	3f c0       	rjmp	.+126    	; 0x294e <Dio_vidconfigChanel+0x1b6>
		}
		else
		{
			SET_BIT(DIO_DDRC_REG,pin);
    28d0:	a4 e3       	ldi	r26, 0x34	; 52
    28d2:	b0 e0       	ldi	r27, 0x00	; 0
    28d4:	e4 e3       	ldi	r30, 0x34	; 52
    28d6:	f0 e0       	ldi	r31, 0x00	; 0
    28d8:	80 81       	ld	r24, Z
    28da:	48 2f       	mov	r20, r24
    28dc:	8a 81       	ldd	r24, Y+2	; 0x02
    28de:	28 2f       	mov	r18, r24
    28e0:	30 e0       	ldi	r19, 0x00	; 0
    28e2:	81 e0       	ldi	r24, 0x01	; 1
    28e4:	90 e0       	ldi	r25, 0x00	; 0
    28e6:	02 2e       	mov	r0, r18
    28e8:	02 c0       	rjmp	.+4      	; 0x28ee <Dio_vidconfigChanel+0x156>
    28ea:	88 0f       	add	r24, r24
    28ec:	99 1f       	adc	r25, r25
    28ee:	0a 94       	dec	r0
    28f0:	e2 f7       	brpl	.-8      	; 0x28ea <Dio_vidconfigChanel+0x152>
    28f2:	84 2b       	or	r24, r20
    28f4:	8c 93       	st	X, r24
    28f6:	2b c0       	rjmp	.+86     	; 0x294e <Dio_vidconfigChanel+0x1b6>
		}
		break;

	case DIO_PORTD:
		if (dir == DIO_INPUT)
    28f8:	8b 81       	ldd	r24, Y+3	; 0x03
    28fa:	88 23       	and	r24, r24
    28fc:	a9 f4       	brne	.+42     	; 0x2928 <Dio_vidconfigChanel+0x190>
		{
			CLEAR_BIT(DIO_DDRD_REG,pin);
    28fe:	a1 e3       	ldi	r26, 0x31	; 49
    2900:	b0 e0       	ldi	r27, 0x00	; 0
    2902:	e1 e3       	ldi	r30, 0x31	; 49
    2904:	f0 e0       	ldi	r31, 0x00	; 0
    2906:	80 81       	ld	r24, Z
    2908:	48 2f       	mov	r20, r24
    290a:	8a 81       	ldd	r24, Y+2	; 0x02
    290c:	28 2f       	mov	r18, r24
    290e:	30 e0       	ldi	r19, 0x00	; 0
    2910:	81 e0       	ldi	r24, 0x01	; 1
    2912:	90 e0       	ldi	r25, 0x00	; 0
    2914:	02 2e       	mov	r0, r18
    2916:	02 c0       	rjmp	.+4      	; 0x291c <Dio_vidconfigChanel+0x184>
    2918:	88 0f       	add	r24, r24
    291a:	99 1f       	adc	r25, r25
    291c:	0a 94       	dec	r0
    291e:	e2 f7       	brpl	.-8      	; 0x2918 <Dio_vidconfigChanel+0x180>
    2920:	80 95       	com	r24
    2922:	84 23       	and	r24, r20
    2924:	8c 93       	st	X, r24
    2926:	13 c0       	rjmp	.+38     	; 0x294e <Dio_vidconfigChanel+0x1b6>
		}
		else
		{
			SET_BIT(DIO_DDRD_REG,pin);
    2928:	a1 e3       	ldi	r26, 0x31	; 49
    292a:	b0 e0       	ldi	r27, 0x00	; 0
    292c:	e1 e3       	ldi	r30, 0x31	; 49
    292e:	f0 e0       	ldi	r31, 0x00	; 0
    2930:	80 81       	ld	r24, Z
    2932:	48 2f       	mov	r20, r24
    2934:	8a 81       	ldd	r24, Y+2	; 0x02
    2936:	28 2f       	mov	r18, r24
    2938:	30 e0       	ldi	r19, 0x00	; 0
    293a:	81 e0       	ldi	r24, 0x01	; 1
    293c:	90 e0       	ldi	r25, 0x00	; 0
    293e:	02 2e       	mov	r0, r18
    2940:	02 c0       	rjmp	.+4      	; 0x2946 <Dio_vidconfigChanel+0x1ae>
    2942:	88 0f       	add	r24, r24
    2944:	99 1f       	adc	r25, r25
    2946:	0a 94       	dec	r0
    2948:	e2 f7       	brpl	.-8      	; 0x2942 <Dio_vidconfigChanel+0x1aa>
    294a:	84 2b       	or	r24, r20
    294c:	8c 93       	st	X, r24
		}
		break;
	}
}
    294e:	0f 90       	pop	r0
    2950:	0f 90       	pop	r0
    2952:	0f 90       	pop	r0
    2954:	0f 90       	pop	r0
    2956:	0f 90       	pop	r0
    2958:	cf 91       	pop	r28
    295a:	df 91       	pop	r29
    295c:	08 95       	ret

0000295e <Dio_vidwriteChanel>:

void Dio_vidwriteChanel(dio_port_t port, dio_pin_t pin,dio_level_t level)
{
    295e:	df 93       	push	r29
    2960:	cf 93       	push	r28
    2962:	00 d0       	rcall	.+0      	; 0x2964 <Dio_vidwriteChanel+0x6>
    2964:	00 d0       	rcall	.+0      	; 0x2966 <Dio_vidwriteChanel+0x8>
    2966:	0f 92       	push	r0
    2968:	cd b7       	in	r28, 0x3d	; 61
    296a:	de b7       	in	r29, 0x3e	; 62
    296c:	89 83       	std	Y+1, r24	; 0x01
    296e:	6a 83       	std	Y+2, r22	; 0x02
    2970:	4b 83       	std	Y+3, r20	; 0x03
	switch (port)
    2972:	89 81       	ldd	r24, Y+1	; 0x01
    2974:	28 2f       	mov	r18, r24
    2976:	30 e0       	ldi	r19, 0x00	; 0
    2978:	3d 83       	std	Y+5, r19	; 0x05
    297a:	2c 83       	std	Y+4, r18	; 0x04
    297c:	8c 81       	ldd	r24, Y+4	; 0x04
    297e:	9d 81       	ldd	r25, Y+5	; 0x05
    2980:	81 30       	cpi	r24, 0x01	; 1
    2982:	91 05       	cpc	r25, r1
    2984:	09 f4       	brne	.+2      	; 0x2988 <Dio_vidwriteChanel+0x2a>
    2986:	43 c0       	rjmp	.+134    	; 0x2a0e <Dio_vidwriteChanel+0xb0>
    2988:	2c 81       	ldd	r18, Y+4	; 0x04
    298a:	3d 81       	ldd	r19, Y+5	; 0x05
    298c:	22 30       	cpi	r18, 0x02	; 2
    298e:	31 05       	cpc	r19, r1
    2990:	2c f4       	brge	.+10     	; 0x299c <Dio_vidwriteChanel+0x3e>
    2992:	8c 81       	ldd	r24, Y+4	; 0x04
    2994:	9d 81       	ldd	r25, Y+5	; 0x05
    2996:	00 97       	sbiw	r24, 0x00	; 0
    2998:	71 f0       	breq	.+28     	; 0x29b6 <Dio_vidwriteChanel+0x58>
    299a:	bc c0       	rjmp	.+376    	; 0x2b14 <Dio_vidwriteChanel+0x1b6>
    299c:	2c 81       	ldd	r18, Y+4	; 0x04
    299e:	3d 81       	ldd	r19, Y+5	; 0x05
    29a0:	22 30       	cpi	r18, 0x02	; 2
    29a2:	31 05       	cpc	r19, r1
    29a4:	09 f4       	brne	.+2      	; 0x29a8 <Dio_vidwriteChanel+0x4a>
    29a6:	5f c0       	rjmp	.+190    	; 0x2a66 <Dio_vidwriteChanel+0x108>
    29a8:	8c 81       	ldd	r24, Y+4	; 0x04
    29aa:	9d 81       	ldd	r25, Y+5	; 0x05
    29ac:	83 30       	cpi	r24, 0x03	; 3
    29ae:	91 05       	cpc	r25, r1
    29b0:	09 f4       	brne	.+2      	; 0x29b4 <Dio_vidwriteChanel+0x56>
    29b2:	85 c0       	rjmp	.+266    	; 0x2abe <Dio_vidwriteChanel+0x160>
    29b4:	af c0       	rjmp	.+350    	; 0x2b14 <Dio_vidwriteChanel+0x1b6>
	{
	case DIO_PORTA:
		if (level == DIO_HIGH)
    29b6:	8b 81       	ldd	r24, Y+3	; 0x03
    29b8:	81 30       	cpi	r24, 0x01	; 1
    29ba:	a1 f4       	brne	.+40     	; 0x29e4 <Dio_vidwriteChanel+0x86>
		{
			SET_BIT(DIO_PORTA_REG,pin);
    29bc:	ab e3       	ldi	r26, 0x3B	; 59
    29be:	b0 e0       	ldi	r27, 0x00	; 0
    29c0:	eb e3       	ldi	r30, 0x3B	; 59
    29c2:	f0 e0       	ldi	r31, 0x00	; 0
    29c4:	80 81       	ld	r24, Z
    29c6:	48 2f       	mov	r20, r24
    29c8:	8a 81       	ldd	r24, Y+2	; 0x02
    29ca:	28 2f       	mov	r18, r24
    29cc:	30 e0       	ldi	r19, 0x00	; 0
    29ce:	81 e0       	ldi	r24, 0x01	; 1
    29d0:	90 e0       	ldi	r25, 0x00	; 0
    29d2:	02 2e       	mov	r0, r18
    29d4:	02 c0       	rjmp	.+4      	; 0x29da <Dio_vidwriteChanel+0x7c>
    29d6:	88 0f       	add	r24, r24
    29d8:	99 1f       	adc	r25, r25
    29da:	0a 94       	dec	r0
    29dc:	e2 f7       	brpl	.-8      	; 0x29d6 <Dio_vidwriteChanel+0x78>
    29de:	84 2b       	or	r24, r20
    29e0:	8c 93       	st	X, r24
    29e2:	98 c0       	rjmp	.+304    	; 0x2b14 <Dio_vidwriteChanel+0x1b6>
		}
		else
		{
			CLEAR_BIT(DIO_PORTA_REG,pin);
    29e4:	ab e3       	ldi	r26, 0x3B	; 59
    29e6:	b0 e0       	ldi	r27, 0x00	; 0
    29e8:	eb e3       	ldi	r30, 0x3B	; 59
    29ea:	f0 e0       	ldi	r31, 0x00	; 0
    29ec:	80 81       	ld	r24, Z
    29ee:	48 2f       	mov	r20, r24
    29f0:	8a 81       	ldd	r24, Y+2	; 0x02
    29f2:	28 2f       	mov	r18, r24
    29f4:	30 e0       	ldi	r19, 0x00	; 0
    29f6:	81 e0       	ldi	r24, 0x01	; 1
    29f8:	90 e0       	ldi	r25, 0x00	; 0
    29fa:	02 2e       	mov	r0, r18
    29fc:	02 c0       	rjmp	.+4      	; 0x2a02 <Dio_vidwriteChanel+0xa4>
    29fe:	88 0f       	add	r24, r24
    2a00:	99 1f       	adc	r25, r25
    2a02:	0a 94       	dec	r0
    2a04:	e2 f7       	brpl	.-8      	; 0x29fe <Dio_vidwriteChanel+0xa0>
    2a06:	80 95       	com	r24
    2a08:	84 23       	and	r24, r20
    2a0a:	8c 93       	st	X, r24
    2a0c:	83 c0       	rjmp	.+262    	; 0x2b14 <Dio_vidwriteChanel+0x1b6>
		}
		break;

	case DIO_PORTB:
		if (level == DIO_HIGH)
    2a0e:	8b 81       	ldd	r24, Y+3	; 0x03
    2a10:	81 30       	cpi	r24, 0x01	; 1
    2a12:	a1 f4       	brne	.+40     	; 0x2a3c <Dio_vidwriteChanel+0xde>
		{
			SET_BIT(DIO_PORTB_REG,pin);
    2a14:	a8 e3       	ldi	r26, 0x38	; 56
    2a16:	b0 e0       	ldi	r27, 0x00	; 0
    2a18:	e8 e3       	ldi	r30, 0x38	; 56
    2a1a:	f0 e0       	ldi	r31, 0x00	; 0
    2a1c:	80 81       	ld	r24, Z
    2a1e:	48 2f       	mov	r20, r24
    2a20:	8a 81       	ldd	r24, Y+2	; 0x02
    2a22:	28 2f       	mov	r18, r24
    2a24:	30 e0       	ldi	r19, 0x00	; 0
    2a26:	81 e0       	ldi	r24, 0x01	; 1
    2a28:	90 e0       	ldi	r25, 0x00	; 0
    2a2a:	02 2e       	mov	r0, r18
    2a2c:	02 c0       	rjmp	.+4      	; 0x2a32 <Dio_vidwriteChanel+0xd4>
    2a2e:	88 0f       	add	r24, r24
    2a30:	99 1f       	adc	r25, r25
    2a32:	0a 94       	dec	r0
    2a34:	e2 f7       	brpl	.-8      	; 0x2a2e <Dio_vidwriteChanel+0xd0>
    2a36:	84 2b       	or	r24, r20
    2a38:	8c 93       	st	X, r24
    2a3a:	6c c0       	rjmp	.+216    	; 0x2b14 <Dio_vidwriteChanel+0x1b6>
		}
		else
		{
			CLEAR_BIT(DIO_PORTB_REG,pin);
    2a3c:	a8 e3       	ldi	r26, 0x38	; 56
    2a3e:	b0 e0       	ldi	r27, 0x00	; 0
    2a40:	e8 e3       	ldi	r30, 0x38	; 56
    2a42:	f0 e0       	ldi	r31, 0x00	; 0
    2a44:	80 81       	ld	r24, Z
    2a46:	48 2f       	mov	r20, r24
    2a48:	8a 81       	ldd	r24, Y+2	; 0x02
    2a4a:	28 2f       	mov	r18, r24
    2a4c:	30 e0       	ldi	r19, 0x00	; 0
    2a4e:	81 e0       	ldi	r24, 0x01	; 1
    2a50:	90 e0       	ldi	r25, 0x00	; 0
    2a52:	02 2e       	mov	r0, r18
    2a54:	02 c0       	rjmp	.+4      	; 0x2a5a <Dio_vidwriteChanel+0xfc>
    2a56:	88 0f       	add	r24, r24
    2a58:	99 1f       	adc	r25, r25
    2a5a:	0a 94       	dec	r0
    2a5c:	e2 f7       	brpl	.-8      	; 0x2a56 <Dio_vidwriteChanel+0xf8>
    2a5e:	80 95       	com	r24
    2a60:	84 23       	and	r24, r20
    2a62:	8c 93       	st	X, r24
    2a64:	57 c0       	rjmp	.+174    	; 0x2b14 <Dio_vidwriteChanel+0x1b6>
		}
		break;

	case DIO_PORTC:
		if (level == DIO_HIGH)
    2a66:	8b 81       	ldd	r24, Y+3	; 0x03
    2a68:	81 30       	cpi	r24, 0x01	; 1
    2a6a:	a1 f4       	brne	.+40     	; 0x2a94 <Dio_vidwriteChanel+0x136>
		{
			SET_BIT(DIO_PORTC_REG,pin);
    2a6c:	a5 e3       	ldi	r26, 0x35	; 53
    2a6e:	b0 e0       	ldi	r27, 0x00	; 0
    2a70:	e5 e3       	ldi	r30, 0x35	; 53
    2a72:	f0 e0       	ldi	r31, 0x00	; 0
    2a74:	80 81       	ld	r24, Z
    2a76:	48 2f       	mov	r20, r24
    2a78:	8a 81       	ldd	r24, Y+2	; 0x02
    2a7a:	28 2f       	mov	r18, r24
    2a7c:	30 e0       	ldi	r19, 0x00	; 0
    2a7e:	81 e0       	ldi	r24, 0x01	; 1
    2a80:	90 e0       	ldi	r25, 0x00	; 0
    2a82:	02 2e       	mov	r0, r18
    2a84:	02 c0       	rjmp	.+4      	; 0x2a8a <Dio_vidwriteChanel+0x12c>
    2a86:	88 0f       	add	r24, r24
    2a88:	99 1f       	adc	r25, r25
    2a8a:	0a 94       	dec	r0
    2a8c:	e2 f7       	brpl	.-8      	; 0x2a86 <Dio_vidwriteChanel+0x128>
    2a8e:	84 2b       	or	r24, r20
    2a90:	8c 93       	st	X, r24
    2a92:	40 c0       	rjmp	.+128    	; 0x2b14 <Dio_vidwriteChanel+0x1b6>
		}
		else
		{
			CLEAR_BIT(DIO_PORTC_REG,pin);
    2a94:	a5 e3       	ldi	r26, 0x35	; 53
    2a96:	b0 e0       	ldi	r27, 0x00	; 0
    2a98:	e5 e3       	ldi	r30, 0x35	; 53
    2a9a:	f0 e0       	ldi	r31, 0x00	; 0
    2a9c:	80 81       	ld	r24, Z
    2a9e:	48 2f       	mov	r20, r24
    2aa0:	8a 81       	ldd	r24, Y+2	; 0x02
    2aa2:	28 2f       	mov	r18, r24
    2aa4:	30 e0       	ldi	r19, 0x00	; 0
    2aa6:	81 e0       	ldi	r24, 0x01	; 1
    2aa8:	90 e0       	ldi	r25, 0x00	; 0
    2aaa:	02 2e       	mov	r0, r18
    2aac:	02 c0       	rjmp	.+4      	; 0x2ab2 <Dio_vidwriteChanel+0x154>
    2aae:	88 0f       	add	r24, r24
    2ab0:	99 1f       	adc	r25, r25
    2ab2:	0a 94       	dec	r0
    2ab4:	e2 f7       	brpl	.-8      	; 0x2aae <Dio_vidwriteChanel+0x150>
    2ab6:	80 95       	com	r24
    2ab8:	84 23       	and	r24, r20
    2aba:	8c 93       	st	X, r24
    2abc:	2b c0       	rjmp	.+86     	; 0x2b14 <Dio_vidwriteChanel+0x1b6>
		}
		break;

	case DIO_PORTD:
		if (level == DIO_HIGH)
    2abe:	8b 81       	ldd	r24, Y+3	; 0x03
    2ac0:	81 30       	cpi	r24, 0x01	; 1
    2ac2:	a1 f4       	brne	.+40     	; 0x2aec <Dio_vidwriteChanel+0x18e>
		{
			SET_BIT(DIO_PORTD_REG,pin);
    2ac4:	a2 e3       	ldi	r26, 0x32	; 50
    2ac6:	b0 e0       	ldi	r27, 0x00	; 0
    2ac8:	e2 e3       	ldi	r30, 0x32	; 50
    2aca:	f0 e0       	ldi	r31, 0x00	; 0
    2acc:	80 81       	ld	r24, Z
    2ace:	48 2f       	mov	r20, r24
    2ad0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ad2:	28 2f       	mov	r18, r24
    2ad4:	30 e0       	ldi	r19, 0x00	; 0
    2ad6:	81 e0       	ldi	r24, 0x01	; 1
    2ad8:	90 e0       	ldi	r25, 0x00	; 0
    2ada:	02 2e       	mov	r0, r18
    2adc:	02 c0       	rjmp	.+4      	; 0x2ae2 <Dio_vidwriteChanel+0x184>
    2ade:	88 0f       	add	r24, r24
    2ae0:	99 1f       	adc	r25, r25
    2ae2:	0a 94       	dec	r0
    2ae4:	e2 f7       	brpl	.-8      	; 0x2ade <Dio_vidwriteChanel+0x180>
    2ae6:	84 2b       	or	r24, r20
    2ae8:	8c 93       	st	X, r24
    2aea:	14 c0       	rjmp	.+40     	; 0x2b14 <Dio_vidwriteChanel+0x1b6>
		}
		else
		{
			CLEAR_BIT(DIO_PORTD_REG,pin);
    2aec:	a2 e3       	ldi	r26, 0x32	; 50
    2aee:	b0 e0       	ldi	r27, 0x00	; 0
    2af0:	e2 e3       	ldi	r30, 0x32	; 50
    2af2:	f0 e0       	ldi	r31, 0x00	; 0
    2af4:	80 81       	ld	r24, Z
    2af6:	48 2f       	mov	r20, r24
    2af8:	8a 81       	ldd	r24, Y+2	; 0x02
    2afa:	28 2f       	mov	r18, r24
    2afc:	30 e0       	ldi	r19, 0x00	; 0
    2afe:	81 e0       	ldi	r24, 0x01	; 1
    2b00:	90 e0       	ldi	r25, 0x00	; 0
    2b02:	02 2e       	mov	r0, r18
    2b04:	02 c0       	rjmp	.+4      	; 0x2b0a <Dio_vidwriteChanel+0x1ac>
    2b06:	88 0f       	add	r24, r24
    2b08:	99 1f       	adc	r25, r25
    2b0a:	0a 94       	dec	r0
    2b0c:	e2 f7       	brpl	.-8      	; 0x2b06 <Dio_vidwriteChanel+0x1a8>
    2b0e:	80 95       	com	r24
    2b10:	84 23       	and	r24, r20
    2b12:	8c 93       	st	X, r24
		}
		break;
	}
}
    2b14:	0f 90       	pop	r0
    2b16:	0f 90       	pop	r0
    2b18:	0f 90       	pop	r0
    2b1a:	0f 90       	pop	r0
    2b1c:	0f 90       	pop	r0
    2b1e:	cf 91       	pop	r28
    2b20:	df 91       	pop	r29
    2b22:	08 95       	ret

00002b24 <Dio_vidWriteChanelGroup>:

void Dio_vidWriteChanelGroup(dio_port_t port, u8 data, u8 mask)
{
    2b24:	df 93       	push	r29
    2b26:	cf 93       	push	r28
    2b28:	00 d0       	rcall	.+0      	; 0x2b2a <Dio_vidWriteChanelGroup+0x6>
    2b2a:	00 d0       	rcall	.+0      	; 0x2b2c <Dio_vidWriteChanelGroup+0x8>
    2b2c:	0f 92       	push	r0
    2b2e:	cd b7       	in	r28, 0x3d	; 61
    2b30:	de b7       	in	r29, 0x3e	; 62
    2b32:	89 83       	std	Y+1, r24	; 0x01
    2b34:	6a 83       	std	Y+2, r22	; 0x02
    2b36:	4b 83       	std	Y+3, r20	; 0x03
	switch(port)
    2b38:	89 81       	ldd	r24, Y+1	; 0x01
    2b3a:	28 2f       	mov	r18, r24
    2b3c:	30 e0       	ldi	r19, 0x00	; 0
    2b3e:	3d 83       	std	Y+5, r19	; 0x05
    2b40:	2c 83       	std	Y+4, r18	; 0x04
    2b42:	8c 81       	ldd	r24, Y+4	; 0x04
    2b44:	9d 81       	ldd	r25, Y+5	; 0x05
    2b46:	81 30       	cpi	r24, 0x01	; 1
    2b48:	91 05       	cpc	r25, r1
    2b4a:	01 f1       	breq	.+64     	; 0x2b8c <Dio_vidWriteChanelGroup+0x68>
    2b4c:	2c 81       	ldd	r18, Y+4	; 0x04
    2b4e:	3d 81       	ldd	r19, Y+5	; 0x05
    2b50:	22 30       	cpi	r18, 0x02	; 2
    2b52:	31 05       	cpc	r19, r1
    2b54:	2c f4       	brge	.+10     	; 0x2b60 <Dio_vidWriteChanelGroup+0x3c>
    2b56:	8c 81       	ldd	r24, Y+4	; 0x04
    2b58:	9d 81       	ldd	r25, Y+5	; 0x05
    2b5a:	00 97       	sbiw	r24, 0x00	; 0
    2b5c:	61 f0       	breq	.+24     	; 0x2b76 <Dio_vidWriteChanelGroup+0x52>
    2b5e:	36 c0       	rjmp	.+108    	; 0x2bcc <Dio_vidWriteChanelGroup+0xa8>
    2b60:	2c 81       	ldd	r18, Y+4	; 0x04
    2b62:	3d 81       	ldd	r19, Y+5	; 0x05
    2b64:	22 30       	cpi	r18, 0x02	; 2
    2b66:	31 05       	cpc	r19, r1
    2b68:	e1 f0       	breq	.+56     	; 0x2ba2 <Dio_vidWriteChanelGroup+0x7e>
    2b6a:	8c 81       	ldd	r24, Y+4	; 0x04
    2b6c:	9d 81       	ldd	r25, Y+5	; 0x05
    2b6e:	83 30       	cpi	r24, 0x03	; 3
    2b70:	91 05       	cpc	r25, r1
    2b72:	11 f1       	breq	.+68     	; 0x2bb8 <Dio_vidWriteChanelGroup+0x94>
    2b74:	2b c0       	rjmp	.+86     	; 0x2bcc <Dio_vidWriteChanelGroup+0xa8>
	{
	case DIO_PORTA:
		DIO_PORTA_REG = (DIO_PORTA_REG & mask)|(data);
    2b76:	ab e3       	ldi	r26, 0x3B	; 59
    2b78:	b0 e0       	ldi	r27, 0x00	; 0
    2b7a:	eb e3       	ldi	r30, 0x3B	; 59
    2b7c:	f0 e0       	ldi	r31, 0x00	; 0
    2b7e:	90 81       	ld	r25, Z
    2b80:	8b 81       	ldd	r24, Y+3	; 0x03
    2b82:	98 23       	and	r25, r24
    2b84:	8a 81       	ldd	r24, Y+2	; 0x02
    2b86:	89 2b       	or	r24, r25
    2b88:	8c 93       	st	X, r24
    2b8a:	20 c0       	rjmp	.+64     	; 0x2bcc <Dio_vidWriteChanelGroup+0xa8>
		break;

	case DIO_PORTB:
		DIO_PORTB_REG = (DIO_PORTB_REG & mask)|(data);
    2b8c:	a8 e3       	ldi	r26, 0x38	; 56
    2b8e:	b0 e0       	ldi	r27, 0x00	; 0
    2b90:	e8 e3       	ldi	r30, 0x38	; 56
    2b92:	f0 e0       	ldi	r31, 0x00	; 0
    2b94:	90 81       	ld	r25, Z
    2b96:	8b 81       	ldd	r24, Y+3	; 0x03
    2b98:	98 23       	and	r25, r24
    2b9a:	8a 81       	ldd	r24, Y+2	; 0x02
    2b9c:	89 2b       	or	r24, r25
    2b9e:	8c 93       	st	X, r24
    2ba0:	15 c0       	rjmp	.+42     	; 0x2bcc <Dio_vidWriteChanelGroup+0xa8>
		break;

	case DIO_PORTC:
		DIO_PORTC_REG = (DIO_PORTC_REG & mask)|(data);
    2ba2:	a5 e3       	ldi	r26, 0x35	; 53
    2ba4:	b0 e0       	ldi	r27, 0x00	; 0
    2ba6:	e5 e3       	ldi	r30, 0x35	; 53
    2ba8:	f0 e0       	ldi	r31, 0x00	; 0
    2baa:	90 81       	ld	r25, Z
    2bac:	8b 81       	ldd	r24, Y+3	; 0x03
    2bae:	98 23       	and	r25, r24
    2bb0:	8a 81       	ldd	r24, Y+2	; 0x02
    2bb2:	89 2b       	or	r24, r25
    2bb4:	8c 93       	st	X, r24
    2bb6:	0a c0       	rjmp	.+20     	; 0x2bcc <Dio_vidWriteChanelGroup+0xa8>
		break;

	case DIO_PORTD:
		DIO_PORTD_REG = (DIO_PORTD_REG & mask)|(data);
    2bb8:	a2 e3       	ldi	r26, 0x32	; 50
    2bba:	b0 e0       	ldi	r27, 0x00	; 0
    2bbc:	e2 e3       	ldi	r30, 0x32	; 50
    2bbe:	f0 e0       	ldi	r31, 0x00	; 0
    2bc0:	90 81       	ld	r25, Z
    2bc2:	8b 81       	ldd	r24, Y+3	; 0x03
    2bc4:	98 23       	and	r25, r24
    2bc6:	8a 81       	ldd	r24, Y+2	; 0x02
    2bc8:	89 2b       	or	r24, r25
    2bca:	8c 93       	st	X, r24
		break;
	}
}
    2bcc:	0f 90       	pop	r0
    2bce:	0f 90       	pop	r0
    2bd0:	0f 90       	pop	r0
    2bd2:	0f 90       	pop	r0
    2bd4:	0f 90       	pop	r0
    2bd6:	cf 91       	pop	r28
    2bd8:	df 91       	pop	r29
    2bda:	08 95       	ret

00002bdc <Dio_udtreadChanel>:

dio_level_t Dio_udtreadChanel(dio_port_t port, dio_pin_t pin)
{
    2bdc:	df 93       	push	r29
    2bde:	cf 93       	push	r28
    2be0:	00 d0       	rcall	.+0      	; 0x2be2 <Dio_udtreadChanel+0x6>
    2be2:	00 d0       	rcall	.+0      	; 0x2be4 <Dio_udtreadChanel+0x8>
    2be4:	0f 92       	push	r0
    2be6:	cd b7       	in	r28, 0x3d	; 61
    2be8:	de b7       	in	r29, 0x3e	; 62
    2bea:	8a 83       	std	Y+2, r24	; 0x02
    2bec:	6b 83       	std	Y+3, r22	; 0x03
	dio_level_t loc_result = DIO_LOW;
    2bee:	19 82       	std	Y+1, r1	; 0x01

	switch (port)
    2bf0:	8a 81       	ldd	r24, Y+2	; 0x02
    2bf2:	28 2f       	mov	r18, r24
    2bf4:	30 e0       	ldi	r19, 0x00	; 0
    2bf6:	3d 83       	std	Y+5, r19	; 0x05
    2bf8:	2c 83       	std	Y+4, r18	; 0x04
    2bfa:	4c 81       	ldd	r20, Y+4	; 0x04
    2bfc:	5d 81       	ldd	r21, Y+5	; 0x05
    2bfe:	41 30       	cpi	r20, 0x01	; 1
    2c00:	51 05       	cpc	r21, r1
    2c02:	79 f1       	breq	.+94     	; 0x2c62 <Dio_udtreadChanel+0x86>
    2c04:	8c 81       	ldd	r24, Y+4	; 0x04
    2c06:	9d 81       	ldd	r25, Y+5	; 0x05
    2c08:	82 30       	cpi	r24, 0x02	; 2
    2c0a:	91 05       	cpc	r25, r1
    2c0c:	34 f4       	brge	.+12     	; 0x2c1a <Dio_udtreadChanel+0x3e>
    2c0e:	2c 81       	ldd	r18, Y+4	; 0x04
    2c10:	3d 81       	ldd	r19, Y+5	; 0x05
    2c12:	21 15       	cp	r18, r1
    2c14:	31 05       	cpc	r19, r1
    2c16:	69 f0       	breq	.+26     	; 0x2c32 <Dio_udtreadChanel+0x56>
    2c18:	6b c0       	rjmp	.+214    	; 0x2cf0 <Dio_udtreadChanel+0x114>
    2c1a:	4c 81       	ldd	r20, Y+4	; 0x04
    2c1c:	5d 81       	ldd	r21, Y+5	; 0x05
    2c1e:	42 30       	cpi	r20, 0x02	; 2
    2c20:	51 05       	cpc	r21, r1
    2c22:	b9 f1       	breq	.+110    	; 0x2c92 <Dio_udtreadChanel+0xb6>
    2c24:	8c 81       	ldd	r24, Y+4	; 0x04
    2c26:	9d 81       	ldd	r25, Y+5	; 0x05
    2c28:	83 30       	cpi	r24, 0x03	; 3
    2c2a:	91 05       	cpc	r25, r1
    2c2c:	09 f4       	brne	.+2      	; 0x2c30 <Dio_udtreadChanel+0x54>
    2c2e:	49 c0       	rjmp	.+146    	; 0x2cc2 <Dio_udtreadChanel+0xe6>
    2c30:	5f c0       	rjmp	.+190    	; 0x2cf0 <Dio_udtreadChanel+0x114>
	{
	case DIO_PORTA:
		if (CHECK_BIT(DIO_PINA_REG,pin) == 1)
    2c32:	e9 e3       	ldi	r30, 0x39	; 57
    2c34:	f0 e0       	ldi	r31, 0x00	; 0
    2c36:	80 81       	ld	r24, Z
    2c38:	28 2f       	mov	r18, r24
    2c3a:	30 e0       	ldi	r19, 0x00	; 0
    2c3c:	8b 81       	ldd	r24, Y+3	; 0x03
    2c3e:	88 2f       	mov	r24, r24
    2c40:	90 e0       	ldi	r25, 0x00	; 0
    2c42:	a9 01       	movw	r20, r18
    2c44:	02 c0       	rjmp	.+4      	; 0x2c4a <Dio_udtreadChanel+0x6e>
    2c46:	55 95       	asr	r21
    2c48:	47 95       	ror	r20
    2c4a:	8a 95       	dec	r24
    2c4c:	e2 f7       	brpl	.-8      	; 0x2c46 <Dio_udtreadChanel+0x6a>
    2c4e:	ca 01       	movw	r24, r20
    2c50:	81 70       	andi	r24, 0x01	; 1
    2c52:	90 70       	andi	r25, 0x00	; 0
    2c54:	88 23       	and	r24, r24
    2c56:	19 f0       	breq	.+6      	; 0x2c5e <Dio_udtreadChanel+0x82>
		{
			loc_result = DIO_HIGH;
    2c58:	81 e0       	ldi	r24, 0x01	; 1
    2c5a:	89 83       	std	Y+1, r24	; 0x01
    2c5c:	49 c0       	rjmp	.+146    	; 0x2cf0 <Dio_udtreadChanel+0x114>
		}
		else
		{
			loc_result = DIO_LOW;
    2c5e:	19 82       	std	Y+1, r1	; 0x01
    2c60:	47 c0       	rjmp	.+142    	; 0x2cf0 <Dio_udtreadChanel+0x114>
		}
		break;

	case DIO_PORTB:
		if (CHECK_BIT(DIO_PINB_REG,pin) == 1)
    2c62:	e6 e3       	ldi	r30, 0x36	; 54
    2c64:	f0 e0       	ldi	r31, 0x00	; 0
    2c66:	80 81       	ld	r24, Z
    2c68:	28 2f       	mov	r18, r24
    2c6a:	30 e0       	ldi	r19, 0x00	; 0
    2c6c:	8b 81       	ldd	r24, Y+3	; 0x03
    2c6e:	88 2f       	mov	r24, r24
    2c70:	90 e0       	ldi	r25, 0x00	; 0
    2c72:	a9 01       	movw	r20, r18
    2c74:	02 c0       	rjmp	.+4      	; 0x2c7a <Dio_udtreadChanel+0x9e>
    2c76:	55 95       	asr	r21
    2c78:	47 95       	ror	r20
    2c7a:	8a 95       	dec	r24
    2c7c:	e2 f7       	brpl	.-8      	; 0x2c76 <Dio_udtreadChanel+0x9a>
    2c7e:	ca 01       	movw	r24, r20
    2c80:	81 70       	andi	r24, 0x01	; 1
    2c82:	90 70       	andi	r25, 0x00	; 0
    2c84:	88 23       	and	r24, r24
    2c86:	19 f0       	breq	.+6      	; 0x2c8e <Dio_udtreadChanel+0xb2>
		{
			loc_result = DIO_HIGH;
    2c88:	81 e0       	ldi	r24, 0x01	; 1
    2c8a:	89 83       	std	Y+1, r24	; 0x01
    2c8c:	31 c0       	rjmp	.+98     	; 0x2cf0 <Dio_udtreadChanel+0x114>
		}
		else
		{
			loc_result = DIO_LOW;
    2c8e:	19 82       	std	Y+1, r1	; 0x01
    2c90:	2f c0       	rjmp	.+94     	; 0x2cf0 <Dio_udtreadChanel+0x114>
		}
		break;

	case DIO_PORTC:
		if (CHECK_BIT(DIO_PINC_REG,pin) == 1)
    2c92:	e3 e3       	ldi	r30, 0x33	; 51
    2c94:	f0 e0       	ldi	r31, 0x00	; 0
    2c96:	80 81       	ld	r24, Z
    2c98:	28 2f       	mov	r18, r24
    2c9a:	30 e0       	ldi	r19, 0x00	; 0
    2c9c:	8b 81       	ldd	r24, Y+3	; 0x03
    2c9e:	88 2f       	mov	r24, r24
    2ca0:	90 e0       	ldi	r25, 0x00	; 0
    2ca2:	a9 01       	movw	r20, r18
    2ca4:	02 c0       	rjmp	.+4      	; 0x2caa <Dio_udtreadChanel+0xce>
    2ca6:	55 95       	asr	r21
    2ca8:	47 95       	ror	r20
    2caa:	8a 95       	dec	r24
    2cac:	e2 f7       	brpl	.-8      	; 0x2ca6 <Dio_udtreadChanel+0xca>
    2cae:	ca 01       	movw	r24, r20
    2cb0:	81 70       	andi	r24, 0x01	; 1
    2cb2:	90 70       	andi	r25, 0x00	; 0
    2cb4:	88 23       	and	r24, r24
    2cb6:	19 f0       	breq	.+6      	; 0x2cbe <Dio_udtreadChanel+0xe2>
		{
			loc_result = DIO_HIGH;
    2cb8:	81 e0       	ldi	r24, 0x01	; 1
    2cba:	89 83       	std	Y+1, r24	; 0x01
    2cbc:	19 c0       	rjmp	.+50     	; 0x2cf0 <Dio_udtreadChanel+0x114>
		}
		else
		{
			loc_result = DIO_LOW;
    2cbe:	19 82       	std	Y+1, r1	; 0x01
    2cc0:	17 c0       	rjmp	.+46     	; 0x2cf0 <Dio_udtreadChanel+0x114>
		}
		break;

	case DIO_PORTD:
		if (CHECK_BIT(DIO_PIND_REG,pin) == 1)
    2cc2:	e0 e3       	ldi	r30, 0x30	; 48
    2cc4:	f0 e0       	ldi	r31, 0x00	; 0
    2cc6:	80 81       	ld	r24, Z
    2cc8:	28 2f       	mov	r18, r24
    2cca:	30 e0       	ldi	r19, 0x00	; 0
    2ccc:	8b 81       	ldd	r24, Y+3	; 0x03
    2cce:	88 2f       	mov	r24, r24
    2cd0:	90 e0       	ldi	r25, 0x00	; 0
    2cd2:	a9 01       	movw	r20, r18
    2cd4:	02 c0       	rjmp	.+4      	; 0x2cda <Dio_udtreadChanel+0xfe>
    2cd6:	55 95       	asr	r21
    2cd8:	47 95       	ror	r20
    2cda:	8a 95       	dec	r24
    2cdc:	e2 f7       	brpl	.-8      	; 0x2cd6 <Dio_udtreadChanel+0xfa>
    2cde:	ca 01       	movw	r24, r20
    2ce0:	81 70       	andi	r24, 0x01	; 1
    2ce2:	90 70       	andi	r25, 0x00	; 0
    2ce4:	88 23       	and	r24, r24
    2ce6:	19 f0       	breq	.+6      	; 0x2cee <Dio_udtreadChanel+0x112>
		{
			loc_result = DIO_HIGH;
    2ce8:	81 e0       	ldi	r24, 0x01	; 1
    2cea:	89 83       	std	Y+1, r24	; 0x01
    2cec:	01 c0       	rjmp	.+2      	; 0x2cf0 <Dio_udtreadChanel+0x114>
		}
		else
		{
			loc_result = DIO_LOW;
    2cee:	19 82       	std	Y+1, r1	; 0x01
		}
		break;
	}
	return loc_result;
    2cf0:	89 81       	ldd	r24, Y+1	; 0x01
}
    2cf2:	0f 90       	pop	r0
    2cf4:	0f 90       	pop	r0
    2cf6:	0f 90       	pop	r0
    2cf8:	0f 90       	pop	r0
    2cfa:	0f 90       	pop	r0
    2cfc:	cf 91       	pop	r28
    2cfe:	df 91       	pop	r29
    2d00:	08 95       	ret

00002d02 <Dio_vidflipChanel>:

void Dio_vidflipChanel(dio_port_t port, dio_pin_t pin)
{
    2d02:	df 93       	push	r29
    2d04:	cf 93       	push	r28
    2d06:	00 d0       	rcall	.+0      	; 0x2d08 <Dio_vidflipChanel+0x6>
    2d08:	00 d0       	rcall	.+0      	; 0x2d0a <Dio_vidflipChanel+0x8>
    2d0a:	cd b7       	in	r28, 0x3d	; 61
    2d0c:	de b7       	in	r29, 0x3e	; 62
    2d0e:	89 83       	std	Y+1, r24	; 0x01
    2d10:	6a 83       	std	Y+2, r22	; 0x02
	switch (port)
    2d12:	89 81       	ldd	r24, Y+1	; 0x01
    2d14:	28 2f       	mov	r18, r24
    2d16:	30 e0       	ldi	r19, 0x00	; 0
    2d18:	3c 83       	std	Y+4, r19	; 0x04
    2d1a:	2b 83       	std	Y+3, r18	; 0x03
    2d1c:	8b 81       	ldd	r24, Y+3	; 0x03
    2d1e:	9c 81       	ldd	r25, Y+4	; 0x04
    2d20:	81 30       	cpi	r24, 0x01	; 1
    2d22:	91 05       	cpc	r25, r1
    2d24:	49 f1       	breq	.+82     	; 0x2d78 <Dio_vidflipChanel+0x76>
    2d26:	2b 81       	ldd	r18, Y+3	; 0x03
    2d28:	3c 81       	ldd	r19, Y+4	; 0x04
    2d2a:	22 30       	cpi	r18, 0x02	; 2
    2d2c:	31 05       	cpc	r19, r1
    2d2e:	2c f4       	brge	.+10     	; 0x2d3a <Dio_vidflipChanel+0x38>
    2d30:	8b 81       	ldd	r24, Y+3	; 0x03
    2d32:	9c 81       	ldd	r25, Y+4	; 0x04
    2d34:	00 97       	sbiw	r24, 0x00	; 0
    2d36:	61 f0       	breq	.+24     	; 0x2d50 <Dio_vidflipChanel+0x4e>
    2d38:	5a c0       	rjmp	.+180    	; 0x2dee <Dio_vidflipChanel+0xec>
    2d3a:	2b 81       	ldd	r18, Y+3	; 0x03
    2d3c:	3c 81       	ldd	r19, Y+4	; 0x04
    2d3e:	22 30       	cpi	r18, 0x02	; 2
    2d40:	31 05       	cpc	r19, r1
    2d42:	71 f1       	breq	.+92     	; 0x2da0 <Dio_vidflipChanel+0x9e>
    2d44:	8b 81       	ldd	r24, Y+3	; 0x03
    2d46:	9c 81       	ldd	r25, Y+4	; 0x04
    2d48:	83 30       	cpi	r24, 0x03	; 3
    2d4a:	91 05       	cpc	r25, r1
    2d4c:	e9 f1       	breq	.+122    	; 0x2dc8 <Dio_vidflipChanel+0xc6>
    2d4e:	4f c0       	rjmp	.+158    	; 0x2dee <Dio_vidflipChanel+0xec>
	{
	case DIO_PORTA:
		FLIP_BIT(DIO_PORTA_REG,pin);
    2d50:	ab e3       	ldi	r26, 0x3B	; 59
    2d52:	b0 e0       	ldi	r27, 0x00	; 0
    2d54:	eb e3       	ldi	r30, 0x3B	; 59
    2d56:	f0 e0       	ldi	r31, 0x00	; 0
    2d58:	80 81       	ld	r24, Z
    2d5a:	48 2f       	mov	r20, r24
    2d5c:	8a 81       	ldd	r24, Y+2	; 0x02
    2d5e:	28 2f       	mov	r18, r24
    2d60:	30 e0       	ldi	r19, 0x00	; 0
    2d62:	81 e0       	ldi	r24, 0x01	; 1
    2d64:	90 e0       	ldi	r25, 0x00	; 0
    2d66:	02 2e       	mov	r0, r18
    2d68:	02 c0       	rjmp	.+4      	; 0x2d6e <Dio_vidflipChanel+0x6c>
    2d6a:	88 0f       	add	r24, r24
    2d6c:	99 1f       	adc	r25, r25
    2d6e:	0a 94       	dec	r0
    2d70:	e2 f7       	brpl	.-8      	; 0x2d6a <Dio_vidflipChanel+0x68>
    2d72:	84 27       	eor	r24, r20
    2d74:	8c 93       	st	X, r24
    2d76:	3b c0       	rjmp	.+118    	; 0x2dee <Dio_vidflipChanel+0xec>
		break;

	case DIO_PORTB:
		FLIP_BIT(DIO_PORTB_REG,pin);
    2d78:	a8 e3       	ldi	r26, 0x38	; 56
    2d7a:	b0 e0       	ldi	r27, 0x00	; 0
    2d7c:	e8 e3       	ldi	r30, 0x38	; 56
    2d7e:	f0 e0       	ldi	r31, 0x00	; 0
    2d80:	80 81       	ld	r24, Z
    2d82:	48 2f       	mov	r20, r24
    2d84:	8a 81       	ldd	r24, Y+2	; 0x02
    2d86:	28 2f       	mov	r18, r24
    2d88:	30 e0       	ldi	r19, 0x00	; 0
    2d8a:	81 e0       	ldi	r24, 0x01	; 1
    2d8c:	90 e0       	ldi	r25, 0x00	; 0
    2d8e:	02 2e       	mov	r0, r18
    2d90:	02 c0       	rjmp	.+4      	; 0x2d96 <Dio_vidflipChanel+0x94>
    2d92:	88 0f       	add	r24, r24
    2d94:	99 1f       	adc	r25, r25
    2d96:	0a 94       	dec	r0
    2d98:	e2 f7       	brpl	.-8      	; 0x2d92 <Dio_vidflipChanel+0x90>
    2d9a:	84 27       	eor	r24, r20
    2d9c:	8c 93       	st	X, r24
    2d9e:	27 c0       	rjmp	.+78     	; 0x2dee <Dio_vidflipChanel+0xec>
		break;

	case DIO_PORTC:
		FLIP_BIT(DIO_PORTC_REG,pin);
    2da0:	a5 e3       	ldi	r26, 0x35	; 53
    2da2:	b0 e0       	ldi	r27, 0x00	; 0
    2da4:	e5 e3       	ldi	r30, 0x35	; 53
    2da6:	f0 e0       	ldi	r31, 0x00	; 0
    2da8:	80 81       	ld	r24, Z
    2daa:	48 2f       	mov	r20, r24
    2dac:	8a 81       	ldd	r24, Y+2	; 0x02
    2dae:	28 2f       	mov	r18, r24
    2db0:	30 e0       	ldi	r19, 0x00	; 0
    2db2:	81 e0       	ldi	r24, 0x01	; 1
    2db4:	90 e0       	ldi	r25, 0x00	; 0
    2db6:	02 2e       	mov	r0, r18
    2db8:	02 c0       	rjmp	.+4      	; 0x2dbe <Dio_vidflipChanel+0xbc>
    2dba:	88 0f       	add	r24, r24
    2dbc:	99 1f       	adc	r25, r25
    2dbe:	0a 94       	dec	r0
    2dc0:	e2 f7       	brpl	.-8      	; 0x2dba <Dio_vidflipChanel+0xb8>
    2dc2:	84 27       	eor	r24, r20
    2dc4:	8c 93       	st	X, r24
    2dc6:	13 c0       	rjmp	.+38     	; 0x2dee <Dio_vidflipChanel+0xec>
		break;

	case DIO_PORTD:
		FLIP_BIT(DIO_PORTD_REG,pin);
    2dc8:	a2 e3       	ldi	r26, 0x32	; 50
    2dca:	b0 e0       	ldi	r27, 0x00	; 0
    2dcc:	e2 e3       	ldi	r30, 0x32	; 50
    2dce:	f0 e0       	ldi	r31, 0x00	; 0
    2dd0:	80 81       	ld	r24, Z
    2dd2:	48 2f       	mov	r20, r24
    2dd4:	8a 81       	ldd	r24, Y+2	; 0x02
    2dd6:	28 2f       	mov	r18, r24
    2dd8:	30 e0       	ldi	r19, 0x00	; 0
    2dda:	81 e0       	ldi	r24, 0x01	; 1
    2ddc:	90 e0       	ldi	r25, 0x00	; 0
    2dde:	02 2e       	mov	r0, r18
    2de0:	02 c0       	rjmp	.+4      	; 0x2de6 <Dio_vidflipChanel+0xe4>
    2de2:	88 0f       	add	r24, r24
    2de4:	99 1f       	adc	r25, r25
    2de6:	0a 94       	dec	r0
    2de8:	e2 f7       	brpl	.-8      	; 0x2de2 <Dio_vidflipChanel+0xe0>
    2dea:	84 27       	eor	r24, r20
    2dec:	8c 93       	st	X, r24
		break;
	}
}
    2dee:	0f 90       	pop	r0
    2df0:	0f 90       	pop	r0
    2df2:	0f 90       	pop	r0
    2df4:	0f 90       	pop	r0
    2df6:	cf 91       	pop	r28
    2df8:	df 91       	pop	r29
    2dfa:	08 95       	ret

00002dfc <Dio_vidPullUpEn>:
void Dio_vidPullUpEn(dio_port_t port, dio_pin_t pin)
{
    2dfc:	df 93       	push	r29
    2dfe:	cf 93       	push	r28
    2e00:	00 d0       	rcall	.+0      	; 0x2e02 <Dio_vidPullUpEn+0x6>
    2e02:	00 d0       	rcall	.+0      	; 0x2e04 <Dio_vidPullUpEn+0x8>
    2e04:	cd b7       	in	r28, 0x3d	; 61
    2e06:	de b7       	in	r29, 0x3e	; 62
    2e08:	89 83       	std	Y+1, r24	; 0x01
    2e0a:	6a 83       	std	Y+2, r22	; 0x02
	switch (port)
    2e0c:	89 81       	ldd	r24, Y+1	; 0x01
    2e0e:	28 2f       	mov	r18, r24
    2e10:	30 e0       	ldi	r19, 0x00	; 0
    2e12:	3c 83       	std	Y+4, r19	; 0x04
    2e14:	2b 83       	std	Y+3, r18	; 0x03
    2e16:	8b 81       	ldd	r24, Y+3	; 0x03
    2e18:	9c 81       	ldd	r25, Y+4	; 0x04
    2e1a:	81 30       	cpi	r24, 0x01	; 1
    2e1c:	91 05       	cpc	r25, r1
    2e1e:	49 f1       	breq	.+82     	; 0x2e72 <Dio_vidPullUpEn+0x76>
    2e20:	2b 81       	ldd	r18, Y+3	; 0x03
    2e22:	3c 81       	ldd	r19, Y+4	; 0x04
    2e24:	22 30       	cpi	r18, 0x02	; 2
    2e26:	31 05       	cpc	r19, r1
    2e28:	2c f4       	brge	.+10     	; 0x2e34 <Dio_vidPullUpEn+0x38>
    2e2a:	8b 81       	ldd	r24, Y+3	; 0x03
    2e2c:	9c 81       	ldd	r25, Y+4	; 0x04
    2e2e:	00 97       	sbiw	r24, 0x00	; 0
    2e30:	61 f0       	breq	.+24     	; 0x2e4a <Dio_vidPullUpEn+0x4e>
    2e32:	5a c0       	rjmp	.+180    	; 0x2ee8 <Dio_vidPullUpEn+0xec>
    2e34:	2b 81       	ldd	r18, Y+3	; 0x03
    2e36:	3c 81       	ldd	r19, Y+4	; 0x04
    2e38:	22 30       	cpi	r18, 0x02	; 2
    2e3a:	31 05       	cpc	r19, r1
    2e3c:	71 f1       	breq	.+92     	; 0x2e9a <Dio_vidPullUpEn+0x9e>
    2e3e:	8b 81       	ldd	r24, Y+3	; 0x03
    2e40:	9c 81       	ldd	r25, Y+4	; 0x04
    2e42:	83 30       	cpi	r24, 0x03	; 3
    2e44:	91 05       	cpc	r25, r1
    2e46:	e9 f1       	breq	.+122    	; 0x2ec2 <Dio_vidPullUpEn+0xc6>
    2e48:	4f c0       	rjmp	.+158    	; 0x2ee8 <Dio_vidPullUpEn+0xec>
	{
	case DIO_PORTA:
		SET_BIT(DIO_PORTA_REG,pin);
    2e4a:	ab e3       	ldi	r26, 0x3B	; 59
    2e4c:	b0 e0       	ldi	r27, 0x00	; 0
    2e4e:	eb e3       	ldi	r30, 0x3B	; 59
    2e50:	f0 e0       	ldi	r31, 0x00	; 0
    2e52:	80 81       	ld	r24, Z
    2e54:	48 2f       	mov	r20, r24
    2e56:	8a 81       	ldd	r24, Y+2	; 0x02
    2e58:	28 2f       	mov	r18, r24
    2e5a:	30 e0       	ldi	r19, 0x00	; 0
    2e5c:	81 e0       	ldi	r24, 0x01	; 1
    2e5e:	90 e0       	ldi	r25, 0x00	; 0
    2e60:	02 2e       	mov	r0, r18
    2e62:	02 c0       	rjmp	.+4      	; 0x2e68 <Dio_vidPullUpEn+0x6c>
    2e64:	88 0f       	add	r24, r24
    2e66:	99 1f       	adc	r25, r25
    2e68:	0a 94       	dec	r0
    2e6a:	e2 f7       	brpl	.-8      	; 0x2e64 <Dio_vidPullUpEn+0x68>
    2e6c:	84 2b       	or	r24, r20
    2e6e:	8c 93       	st	X, r24
    2e70:	3b c0       	rjmp	.+118    	; 0x2ee8 <Dio_vidPullUpEn+0xec>
		break;

	case DIO_PORTB:
		SET_BIT(DIO_PORTB_REG,pin);
    2e72:	a8 e3       	ldi	r26, 0x38	; 56
    2e74:	b0 e0       	ldi	r27, 0x00	; 0
    2e76:	e8 e3       	ldi	r30, 0x38	; 56
    2e78:	f0 e0       	ldi	r31, 0x00	; 0
    2e7a:	80 81       	ld	r24, Z
    2e7c:	48 2f       	mov	r20, r24
    2e7e:	8a 81       	ldd	r24, Y+2	; 0x02
    2e80:	28 2f       	mov	r18, r24
    2e82:	30 e0       	ldi	r19, 0x00	; 0
    2e84:	81 e0       	ldi	r24, 0x01	; 1
    2e86:	90 e0       	ldi	r25, 0x00	; 0
    2e88:	02 2e       	mov	r0, r18
    2e8a:	02 c0       	rjmp	.+4      	; 0x2e90 <Dio_vidPullUpEn+0x94>
    2e8c:	88 0f       	add	r24, r24
    2e8e:	99 1f       	adc	r25, r25
    2e90:	0a 94       	dec	r0
    2e92:	e2 f7       	brpl	.-8      	; 0x2e8c <Dio_vidPullUpEn+0x90>
    2e94:	84 2b       	or	r24, r20
    2e96:	8c 93       	st	X, r24
    2e98:	27 c0       	rjmp	.+78     	; 0x2ee8 <Dio_vidPullUpEn+0xec>
		break;

	case DIO_PORTC:
		SET_BIT(DIO_PORTC_REG,pin);
    2e9a:	a5 e3       	ldi	r26, 0x35	; 53
    2e9c:	b0 e0       	ldi	r27, 0x00	; 0
    2e9e:	e5 e3       	ldi	r30, 0x35	; 53
    2ea0:	f0 e0       	ldi	r31, 0x00	; 0
    2ea2:	80 81       	ld	r24, Z
    2ea4:	48 2f       	mov	r20, r24
    2ea6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ea8:	28 2f       	mov	r18, r24
    2eaa:	30 e0       	ldi	r19, 0x00	; 0
    2eac:	81 e0       	ldi	r24, 0x01	; 1
    2eae:	90 e0       	ldi	r25, 0x00	; 0
    2eb0:	02 2e       	mov	r0, r18
    2eb2:	02 c0       	rjmp	.+4      	; 0x2eb8 <Dio_vidPullUpEn+0xbc>
    2eb4:	88 0f       	add	r24, r24
    2eb6:	99 1f       	adc	r25, r25
    2eb8:	0a 94       	dec	r0
    2eba:	e2 f7       	brpl	.-8      	; 0x2eb4 <Dio_vidPullUpEn+0xb8>
    2ebc:	84 2b       	or	r24, r20
    2ebe:	8c 93       	st	X, r24
    2ec0:	13 c0       	rjmp	.+38     	; 0x2ee8 <Dio_vidPullUpEn+0xec>
		break;

	case DIO_PORTD:
		SET_BIT(DIO_PORTD_REG,pin);
    2ec2:	a2 e3       	ldi	r26, 0x32	; 50
    2ec4:	b0 e0       	ldi	r27, 0x00	; 0
    2ec6:	e2 e3       	ldi	r30, 0x32	; 50
    2ec8:	f0 e0       	ldi	r31, 0x00	; 0
    2eca:	80 81       	ld	r24, Z
    2ecc:	48 2f       	mov	r20, r24
    2ece:	8a 81       	ldd	r24, Y+2	; 0x02
    2ed0:	28 2f       	mov	r18, r24
    2ed2:	30 e0       	ldi	r19, 0x00	; 0
    2ed4:	81 e0       	ldi	r24, 0x01	; 1
    2ed6:	90 e0       	ldi	r25, 0x00	; 0
    2ed8:	02 2e       	mov	r0, r18
    2eda:	02 c0       	rjmp	.+4      	; 0x2ee0 <Dio_vidPullUpEn+0xe4>
    2edc:	88 0f       	add	r24, r24
    2ede:	99 1f       	adc	r25, r25
    2ee0:	0a 94       	dec	r0
    2ee2:	e2 f7       	brpl	.-8      	; 0x2edc <Dio_vidPullUpEn+0xe0>
    2ee4:	84 2b       	or	r24, r20
    2ee6:	8c 93       	st	X, r24
		break;
	}
}
    2ee8:	0f 90       	pop	r0
    2eea:	0f 90       	pop	r0
    2eec:	0f 90       	pop	r0
    2eee:	0f 90       	pop	r0
    2ef0:	cf 91       	pop	r28
    2ef2:	df 91       	pop	r29
    2ef4:	08 95       	ret

00002ef6 <Adc_vidInit>:
#include "Adc_Reg.h"
#include "Adc_Types.h"
#include "Bit_Math.h"

void Adc_vidInit(void)
{
    2ef6:	df 93       	push	r29
    2ef8:	cf 93       	push	r28
    2efa:	cd b7       	in	r28, 0x3d	; 61
    2efc:	de b7       	in	r29, 0x3e	; 62

	/*	Enable ADC	*/
	SET_BIT(ADC_ADCSRA_REG, 7);
    2efe:	a6 e2       	ldi	r26, 0x26	; 38
    2f00:	b0 e0       	ldi	r27, 0x00	; 0
    2f02:	e6 e2       	ldi	r30, 0x26	; 38
    2f04:	f0 e0       	ldi	r31, 0x00	; 0
    2f06:	80 81       	ld	r24, Z
    2f08:	80 68       	ori	r24, 0x80	; 128
    2f0a:	8c 93       	st	X, r24
	/*	Configure ADC prescaler	 /128	*/
	ADC_ADCSRA_REG |= 7 /*0000 0111*/;
    2f0c:	a6 e2       	ldi	r26, 0x26	; 38
    2f0e:	b0 e0       	ldi	r27, 0x00	; 0
    2f10:	e6 e2       	ldi	r30, 0x26	; 38
    2f12:	f0 e0       	ldi	r31, 0x00	; 0
    2f14:	80 81       	ld	r24, Z
    2f16:	87 60       	ori	r24, 0x07	; 7
    2f18:	8c 93       	st	X, r24
	/*	Select Vref +	AVCC	*/
	SET_BIT(ADC_ADMUX_REG,6);
    2f1a:	a7 e2       	ldi	r26, 0x27	; 39
    2f1c:	b0 e0       	ldi	r27, 0x00	; 0
    2f1e:	e7 e2       	ldi	r30, 0x27	; 39
    2f20:	f0 e0       	ldi	r31, 0x00	; 0
    2f22:	80 81       	ld	r24, Z
    2f24:	80 64       	ori	r24, 0x40	; 64
    2f26:	8c 93       	st	X, r24
}
    2f28:	cf 91       	pop	r28
    2f2a:	df 91       	pop	r29
    2f2c:	08 95       	ret

00002f2e <Adc_u16AdcRead>:

f64 Adc_u16AdcRead(adc_channlId_t channel)
{
    2f2e:	df 93       	push	r29
    2f30:	cf 93       	push	r28
    2f32:	cd b7       	in	r28, 0x3d	; 61
    2f34:	de b7       	in	r29, 0x3e	; 62
    2f36:	27 97       	sbiw	r28, 0x07	; 7
    2f38:	0f b6       	in	r0, 0x3f	; 63
    2f3a:	f8 94       	cli
    2f3c:	de bf       	out	0x3e, r29	; 62
    2f3e:	0f be       	out	0x3f, r0	; 63
    2f40:	cd bf       	out	0x3d, r28	; 61
    2f42:	8f 83       	std	Y+7, r24	; 0x07
	u16 loc_adcResult = 0;
    2f44:	1e 82       	std	Y+6, r1	; 0x06
    2f46:	1d 82       	std	Y+5, r1	; 0x05
	f64 loc_volt =0;
    2f48:	80 e0       	ldi	r24, 0x00	; 0
    2f4a:	90 e0       	ldi	r25, 0x00	; 0
    2f4c:	a0 e0       	ldi	r26, 0x00	; 0
    2f4e:	b0 e0       	ldi	r27, 0x00	; 0
    2f50:	89 83       	std	Y+1, r24	; 0x01
    2f52:	9a 83       	std	Y+2, r25	; 0x02
    2f54:	ab 83       	std	Y+3, r26	; 0x03
    2f56:	bc 83       	std	Y+4, r27	; 0x04
	/*	select ADC channel	*/
	ADC_ADMUX_REG =  (ADC_ADMUX_REG & 0xF8)| channel;
    2f58:	a7 e2       	ldi	r26, 0x27	; 39
    2f5a:	b0 e0       	ldi	r27, 0x00	; 0
    2f5c:	e7 e2       	ldi	r30, 0x27	; 39
    2f5e:	f0 e0       	ldi	r31, 0x00	; 0
    2f60:	80 81       	ld	r24, Z
    2f62:	98 2f       	mov	r25, r24
    2f64:	98 7f       	andi	r25, 0xF8	; 248
    2f66:	8f 81       	ldd	r24, Y+7	; 0x07
    2f68:	89 2b       	or	r24, r25
    2f6a:	8c 93       	st	X, r24
	/*	Start ADC conversion	*/
	SET_BIT(ADC_ADCSRA_REG,6);
    2f6c:	a6 e2       	ldi	r26, 0x26	; 38
    2f6e:	b0 e0       	ldi	r27, 0x00	; 0
    2f70:	e6 e2       	ldi	r30, 0x26	; 38
    2f72:	f0 e0       	ldi	r31, 0x00	; 0
    2f74:	80 81       	ld	r24, Z
    2f76:	80 64       	ori	r24, 0x40	; 64
    2f78:	8c 93       	st	X, r24

	/*	wait until ADIF flag become 1 */
	while(CHECK_BIT(ADC_ADCSRA_REG,4) !=1)
    2f7a:	e6 e2       	ldi	r30, 0x26	; 38
    2f7c:	f0 e0       	ldi	r31, 0x00	; 0
    2f7e:	80 81       	ld	r24, Z
    2f80:	82 95       	swap	r24
    2f82:	8f 70       	andi	r24, 0x0F	; 15
    2f84:	88 2f       	mov	r24, r24
    2f86:	90 e0       	ldi	r25, 0x00	; 0
    2f88:	81 70       	andi	r24, 0x01	; 1
    2f8a:	90 70       	andi	r25, 0x00	; 0
    2f8c:	00 97       	sbiw	r24, 0x00	; 0
    2f8e:	a9 f3       	breq	.-22     	; 0x2f7a <Adc_u16AdcRead+0x4c>
	{
		/*	Do Nothing	*/
	}

	/*	clear ADIF by writing 1 	*/
	SET_BIT(ADC_ADCSRA_REG,4);
    2f90:	a6 e2       	ldi	r26, 0x26	; 38
    2f92:	b0 e0       	ldi	r27, 0x00	; 0
    2f94:	e6 e2       	ldi	r30, 0x26	; 38
    2f96:	f0 e0       	ldi	r31, 0x00	; 0
    2f98:	80 81       	ld	r24, Z
    2f9a:	80 61       	ori	r24, 0x10	; 16
    2f9c:	8c 93       	st	X, r24

	/*	read ADC result form ADCL, ADCH	*/
	loc_adcResult=(ADC_ADCL_REG|(ADC_ADCH_REG<<8));
    2f9e:	e4 e2       	ldi	r30, 0x24	; 36
    2fa0:	f0 e0       	ldi	r31, 0x00	; 0
    2fa2:	80 81       	ld	r24, Z
    2fa4:	28 2f       	mov	r18, r24
    2fa6:	30 e0       	ldi	r19, 0x00	; 0
    2fa8:	e5 e2       	ldi	r30, 0x25	; 37
    2faa:	f0 e0       	ldi	r31, 0x00	; 0
    2fac:	80 81       	ld	r24, Z
    2fae:	88 2f       	mov	r24, r24
    2fb0:	90 e0       	ldi	r25, 0x00	; 0
    2fb2:	98 2f       	mov	r25, r24
    2fb4:	88 27       	eor	r24, r24
    2fb6:	82 2b       	or	r24, r18
    2fb8:	93 2b       	or	r25, r19
    2fba:	9e 83       	std	Y+6, r25	; 0x06
    2fbc:	8d 83       	std	Y+5, r24	; 0x05

	loc_volt = loc_adcResult * ADC_STEP;
    2fbe:	8d 81       	ldd	r24, Y+5	; 0x05
    2fc0:	9e 81       	ldd	r25, Y+6	; 0x06
    2fc2:	cc 01       	movw	r24, r24
    2fc4:	a0 e0       	ldi	r26, 0x00	; 0
    2fc6:	b0 e0       	ldi	r27, 0x00	; 0
    2fc8:	bc 01       	movw	r22, r24
    2fca:	cd 01       	movw	r24, r26
    2fcc:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2fd0:	dc 01       	movw	r26, r24
    2fd2:	cb 01       	movw	r24, r22
    2fd4:	bc 01       	movw	r22, r24
    2fd6:	cd 01       	movw	r24, r26
    2fd8:	2a e9       	ldi	r18, 0x9A	; 154
    2fda:	39 e9       	ldi	r19, 0x99	; 153
    2fdc:	49 e9       	ldi	r20, 0x99	; 153
    2fde:	50 e4       	ldi	r21, 0x40	; 64
    2fe0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fe4:	dc 01       	movw	r26, r24
    2fe6:	cb 01       	movw	r24, r22
    2fe8:	89 83       	std	Y+1, r24	; 0x01
    2fea:	9a 83       	std	Y+2, r25	; 0x02
    2fec:	ab 83       	std	Y+3, r26	; 0x03
    2fee:	bc 83       	std	Y+4, r27	; 0x04
	return loc_volt;
    2ff0:	89 81       	ldd	r24, Y+1	; 0x01
    2ff2:	9a 81       	ldd	r25, Y+2	; 0x02
    2ff4:	ab 81       	ldd	r26, Y+3	; 0x03
    2ff6:	bc 81       	ldd	r27, Y+4	; 0x04
}
    2ff8:	bc 01       	movw	r22, r24
    2ffa:	cd 01       	movw	r24, r26
    2ffc:	27 96       	adiw	r28, 0x07	; 7
    2ffe:	0f b6       	in	r0, 0x3f	; 63
    3000:	f8 94       	cli
    3002:	de bf       	out	0x3e, r29	; 62
    3004:	0f be       	out	0x3f, r0	; 63
    3006:	cd bf       	out	0x3d, r28	; 61
    3008:	cf 91       	pop	r28
    300a:	df 91       	pop	r29
    300c:	08 95       	ret

0000300e <__udivmodqi4>:
    300e:	99 1b       	sub	r25, r25
    3010:	79 e0       	ldi	r23, 0x09	; 9
    3012:	04 c0       	rjmp	.+8      	; 0x301c <__udivmodqi4_ep>

00003014 <__udivmodqi4_loop>:
    3014:	99 1f       	adc	r25, r25
    3016:	96 17       	cp	r25, r22
    3018:	08 f0       	brcs	.+2      	; 0x301c <__udivmodqi4_ep>
    301a:	96 1b       	sub	r25, r22

0000301c <__udivmodqi4_ep>:
    301c:	88 1f       	adc	r24, r24
    301e:	7a 95       	dec	r23
    3020:	c9 f7       	brne	.-14     	; 0x3014 <__udivmodqi4_loop>
    3022:	80 95       	com	r24
    3024:	08 95       	ret

00003026 <__udivmodsi4>:
    3026:	a1 e2       	ldi	r26, 0x21	; 33
    3028:	1a 2e       	mov	r1, r26
    302a:	aa 1b       	sub	r26, r26
    302c:	bb 1b       	sub	r27, r27
    302e:	fd 01       	movw	r30, r26
    3030:	0d c0       	rjmp	.+26     	; 0x304c <__udivmodsi4_ep>

00003032 <__udivmodsi4_loop>:
    3032:	aa 1f       	adc	r26, r26
    3034:	bb 1f       	adc	r27, r27
    3036:	ee 1f       	adc	r30, r30
    3038:	ff 1f       	adc	r31, r31
    303a:	a2 17       	cp	r26, r18
    303c:	b3 07       	cpc	r27, r19
    303e:	e4 07       	cpc	r30, r20
    3040:	f5 07       	cpc	r31, r21
    3042:	20 f0       	brcs	.+8      	; 0x304c <__udivmodsi4_ep>
    3044:	a2 1b       	sub	r26, r18
    3046:	b3 0b       	sbc	r27, r19
    3048:	e4 0b       	sbc	r30, r20
    304a:	f5 0b       	sbc	r31, r21

0000304c <__udivmodsi4_ep>:
    304c:	66 1f       	adc	r22, r22
    304e:	77 1f       	adc	r23, r23
    3050:	88 1f       	adc	r24, r24
    3052:	99 1f       	adc	r25, r25
    3054:	1a 94       	dec	r1
    3056:	69 f7       	brne	.-38     	; 0x3032 <__udivmodsi4_loop>
    3058:	60 95       	com	r22
    305a:	70 95       	com	r23
    305c:	80 95       	com	r24
    305e:	90 95       	com	r25
    3060:	9b 01       	movw	r18, r22
    3062:	ac 01       	movw	r20, r24
    3064:	bd 01       	movw	r22, r26
    3066:	cf 01       	movw	r24, r30
    3068:	08 95       	ret

0000306a <__prologue_saves__>:
    306a:	2f 92       	push	r2
    306c:	3f 92       	push	r3
    306e:	4f 92       	push	r4
    3070:	5f 92       	push	r5
    3072:	6f 92       	push	r6
    3074:	7f 92       	push	r7
    3076:	8f 92       	push	r8
    3078:	9f 92       	push	r9
    307a:	af 92       	push	r10
    307c:	bf 92       	push	r11
    307e:	cf 92       	push	r12
    3080:	df 92       	push	r13
    3082:	ef 92       	push	r14
    3084:	ff 92       	push	r15
    3086:	0f 93       	push	r16
    3088:	1f 93       	push	r17
    308a:	cf 93       	push	r28
    308c:	df 93       	push	r29
    308e:	cd b7       	in	r28, 0x3d	; 61
    3090:	de b7       	in	r29, 0x3e	; 62
    3092:	ca 1b       	sub	r28, r26
    3094:	db 0b       	sbc	r29, r27
    3096:	0f b6       	in	r0, 0x3f	; 63
    3098:	f8 94       	cli
    309a:	de bf       	out	0x3e, r29	; 62
    309c:	0f be       	out	0x3f, r0	; 63
    309e:	cd bf       	out	0x3d, r28	; 61
    30a0:	09 94       	ijmp

000030a2 <__epilogue_restores__>:
    30a2:	2a 88       	ldd	r2, Y+18	; 0x12
    30a4:	39 88       	ldd	r3, Y+17	; 0x11
    30a6:	48 88       	ldd	r4, Y+16	; 0x10
    30a8:	5f 84       	ldd	r5, Y+15	; 0x0f
    30aa:	6e 84       	ldd	r6, Y+14	; 0x0e
    30ac:	7d 84       	ldd	r7, Y+13	; 0x0d
    30ae:	8c 84       	ldd	r8, Y+12	; 0x0c
    30b0:	9b 84       	ldd	r9, Y+11	; 0x0b
    30b2:	aa 84       	ldd	r10, Y+10	; 0x0a
    30b4:	b9 84       	ldd	r11, Y+9	; 0x09
    30b6:	c8 84       	ldd	r12, Y+8	; 0x08
    30b8:	df 80       	ldd	r13, Y+7	; 0x07
    30ba:	ee 80       	ldd	r14, Y+6	; 0x06
    30bc:	fd 80       	ldd	r15, Y+5	; 0x05
    30be:	0c 81       	ldd	r16, Y+4	; 0x04
    30c0:	1b 81       	ldd	r17, Y+3	; 0x03
    30c2:	aa 81       	ldd	r26, Y+2	; 0x02
    30c4:	b9 81       	ldd	r27, Y+1	; 0x01
    30c6:	ce 0f       	add	r28, r30
    30c8:	d1 1d       	adc	r29, r1
    30ca:	0f b6       	in	r0, 0x3f	; 63
    30cc:	f8 94       	cli
    30ce:	de bf       	out	0x3e, r29	; 62
    30d0:	0f be       	out	0x3f, r0	; 63
    30d2:	cd bf       	out	0x3d, r28	; 61
    30d4:	ed 01       	movw	r28, r26
    30d6:	08 95       	ret

000030d8 <sprintf>:
    30d8:	ae e0       	ldi	r26, 0x0E	; 14
    30da:	b0 e0       	ldi	r27, 0x00	; 0
    30dc:	e2 e7       	ldi	r30, 0x72	; 114
    30de:	f8 e1       	ldi	r31, 0x18	; 24
    30e0:	0c 94 43 18 	jmp	0x3086	; 0x3086 <__prologue_saves__+0x1c>
    30e4:	0d 89       	ldd	r16, Y+21	; 0x15
    30e6:	1e 89       	ldd	r17, Y+22	; 0x16
    30e8:	86 e0       	ldi	r24, 0x06	; 6
    30ea:	8c 83       	std	Y+4, r24	; 0x04
    30ec:	1a 83       	std	Y+2, r17	; 0x02
    30ee:	09 83       	std	Y+1, r16	; 0x01
    30f0:	8f ef       	ldi	r24, 0xFF	; 255
    30f2:	9f e7       	ldi	r25, 0x7F	; 127
    30f4:	9e 83       	std	Y+6, r25	; 0x06
    30f6:	8d 83       	std	Y+5, r24	; 0x05
    30f8:	9e 01       	movw	r18, r28
    30fa:	27 5e       	subi	r18, 0xE7	; 231
    30fc:	3f 4f       	sbci	r19, 0xFF	; 255
    30fe:	ce 01       	movw	r24, r28
    3100:	01 96       	adiw	r24, 0x01	; 1
    3102:	6f 89       	ldd	r22, Y+23	; 0x17
    3104:	78 8d       	ldd	r23, Y+24	; 0x18
    3106:	a9 01       	movw	r20, r18
    3108:	0e 94 90 18 	call	0x3120	; 0x3120 <vfprintf>
    310c:	2f 81       	ldd	r18, Y+7	; 0x07
    310e:	38 85       	ldd	r19, Y+8	; 0x08
    3110:	02 0f       	add	r16, r18
    3112:	13 1f       	adc	r17, r19
    3114:	f8 01       	movw	r30, r16
    3116:	10 82       	st	Z, r1
    3118:	2e 96       	adiw	r28, 0x0e	; 14
    311a:	e4 e0       	ldi	r30, 0x04	; 4
    311c:	0c 94 5f 18 	jmp	0x30be	; 0x30be <__epilogue_restores__+0x1c>

00003120 <vfprintf>:
    3120:	ab e0       	ldi	r26, 0x0B	; 11
    3122:	b0 e0       	ldi	r27, 0x00	; 0
    3124:	e6 e9       	ldi	r30, 0x96	; 150
    3126:	f8 e1       	ldi	r31, 0x18	; 24
    3128:	0c 94 35 18 	jmp	0x306a	; 0x306a <__prologue_saves__>
    312c:	3c 01       	movw	r6, r24
    312e:	2b 01       	movw	r4, r22
    3130:	5a 01       	movw	r10, r20
    3132:	fc 01       	movw	r30, r24
    3134:	17 82       	std	Z+7, r1	; 0x07
    3136:	16 82       	std	Z+6, r1	; 0x06
    3138:	83 81       	ldd	r24, Z+3	; 0x03
    313a:	81 fd       	sbrc	r24, 1
    313c:	03 c0       	rjmp	.+6      	; 0x3144 <vfprintf+0x24>
    313e:	6f ef       	ldi	r22, 0xFF	; 255
    3140:	7f ef       	ldi	r23, 0xFF	; 255
    3142:	c6 c1       	rjmp	.+908    	; 0x34d0 <vfprintf+0x3b0>
    3144:	9a e0       	ldi	r25, 0x0A	; 10
    3146:	89 2e       	mov	r8, r25
    3148:	1e 01       	movw	r2, r28
    314a:	08 94       	sec
    314c:	21 1c       	adc	r2, r1
    314e:	31 1c       	adc	r3, r1
    3150:	f3 01       	movw	r30, r6
    3152:	23 81       	ldd	r18, Z+3	; 0x03
    3154:	f2 01       	movw	r30, r4
    3156:	23 fd       	sbrc	r18, 3
    3158:	85 91       	lpm	r24, Z+
    315a:	23 ff       	sbrs	r18, 3
    315c:	81 91       	ld	r24, Z+
    315e:	2f 01       	movw	r4, r30
    3160:	88 23       	and	r24, r24
    3162:	09 f4       	brne	.+2      	; 0x3166 <vfprintf+0x46>
    3164:	b2 c1       	rjmp	.+868    	; 0x34ca <vfprintf+0x3aa>
    3166:	85 32       	cpi	r24, 0x25	; 37
    3168:	39 f4       	brne	.+14     	; 0x3178 <vfprintf+0x58>
    316a:	23 fd       	sbrc	r18, 3
    316c:	85 91       	lpm	r24, Z+
    316e:	23 ff       	sbrs	r18, 3
    3170:	81 91       	ld	r24, Z+
    3172:	2f 01       	movw	r4, r30
    3174:	85 32       	cpi	r24, 0x25	; 37
    3176:	29 f4       	brne	.+10     	; 0x3182 <vfprintf+0x62>
    3178:	90 e0       	ldi	r25, 0x00	; 0
    317a:	b3 01       	movw	r22, r6
    317c:	0e 94 83 1a 	call	0x3506	; 0x3506 <fputc>
    3180:	e7 cf       	rjmp	.-50     	; 0x3150 <vfprintf+0x30>
    3182:	98 2f       	mov	r25, r24
    3184:	ff 24       	eor	r15, r15
    3186:	ee 24       	eor	r14, r14
    3188:	99 24       	eor	r9, r9
    318a:	ff e1       	ldi	r31, 0x1F	; 31
    318c:	ff 15       	cp	r31, r15
    318e:	d0 f0       	brcs	.+52     	; 0x31c4 <vfprintf+0xa4>
    3190:	9b 32       	cpi	r25, 0x2B	; 43
    3192:	69 f0       	breq	.+26     	; 0x31ae <vfprintf+0x8e>
    3194:	9c 32       	cpi	r25, 0x2C	; 44
    3196:	28 f4       	brcc	.+10     	; 0x31a2 <vfprintf+0x82>
    3198:	90 32       	cpi	r25, 0x20	; 32
    319a:	59 f0       	breq	.+22     	; 0x31b2 <vfprintf+0x92>
    319c:	93 32       	cpi	r25, 0x23	; 35
    319e:	91 f4       	brne	.+36     	; 0x31c4 <vfprintf+0xa4>
    31a0:	0e c0       	rjmp	.+28     	; 0x31be <vfprintf+0x9e>
    31a2:	9d 32       	cpi	r25, 0x2D	; 45
    31a4:	49 f0       	breq	.+18     	; 0x31b8 <vfprintf+0x98>
    31a6:	90 33       	cpi	r25, 0x30	; 48
    31a8:	69 f4       	brne	.+26     	; 0x31c4 <vfprintf+0xa4>
    31aa:	41 e0       	ldi	r20, 0x01	; 1
    31ac:	24 c0       	rjmp	.+72     	; 0x31f6 <vfprintf+0xd6>
    31ae:	52 e0       	ldi	r21, 0x02	; 2
    31b0:	f5 2a       	or	r15, r21
    31b2:	84 e0       	ldi	r24, 0x04	; 4
    31b4:	f8 2a       	or	r15, r24
    31b6:	28 c0       	rjmp	.+80     	; 0x3208 <vfprintf+0xe8>
    31b8:	98 e0       	ldi	r25, 0x08	; 8
    31ba:	f9 2a       	or	r15, r25
    31bc:	25 c0       	rjmp	.+74     	; 0x3208 <vfprintf+0xe8>
    31be:	e0 e1       	ldi	r30, 0x10	; 16
    31c0:	fe 2a       	or	r15, r30
    31c2:	22 c0       	rjmp	.+68     	; 0x3208 <vfprintf+0xe8>
    31c4:	f7 fc       	sbrc	r15, 7
    31c6:	29 c0       	rjmp	.+82     	; 0x321a <vfprintf+0xfa>
    31c8:	89 2f       	mov	r24, r25
    31ca:	80 53       	subi	r24, 0x30	; 48
    31cc:	8a 30       	cpi	r24, 0x0A	; 10
    31ce:	70 f4       	brcc	.+28     	; 0x31ec <vfprintf+0xcc>
    31d0:	f6 fe       	sbrs	r15, 6
    31d2:	05 c0       	rjmp	.+10     	; 0x31de <vfprintf+0xbe>
    31d4:	98 9c       	mul	r9, r8
    31d6:	90 2c       	mov	r9, r0
    31d8:	11 24       	eor	r1, r1
    31da:	98 0e       	add	r9, r24
    31dc:	15 c0       	rjmp	.+42     	; 0x3208 <vfprintf+0xe8>
    31de:	e8 9c       	mul	r14, r8
    31e0:	e0 2c       	mov	r14, r0
    31e2:	11 24       	eor	r1, r1
    31e4:	e8 0e       	add	r14, r24
    31e6:	f0 e2       	ldi	r31, 0x20	; 32
    31e8:	ff 2a       	or	r15, r31
    31ea:	0e c0       	rjmp	.+28     	; 0x3208 <vfprintf+0xe8>
    31ec:	9e 32       	cpi	r25, 0x2E	; 46
    31ee:	29 f4       	brne	.+10     	; 0x31fa <vfprintf+0xda>
    31f0:	f6 fc       	sbrc	r15, 6
    31f2:	6b c1       	rjmp	.+726    	; 0x34ca <vfprintf+0x3aa>
    31f4:	40 e4       	ldi	r20, 0x40	; 64
    31f6:	f4 2a       	or	r15, r20
    31f8:	07 c0       	rjmp	.+14     	; 0x3208 <vfprintf+0xe8>
    31fa:	9c 36       	cpi	r25, 0x6C	; 108
    31fc:	19 f4       	brne	.+6      	; 0x3204 <vfprintf+0xe4>
    31fe:	50 e8       	ldi	r21, 0x80	; 128
    3200:	f5 2a       	or	r15, r21
    3202:	02 c0       	rjmp	.+4      	; 0x3208 <vfprintf+0xe8>
    3204:	98 36       	cpi	r25, 0x68	; 104
    3206:	49 f4       	brne	.+18     	; 0x321a <vfprintf+0xfa>
    3208:	f2 01       	movw	r30, r4
    320a:	23 fd       	sbrc	r18, 3
    320c:	95 91       	lpm	r25, Z+
    320e:	23 ff       	sbrs	r18, 3
    3210:	91 91       	ld	r25, Z+
    3212:	2f 01       	movw	r4, r30
    3214:	99 23       	and	r25, r25
    3216:	09 f0       	breq	.+2      	; 0x321a <vfprintf+0xfa>
    3218:	b8 cf       	rjmp	.-144    	; 0x318a <vfprintf+0x6a>
    321a:	89 2f       	mov	r24, r25
    321c:	85 54       	subi	r24, 0x45	; 69
    321e:	83 30       	cpi	r24, 0x03	; 3
    3220:	18 f0       	brcs	.+6      	; 0x3228 <vfprintf+0x108>
    3222:	80 52       	subi	r24, 0x20	; 32
    3224:	83 30       	cpi	r24, 0x03	; 3
    3226:	38 f4       	brcc	.+14     	; 0x3236 <vfprintf+0x116>
    3228:	44 e0       	ldi	r20, 0x04	; 4
    322a:	50 e0       	ldi	r21, 0x00	; 0
    322c:	a4 0e       	add	r10, r20
    322e:	b5 1e       	adc	r11, r21
    3230:	5f e3       	ldi	r21, 0x3F	; 63
    3232:	59 83       	std	Y+1, r21	; 0x01
    3234:	0f c0       	rjmp	.+30     	; 0x3254 <vfprintf+0x134>
    3236:	93 36       	cpi	r25, 0x63	; 99
    3238:	31 f0       	breq	.+12     	; 0x3246 <vfprintf+0x126>
    323a:	93 37       	cpi	r25, 0x73	; 115
    323c:	79 f0       	breq	.+30     	; 0x325c <vfprintf+0x13c>
    323e:	93 35       	cpi	r25, 0x53	; 83
    3240:	09 f0       	breq	.+2      	; 0x3244 <vfprintf+0x124>
    3242:	56 c0       	rjmp	.+172    	; 0x32f0 <vfprintf+0x1d0>
    3244:	20 c0       	rjmp	.+64     	; 0x3286 <vfprintf+0x166>
    3246:	f5 01       	movw	r30, r10
    3248:	80 81       	ld	r24, Z
    324a:	89 83       	std	Y+1, r24	; 0x01
    324c:	42 e0       	ldi	r20, 0x02	; 2
    324e:	50 e0       	ldi	r21, 0x00	; 0
    3250:	a4 0e       	add	r10, r20
    3252:	b5 1e       	adc	r11, r21
    3254:	61 01       	movw	r12, r2
    3256:	01 e0       	ldi	r16, 0x01	; 1
    3258:	10 e0       	ldi	r17, 0x00	; 0
    325a:	12 c0       	rjmp	.+36     	; 0x3280 <vfprintf+0x160>
    325c:	f5 01       	movw	r30, r10
    325e:	c0 80       	ld	r12, Z
    3260:	d1 80       	ldd	r13, Z+1	; 0x01
    3262:	f6 fc       	sbrc	r15, 6
    3264:	03 c0       	rjmp	.+6      	; 0x326c <vfprintf+0x14c>
    3266:	6f ef       	ldi	r22, 0xFF	; 255
    3268:	7f ef       	ldi	r23, 0xFF	; 255
    326a:	02 c0       	rjmp	.+4      	; 0x3270 <vfprintf+0x150>
    326c:	69 2d       	mov	r22, r9
    326e:	70 e0       	ldi	r23, 0x00	; 0
    3270:	42 e0       	ldi	r20, 0x02	; 2
    3272:	50 e0       	ldi	r21, 0x00	; 0
    3274:	a4 0e       	add	r10, r20
    3276:	b5 1e       	adc	r11, r21
    3278:	c6 01       	movw	r24, r12
    327a:	0e 94 78 1a 	call	0x34f0	; 0x34f0 <strnlen>
    327e:	8c 01       	movw	r16, r24
    3280:	5f e7       	ldi	r21, 0x7F	; 127
    3282:	f5 22       	and	r15, r21
    3284:	14 c0       	rjmp	.+40     	; 0x32ae <vfprintf+0x18e>
    3286:	f5 01       	movw	r30, r10
    3288:	c0 80       	ld	r12, Z
    328a:	d1 80       	ldd	r13, Z+1	; 0x01
    328c:	f6 fc       	sbrc	r15, 6
    328e:	03 c0       	rjmp	.+6      	; 0x3296 <vfprintf+0x176>
    3290:	6f ef       	ldi	r22, 0xFF	; 255
    3292:	7f ef       	ldi	r23, 0xFF	; 255
    3294:	02 c0       	rjmp	.+4      	; 0x329a <vfprintf+0x17a>
    3296:	69 2d       	mov	r22, r9
    3298:	70 e0       	ldi	r23, 0x00	; 0
    329a:	42 e0       	ldi	r20, 0x02	; 2
    329c:	50 e0       	ldi	r21, 0x00	; 0
    329e:	a4 0e       	add	r10, r20
    32a0:	b5 1e       	adc	r11, r21
    32a2:	c6 01       	movw	r24, r12
    32a4:	0e 94 6d 1a 	call	0x34da	; 0x34da <strnlen_P>
    32a8:	8c 01       	movw	r16, r24
    32aa:	50 e8       	ldi	r21, 0x80	; 128
    32ac:	f5 2a       	or	r15, r21
    32ae:	f3 fe       	sbrs	r15, 3
    32b0:	07 c0       	rjmp	.+14     	; 0x32c0 <vfprintf+0x1a0>
    32b2:	1a c0       	rjmp	.+52     	; 0x32e8 <vfprintf+0x1c8>
    32b4:	80 e2       	ldi	r24, 0x20	; 32
    32b6:	90 e0       	ldi	r25, 0x00	; 0
    32b8:	b3 01       	movw	r22, r6
    32ba:	0e 94 83 1a 	call	0x3506	; 0x3506 <fputc>
    32be:	ea 94       	dec	r14
    32c0:	8e 2d       	mov	r24, r14
    32c2:	90 e0       	ldi	r25, 0x00	; 0
    32c4:	08 17       	cp	r16, r24
    32c6:	19 07       	cpc	r17, r25
    32c8:	a8 f3       	brcs	.-22     	; 0x32b4 <vfprintf+0x194>
    32ca:	0e c0       	rjmp	.+28     	; 0x32e8 <vfprintf+0x1c8>
    32cc:	f6 01       	movw	r30, r12
    32ce:	f7 fc       	sbrc	r15, 7
    32d0:	85 91       	lpm	r24, Z+
    32d2:	f7 fe       	sbrs	r15, 7
    32d4:	81 91       	ld	r24, Z+
    32d6:	6f 01       	movw	r12, r30
    32d8:	90 e0       	ldi	r25, 0x00	; 0
    32da:	b3 01       	movw	r22, r6
    32dc:	0e 94 83 1a 	call	0x3506	; 0x3506 <fputc>
    32e0:	e1 10       	cpse	r14, r1
    32e2:	ea 94       	dec	r14
    32e4:	01 50       	subi	r16, 0x01	; 1
    32e6:	10 40       	sbci	r17, 0x00	; 0
    32e8:	01 15       	cp	r16, r1
    32ea:	11 05       	cpc	r17, r1
    32ec:	79 f7       	brne	.-34     	; 0x32cc <vfprintf+0x1ac>
    32ee:	ea c0       	rjmp	.+468    	; 0x34c4 <vfprintf+0x3a4>
    32f0:	94 36       	cpi	r25, 0x64	; 100
    32f2:	11 f0       	breq	.+4      	; 0x32f8 <vfprintf+0x1d8>
    32f4:	99 36       	cpi	r25, 0x69	; 105
    32f6:	69 f5       	brne	.+90     	; 0x3352 <vfprintf+0x232>
    32f8:	f7 fe       	sbrs	r15, 7
    32fa:	08 c0       	rjmp	.+16     	; 0x330c <vfprintf+0x1ec>
    32fc:	f5 01       	movw	r30, r10
    32fe:	20 81       	ld	r18, Z
    3300:	31 81       	ldd	r19, Z+1	; 0x01
    3302:	42 81       	ldd	r20, Z+2	; 0x02
    3304:	53 81       	ldd	r21, Z+3	; 0x03
    3306:	84 e0       	ldi	r24, 0x04	; 4
    3308:	90 e0       	ldi	r25, 0x00	; 0
    330a:	0a c0       	rjmp	.+20     	; 0x3320 <vfprintf+0x200>
    330c:	f5 01       	movw	r30, r10
    330e:	80 81       	ld	r24, Z
    3310:	91 81       	ldd	r25, Z+1	; 0x01
    3312:	9c 01       	movw	r18, r24
    3314:	44 27       	eor	r20, r20
    3316:	37 fd       	sbrc	r19, 7
    3318:	40 95       	com	r20
    331a:	54 2f       	mov	r21, r20
    331c:	82 e0       	ldi	r24, 0x02	; 2
    331e:	90 e0       	ldi	r25, 0x00	; 0
    3320:	a8 0e       	add	r10, r24
    3322:	b9 1e       	adc	r11, r25
    3324:	9f e6       	ldi	r25, 0x6F	; 111
    3326:	f9 22       	and	r15, r25
    3328:	57 ff       	sbrs	r21, 7
    332a:	09 c0       	rjmp	.+18     	; 0x333e <vfprintf+0x21e>
    332c:	50 95       	com	r21
    332e:	40 95       	com	r20
    3330:	30 95       	com	r19
    3332:	21 95       	neg	r18
    3334:	3f 4f       	sbci	r19, 0xFF	; 255
    3336:	4f 4f       	sbci	r20, 0xFF	; 255
    3338:	5f 4f       	sbci	r21, 0xFF	; 255
    333a:	e0 e8       	ldi	r30, 0x80	; 128
    333c:	fe 2a       	or	r15, r30
    333e:	ca 01       	movw	r24, r20
    3340:	b9 01       	movw	r22, r18
    3342:	a1 01       	movw	r20, r2
    3344:	2a e0       	ldi	r18, 0x0A	; 10
    3346:	30 e0       	ldi	r19, 0x00	; 0
    3348:	0e 94 af 1a 	call	0x355e	; 0x355e <__ultoa_invert>
    334c:	d8 2e       	mov	r13, r24
    334e:	d2 18       	sub	r13, r2
    3350:	40 c0       	rjmp	.+128    	; 0x33d2 <vfprintf+0x2b2>
    3352:	95 37       	cpi	r25, 0x75	; 117
    3354:	29 f4       	brne	.+10     	; 0x3360 <vfprintf+0x240>
    3356:	1f 2d       	mov	r17, r15
    3358:	1f 7e       	andi	r17, 0xEF	; 239
    335a:	2a e0       	ldi	r18, 0x0A	; 10
    335c:	30 e0       	ldi	r19, 0x00	; 0
    335e:	1d c0       	rjmp	.+58     	; 0x339a <vfprintf+0x27a>
    3360:	1f 2d       	mov	r17, r15
    3362:	19 7f       	andi	r17, 0xF9	; 249
    3364:	9f 36       	cpi	r25, 0x6F	; 111
    3366:	61 f0       	breq	.+24     	; 0x3380 <vfprintf+0x260>
    3368:	90 37       	cpi	r25, 0x70	; 112
    336a:	20 f4       	brcc	.+8      	; 0x3374 <vfprintf+0x254>
    336c:	98 35       	cpi	r25, 0x58	; 88
    336e:	09 f0       	breq	.+2      	; 0x3372 <vfprintf+0x252>
    3370:	ac c0       	rjmp	.+344    	; 0x34ca <vfprintf+0x3aa>
    3372:	0f c0       	rjmp	.+30     	; 0x3392 <vfprintf+0x272>
    3374:	90 37       	cpi	r25, 0x70	; 112
    3376:	39 f0       	breq	.+14     	; 0x3386 <vfprintf+0x266>
    3378:	98 37       	cpi	r25, 0x78	; 120
    337a:	09 f0       	breq	.+2      	; 0x337e <vfprintf+0x25e>
    337c:	a6 c0       	rjmp	.+332    	; 0x34ca <vfprintf+0x3aa>
    337e:	04 c0       	rjmp	.+8      	; 0x3388 <vfprintf+0x268>
    3380:	28 e0       	ldi	r18, 0x08	; 8
    3382:	30 e0       	ldi	r19, 0x00	; 0
    3384:	0a c0       	rjmp	.+20     	; 0x339a <vfprintf+0x27a>
    3386:	10 61       	ori	r17, 0x10	; 16
    3388:	14 fd       	sbrc	r17, 4
    338a:	14 60       	ori	r17, 0x04	; 4
    338c:	20 e1       	ldi	r18, 0x10	; 16
    338e:	30 e0       	ldi	r19, 0x00	; 0
    3390:	04 c0       	rjmp	.+8      	; 0x339a <vfprintf+0x27a>
    3392:	14 fd       	sbrc	r17, 4
    3394:	16 60       	ori	r17, 0x06	; 6
    3396:	20 e1       	ldi	r18, 0x10	; 16
    3398:	32 e0       	ldi	r19, 0x02	; 2
    339a:	17 ff       	sbrs	r17, 7
    339c:	08 c0       	rjmp	.+16     	; 0x33ae <vfprintf+0x28e>
    339e:	f5 01       	movw	r30, r10
    33a0:	60 81       	ld	r22, Z
    33a2:	71 81       	ldd	r23, Z+1	; 0x01
    33a4:	82 81       	ldd	r24, Z+2	; 0x02
    33a6:	93 81       	ldd	r25, Z+3	; 0x03
    33a8:	44 e0       	ldi	r20, 0x04	; 4
    33aa:	50 e0       	ldi	r21, 0x00	; 0
    33ac:	08 c0       	rjmp	.+16     	; 0x33be <vfprintf+0x29e>
    33ae:	f5 01       	movw	r30, r10
    33b0:	80 81       	ld	r24, Z
    33b2:	91 81       	ldd	r25, Z+1	; 0x01
    33b4:	bc 01       	movw	r22, r24
    33b6:	80 e0       	ldi	r24, 0x00	; 0
    33b8:	90 e0       	ldi	r25, 0x00	; 0
    33ba:	42 e0       	ldi	r20, 0x02	; 2
    33bc:	50 e0       	ldi	r21, 0x00	; 0
    33be:	a4 0e       	add	r10, r20
    33c0:	b5 1e       	adc	r11, r21
    33c2:	a1 01       	movw	r20, r2
    33c4:	0e 94 af 1a 	call	0x355e	; 0x355e <__ultoa_invert>
    33c8:	d8 2e       	mov	r13, r24
    33ca:	d2 18       	sub	r13, r2
    33cc:	8f e7       	ldi	r24, 0x7F	; 127
    33ce:	f8 2e       	mov	r15, r24
    33d0:	f1 22       	and	r15, r17
    33d2:	f6 fe       	sbrs	r15, 6
    33d4:	0b c0       	rjmp	.+22     	; 0x33ec <vfprintf+0x2cc>
    33d6:	5e ef       	ldi	r21, 0xFE	; 254
    33d8:	f5 22       	and	r15, r21
    33da:	d9 14       	cp	r13, r9
    33dc:	38 f4       	brcc	.+14     	; 0x33ec <vfprintf+0x2cc>
    33de:	f4 fe       	sbrs	r15, 4
    33e0:	07 c0       	rjmp	.+14     	; 0x33f0 <vfprintf+0x2d0>
    33e2:	f2 fc       	sbrc	r15, 2
    33e4:	05 c0       	rjmp	.+10     	; 0x33f0 <vfprintf+0x2d0>
    33e6:	8f ee       	ldi	r24, 0xEF	; 239
    33e8:	f8 22       	and	r15, r24
    33ea:	02 c0       	rjmp	.+4      	; 0x33f0 <vfprintf+0x2d0>
    33ec:	1d 2d       	mov	r17, r13
    33ee:	01 c0       	rjmp	.+2      	; 0x33f2 <vfprintf+0x2d2>
    33f0:	19 2d       	mov	r17, r9
    33f2:	f4 fe       	sbrs	r15, 4
    33f4:	0d c0       	rjmp	.+26     	; 0x3410 <vfprintf+0x2f0>
    33f6:	fe 01       	movw	r30, r28
    33f8:	ed 0d       	add	r30, r13
    33fa:	f1 1d       	adc	r31, r1
    33fc:	80 81       	ld	r24, Z
    33fe:	80 33       	cpi	r24, 0x30	; 48
    3400:	19 f4       	brne	.+6      	; 0x3408 <vfprintf+0x2e8>
    3402:	99 ee       	ldi	r25, 0xE9	; 233
    3404:	f9 22       	and	r15, r25
    3406:	08 c0       	rjmp	.+16     	; 0x3418 <vfprintf+0x2f8>
    3408:	1f 5f       	subi	r17, 0xFF	; 255
    340a:	f2 fe       	sbrs	r15, 2
    340c:	05 c0       	rjmp	.+10     	; 0x3418 <vfprintf+0x2f8>
    340e:	03 c0       	rjmp	.+6      	; 0x3416 <vfprintf+0x2f6>
    3410:	8f 2d       	mov	r24, r15
    3412:	86 78       	andi	r24, 0x86	; 134
    3414:	09 f0       	breq	.+2      	; 0x3418 <vfprintf+0x2f8>
    3416:	1f 5f       	subi	r17, 0xFF	; 255
    3418:	0f 2d       	mov	r16, r15
    341a:	f3 fc       	sbrc	r15, 3
    341c:	14 c0       	rjmp	.+40     	; 0x3446 <vfprintf+0x326>
    341e:	f0 fe       	sbrs	r15, 0
    3420:	0f c0       	rjmp	.+30     	; 0x3440 <vfprintf+0x320>
    3422:	1e 15       	cp	r17, r14
    3424:	10 f0       	brcs	.+4      	; 0x342a <vfprintf+0x30a>
    3426:	9d 2c       	mov	r9, r13
    3428:	0b c0       	rjmp	.+22     	; 0x3440 <vfprintf+0x320>
    342a:	9d 2c       	mov	r9, r13
    342c:	9e 0c       	add	r9, r14
    342e:	91 1a       	sub	r9, r17
    3430:	1e 2d       	mov	r17, r14
    3432:	06 c0       	rjmp	.+12     	; 0x3440 <vfprintf+0x320>
    3434:	80 e2       	ldi	r24, 0x20	; 32
    3436:	90 e0       	ldi	r25, 0x00	; 0
    3438:	b3 01       	movw	r22, r6
    343a:	0e 94 83 1a 	call	0x3506	; 0x3506 <fputc>
    343e:	1f 5f       	subi	r17, 0xFF	; 255
    3440:	1e 15       	cp	r17, r14
    3442:	c0 f3       	brcs	.-16     	; 0x3434 <vfprintf+0x314>
    3444:	04 c0       	rjmp	.+8      	; 0x344e <vfprintf+0x32e>
    3446:	1e 15       	cp	r17, r14
    3448:	10 f4       	brcc	.+4      	; 0x344e <vfprintf+0x32e>
    344a:	e1 1a       	sub	r14, r17
    344c:	01 c0       	rjmp	.+2      	; 0x3450 <vfprintf+0x330>
    344e:	ee 24       	eor	r14, r14
    3450:	04 ff       	sbrs	r16, 4
    3452:	0f c0       	rjmp	.+30     	; 0x3472 <vfprintf+0x352>
    3454:	80 e3       	ldi	r24, 0x30	; 48
    3456:	90 e0       	ldi	r25, 0x00	; 0
    3458:	b3 01       	movw	r22, r6
    345a:	0e 94 83 1a 	call	0x3506	; 0x3506 <fputc>
    345e:	02 ff       	sbrs	r16, 2
    3460:	1d c0       	rjmp	.+58     	; 0x349c <vfprintf+0x37c>
    3462:	01 fd       	sbrc	r16, 1
    3464:	03 c0       	rjmp	.+6      	; 0x346c <vfprintf+0x34c>
    3466:	88 e7       	ldi	r24, 0x78	; 120
    3468:	90 e0       	ldi	r25, 0x00	; 0
    346a:	0e c0       	rjmp	.+28     	; 0x3488 <vfprintf+0x368>
    346c:	88 e5       	ldi	r24, 0x58	; 88
    346e:	90 e0       	ldi	r25, 0x00	; 0
    3470:	0b c0       	rjmp	.+22     	; 0x3488 <vfprintf+0x368>
    3472:	80 2f       	mov	r24, r16
    3474:	86 78       	andi	r24, 0x86	; 134
    3476:	91 f0       	breq	.+36     	; 0x349c <vfprintf+0x37c>
    3478:	01 ff       	sbrs	r16, 1
    347a:	02 c0       	rjmp	.+4      	; 0x3480 <vfprintf+0x360>
    347c:	8b e2       	ldi	r24, 0x2B	; 43
    347e:	01 c0       	rjmp	.+2      	; 0x3482 <vfprintf+0x362>
    3480:	80 e2       	ldi	r24, 0x20	; 32
    3482:	f7 fc       	sbrc	r15, 7
    3484:	8d e2       	ldi	r24, 0x2D	; 45
    3486:	90 e0       	ldi	r25, 0x00	; 0
    3488:	b3 01       	movw	r22, r6
    348a:	0e 94 83 1a 	call	0x3506	; 0x3506 <fputc>
    348e:	06 c0       	rjmp	.+12     	; 0x349c <vfprintf+0x37c>
    3490:	80 e3       	ldi	r24, 0x30	; 48
    3492:	90 e0       	ldi	r25, 0x00	; 0
    3494:	b3 01       	movw	r22, r6
    3496:	0e 94 83 1a 	call	0x3506	; 0x3506 <fputc>
    349a:	9a 94       	dec	r9
    349c:	d9 14       	cp	r13, r9
    349e:	c0 f3       	brcs	.-16     	; 0x3490 <vfprintf+0x370>
    34a0:	da 94       	dec	r13
    34a2:	f1 01       	movw	r30, r2
    34a4:	ed 0d       	add	r30, r13
    34a6:	f1 1d       	adc	r31, r1
    34a8:	80 81       	ld	r24, Z
    34aa:	90 e0       	ldi	r25, 0x00	; 0
    34ac:	b3 01       	movw	r22, r6
    34ae:	0e 94 83 1a 	call	0x3506	; 0x3506 <fputc>
    34b2:	dd 20       	and	r13, r13
    34b4:	a9 f7       	brne	.-22     	; 0x34a0 <vfprintf+0x380>
    34b6:	06 c0       	rjmp	.+12     	; 0x34c4 <vfprintf+0x3a4>
    34b8:	80 e2       	ldi	r24, 0x20	; 32
    34ba:	90 e0       	ldi	r25, 0x00	; 0
    34bc:	b3 01       	movw	r22, r6
    34be:	0e 94 83 1a 	call	0x3506	; 0x3506 <fputc>
    34c2:	ea 94       	dec	r14
    34c4:	ee 20       	and	r14, r14
    34c6:	c1 f7       	brne	.-16     	; 0x34b8 <vfprintf+0x398>
    34c8:	43 ce       	rjmp	.-890    	; 0x3150 <vfprintf+0x30>
    34ca:	f3 01       	movw	r30, r6
    34cc:	66 81       	ldd	r22, Z+6	; 0x06
    34ce:	77 81       	ldd	r23, Z+7	; 0x07
    34d0:	cb 01       	movw	r24, r22
    34d2:	2b 96       	adiw	r28, 0x0b	; 11
    34d4:	e2 e1       	ldi	r30, 0x12	; 18
    34d6:	0c 94 51 18 	jmp	0x30a2	; 0x30a2 <__epilogue_restores__>

000034da <strnlen_P>:
    34da:	fc 01       	movw	r30, r24
    34dc:	05 90       	lpm	r0, Z+
    34de:	61 50       	subi	r22, 0x01	; 1
    34e0:	70 40       	sbci	r23, 0x00	; 0
    34e2:	01 10       	cpse	r0, r1
    34e4:	d8 f7       	brcc	.-10     	; 0x34dc <strnlen_P+0x2>
    34e6:	80 95       	com	r24
    34e8:	90 95       	com	r25
    34ea:	8e 0f       	add	r24, r30
    34ec:	9f 1f       	adc	r25, r31
    34ee:	08 95       	ret

000034f0 <strnlen>:
    34f0:	fc 01       	movw	r30, r24
    34f2:	61 50       	subi	r22, 0x01	; 1
    34f4:	70 40       	sbci	r23, 0x00	; 0
    34f6:	01 90       	ld	r0, Z+
    34f8:	01 10       	cpse	r0, r1
    34fa:	d8 f7       	brcc	.-10     	; 0x34f2 <strnlen+0x2>
    34fc:	80 95       	com	r24
    34fe:	90 95       	com	r25
    3500:	8e 0f       	add	r24, r30
    3502:	9f 1f       	adc	r25, r31
    3504:	08 95       	ret

00003506 <fputc>:
    3506:	0f 93       	push	r16
    3508:	1f 93       	push	r17
    350a:	cf 93       	push	r28
    350c:	df 93       	push	r29
    350e:	8c 01       	movw	r16, r24
    3510:	eb 01       	movw	r28, r22
    3512:	8b 81       	ldd	r24, Y+3	; 0x03
    3514:	81 ff       	sbrs	r24, 1
    3516:	1b c0       	rjmp	.+54     	; 0x354e <fputc+0x48>
    3518:	82 ff       	sbrs	r24, 2
    351a:	0d c0       	rjmp	.+26     	; 0x3536 <fputc+0x30>
    351c:	2e 81       	ldd	r18, Y+6	; 0x06
    351e:	3f 81       	ldd	r19, Y+7	; 0x07
    3520:	8c 81       	ldd	r24, Y+4	; 0x04
    3522:	9d 81       	ldd	r25, Y+5	; 0x05
    3524:	28 17       	cp	r18, r24
    3526:	39 07       	cpc	r19, r25
    3528:	64 f4       	brge	.+24     	; 0x3542 <fputc+0x3c>
    352a:	e8 81       	ld	r30, Y
    352c:	f9 81       	ldd	r31, Y+1	; 0x01
    352e:	01 93       	st	Z+, r16
    3530:	f9 83       	std	Y+1, r31	; 0x01
    3532:	e8 83       	st	Y, r30
    3534:	06 c0       	rjmp	.+12     	; 0x3542 <fputc+0x3c>
    3536:	e8 85       	ldd	r30, Y+8	; 0x08
    3538:	f9 85       	ldd	r31, Y+9	; 0x09
    353a:	80 2f       	mov	r24, r16
    353c:	09 95       	icall
    353e:	89 2b       	or	r24, r25
    3540:	31 f4       	brne	.+12     	; 0x354e <fputc+0x48>
    3542:	8e 81       	ldd	r24, Y+6	; 0x06
    3544:	9f 81       	ldd	r25, Y+7	; 0x07
    3546:	01 96       	adiw	r24, 0x01	; 1
    3548:	9f 83       	std	Y+7, r25	; 0x07
    354a:	8e 83       	std	Y+6, r24	; 0x06
    354c:	02 c0       	rjmp	.+4      	; 0x3552 <fputc+0x4c>
    354e:	0f ef       	ldi	r16, 0xFF	; 255
    3550:	1f ef       	ldi	r17, 0xFF	; 255
    3552:	c8 01       	movw	r24, r16
    3554:	df 91       	pop	r29
    3556:	cf 91       	pop	r28
    3558:	1f 91       	pop	r17
    355a:	0f 91       	pop	r16
    355c:	08 95       	ret

0000355e <__ultoa_invert>:
    355e:	fa 01       	movw	r30, r20
    3560:	aa 27       	eor	r26, r26
    3562:	28 30       	cpi	r18, 0x08	; 8
    3564:	51 f1       	breq	.+84     	; 0x35ba <__ultoa_invert+0x5c>
    3566:	20 31       	cpi	r18, 0x10	; 16
    3568:	81 f1       	breq	.+96     	; 0x35ca <__ultoa_invert+0x6c>
    356a:	e8 94       	clt
    356c:	6f 93       	push	r22
    356e:	6e 7f       	andi	r22, 0xFE	; 254
    3570:	6e 5f       	subi	r22, 0xFE	; 254
    3572:	7f 4f       	sbci	r23, 0xFF	; 255
    3574:	8f 4f       	sbci	r24, 0xFF	; 255
    3576:	9f 4f       	sbci	r25, 0xFF	; 255
    3578:	af 4f       	sbci	r26, 0xFF	; 255
    357a:	b1 e0       	ldi	r27, 0x01	; 1
    357c:	3e d0       	rcall	.+124    	; 0x35fa <__ultoa_invert+0x9c>
    357e:	b4 e0       	ldi	r27, 0x04	; 4
    3580:	3c d0       	rcall	.+120    	; 0x35fa <__ultoa_invert+0x9c>
    3582:	67 0f       	add	r22, r23
    3584:	78 1f       	adc	r23, r24
    3586:	89 1f       	adc	r24, r25
    3588:	9a 1f       	adc	r25, r26
    358a:	a1 1d       	adc	r26, r1
    358c:	68 0f       	add	r22, r24
    358e:	79 1f       	adc	r23, r25
    3590:	8a 1f       	adc	r24, r26
    3592:	91 1d       	adc	r25, r1
    3594:	a1 1d       	adc	r26, r1
    3596:	6a 0f       	add	r22, r26
    3598:	71 1d       	adc	r23, r1
    359a:	81 1d       	adc	r24, r1
    359c:	91 1d       	adc	r25, r1
    359e:	a1 1d       	adc	r26, r1
    35a0:	20 d0       	rcall	.+64     	; 0x35e2 <__ultoa_invert+0x84>
    35a2:	09 f4       	brne	.+2      	; 0x35a6 <__ultoa_invert+0x48>
    35a4:	68 94       	set
    35a6:	3f 91       	pop	r19
    35a8:	2a e0       	ldi	r18, 0x0A	; 10
    35aa:	26 9f       	mul	r18, r22
    35ac:	11 24       	eor	r1, r1
    35ae:	30 19       	sub	r19, r0
    35b0:	30 5d       	subi	r19, 0xD0	; 208
    35b2:	31 93       	st	Z+, r19
    35b4:	de f6       	brtc	.-74     	; 0x356c <__ultoa_invert+0xe>
    35b6:	cf 01       	movw	r24, r30
    35b8:	08 95       	ret
    35ba:	46 2f       	mov	r20, r22
    35bc:	47 70       	andi	r20, 0x07	; 7
    35be:	40 5d       	subi	r20, 0xD0	; 208
    35c0:	41 93       	st	Z+, r20
    35c2:	b3 e0       	ldi	r27, 0x03	; 3
    35c4:	0f d0       	rcall	.+30     	; 0x35e4 <__ultoa_invert+0x86>
    35c6:	c9 f7       	brne	.-14     	; 0x35ba <__ultoa_invert+0x5c>
    35c8:	f6 cf       	rjmp	.-20     	; 0x35b6 <__ultoa_invert+0x58>
    35ca:	46 2f       	mov	r20, r22
    35cc:	4f 70       	andi	r20, 0x0F	; 15
    35ce:	40 5d       	subi	r20, 0xD0	; 208
    35d0:	4a 33       	cpi	r20, 0x3A	; 58
    35d2:	18 f0       	brcs	.+6      	; 0x35da <__ultoa_invert+0x7c>
    35d4:	49 5d       	subi	r20, 0xD9	; 217
    35d6:	31 fd       	sbrc	r19, 1
    35d8:	40 52       	subi	r20, 0x20	; 32
    35da:	41 93       	st	Z+, r20
    35dc:	02 d0       	rcall	.+4      	; 0x35e2 <__ultoa_invert+0x84>
    35de:	a9 f7       	brne	.-22     	; 0x35ca <__ultoa_invert+0x6c>
    35e0:	ea cf       	rjmp	.-44     	; 0x35b6 <__ultoa_invert+0x58>
    35e2:	b4 e0       	ldi	r27, 0x04	; 4
    35e4:	a6 95       	lsr	r26
    35e6:	97 95       	ror	r25
    35e8:	87 95       	ror	r24
    35ea:	77 95       	ror	r23
    35ec:	67 95       	ror	r22
    35ee:	ba 95       	dec	r27
    35f0:	c9 f7       	brne	.-14     	; 0x35e4 <__ultoa_invert+0x86>
    35f2:	00 97       	sbiw	r24, 0x00	; 0
    35f4:	61 05       	cpc	r22, r1
    35f6:	71 05       	cpc	r23, r1
    35f8:	08 95       	ret
    35fa:	9b 01       	movw	r18, r22
    35fc:	ac 01       	movw	r20, r24
    35fe:	0a 2e       	mov	r0, r26
    3600:	06 94       	lsr	r0
    3602:	57 95       	ror	r21
    3604:	47 95       	ror	r20
    3606:	37 95       	ror	r19
    3608:	27 95       	ror	r18
    360a:	ba 95       	dec	r27
    360c:	c9 f7       	brne	.-14     	; 0x3600 <__ultoa_invert+0xa2>
    360e:	62 0f       	add	r22, r18
    3610:	73 1f       	adc	r23, r19
    3612:	84 1f       	adc	r24, r20
    3614:	95 1f       	adc	r25, r21
    3616:	a0 1d       	adc	r26, r0
    3618:	08 95       	ret

0000361a <_exit>:
    361a:	f8 94       	cli

0000361c <__stop_program>:
    361c:	ff cf       	rjmp	.-2      	; 0x361c <__stop_program>
