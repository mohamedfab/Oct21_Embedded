
Oct21_Amit_Interfacing.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003262  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000012a  00800060  00003262  000032d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002f64  00000000  00000000  00003400  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00001a23  00000000  00000000  00006364  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000001a0  00000000  00000000  00007d87  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000001f2  00000000  00000000  00007f27  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000240b  00000000  00000000  00008119  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001386  00000000  00000000  0000a524  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011d6  00000000  00000000  0000b8aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c0  00000000  00000000  0000ca80  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002f6  00000000  00000000  0000cc40  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000096e  00000000  00000000  0000cf36  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000d8a4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e6       	ldi	r30, 0x62	; 98
      68:	f2 e3       	ldi	r31, 0x32	; 50
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 38       	cpi	r26, 0x8A	; 138
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 0f 07 	call	0xe1e	; 0xe1e <main>
      7a:	0c 94 2f 19 	jmp	0x325e	; 0x325e <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 57 16 	jmp	0x2cae	; 0x2cae <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a1 e7       	ldi	r26, 0x71	; 113
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 73 16 	jmp	0x2ce6	; 0x2ce6 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 63 16 	jmp	0x2cc6	; 0x2cc6 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 7f 16 	jmp	0x2cfe	; 0x2cfe <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 63 16 	jmp	0x2cc6	; 0x2cc6 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 7f 16 	jmp	0x2cfe	; 0x2cfe <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 57 16 	jmp	0x2cae	; 0x2cae <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	81 e7       	ldi	r24, 0x71	; 113
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 73 16 	jmp	0x2ce6	; 0x2ce6 <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 5f 16 	jmp	0x2cbe	; 0x2cbe <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	61 e7       	ldi	r22, 0x71	; 113
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 7b 16 	jmp	0x2cf6	; 0x2cf6 <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 63 16 	jmp	0x2cc6	; 0x2cc6 <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 7f 16 	jmp	0x2cfe	; 0x2cfe <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 63 16 	jmp	0x2cc6	; 0x2cc6 <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 7f 16 	jmp	0x2cfe	; 0x2cfe <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 63 16 	jmp	0x2cc6	; 0x2cc6 <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 7f 16 	jmp	0x2cfe	; 0x2cfe <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 67 16 	jmp	0x2cce	; 0x2cce <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 83 16 	jmp	0x2d06	; 0x2d06 <__epilogue_restores__+0x20>

00000942 <__floatunsisf>:
     942:	a8 e0       	ldi	r26, 0x08	; 8
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e7 ea       	ldi	r30, 0xA7	; 167
     948:	f4 e0       	ldi	r31, 0x04	; 4
     94a:	0c 94 5f 16 	jmp	0x2cbe	; 0x2cbe <__prologue_saves__+0x10>
     94e:	7b 01       	movw	r14, r22
     950:	8c 01       	movw	r16, r24
     952:	61 15       	cp	r22, r1
     954:	71 05       	cpc	r23, r1
     956:	81 05       	cpc	r24, r1
     958:	91 05       	cpc	r25, r1
     95a:	19 f4       	brne	.+6      	; 0x962 <__floatunsisf+0x20>
     95c:	82 e0       	ldi	r24, 0x02	; 2
     95e:	89 83       	std	Y+1, r24	; 0x01
     960:	60 c0       	rjmp	.+192    	; 0xa22 <__floatunsisf+0xe0>
     962:	83 e0       	ldi	r24, 0x03	; 3
     964:	89 83       	std	Y+1, r24	; 0x01
     966:	8e e1       	ldi	r24, 0x1E	; 30
     968:	c8 2e       	mov	r12, r24
     96a:	d1 2c       	mov	r13, r1
     96c:	dc 82       	std	Y+4, r13	; 0x04
     96e:	cb 82       	std	Y+3, r12	; 0x03
     970:	ed 82       	std	Y+5, r14	; 0x05
     972:	fe 82       	std	Y+6, r15	; 0x06
     974:	0f 83       	std	Y+7, r16	; 0x07
     976:	18 87       	std	Y+8, r17	; 0x08
     978:	c8 01       	movw	r24, r16
     97a:	b7 01       	movw	r22, r14
     97c:	0e 94 1a 05 	call	0xa34	; 0xa34 <__clzsi2>
     980:	fc 01       	movw	r30, r24
     982:	31 97       	sbiw	r30, 0x01	; 1
     984:	f7 ff       	sbrs	r31, 7
     986:	3b c0       	rjmp	.+118    	; 0x9fe <__floatunsisf+0xbc>
     988:	22 27       	eor	r18, r18
     98a:	33 27       	eor	r19, r19
     98c:	2e 1b       	sub	r18, r30
     98e:	3f 0b       	sbc	r19, r31
     990:	57 01       	movw	r10, r14
     992:	68 01       	movw	r12, r16
     994:	02 2e       	mov	r0, r18
     996:	04 c0       	rjmp	.+8      	; 0x9a0 <__floatunsisf+0x5e>
     998:	d6 94       	lsr	r13
     99a:	c7 94       	ror	r12
     99c:	b7 94       	ror	r11
     99e:	a7 94       	ror	r10
     9a0:	0a 94       	dec	r0
     9a2:	d2 f7       	brpl	.-12     	; 0x998 <__floatunsisf+0x56>
     9a4:	40 e0       	ldi	r20, 0x00	; 0
     9a6:	50 e0       	ldi	r21, 0x00	; 0
     9a8:	60 e0       	ldi	r22, 0x00	; 0
     9aa:	70 e0       	ldi	r23, 0x00	; 0
     9ac:	81 e0       	ldi	r24, 0x01	; 1
     9ae:	90 e0       	ldi	r25, 0x00	; 0
     9b0:	a0 e0       	ldi	r26, 0x00	; 0
     9b2:	b0 e0       	ldi	r27, 0x00	; 0
     9b4:	04 c0       	rjmp	.+8      	; 0x9be <__floatunsisf+0x7c>
     9b6:	88 0f       	add	r24, r24
     9b8:	99 1f       	adc	r25, r25
     9ba:	aa 1f       	adc	r26, r26
     9bc:	bb 1f       	adc	r27, r27
     9be:	2a 95       	dec	r18
     9c0:	d2 f7       	brpl	.-12     	; 0x9b6 <__floatunsisf+0x74>
     9c2:	01 97       	sbiw	r24, 0x01	; 1
     9c4:	a1 09       	sbc	r26, r1
     9c6:	b1 09       	sbc	r27, r1
     9c8:	8e 21       	and	r24, r14
     9ca:	9f 21       	and	r25, r15
     9cc:	a0 23       	and	r26, r16
     9ce:	b1 23       	and	r27, r17
     9d0:	00 97       	sbiw	r24, 0x00	; 0
     9d2:	a1 05       	cpc	r26, r1
     9d4:	b1 05       	cpc	r27, r1
     9d6:	21 f0       	breq	.+8      	; 0x9e0 <__floatunsisf+0x9e>
     9d8:	41 e0       	ldi	r20, 0x01	; 1
     9da:	50 e0       	ldi	r21, 0x00	; 0
     9dc:	60 e0       	ldi	r22, 0x00	; 0
     9de:	70 e0       	ldi	r23, 0x00	; 0
     9e0:	4a 29       	or	r20, r10
     9e2:	5b 29       	or	r21, r11
     9e4:	6c 29       	or	r22, r12
     9e6:	7d 29       	or	r23, r13
     9e8:	4d 83       	std	Y+5, r20	; 0x05
     9ea:	5e 83       	std	Y+6, r21	; 0x06
     9ec:	6f 83       	std	Y+7, r22	; 0x07
     9ee:	78 87       	std	Y+8, r23	; 0x08
     9f0:	8e e1       	ldi	r24, 0x1E	; 30
     9f2:	90 e0       	ldi	r25, 0x00	; 0
     9f4:	8e 1b       	sub	r24, r30
     9f6:	9f 0b       	sbc	r25, r31
     9f8:	9c 83       	std	Y+4, r25	; 0x04
     9fa:	8b 83       	std	Y+3, r24	; 0x03
     9fc:	12 c0       	rjmp	.+36     	; 0xa22 <__floatunsisf+0xe0>
     9fe:	30 97       	sbiw	r30, 0x00	; 0
     a00:	81 f0       	breq	.+32     	; 0xa22 <__floatunsisf+0xe0>
     a02:	0e 2e       	mov	r0, r30
     a04:	04 c0       	rjmp	.+8      	; 0xa0e <__floatunsisf+0xcc>
     a06:	ee 0c       	add	r14, r14
     a08:	ff 1c       	adc	r15, r15
     a0a:	00 1f       	adc	r16, r16
     a0c:	11 1f       	adc	r17, r17
     a0e:	0a 94       	dec	r0
     a10:	d2 f7       	brpl	.-12     	; 0xa06 <__floatunsisf+0xc4>
     a12:	ed 82       	std	Y+5, r14	; 0x05
     a14:	fe 82       	std	Y+6, r15	; 0x06
     a16:	0f 83       	std	Y+7, r16	; 0x07
     a18:	18 87       	std	Y+8, r17	; 0x08
     a1a:	ce 1a       	sub	r12, r30
     a1c:	df 0a       	sbc	r13, r31
     a1e:	dc 82       	std	Y+4, r13	; 0x04
     a20:	cb 82       	std	Y+3, r12	; 0x03
     a22:	1a 82       	std	Y+2, r1	; 0x02
     a24:	ce 01       	movw	r24, r28
     a26:	01 96       	adiw	r24, 0x01	; 1
     a28:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     a2c:	28 96       	adiw	r28, 0x08	; 8
     a2e:	ea e0       	ldi	r30, 0x0A	; 10
     a30:	0c 94 7b 16 	jmp	0x2cf6	; 0x2cf6 <__epilogue_restores__+0x10>

00000a34 <__clzsi2>:
     a34:	ef 92       	push	r14
     a36:	ff 92       	push	r15
     a38:	0f 93       	push	r16
     a3a:	1f 93       	push	r17
     a3c:	7b 01       	movw	r14, r22
     a3e:	8c 01       	movw	r16, r24
     a40:	80 e0       	ldi	r24, 0x00	; 0
     a42:	e8 16       	cp	r14, r24
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	f8 06       	cpc	r15, r24
     a48:	81 e0       	ldi	r24, 0x01	; 1
     a4a:	08 07       	cpc	r16, r24
     a4c:	80 e0       	ldi	r24, 0x00	; 0
     a4e:	18 07       	cpc	r17, r24
     a50:	88 f4       	brcc	.+34     	; 0xa74 <__clzsi2+0x40>
     a52:	8f ef       	ldi	r24, 0xFF	; 255
     a54:	e8 16       	cp	r14, r24
     a56:	f1 04       	cpc	r15, r1
     a58:	01 05       	cpc	r16, r1
     a5a:	11 05       	cpc	r17, r1
     a5c:	31 f0       	breq	.+12     	; 0xa6a <__clzsi2+0x36>
     a5e:	28 f0       	brcs	.+10     	; 0xa6a <__clzsi2+0x36>
     a60:	88 e0       	ldi	r24, 0x08	; 8
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	a0 e0       	ldi	r26, 0x00	; 0
     a66:	b0 e0       	ldi	r27, 0x00	; 0
     a68:	17 c0       	rjmp	.+46     	; 0xa98 <__clzsi2+0x64>
     a6a:	80 e0       	ldi	r24, 0x00	; 0
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	a0 e0       	ldi	r26, 0x00	; 0
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	12 c0       	rjmp	.+36     	; 0xa98 <__clzsi2+0x64>
     a74:	80 e0       	ldi	r24, 0x00	; 0
     a76:	e8 16       	cp	r14, r24
     a78:	80 e0       	ldi	r24, 0x00	; 0
     a7a:	f8 06       	cpc	r15, r24
     a7c:	80 e0       	ldi	r24, 0x00	; 0
     a7e:	08 07       	cpc	r16, r24
     a80:	81 e0       	ldi	r24, 0x01	; 1
     a82:	18 07       	cpc	r17, r24
     a84:	28 f0       	brcs	.+10     	; 0xa90 <__clzsi2+0x5c>
     a86:	88 e1       	ldi	r24, 0x18	; 24
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	04 c0       	rjmp	.+8      	; 0xa98 <__clzsi2+0x64>
     a90:	80 e1       	ldi	r24, 0x10	; 16
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	a0 e0       	ldi	r26, 0x00	; 0
     a96:	b0 e0       	ldi	r27, 0x00	; 0
     a98:	20 e2       	ldi	r18, 0x20	; 32
     a9a:	30 e0       	ldi	r19, 0x00	; 0
     a9c:	40 e0       	ldi	r20, 0x00	; 0
     a9e:	50 e0       	ldi	r21, 0x00	; 0
     aa0:	28 1b       	sub	r18, r24
     aa2:	39 0b       	sbc	r19, r25
     aa4:	4a 0b       	sbc	r20, r26
     aa6:	5b 0b       	sbc	r21, r27
     aa8:	04 c0       	rjmp	.+8      	; 0xab2 <__clzsi2+0x7e>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	8a 95       	dec	r24
     ab4:	d2 f7       	brpl	.-12     	; 0xaaa <__clzsi2+0x76>
     ab6:	f7 01       	movw	r30, r14
     ab8:	e7 58       	subi	r30, 0x87	; 135
     aba:	ff 4f       	sbci	r31, 0xFF	; 255
     abc:	80 81       	ld	r24, Z
     abe:	28 1b       	sub	r18, r24
     ac0:	31 09       	sbc	r19, r1
     ac2:	41 09       	sbc	r20, r1
     ac4:	51 09       	sbc	r21, r1
     ac6:	c9 01       	movw	r24, r18
     ac8:	1f 91       	pop	r17
     aca:	0f 91       	pop	r16
     acc:	ff 90       	pop	r15
     ace:	ef 90       	pop	r14
     ad0:	08 95       	ret

00000ad2 <__pack_f>:
     ad2:	df 92       	push	r13
     ad4:	ef 92       	push	r14
     ad6:	ff 92       	push	r15
     ad8:	0f 93       	push	r16
     ada:	1f 93       	push	r17
     adc:	fc 01       	movw	r30, r24
     ade:	e4 80       	ldd	r14, Z+4	; 0x04
     ae0:	f5 80       	ldd	r15, Z+5	; 0x05
     ae2:	06 81       	ldd	r16, Z+6	; 0x06
     ae4:	17 81       	ldd	r17, Z+7	; 0x07
     ae6:	d1 80       	ldd	r13, Z+1	; 0x01
     ae8:	80 81       	ld	r24, Z
     aea:	82 30       	cpi	r24, 0x02	; 2
     aec:	48 f4       	brcc	.+18     	; 0xb00 <__pack_f+0x2e>
     aee:	80 e0       	ldi	r24, 0x00	; 0
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	a0 e1       	ldi	r26, 0x10	; 16
     af4:	b0 e0       	ldi	r27, 0x00	; 0
     af6:	e8 2a       	or	r14, r24
     af8:	f9 2a       	or	r15, r25
     afa:	0a 2b       	or	r16, r26
     afc:	1b 2b       	or	r17, r27
     afe:	a5 c0       	rjmp	.+330    	; 0xc4a <__pack_f+0x178>
     b00:	84 30       	cpi	r24, 0x04	; 4
     b02:	09 f4       	brne	.+2      	; 0xb06 <__pack_f+0x34>
     b04:	9f c0       	rjmp	.+318    	; 0xc44 <__pack_f+0x172>
     b06:	82 30       	cpi	r24, 0x02	; 2
     b08:	21 f4       	brne	.+8      	; 0xb12 <__pack_f+0x40>
     b0a:	ee 24       	eor	r14, r14
     b0c:	ff 24       	eor	r15, r15
     b0e:	87 01       	movw	r16, r14
     b10:	05 c0       	rjmp	.+10     	; 0xb1c <__pack_f+0x4a>
     b12:	e1 14       	cp	r14, r1
     b14:	f1 04       	cpc	r15, r1
     b16:	01 05       	cpc	r16, r1
     b18:	11 05       	cpc	r17, r1
     b1a:	19 f4       	brne	.+6      	; 0xb22 <__pack_f+0x50>
     b1c:	e0 e0       	ldi	r30, 0x00	; 0
     b1e:	f0 e0       	ldi	r31, 0x00	; 0
     b20:	96 c0       	rjmp	.+300    	; 0xc4e <__pack_f+0x17c>
     b22:	62 81       	ldd	r22, Z+2	; 0x02
     b24:	73 81       	ldd	r23, Z+3	; 0x03
     b26:	9f ef       	ldi	r25, 0xFF	; 255
     b28:	62 38       	cpi	r22, 0x82	; 130
     b2a:	79 07       	cpc	r23, r25
     b2c:	0c f0       	brlt	.+2      	; 0xb30 <__pack_f+0x5e>
     b2e:	5b c0       	rjmp	.+182    	; 0xbe6 <__pack_f+0x114>
     b30:	22 e8       	ldi	r18, 0x82	; 130
     b32:	3f ef       	ldi	r19, 0xFF	; 255
     b34:	26 1b       	sub	r18, r22
     b36:	37 0b       	sbc	r19, r23
     b38:	2a 31       	cpi	r18, 0x1A	; 26
     b3a:	31 05       	cpc	r19, r1
     b3c:	2c f0       	brlt	.+10     	; 0xb48 <__pack_f+0x76>
     b3e:	20 e0       	ldi	r18, 0x00	; 0
     b40:	30 e0       	ldi	r19, 0x00	; 0
     b42:	40 e0       	ldi	r20, 0x00	; 0
     b44:	50 e0       	ldi	r21, 0x00	; 0
     b46:	2a c0       	rjmp	.+84     	; 0xb9c <__pack_f+0xca>
     b48:	b8 01       	movw	r22, r16
     b4a:	a7 01       	movw	r20, r14
     b4c:	02 2e       	mov	r0, r18
     b4e:	04 c0       	rjmp	.+8      	; 0xb58 <__pack_f+0x86>
     b50:	76 95       	lsr	r23
     b52:	67 95       	ror	r22
     b54:	57 95       	ror	r21
     b56:	47 95       	ror	r20
     b58:	0a 94       	dec	r0
     b5a:	d2 f7       	brpl	.-12     	; 0xb50 <__pack_f+0x7e>
     b5c:	81 e0       	ldi	r24, 0x01	; 1
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	04 c0       	rjmp	.+8      	; 0xb6e <__pack_f+0x9c>
     b66:	88 0f       	add	r24, r24
     b68:	99 1f       	adc	r25, r25
     b6a:	aa 1f       	adc	r26, r26
     b6c:	bb 1f       	adc	r27, r27
     b6e:	2a 95       	dec	r18
     b70:	d2 f7       	brpl	.-12     	; 0xb66 <__pack_f+0x94>
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	a1 09       	sbc	r26, r1
     b76:	b1 09       	sbc	r27, r1
     b78:	8e 21       	and	r24, r14
     b7a:	9f 21       	and	r25, r15
     b7c:	a0 23       	and	r26, r16
     b7e:	b1 23       	and	r27, r17
     b80:	00 97       	sbiw	r24, 0x00	; 0
     b82:	a1 05       	cpc	r26, r1
     b84:	b1 05       	cpc	r27, r1
     b86:	21 f0       	breq	.+8      	; 0xb90 <__pack_f+0xbe>
     b88:	81 e0       	ldi	r24, 0x01	; 1
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	a0 e0       	ldi	r26, 0x00	; 0
     b8e:	b0 e0       	ldi	r27, 0x00	; 0
     b90:	9a 01       	movw	r18, r20
     b92:	ab 01       	movw	r20, r22
     b94:	28 2b       	or	r18, r24
     b96:	39 2b       	or	r19, r25
     b98:	4a 2b       	or	r20, r26
     b9a:	5b 2b       	or	r21, r27
     b9c:	da 01       	movw	r26, r20
     b9e:	c9 01       	movw	r24, r18
     ba0:	8f 77       	andi	r24, 0x7F	; 127
     ba2:	90 70       	andi	r25, 0x00	; 0
     ba4:	a0 70       	andi	r26, 0x00	; 0
     ba6:	b0 70       	andi	r27, 0x00	; 0
     ba8:	80 34       	cpi	r24, 0x40	; 64
     baa:	91 05       	cpc	r25, r1
     bac:	a1 05       	cpc	r26, r1
     bae:	b1 05       	cpc	r27, r1
     bb0:	39 f4       	brne	.+14     	; 0xbc0 <__pack_f+0xee>
     bb2:	27 ff       	sbrs	r18, 7
     bb4:	09 c0       	rjmp	.+18     	; 0xbc8 <__pack_f+0xf6>
     bb6:	20 5c       	subi	r18, 0xC0	; 192
     bb8:	3f 4f       	sbci	r19, 0xFF	; 255
     bba:	4f 4f       	sbci	r20, 0xFF	; 255
     bbc:	5f 4f       	sbci	r21, 0xFF	; 255
     bbe:	04 c0       	rjmp	.+8      	; 0xbc8 <__pack_f+0xf6>
     bc0:	21 5c       	subi	r18, 0xC1	; 193
     bc2:	3f 4f       	sbci	r19, 0xFF	; 255
     bc4:	4f 4f       	sbci	r20, 0xFF	; 255
     bc6:	5f 4f       	sbci	r21, 0xFF	; 255
     bc8:	e0 e0       	ldi	r30, 0x00	; 0
     bca:	f0 e0       	ldi	r31, 0x00	; 0
     bcc:	20 30       	cpi	r18, 0x00	; 0
     bce:	a0 e0       	ldi	r26, 0x00	; 0
     bd0:	3a 07       	cpc	r19, r26
     bd2:	a0 e0       	ldi	r26, 0x00	; 0
     bd4:	4a 07       	cpc	r20, r26
     bd6:	a0 e4       	ldi	r26, 0x40	; 64
     bd8:	5a 07       	cpc	r21, r26
     bda:	10 f0       	brcs	.+4      	; 0xbe0 <__pack_f+0x10e>
     bdc:	e1 e0       	ldi	r30, 0x01	; 1
     bde:	f0 e0       	ldi	r31, 0x00	; 0
     be0:	79 01       	movw	r14, r18
     be2:	8a 01       	movw	r16, r20
     be4:	27 c0       	rjmp	.+78     	; 0xc34 <__pack_f+0x162>
     be6:	60 38       	cpi	r22, 0x80	; 128
     be8:	71 05       	cpc	r23, r1
     bea:	64 f5       	brge	.+88     	; 0xc44 <__pack_f+0x172>
     bec:	fb 01       	movw	r30, r22
     bee:	e1 58       	subi	r30, 0x81	; 129
     bf0:	ff 4f       	sbci	r31, 0xFF	; 255
     bf2:	d8 01       	movw	r26, r16
     bf4:	c7 01       	movw	r24, r14
     bf6:	8f 77       	andi	r24, 0x7F	; 127
     bf8:	90 70       	andi	r25, 0x00	; 0
     bfa:	a0 70       	andi	r26, 0x00	; 0
     bfc:	b0 70       	andi	r27, 0x00	; 0
     bfe:	80 34       	cpi	r24, 0x40	; 64
     c00:	91 05       	cpc	r25, r1
     c02:	a1 05       	cpc	r26, r1
     c04:	b1 05       	cpc	r27, r1
     c06:	39 f4       	brne	.+14     	; 0xc16 <__pack_f+0x144>
     c08:	e7 fe       	sbrs	r14, 7
     c0a:	0d c0       	rjmp	.+26     	; 0xc26 <__pack_f+0x154>
     c0c:	80 e4       	ldi	r24, 0x40	; 64
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	a0 e0       	ldi	r26, 0x00	; 0
     c12:	b0 e0       	ldi	r27, 0x00	; 0
     c14:	04 c0       	rjmp	.+8      	; 0xc1e <__pack_f+0x14c>
     c16:	8f e3       	ldi	r24, 0x3F	; 63
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	a0 e0       	ldi	r26, 0x00	; 0
     c1c:	b0 e0       	ldi	r27, 0x00	; 0
     c1e:	e8 0e       	add	r14, r24
     c20:	f9 1e       	adc	r15, r25
     c22:	0a 1f       	adc	r16, r26
     c24:	1b 1f       	adc	r17, r27
     c26:	17 ff       	sbrs	r17, 7
     c28:	05 c0       	rjmp	.+10     	; 0xc34 <__pack_f+0x162>
     c2a:	16 95       	lsr	r17
     c2c:	07 95       	ror	r16
     c2e:	f7 94       	ror	r15
     c30:	e7 94       	ror	r14
     c32:	31 96       	adiw	r30, 0x01	; 1
     c34:	87 e0       	ldi	r24, 0x07	; 7
     c36:	16 95       	lsr	r17
     c38:	07 95       	ror	r16
     c3a:	f7 94       	ror	r15
     c3c:	e7 94       	ror	r14
     c3e:	8a 95       	dec	r24
     c40:	d1 f7       	brne	.-12     	; 0xc36 <__pack_f+0x164>
     c42:	05 c0       	rjmp	.+10     	; 0xc4e <__pack_f+0x17c>
     c44:	ee 24       	eor	r14, r14
     c46:	ff 24       	eor	r15, r15
     c48:	87 01       	movw	r16, r14
     c4a:	ef ef       	ldi	r30, 0xFF	; 255
     c4c:	f0 e0       	ldi	r31, 0x00	; 0
     c4e:	6e 2f       	mov	r22, r30
     c50:	67 95       	ror	r22
     c52:	66 27       	eor	r22, r22
     c54:	67 95       	ror	r22
     c56:	90 2f       	mov	r25, r16
     c58:	9f 77       	andi	r25, 0x7F	; 127
     c5a:	d7 94       	ror	r13
     c5c:	dd 24       	eor	r13, r13
     c5e:	d7 94       	ror	r13
     c60:	8e 2f       	mov	r24, r30
     c62:	86 95       	lsr	r24
     c64:	49 2f       	mov	r20, r25
     c66:	46 2b       	or	r20, r22
     c68:	58 2f       	mov	r21, r24
     c6a:	5d 29       	or	r21, r13
     c6c:	b7 01       	movw	r22, r14
     c6e:	ca 01       	movw	r24, r20
     c70:	1f 91       	pop	r17
     c72:	0f 91       	pop	r16
     c74:	ff 90       	pop	r15
     c76:	ef 90       	pop	r14
     c78:	df 90       	pop	r13
     c7a:	08 95       	ret

00000c7c <__unpack_f>:
     c7c:	fc 01       	movw	r30, r24
     c7e:	db 01       	movw	r26, r22
     c80:	40 81       	ld	r20, Z
     c82:	51 81       	ldd	r21, Z+1	; 0x01
     c84:	22 81       	ldd	r18, Z+2	; 0x02
     c86:	62 2f       	mov	r22, r18
     c88:	6f 77       	andi	r22, 0x7F	; 127
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	22 1f       	adc	r18, r18
     c8e:	22 27       	eor	r18, r18
     c90:	22 1f       	adc	r18, r18
     c92:	93 81       	ldd	r25, Z+3	; 0x03
     c94:	89 2f       	mov	r24, r25
     c96:	88 0f       	add	r24, r24
     c98:	82 2b       	or	r24, r18
     c9a:	28 2f       	mov	r18, r24
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	99 1f       	adc	r25, r25
     ca0:	99 27       	eor	r25, r25
     ca2:	99 1f       	adc	r25, r25
     ca4:	11 96       	adiw	r26, 0x01	; 1
     ca6:	9c 93       	st	X, r25
     ca8:	11 97       	sbiw	r26, 0x01	; 1
     caa:	21 15       	cp	r18, r1
     cac:	31 05       	cpc	r19, r1
     cae:	a9 f5       	brne	.+106    	; 0xd1a <__unpack_f+0x9e>
     cb0:	41 15       	cp	r20, r1
     cb2:	51 05       	cpc	r21, r1
     cb4:	61 05       	cpc	r22, r1
     cb6:	71 05       	cpc	r23, r1
     cb8:	11 f4       	brne	.+4      	; 0xcbe <__unpack_f+0x42>
     cba:	82 e0       	ldi	r24, 0x02	; 2
     cbc:	37 c0       	rjmp	.+110    	; 0xd2c <__unpack_f+0xb0>
     cbe:	82 e8       	ldi	r24, 0x82	; 130
     cc0:	9f ef       	ldi	r25, 0xFF	; 255
     cc2:	13 96       	adiw	r26, 0x03	; 3
     cc4:	9c 93       	st	X, r25
     cc6:	8e 93       	st	-X, r24
     cc8:	12 97       	sbiw	r26, 0x02	; 2
     cca:	9a 01       	movw	r18, r20
     ccc:	ab 01       	movw	r20, r22
     cce:	67 e0       	ldi	r22, 0x07	; 7
     cd0:	22 0f       	add	r18, r18
     cd2:	33 1f       	adc	r19, r19
     cd4:	44 1f       	adc	r20, r20
     cd6:	55 1f       	adc	r21, r21
     cd8:	6a 95       	dec	r22
     cda:	d1 f7       	brne	.-12     	; 0xcd0 <__unpack_f+0x54>
     cdc:	83 e0       	ldi	r24, 0x03	; 3
     cde:	8c 93       	st	X, r24
     ce0:	0d c0       	rjmp	.+26     	; 0xcfc <__unpack_f+0x80>
     ce2:	22 0f       	add	r18, r18
     ce4:	33 1f       	adc	r19, r19
     ce6:	44 1f       	adc	r20, r20
     ce8:	55 1f       	adc	r21, r21
     cea:	12 96       	adiw	r26, 0x02	; 2
     cec:	8d 91       	ld	r24, X+
     cee:	9c 91       	ld	r25, X
     cf0:	13 97       	sbiw	r26, 0x03	; 3
     cf2:	01 97       	sbiw	r24, 0x01	; 1
     cf4:	13 96       	adiw	r26, 0x03	; 3
     cf6:	9c 93       	st	X, r25
     cf8:	8e 93       	st	-X, r24
     cfa:	12 97       	sbiw	r26, 0x02	; 2
     cfc:	20 30       	cpi	r18, 0x00	; 0
     cfe:	80 e0       	ldi	r24, 0x00	; 0
     d00:	38 07       	cpc	r19, r24
     d02:	80 e0       	ldi	r24, 0x00	; 0
     d04:	48 07       	cpc	r20, r24
     d06:	80 e4       	ldi	r24, 0x40	; 64
     d08:	58 07       	cpc	r21, r24
     d0a:	58 f3       	brcs	.-42     	; 0xce2 <__unpack_f+0x66>
     d0c:	14 96       	adiw	r26, 0x04	; 4
     d0e:	2d 93       	st	X+, r18
     d10:	3d 93       	st	X+, r19
     d12:	4d 93       	st	X+, r20
     d14:	5c 93       	st	X, r21
     d16:	17 97       	sbiw	r26, 0x07	; 7
     d18:	08 95       	ret
     d1a:	2f 3f       	cpi	r18, 0xFF	; 255
     d1c:	31 05       	cpc	r19, r1
     d1e:	79 f4       	brne	.+30     	; 0xd3e <__unpack_f+0xc2>
     d20:	41 15       	cp	r20, r1
     d22:	51 05       	cpc	r21, r1
     d24:	61 05       	cpc	r22, r1
     d26:	71 05       	cpc	r23, r1
     d28:	19 f4       	brne	.+6      	; 0xd30 <__unpack_f+0xb4>
     d2a:	84 e0       	ldi	r24, 0x04	; 4
     d2c:	8c 93       	st	X, r24
     d2e:	08 95       	ret
     d30:	64 ff       	sbrs	r22, 4
     d32:	03 c0       	rjmp	.+6      	; 0xd3a <__unpack_f+0xbe>
     d34:	81 e0       	ldi	r24, 0x01	; 1
     d36:	8c 93       	st	X, r24
     d38:	12 c0       	rjmp	.+36     	; 0xd5e <__unpack_f+0xe2>
     d3a:	1c 92       	st	X, r1
     d3c:	10 c0       	rjmp	.+32     	; 0xd5e <__unpack_f+0xe2>
     d3e:	2f 57       	subi	r18, 0x7F	; 127
     d40:	30 40       	sbci	r19, 0x00	; 0
     d42:	13 96       	adiw	r26, 0x03	; 3
     d44:	3c 93       	st	X, r19
     d46:	2e 93       	st	-X, r18
     d48:	12 97       	sbiw	r26, 0x02	; 2
     d4a:	83 e0       	ldi	r24, 0x03	; 3
     d4c:	8c 93       	st	X, r24
     d4e:	87 e0       	ldi	r24, 0x07	; 7
     d50:	44 0f       	add	r20, r20
     d52:	55 1f       	adc	r21, r21
     d54:	66 1f       	adc	r22, r22
     d56:	77 1f       	adc	r23, r23
     d58:	8a 95       	dec	r24
     d5a:	d1 f7       	brne	.-12     	; 0xd50 <__unpack_f+0xd4>
     d5c:	70 64       	ori	r23, 0x40	; 64
     d5e:	14 96       	adiw	r26, 0x04	; 4
     d60:	4d 93       	st	X+, r20
     d62:	5d 93       	st	X+, r21
     d64:	6d 93       	st	X+, r22
     d66:	7c 93       	st	X, r23
     d68:	17 97       	sbiw	r26, 0x07	; 7
     d6a:	08 95       	ret

00000d6c <__fpcmp_parts_f>:
     d6c:	1f 93       	push	r17
     d6e:	dc 01       	movw	r26, r24
     d70:	fb 01       	movw	r30, r22
     d72:	9c 91       	ld	r25, X
     d74:	92 30       	cpi	r25, 0x02	; 2
     d76:	08 f4       	brcc	.+2      	; 0xd7a <__fpcmp_parts_f+0xe>
     d78:	47 c0       	rjmp	.+142    	; 0xe08 <__fpcmp_parts_f+0x9c>
     d7a:	80 81       	ld	r24, Z
     d7c:	82 30       	cpi	r24, 0x02	; 2
     d7e:	08 f4       	brcc	.+2      	; 0xd82 <__fpcmp_parts_f+0x16>
     d80:	43 c0       	rjmp	.+134    	; 0xe08 <__fpcmp_parts_f+0x9c>
     d82:	94 30       	cpi	r25, 0x04	; 4
     d84:	51 f4       	brne	.+20     	; 0xd9a <__fpcmp_parts_f+0x2e>
     d86:	11 96       	adiw	r26, 0x01	; 1
     d88:	1c 91       	ld	r17, X
     d8a:	84 30       	cpi	r24, 0x04	; 4
     d8c:	99 f5       	brne	.+102    	; 0xdf4 <__fpcmp_parts_f+0x88>
     d8e:	81 81       	ldd	r24, Z+1	; 0x01
     d90:	68 2f       	mov	r22, r24
     d92:	70 e0       	ldi	r23, 0x00	; 0
     d94:	61 1b       	sub	r22, r17
     d96:	71 09       	sbc	r23, r1
     d98:	3f c0       	rjmp	.+126    	; 0xe18 <__fpcmp_parts_f+0xac>
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	21 f0       	breq	.+8      	; 0xda6 <__fpcmp_parts_f+0x3a>
     d9e:	92 30       	cpi	r25, 0x02	; 2
     da0:	31 f4       	brne	.+12     	; 0xdae <__fpcmp_parts_f+0x42>
     da2:	82 30       	cpi	r24, 0x02	; 2
     da4:	b9 f1       	breq	.+110    	; 0xe14 <__fpcmp_parts_f+0xa8>
     da6:	81 81       	ldd	r24, Z+1	; 0x01
     da8:	88 23       	and	r24, r24
     daa:	89 f1       	breq	.+98     	; 0xe0e <__fpcmp_parts_f+0xa2>
     dac:	2d c0       	rjmp	.+90     	; 0xe08 <__fpcmp_parts_f+0x9c>
     dae:	11 96       	adiw	r26, 0x01	; 1
     db0:	1c 91       	ld	r17, X
     db2:	11 97       	sbiw	r26, 0x01	; 1
     db4:	82 30       	cpi	r24, 0x02	; 2
     db6:	f1 f0       	breq	.+60     	; 0xdf4 <__fpcmp_parts_f+0x88>
     db8:	81 81       	ldd	r24, Z+1	; 0x01
     dba:	18 17       	cp	r17, r24
     dbc:	d9 f4       	brne	.+54     	; 0xdf4 <__fpcmp_parts_f+0x88>
     dbe:	12 96       	adiw	r26, 0x02	; 2
     dc0:	2d 91       	ld	r18, X+
     dc2:	3c 91       	ld	r19, X
     dc4:	13 97       	sbiw	r26, 0x03	; 3
     dc6:	82 81       	ldd	r24, Z+2	; 0x02
     dc8:	93 81       	ldd	r25, Z+3	; 0x03
     dca:	82 17       	cp	r24, r18
     dcc:	93 07       	cpc	r25, r19
     dce:	94 f0       	brlt	.+36     	; 0xdf4 <__fpcmp_parts_f+0x88>
     dd0:	28 17       	cp	r18, r24
     dd2:	39 07       	cpc	r19, r25
     dd4:	bc f0       	brlt	.+46     	; 0xe04 <__fpcmp_parts_f+0x98>
     dd6:	14 96       	adiw	r26, 0x04	; 4
     dd8:	8d 91       	ld	r24, X+
     dda:	9d 91       	ld	r25, X+
     ddc:	0d 90       	ld	r0, X+
     dde:	bc 91       	ld	r27, X
     de0:	a0 2d       	mov	r26, r0
     de2:	24 81       	ldd	r18, Z+4	; 0x04
     de4:	35 81       	ldd	r19, Z+5	; 0x05
     de6:	46 81       	ldd	r20, Z+6	; 0x06
     de8:	57 81       	ldd	r21, Z+7	; 0x07
     dea:	28 17       	cp	r18, r24
     dec:	39 07       	cpc	r19, r25
     dee:	4a 07       	cpc	r20, r26
     df0:	5b 07       	cpc	r21, r27
     df2:	18 f4       	brcc	.+6      	; 0xdfa <__fpcmp_parts_f+0x8e>
     df4:	11 23       	and	r17, r17
     df6:	41 f0       	breq	.+16     	; 0xe08 <__fpcmp_parts_f+0x9c>
     df8:	0a c0       	rjmp	.+20     	; 0xe0e <__fpcmp_parts_f+0xa2>
     dfa:	82 17       	cp	r24, r18
     dfc:	93 07       	cpc	r25, r19
     dfe:	a4 07       	cpc	r26, r20
     e00:	b5 07       	cpc	r27, r21
     e02:	40 f4       	brcc	.+16     	; 0xe14 <__fpcmp_parts_f+0xa8>
     e04:	11 23       	and	r17, r17
     e06:	19 f0       	breq	.+6      	; 0xe0e <__fpcmp_parts_f+0xa2>
     e08:	61 e0       	ldi	r22, 0x01	; 1
     e0a:	70 e0       	ldi	r23, 0x00	; 0
     e0c:	05 c0       	rjmp	.+10     	; 0xe18 <__fpcmp_parts_f+0xac>
     e0e:	6f ef       	ldi	r22, 0xFF	; 255
     e10:	7f ef       	ldi	r23, 0xFF	; 255
     e12:	02 c0       	rjmp	.+4      	; 0xe18 <__fpcmp_parts_f+0xac>
     e14:	60 e0       	ldi	r22, 0x00	; 0
     e16:	70 e0       	ldi	r23, 0x00	; 0
     e18:	cb 01       	movw	r24, r22
     e1a:	1f 91       	pop	r17
     e1c:	08 95       	ret

00000e1e <main>:




int main()
{
     e1e:	df 93       	push	r29
     e20:	cf 93       	push	r28
     e22:	cd b7       	in	r28, 0x3d	; 61
     e24:	de b7       	in	r29, 0x3e	; 62
     e26:	65 97       	sbiw	r28, 0x15	; 21
     e28:	0f b6       	in	r0, 0x3f	; 63
     e2a:	f8 94       	cli
     e2c:	de bf       	out	0x3e, r29	; 62
     e2e:	0f be       	out	0x3f, r0	; 63
     e30:	cd bf       	out	0x3d, r28	; 61
	u16 result;
	f64 volt =0;
     e32:	80 e0       	ldi	r24, 0x00	; 0
     e34:	90 e0       	ldi	r25, 0x00	; 0
     e36:	a0 e0       	ldi	r26, 0x00	; 0
     e38:	b0 e0       	ldi	r27, 0x00	; 0
     e3a:	88 8b       	std	Y+16, r24	; 0x10
     e3c:	99 8b       	std	Y+17, r25	; 0x11
     e3e:	aa 8b       	std	Y+18, r26	; 0x12
     e40:	bb 8b       	std	Y+19, r27	; 0x13
	u8 voltDisplay = 0;
     e42:	1f 86       	std	Y+15, r1	; 0x0f

	Adc_vidInit();
     e44:	0e 94 eb 15 	call	0x2bd6	; 0x2bd6 <Adc_vidInit>
	Lcd_vidinit();
     e48:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <Lcd_vidinit>
	Lcd_vidCmd(_LCD_CURSOR_OFF);
     e4c:	8c e0       	ldi	r24, 0x0C	; 12
     e4e:	0e 94 3d 0e 	call	0x1c7a	; 0x1c7a <Lcd_vidCmd>


	while (1)
	{

		result = Adc_u16AdcRead(ADC_CHANNEL1);
     e52:	81 e0       	ldi	r24, 0x01	; 1
     e54:	0e 94 07 16 	call	0x2c0e	; 0x2c0e <Adc_u16AdcRead>
     e58:	9d 8b       	std	Y+21, r25	; 0x15
     e5a:	8c 8b       	std	Y+20, r24	; 0x14

		volt = result * (f64)4.8; /*	mv	*/
     e5c:	8c 89       	ldd	r24, Y+20	; 0x14
     e5e:	9d 89       	ldd	r25, Y+21	; 0x15
     e60:	cc 01       	movw	r24, r24
     e62:	a0 e0       	ldi	r26, 0x00	; 0
     e64:	b0 e0       	ldi	r27, 0x00	; 0
     e66:	bc 01       	movw	r22, r24
     e68:	cd 01       	movw	r24, r26
     e6a:	0e 94 a1 04 	call	0x942	; 0x942 <__floatunsisf>
     e6e:	dc 01       	movw	r26, r24
     e70:	cb 01       	movw	r24, r22
     e72:	bc 01       	movw	r22, r24
     e74:	cd 01       	movw	r24, r26
     e76:	2a e9       	ldi	r18, 0x9A	; 154
     e78:	39 e9       	ldi	r19, 0x99	; 153
     e7a:	49 e9       	ldi	r20, 0x99	; 153
     e7c:	50 e4       	ldi	r21, 0x40	; 64
     e7e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     e82:	dc 01       	movw	r26, r24
     e84:	cb 01       	movw	r24, r22
     e86:	88 8b       	std	Y+16, r24	; 0x10
     e88:	99 8b       	std	Y+17, r25	; 0x11
     e8a:	aa 8b       	std	Y+18, r26	; 0x12
     e8c:	bb 8b       	std	Y+19, r27	; 0x13
		volt = volt/10;			/*	v	*/
     e8e:	68 89       	ldd	r22, Y+16	; 0x10
     e90:	79 89       	ldd	r23, Y+17	; 0x11
     e92:	8a 89       	ldd	r24, Y+18	; 0x12
     e94:	9b 89       	ldd	r25, Y+19	; 0x13
     e96:	20 e0       	ldi	r18, 0x00	; 0
     e98:	30 e0       	ldi	r19, 0x00	; 0
     e9a:	40 e2       	ldi	r20, 0x20	; 32
     e9c:	51 e4       	ldi	r21, 0x41	; 65
     e9e:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
     ea2:	dc 01       	movw	r26, r24
     ea4:	cb 01       	movw	r24, r22
     ea6:	88 8b       	std	Y+16, r24	; 0x10
     ea8:	99 8b       	std	Y+17, r25	; 0x11
     eaa:	aa 8b       	std	Y+18, r26	; 0x12
     eac:	bb 8b       	std	Y+19, r27	; 0x13

		voltDisplay = volt * 10;
     eae:	68 89       	ldd	r22, Y+16	; 0x10
     eb0:	79 89       	ldd	r23, Y+17	; 0x11
     eb2:	8a 89       	ldd	r24, Y+18	; 0x12
     eb4:	9b 89       	ldd	r25, Y+19	; 0x13
     eb6:	20 e0       	ldi	r18, 0x00	; 0
     eb8:	30 e0       	ldi	r19, 0x00	; 0
     eba:	40 e2       	ldi	r20, 0x20	; 32
     ebc:	51 e4       	ldi	r21, 0x41	; 65
     ebe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     ec2:	dc 01       	movw	r26, r24
     ec4:	cb 01       	movw	r24, r22
     ec6:	bc 01       	movw	r22, r24
     ec8:	cd 01       	movw	r24, r26
     eca:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     ece:	dc 01       	movw	r26, r24
     ed0:	cb 01       	movw	r24, r22
     ed2:	8f 87       	std	Y+15, r24	; 0x0f
		//3.6 * 10 = 36

		Lcd_vidRowColumn(0, 0);
     ed4:	80 e0       	ldi	r24, 0x00	; 0
     ed6:	60 e0       	ldi	r22, 0x00	; 0
     ed8:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <Lcd_vidRowColumn>
		Lcd_vidDisplyStr("Volt =    ");
     edc:	80 e6       	ldi	r24, 0x60	; 96
     ede:	90 e0       	ldi	r25, 0x00	; 0
     ee0:	0e 94 8b 0e 	call	0x1d16	; 0x1d16 <Lcd_vidDisplyStr>
		Lcd_vidRowColumn(0, 6);
     ee4:	80 e0       	ldi	r24, 0x00	; 0
     ee6:	66 e0       	ldi	r22, 0x06	; 6
     ee8:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <Lcd_vidRowColumn>
		Lcd_vidDisplyInt(voltDisplay/10);
     eec:	8f 85       	ldd	r24, Y+15	; 0x0f
     eee:	9a e0       	ldi	r25, 0x0A	; 10
     ef0:	69 2f       	mov	r22, r25
     ef2:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <__udivmodqi4>
     ef6:	88 2f       	mov	r24, r24
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	a0 e0       	ldi	r26, 0x00	; 0
     efc:	b0 e0       	ldi	r27, 0x00	; 0
     efe:	bc 01       	movw	r22, r24
     f00:	cd 01       	movw	r24, r26
     f02:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <Lcd_vidDisplyInt>
		Lcd_vidDisplayChar('.');
     f06:	8e e2       	ldi	r24, 0x2E	; 46
     f08:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <Lcd_vidDisplayChar>
		Lcd_vidDisplyInt(voltDisplay%10);
     f0c:	8f 85       	ldd	r24, Y+15	; 0x0f
     f0e:	9a e0       	ldi	r25, 0x0A	; 10
     f10:	69 2f       	mov	r22, r25
     f12:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <__udivmodqi4>
     f16:	89 2f       	mov	r24, r25
     f18:	88 2f       	mov	r24, r24
     f1a:	90 e0       	ldi	r25, 0x00	; 0
     f1c:	a0 e0       	ldi	r26, 0x00	; 0
     f1e:	b0 e0       	ldi	r27, 0x00	; 0
     f20:	bc 01       	movw	r22, r24
     f22:	cd 01       	movw	r24, r26
     f24:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <Lcd_vidDisplyInt>
     f28:	80 e0       	ldi	r24, 0x00	; 0
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	a8 ec       	ldi	r26, 0xC8	; 200
     f2e:	b2 e4       	ldi	r27, 0x42	; 66
     f30:	8b 87       	std	Y+11, r24	; 0x0b
     f32:	9c 87       	std	Y+12, r25	; 0x0c
     f34:	ad 87       	std	Y+13, r26	; 0x0d
     f36:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f38:	6b 85       	ldd	r22, Y+11	; 0x0b
     f3a:	7c 85       	ldd	r23, Y+12	; 0x0c
     f3c:	8d 85       	ldd	r24, Y+13	; 0x0d
     f3e:	9e 85       	ldd	r25, Y+14	; 0x0e
     f40:	20 e0       	ldi	r18, 0x00	; 0
     f42:	30 e0       	ldi	r19, 0x00	; 0
     f44:	4a e7       	ldi	r20, 0x7A	; 122
     f46:	55 e4       	ldi	r21, 0x45	; 69
     f48:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f4c:	dc 01       	movw	r26, r24
     f4e:	cb 01       	movw	r24, r22
     f50:	8f 83       	std	Y+7, r24	; 0x07
     f52:	98 87       	std	Y+8, r25	; 0x08
     f54:	a9 87       	std	Y+9, r26	; 0x09
     f56:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     f58:	6f 81       	ldd	r22, Y+7	; 0x07
     f5a:	78 85       	ldd	r23, Y+8	; 0x08
     f5c:	89 85       	ldd	r24, Y+9	; 0x09
     f5e:	9a 85       	ldd	r25, Y+10	; 0x0a
     f60:	20 e0       	ldi	r18, 0x00	; 0
     f62:	30 e0       	ldi	r19, 0x00	; 0
     f64:	40 e8       	ldi	r20, 0x80	; 128
     f66:	5f e3       	ldi	r21, 0x3F	; 63
     f68:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
     f6c:	88 23       	and	r24, r24
     f6e:	2c f4       	brge	.+10     	; 0xf7a <main+0x15c>
		__ticks = 1;
     f70:	81 e0       	ldi	r24, 0x01	; 1
     f72:	90 e0       	ldi	r25, 0x00	; 0
     f74:	9e 83       	std	Y+6, r25	; 0x06
     f76:	8d 83       	std	Y+5, r24	; 0x05
     f78:	3f c0       	rjmp	.+126    	; 0xff8 <main+0x1da>
	else if (__tmp > 65535)
     f7a:	6f 81       	ldd	r22, Y+7	; 0x07
     f7c:	78 85       	ldd	r23, Y+8	; 0x08
     f7e:	89 85       	ldd	r24, Y+9	; 0x09
     f80:	9a 85       	ldd	r25, Y+10	; 0x0a
     f82:	20 e0       	ldi	r18, 0x00	; 0
     f84:	3f ef       	ldi	r19, 0xFF	; 255
     f86:	4f e7       	ldi	r20, 0x7F	; 127
     f88:	57 e4       	ldi	r21, 0x47	; 71
     f8a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
     f8e:	18 16       	cp	r1, r24
     f90:	4c f5       	brge	.+82     	; 0xfe4 <main+0x1c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f92:	6b 85       	ldd	r22, Y+11	; 0x0b
     f94:	7c 85       	ldd	r23, Y+12	; 0x0c
     f96:	8d 85       	ldd	r24, Y+13	; 0x0d
     f98:	9e 85       	ldd	r25, Y+14	; 0x0e
     f9a:	20 e0       	ldi	r18, 0x00	; 0
     f9c:	30 e0       	ldi	r19, 0x00	; 0
     f9e:	40 e2       	ldi	r20, 0x20	; 32
     fa0:	51 e4       	ldi	r21, 0x41	; 65
     fa2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     fa6:	dc 01       	movw	r26, r24
     fa8:	cb 01       	movw	r24, r22
     faa:	bc 01       	movw	r22, r24
     fac:	cd 01       	movw	r24, r26
     fae:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     fb2:	dc 01       	movw	r26, r24
     fb4:	cb 01       	movw	r24, r22
     fb6:	9e 83       	std	Y+6, r25	; 0x06
     fb8:	8d 83       	std	Y+5, r24	; 0x05
     fba:	0f c0       	rjmp	.+30     	; 0xfda <main+0x1bc>
     fbc:	80 e9       	ldi	r24, 0x90	; 144
     fbe:	91 e0       	ldi	r25, 0x01	; 1
     fc0:	9c 83       	std	Y+4, r25	; 0x04
     fc2:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     fc4:	8b 81       	ldd	r24, Y+3	; 0x03
     fc6:	9c 81       	ldd	r25, Y+4	; 0x04
     fc8:	01 97       	sbiw	r24, 0x01	; 1
     fca:	f1 f7       	brne	.-4      	; 0xfc8 <main+0x1aa>
     fcc:	9c 83       	std	Y+4, r25	; 0x04
     fce:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fd0:	8d 81       	ldd	r24, Y+5	; 0x05
     fd2:	9e 81       	ldd	r25, Y+6	; 0x06
     fd4:	01 97       	sbiw	r24, 0x01	; 1
     fd6:	9e 83       	std	Y+6, r25	; 0x06
     fd8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fda:	8d 81       	ldd	r24, Y+5	; 0x05
     fdc:	9e 81       	ldd	r25, Y+6	; 0x06
     fde:	00 97       	sbiw	r24, 0x00	; 0
     fe0:	69 f7       	brne	.-38     	; 0xfbc <main+0x19e>
     fe2:	37 cf       	rjmp	.-402    	; 0xe52 <main+0x34>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fe4:	6f 81       	ldd	r22, Y+7	; 0x07
     fe6:	78 85       	ldd	r23, Y+8	; 0x08
     fe8:	89 85       	ldd	r24, Y+9	; 0x09
     fea:	9a 85       	ldd	r25, Y+10	; 0x0a
     fec:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     ff0:	dc 01       	movw	r26, r24
     ff2:	cb 01       	movw	r24, r22
     ff4:	9e 83       	std	Y+6, r25	; 0x06
     ff6:	8d 83       	std	Y+5, r24	; 0x05
     ff8:	8d 81       	ldd	r24, Y+5	; 0x05
     ffa:	9e 81       	ldd	r25, Y+6	; 0x06
     ffc:	9a 83       	std	Y+2, r25	; 0x02
     ffe:	89 83       	std	Y+1, r24	; 0x01
    1000:	89 81       	ldd	r24, Y+1	; 0x01
    1002:	9a 81       	ldd	r25, Y+2	; 0x02
    1004:	01 97       	sbiw	r24, 0x01	; 1
    1006:	f1 f7       	brne	.-4      	; 0x1004 <main+0x1e6>
    1008:	9a 83       	std	Y+2, r25	; 0x02
    100a:	89 83       	std	Y+1, r24	; 0x01
    100c:	22 cf       	rjmp	.-444    	; 0xe52 <main+0x34>

0000100e <SSD_vidinit>:
#include "SSD.h"
#include "Dio.h"
#include <util/delay.h>

void SSD_vidinit(void)
{
    100e:	df 93       	push	r29
    1010:	cf 93       	push	r28
    1012:	cd b7       	in	r28, 0x3d	; 61
    1014:	de b7       	in	r29, 0x3e	; 62
	Dio_vidconfigChanel(DIO_PORTB, DIO_PIN1, DIO_OUTPUT);
    1016:	81 e0       	ldi	r24, 0x01	; 1
    1018:	61 e0       	ldi	r22, 0x01	; 1
    101a:	41 e0       	ldi	r20, 0x01	; 1
    101c:	0e 94 3c 12 	call	0x2478	; 0x2478 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTB, DIO_PIN2, DIO_OUTPUT);
    1020:	81 e0       	ldi	r24, 0x01	; 1
    1022:	62 e0       	ldi	r22, 0x02	; 2
    1024:	41 e0       	ldi	r20, 0x01	; 1
    1026:	0e 94 3c 12 	call	0x2478	; 0x2478 <Dio_vidconfigChanel>

	Dio_vidconfigChanel(DIO_PORTA, DIO_PIN4, DIO_OUTPUT);
    102a:	80 e0       	ldi	r24, 0x00	; 0
    102c:	64 e0       	ldi	r22, 0x04	; 4
    102e:	41 e0       	ldi	r20, 0x01	; 1
    1030:	0e 94 3c 12 	call	0x2478	; 0x2478 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTA, DIO_PIN5, DIO_OUTPUT);
    1034:	80 e0       	ldi	r24, 0x00	; 0
    1036:	65 e0       	ldi	r22, 0x05	; 5
    1038:	41 e0       	ldi	r20, 0x01	; 1
    103a:	0e 94 3c 12 	call	0x2478	; 0x2478 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTA, DIO_PIN6, DIO_OUTPUT);
    103e:	80 e0       	ldi	r24, 0x00	; 0
    1040:	66 e0       	ldi	r22, 0x06	; 6
    1042:	41 e0       	ldi	r20, 0x01	; 1
    1044:	0e 94 3c 12 	call	0x2478	; 0x2478 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTA, DIO_PIN7, DIO_OUTPUT);
    1048:	80 e0       	ldi	r24, 0x00	; 0
    104a:	67 e0       	ldi	r22, 0x07	; 7
    104c:	41 e0       	ldi	r20, 0x01	; 1
    104e:	0e 94 3c 12 	call	0x2478	; 0x2478 <Dio_vidconfigChanel>
}
    1052:	cf 91       	pop	r28
    1054:	df 91       	pop	r29
    1056:	08 95       	ret

00001058 <SSD_viddisplyNum>:

void SSD_viddisplyNum(u8 num)
{
    1058:	df 93       	push	r29
    105a:	cf 93       	push	r28
    105c:	cd b7       	in	r28, 0x3d	; 61
    105e:	de b7       	in	r29, 0x3e	; 62
    1060:	e3 97       	sbiw	r28, 0x33	; 51
    1062:	0f b6       	in	r0, 0x3f	; 63
    1064:	f8 94       	cli
    1066:	de bf       	out	0x3e, r29	; 62
    1068:	0f be       	out	0x3f, r0	; 63
    106a:	cd bf       	out	0x3d, r28	; 61
    106c:	8b ab       	std	Y+51, r24	; 0x33
	u8 loc_secondDigit =  (num%10)<<4;
    106e:	8b a9       	ldd	r24, Y+51	; 0x33
    1070:	9a e0       	ldi	r25, 0x0A	; 10
    1072:	69 2f       	mov	r22, r25
    1074:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <__udivmodqi4>
    1078:	89 2f       	mov	r24, r25
    107a:	82 95       	swap	r24
    107c:	80 7f       	andi	r24, 0xF0	; 240
    107e:	8a ab       	std	Y+50, r24	; 0x32
	u8 loc_firstDigit = (num/10)<<4;
    1080:	8b a9       	ldd	r24, Y+51	; 0x33
    1082:	9a e0       	ldi	r25, 0x0A	; 10
    1084:	69 2f       	mov	r22, r25
    1086:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <__udivmodqi4>
    108a:	82 95       	swap	r24
    108c:	80 7f       	andi	r24, 0xF0	; 240
    108e:	89 ab       	std	Y+49, r24	; 0x31

	/* Enable SSD 1	-> EN1 = High	*/
	Dio_vidwriteChanel(DIO_PORTB, DIO_PIN2, DIO_HIGH);
    1090:	81 e0       	ldi	r24, 0x01	; 1
    1092:	62 e0       	ldi	r22, 0x02	; 2
    1094:	41 e0       	ldi	r20, 0x01	; 1
    1096:	0e 94 1f 13 	call	0x263e	; 0x263e <Dio_vidwriteChanel>
	/* Disable SSD 2 -> EN2 =Low	*/
	Dio_vidwriteChanel(DIO_PORTB, DIO_PIN1, DIO_LOW);
    109a:	81 e0       	ldi	r24, 0x01	; 1
    109c:	61 e0       	ldi	r22, 0x01	; 1
    109e:	40 e0       	ldi	r20, 0x00	; 0
    10a0:	0e 94 1f 13 	call	0x263e	; 0x263e <Dio_vidwriteChanel>
	/* Write first digit */
	Dio_vidWriteChanelGroup(DIO_PORTA, loc_firstDigit, SSD_MASK);
    10a4:	80 e0       	ldi	r24, 0x00	; 0
    10a6:	69 a9       	ldd	r22, Y+49	; 0x31
    10a8:	4f e0       	ldi	r20, 0x0F	; 15
    10aa:	0e 94 02 14 	call	0x2804	; 0x2804 <Dio_vidWriteChanelGroup>
    10ae:	80 e0       	ldi	r24, 0x00	; 0
    10b0:	90 e0       	ldi	r25, 0x00	; 0
    10b2:	aa ef       	ldi	r26, 0xFA	; 250
    10b4:	b3 e4       	ldi	r27, 0x43	; 67
    10b6:	8d a7       	std	Y+45, r24	; 0x2d
    10b8:	9e a7       	std	Y+46, r25	; 0x2e
    10ba:	af a7       	std	Y+47, r26	; 0x2f
    10bc:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    10be:	6d a5       	ldd	r22, Y+45	; 0x2d
    10c0:	7e a5       	ldd	r23, Y+46	; 0x2e
    10c2:	8f a5       	ldd	r24, Y+47	; 0x2f
    10c4:	98 a9       	ldd	r25, Y+48	; 0x30
    10c6:	2b ea       	ldi	r18, 0xAB	; 171
    10c8:	3a ea       	ldi	r19, 0xAA	; 170
    10ca:	4a ea       	ldi	r20, 0xAA	; 170
    10cc:	50 e4       	ldi	r21, 0x40	; 64
    10ce:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    10d2:	dc 01       	movw	r26, r24
    10d4:	cb 01       	movw	r24, r22
    10d6:	89 a7       	std	Y+41, r24	; 0x29
    10d8:	9a a7       	std	Y+42, r25	; 0x2a
    10da:	ab a7       	std	Y+43, r26	; 0x2b
    10dc:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    10de:	69 a5       	ldd	r22, Y+41	; 0x29
    10e0:	7a a5       	ldd	r23, Y+42	; 0x2a
    10e2:	8b a5       	ldd	r24, Y+43	; 0x2b
    10e4:	9c a5       	ldd	r25, Y+44	; 0x2c
    10e6:	20 e0       	ldi	r18, 0x00	; 0
    10e8:	30 e0       	ldi	r19, 0x00	; 0
    10ea:	40 e8       	ldi	r20, 0x80	; 128
    10ec:	5f e3       	ldi	r21, 0x3F	; 63
    10ee:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    10f2:	88 23       	and	r24, r24
    10f4:	1c f4       	brge	.+6      	; 0x10fc <SSD_viddisplyNum+0xa4>
		__ticks = 1;
    10f6:	81 e0       	ldi	r24, 0x01	; 1
    10f8:	88 a7       	std	Y+40, r24	; 0x28
    10fa:	91 c0       	rjmp	.+290    	; 0x121e <SSD_viddisplyNum+0x1c6>
	else if (__tmp > 255)
    10fc:	69 a5       	ldd	r22, Y+41	; 0x29
    10fe:	7a a5       	ldd	r23, Y+42	; 0x2a
    1100:	8b a5       	ldd	r24, Y+43	; 0x2b
    1102:	9c a5       	ldd	r25, Y+44	; 0x2c
    1104:	20 e0       	ldi	r18, 0x00	; 0
    1106:	30 e0       	ldi	r19, 0x00	; 0
    1108:	4f e7       	ldi	r20, 0x7F	; 127
    110a:	53 e4       	ldi	r21, 0x43	; 67
    110c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1110:	18 16       	cp	r1, r24
    1112:	0c f0       	brlt	.+2      	; 0x1116 <SSD_viddisplyNum+0xbe>
    1114:	7b c0       	rjmp	.+246    	; 0x120c <SSD_viddisplyNum+0x1b4>
	{
		_delay_ms(__us / 1000.0);
    1116:	6d a5       	ldd	r22, Y+45	; 0x2d
    1118:	7e a5       	ldd	r23, Y+46	; 0x2e
    111a:	8f a5       	ldd	r24, Y+47	; 0x2f
    111c:	98 a9       	ldd	r25, Y+48	; 0x30
    111e:	20 e0       	ldi	r18, 0x00	; 0
    1120:	30 e0       	ldi	r19, 0x00	; 0
    1122:	4a e7       	ldi	r20, 0x7A	; 122
    1124:	54 e4       	ldi	r21, 0x44	; 68
    1126:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    112a:	dc 01       	movw	r26, r24
    112c:	cb 01       	movw	r24, r22
    112e:	8c a3       	std	Y+36, r24	; 0x24
    1130:	9d a3       	std	Y+37, r25	; 0x25
    1132:	ae a3       	std	Y+38, r26	; 0x26
    1134:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1136:	6c a1       	ldd	r22, Y+36	; 0x24
    1138:	7d a1       	ldd	r23, Y+37	; 0x25
    113a:	8e a1       	ldd	r24, Y+38	; 0x26
    113c:	9f a1       	ldd	r25, Y+39	; 0x27
    113e:	20 e0       	ldi	r18, 0x00	; 0
    1140:	30 e0       	ldi	r19, 0x00	; 0
    1142:	4a e7       	ldi	r20, 0x7A	; 122
    1144:	55 e4       	ldi	r21, 0x45	; 69
    1146:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    114a:	dc 01       	movw	r26, r24
    114c:	cb 01       	movw	r24, r22
    114e:	88 a3       	std	Y+32, r24	; 0x20
    1150:	99 a3       	std	Y+33, r25	; 0x21
    1152:	aa a3       	std	Y+34, r26	; 0x22
    1154:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    1156:	68 a1       	ldd	r22, Y+32	; 0x20
    1158:	79 a1       	ldd	r23, Y+33	; 0x21
    115a:	8a a1       	ldd	r24, Y+34	; 0x22
    115c:	9b a1       	ldd	r25, Y+35	; 0x23
    115e:	20 e0       	ldi	r18, 0x00	; 0
    1160:	30 e0       	ldi	r19, 0x00	; 0
    1162:	40 e8       	ldi	r20, 0x80	; 128
    1164:	5f e3       	ldi	r21, 0x3F	; 63
    1166:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    116a:	88 23       	and	r24, r24
    116c:	2c f4       	brge	.+10     	; 0x1178 <SSD_viddisplyNum+0x120>
		__ticks = 1;
    116e:	81 e0       	ldi	r24, 0x01	; 1
    1170:	90 e0       	ldi	r25, 0x00	; 0
    1172:	9f 8f       	std	Y+31, r25	; 0x1f
    1174:	8e 8f       	std	Y+30, r24	; 0x1e
    1176:	3f c0       	rjmp	.+126    	; 0x11f6 <SSD_viddisplyNum+0x19e>
	else if (__tmp > 65535)
    1178:	68 a1       	ldd	r22, Y+32	; 0x20
    117a:	79 a1       	ldd	r23, Y+33	; 0x21
    117c:	8a a1       	ldd	r24, Y+34	; 0x22
    117e:	9b a1       	ldd	r25, Y+35	; 0x23
    1180:	20 e0       	ldi	r18, 0x00	; 0
    1182:	3f ef       	ldi	r19, 0xFF	; 255
    1184:	4f e7       	ldi	r20, 0x7F	; 127
    1186:	57 e4       	ldi	r21, 0x47	; 71
    1188:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    118c:	18 16       	cp	r1, r24
    118e:	4c f5       	brge	.+82     	; 0x11e2 <SSD_viddisplyNum+0x18a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1190:	6c a1       	ldd	r22, Y+36	; 0x24
    1192:	7d a1       	ldd	r23, Y+37	; 0x25
    1194:	8e a1       	ldd	r24, Y+38	; 0x26
    1196:	9f a1       	ldd	r25, Y+39	; 0x27
    1198:	20 e0       	ldi	r18, 0x00	; 0
    119a:	30 e0       	ldi	r19, 0x00	; 0
    119c:	40 e2       	ldi	r20, 0x20	; 32
    119e:	51 e4       	ldi	r21, 0x41	; 65
    11a0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    11a4:	dc 01       	movw	r26, r24
    11a6:	cb 01       	movw	r24, r22
    11a8:	bc 01       	movw	r22, r24
    11aa:	cd 01       	movw	r24, r26
    11ac:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    11b0:	dc 01       	movw	r26, r24
    11b2:	cb 01       	movw	r24, r22
    11b4:	9f 8f       	std	Y+31, r25	; 0x1f
    11b6:	8e 8f       	std	Y+30, r24	; 0x1e
    11b8:	0f c0       	rjmp	.+30     	; 0x11d8 <SSD_viddisplyNum+0x180>
    11ba:	80 e9       	ldi	r24, 0x90	; 144
    11bc:	91 e0       	ldi	r25, 0x01	; 1
    11be:	9d 8f       	std	Y+29, r25	; 0x1d
    11c0:	8c 8f       	std	Y+28, r24	; 0x1c
    11c2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    11c4:	9d 8d       	ldd	r25, Y+29	; 0x1d
    11c6:	01 97       	sbiw	r24, 0x01	; 1
    11c8:	f1 f7       	brne	.-4      	; 0x11c6 <SSD_viddisplyNum+0x16e>
    11ca:	9d 8f       	std	Y+29, r25	; 0x1d
    11cc:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11ce:	8e 8d       	ldd	r24, Y+30	; 0x1e
    11d0:	9f 8d       	ldd	r25, Y+31	; 0x1f
    11d2:	01 97       	sbiw	r24, 0x01	; 1
    11d4:	9f 8f       	std	Y+31, r25	; 0x1f
    11d6:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11d8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    11da:	9f 8d       	ldd	r25, Y+31	; 0x1f
    11dc:	00 97       	sbiw	r24, 0x00	; 0
    11de:	69 f7       	brne	.-38     	; 0x11ba <SSD_viddisplyNum+0x162>
    11e0:	24 c0       	rjmp	.+72     	; 0x122a <SSD_viddisplyNum+0x1d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11e2:	68 a1       	ldd	r22, Y+32	; 0x20
    11e4:	79 a1       	ldd	r23, Y+33	; 0x21
    11e6:	8a a1       	ldd	r24, Y+34	; 0x22
    11e8:	9b a1       	ldd	r25, Y+35	; 0x23
    11ea:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    11ee:	dc 01       	movw	r26, r24
    11f0:	cb 01       	movw	r24, r22
    11f2:	9f 8f       	std	Y+31, r25	; 0x1f
    11f4:	8e 8f       	std	Y+30, r24	; 0x1e
    11f6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    11f8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    11fa:	9b 8f       	std	Y+27, r25	; 0x1b
    11fc:	8a 8f       	std	Y+26, r24	; 0x1a
    11fe:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1200:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1202:	01 97       	sbiw	r24, 0x01	; 1
    1204:	f1 f7       	brne	.-4      	; 0x1202 <SSD_viddisplyNum+0x1aa>
    1206:	9b 8f       	std	Y+27, r25	; 0x1b
    1208:	8a 8f       	std	Y+26, r24	; 0x1a
    120a:	0f c0       	rjmp	.+30     	; 0x122a <SSD_viddisplyNum+0x1d2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    120c:	69 a5       	ldd	r22, Y+41	; 0x29
    120e:	7a a5       	ldd	r23, Y+42	; 0x2a
    1210:	8b a5       	ldd	r24, Y+43	; 0x2b
    1212:	9c a5       	ldd	r25, Y+44	; 0x2c
    1214:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1218:	dc 01       	movw	r26, r24
    121a:	cb 01       	movw	r24, r22
    121c:	88 a7       	std	Y+40, r24	; 0x28
    121e:	88 a5       	ldd	r24, Y+40	; 0x28
    1220:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1222:	89 8d       	ldd	r24, Y+25	; 0x19
    1224:	8a 95       	dec	r24
    1226:	f1 f7       	brne	.-4      	; 0x1224 <SSD_viddisplyNum+0x1cc>
    1228:	89 8f       	std	Y+25, r24	; 0x19

	_delay_us(500);

	/* Disable SSD 1	-> EN1 = Low	*/
	Dio_vidwriteChanel(DIO_PORTB, DIO_PIN2, DIO_LOW);
    122a:	81 e0       	ldi	r24, 0x01	; 1
    122c:	62 e0       	ldi	r22, 0x02	; 2
    122e:	40 e0       	ldi	r20, 0x00	; 0
    1230:	0e 94 1f 13 	call	0x263e	; 0x263e <Dio_vidwriteChanel>
	/* Enable SSD 2 -> EN2 = High	*/
	Dio_vidwriteChanel(DIO_PORTB, DIO_PIN1, DIO_HIGH);
    1234:	81 e0       	ldi	r24, 0x01	; 1
    1236:	61 e0       	ldi	r22, 0x01	; 1
    1238:	41 e0       	ldi	r20, 0x01	; 1
    123a:	0e 94 1f 13 	call	0x263e	; 0x263e <Dio_vidwriteChanel>
	/* Write second digit */
	Dio_vidWriteChanelGroup(DIO_PORTA, loc_secondDigit, SSD_MASK);
    123e:	80 e0       	ldi	r24, 0x00	; 0
    1240:	6a a9       	ldd	r22, Y+50	; 0x32
    1242:	4f e0       	ldi	r20, 0x0F	; 15
    1244:	0e 94 02 14 	call	0x2804	; 0x2804 <Dio_vidWriteChanelGroup>
    1248:	80 e0       	ldi	r24, 0x00	; 0
    124a:	90 e0       	ldi	r25, 0x00	; 0
    124c:	aa ef       	ldi	r26, 0xFA	; 250
    124e:	b3 e4       	ldi	r27, 0x43	; 67
    1250:	8d 8b       	std	Y+21, r24	; 0x15
    1252:	9e 8b       	std	Y+22, r25	; 0x16
    1254:	af 8b       	std	Y+23, r26	; 0x17
    1256:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1258:	6d 89       	ldd	r22, Y+21	; 0x15
    125a:	7e 89       	ldd	r23, Y+22	; 0x16
    125c:	8f 89       	ldd	r24, Y+23	; 0x17
    125e:	98 8d       	ldd	r25, Y+24	; 0x18
    1260:	2b ea       	ldi	r18, 0xAB	; 171
    1262:	3a ea       	ldi	r19, 0xAA	; 170
    1264:	4a ea       	ldi	r20, 0xAA	; 170
    1266:	50 e4       	ldi	r21, 0x40	; 64
    1268:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    126c:	dc 01       	movw	r26, r24
    126e:	cb 01       	movw	r24, r22
    1270:	89 8b       	std	Y+17, r24	; 0x11
    1272:	9a 8b       	std	Y+18, r25	; 0x12
    1274:	ab 8b       	std	Y+19, r26	; 0x13
    1276:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1278:	69 89       	ldd	r22, Y+17	; 0x11
    127a:	7a 89       	ldd	r23, Y+18	; 0x12
    127c:	8b 89       	ldd	r24, Y+19	; 0x13
    127e:	9c 89       	ldd	r25, Y+20	; 0x14
    1280:	20 e0       	ldi	r18, 0x00	; 0
    1282:	30 e0       	ldi	r19, 0x00	; 0
    1284:	40 e8       	ldi	r20, 0x80	; 128
    1286:	5f e3       	ldi	r21, 0x3F	; 63
    1288:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    128c:	88 23       	and	r24, r24
    128e:	1c f4       	brge	.+6      	; 0x1296 <SSD_viddisplyNum+0x23e>
		__ticks = 1;
    1290:	81 e0       	ldi	r24, 0x01	; 1
    1292:	88 8b       	std	Y+16, r24	; 0x10
    1294:	91 c0       	rjmp	.+290    	; 0x13b8 <SSD_viddisplyNum+0x360>
	else if (__tmp > 255)
    1296:	69 89       	ldd	r22, Y+17	; 0x11
    1298:	7a 89       	ldd	r23, Y+18	; 0x12
    129a:	8b 89       	ldd	r24, Y+19	; 0x13
    129c:	9c 89       	ldd	r25, Y+20	; 0x14
    129e:	20 e0       	ldi	r18, 0x00	; 0
    12a0:	30 e0       	ldi	r19, 0x00	; 0
    12a2:	4f e7       	ldi	r20, 0x7F	; 127
    12a4:	53 e4       	ldi	r21, 0x43	; 67
    12a6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    12aa:	18 16       	cp	r1, r24
    12ac:	0c f0       	brlt	.+2      	; 0x12b0 <SSD_viddisplyNum+0x258>
    12ae:	7b c0       	rjmp	.+246    	; 0x13a6 <SSD_viddisplyNum+0x34e>
	{
		_delay_ms(__us / 1000.0);
    12b0:	6d 89       	ldd	r22, Y+21	; 0x15
    12b2:	7e 89       	ldd	r23, Y+22	; 0x16
    12b4:	8f 89       	ldd	r24, Y+23	; 0x17
    12b6:	98 8d       	ldd	r25, Y+24	; 0x18
    12b8:	20 e0       	ldi	r18, 0x00	; 0
    12ba:	30 e0       	ldi	r19, 0x00	; 0
    12bc:	4a e7       	ldi	r20, 0x7A	; 122
    12be:	54 e4       	ldi	r21, 0x44	; 68
    12c0:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    12c4:	dc 01       	movw	r26, r24
    12c6:	cb 01       	movw	r24, r22
    12c8:	8c 87       	std	Y+12, r24	; 0x0c
    12ca:	9d 87       	std	Y+13, r25	; 0x0d
    12cc:	ae 87       	std	Y+14, r26	; 0x0e
    12ce:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12d0:	6c 85       	ldd	r22, Y+12	; 0x0c
    12d2:	7d 85       	ldd	r23, Y+13	; 0x0d
    12d4:	8e 85       	ldd	r24, Y+14	; 0x0e
    12d6:	9f 85       	ldd	r25, Y+15	; 0x0f
    12d8:	20 e0       	ldi	r18, 0x00	; 0
    12da:	30 e0       	ldi	r19, 0x00	; 0
    12dc:	4a e7       	ldi	r20, 0x7A	; 122
    12de:	55 e4       	ldi	r21, 0x45	; 69
    12e0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    12e4:	dc 01       	movw	r26, r24
    12e6:	cb 01       	movw	r24, r22
    12e8:	88 87       	std	Y+8, r24	; 0x08
    12ea:	99 87       	std	Y+9, r25	; 0x09
    12ec:	aa 87       	std	Y+10, r26	; 0x0a
    12ee:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    12f0:	68 85       	ldd	r22, Y+8	; 0x08
    12f2:	79 85       	ldd	r23, Y+9	; 0x09
    12f4:	8a 85       	ldd	r24, Y+10	; 0x0a
    12f6:	9b 85       	ldd	r25, Y+11	; 0x0b
    12f8:	20 e0       	ldi	r18, 0x00	; 0
    12fa:	30 e0       	ldi	r19, 0x00	; 0
    12fc:	40 e8       	ldi	r20, 0x80	; 128
    12fe:	5f e3       	ldi	r21, 0x3F	; 63
    1300:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1304:	88 23       	and	r24, r24
    1306:	2c f4       	brge	.+10     	; 0x1312 <SSD_viddisplyNum+0x2ba>
		__ticks = 1;
    1308:	81 e0       	ldi	r24, 0x01	; 1
    130a:	90 e0       	ldi	r25, 0x00	; 0
    130c:	9f 83       	std	Y+7, r25	; 0x07
    130e:	8e 83       	std	Y+6, r24	; 0x06
    1310:	3f c0       	rjmp	.+126    	; 0x1390 <SSD_viddisplyNum+0x338>
	else if (__tmp > 65535)
    1312:	68 85       	ldd	r22, Y+8	; 0x08
    1314:	79 85       	ldd	r23, Y+9	; 0x09
    1316:	8a 85       	ldd	r24, Y+10	; 0x0a
    1318:	9b 85       	ldd	r25, Y+11	; 0x0b
    131a:	20 e0       	ldi	r18, 0x00	; 0
    131c:	3f ef       	ldi	r19, 0xFF	; 255
    131e:	4f e7       	ldi	r20, 0x7F	; 127
    1320:	57 e4       	ldi	r21, 0x47	; 71
    1322:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1326:	18 16       	cp	r1, r24
    1328:	4c f5       	brge	.+82     	; 0x137c <SSD_viddisplyNum+0x324>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    132a:	6c 85       	ldd	r22, Y+12	; 0x0c
    132c:	7d 85       	ldd	r23, Y+13	; 0x0d
    132e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1330:	9f 85       	ldd	r25, Y+15	; 0x0f
    1332:	20 e0       	ldi	r18, 0x00	; 0
    1334:	30 e0       	ldi	r19, 0x00	; 0
    1336:	40 e2       	ldi	r20, 0x20	; 32
    1338:	51 e4       	ldi	r21, 0x41	; 65
    133a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    133e:	dc 01       	movw	r26, r24
    1340:	cb 01       	movw	r24, r22
    1342:	bc 01       	movw	r22, r24
    1344:	cd 01       	movw	r24, r26
    1346:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    134a:	dc 01       	movw	r26, r24
    134c:	cb 01       	movw	r24, r22
    134e:	9f 83       	std	Y+7, r25	; 0x07
    1350:	8e 83       	std	Y+6, r24	; 0x06
    1352:	0f c0       	rjmp	.+30     	; 0x1372 <SSD_viddisplyNum+0x31a>
    1354:	80 e9       	ldi	r24, 0x90	; 144
    1356:	91 e0       	ldi	r25, 0x01	; 1
    1358:	9d 83       	std	Y+5, r25	; 0x05
    135a:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    135c:	8c 81       	ldd	r24, Y+4	; 0x04
    135e:	9d 81       	ldd	r25, Y+5	; 0x05
    1360:	01 97       	sbiw	r24, 0x01	; 1
    1362:	f1 f7       	brne	.-4      	; 0x1360 <SSD_viddisplyNum+0x308>
    1364:	9d 83       	std	Y+5, r25	; 0x05
    1366:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1368:	8e 81       	ldd	r24, Y+6	; 0x06
    136a:	9f 81       	ldd	r25, Y+7	; 0x07
    136c:	01 97       	sbiw	r24, 0x01	; 1
    136e:	9f 83       	std	Y+7, r25	; 0x07
    1370:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1372:	8e 81       	ldd	r24, Y+6	; 0x06
    1374:	9f 81       	ldd	r25, Y+7	; 0x07
    1376:	00 97       	sbiw	r24, 0x00	; 0
    1378:	69 f7       	brne	.-38     	; 0x1354 <SSD_viddisplyNum+0x2fc>
    137a:	24 c0       	rjmp	.+72     	; 0x13c4 <SSD_viddisplyNum+0x36c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    137c:	68 85       	ldd	r22, Y+8	; 0x08
    137e:	79 85       	ldd	r23, Y+9	; 0x09
    1380:	8a 85       	ldd	r24, Y+10	; 0x0a
    1382:	9b 85       	ldd	r25, Y+11	; 0x0b
    1384:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1388:	dc 01       	movw	r26, r24
    138a:	cb 01       	movw	r24, r22
    138c:	9f 83       	std	Y+7, r25	; 0x07
    138e:	8e 83       	std	Y+6, r24	; 0x06
    1390:	8e 81       	ldd	r24, Y+6	; 0x06
    1392:	9f 81       	ldd	r25, Y+7	; 0x07
    1394:	9b 83       	std	Y+3, r25	; 0x03
    1396:	8a 83       	std	Y+2, r24	; 0x02
    1398:	8a 81       	ldd	r24, Y+2	; 0x02
    139a:	9b 81       	ldd	r25, Y+3	; 0x03
    139c:	01 97       	sbiw	r24, 0x01	; 1
    139e:	f1 f7       	brne	.-4      	; 0x139c <SSD_viddisplyNum+0x344>
    13a0:	9b 83       	std	Y+3, r25	; 0x03
    13a2:	8a 83       	std	Y+2, r24	; 0x02
    13a4:	0f c0       	rjmp	.+30     	; 0x13c4 <SSD_viddisplyNum+0x36c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    13a6:	69 89       	ldd	r22, Y+17	; 0x11
    13a8:	7a 89       	ldd	r23, Y+18	; 0x12
    13aa:	8b 89       	ldd	r24, Y+19	; 0x13
    13ac:	9c 89       	ldd	r25, Y+20	; 0x14
    13ae:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    13b2:	dc 01       	movw	r26, r24
    13b4:	cb 01       	movw	r24, r22
    13b6:	88 8b       	std	Y+16, r24	; 0x10
    13b8:	88 89       	ldd	r24, Y+16	; 0x10
    13ba:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    13bc:	89 81       	ldd	r24, Y+1	; 0x01
    13be:	8a 95       	dec	r24
    13c0:	f1 f7       	brne	.-4      	; 0x13be <SSD_viddisplyNum+0x366>
    13c2:	89 83       	std	Y+1, r24	; 0x01

	_delay_us(500);
}
    13c4:	e3 96       	adiw	r28, 0x33	; 51
    13c6:	0f b6       	in	r0, 0x3f	; 63
    13c8:	f8 94       	cli
    13ca:	de bf       	out	0x3e, r29	; 62
    13cc:	0f be       	out	0x3f, r0	; 63
    13ce:	cd bf       	out	0x3d, r28	; 61
    13d0:	cf 91       	pop	r28
    13d2:	df 91       	pop	r29
    13d4:	08 95       	ret

000013d6 <SSD_viddelayWithDisplay_ms>:

void SSD_viddelayWithDisplay_ms(u8 num,u32 delay)
{
    13d6:	df 93       	push	r29
    13d8:	cf 93       	push	r28
    13da:	cd b7       	in	r28, 0x3d	; 61
    13dc:	de b7       	in	r29, 0x3e	; 62
    13de:	29 97       	sbiw	r28, 0x09	; 9
    13e0:	0f b6       	in	r0, 0x3f	; 63
    13e2:	f8 94       	cli
    13e4:	de bf       	out	0x3e, r29	; 62
    13e6:	0f be       	out	0x3f, r0	; 63
    13e8:	cd bf       	out	0x3d, r28	; 61
    13ea:	8d 83       	std	Y+5, r24	; 0x05
    13ec:	4e 83       	std	Y+6, r20	; 0x06
    13ee:	5f 83       	std	Y+7, r21	; 0x07
    13f0:	68 87       	std	Y+8, r22	; 0x08
    13f2:	79 87       	std	Y+9, r23	; 0x09
	u32 loc_iter =0;
    13f4:	19 82       	std	Y+1, r1	; 0x01
    13f6:	1a 82       	std	Y+2, r1	; 0x02
    13f8:	1b 82       	std	Y+3, r1	; 0x03
    13fa:	1c 82       	std	Y+4, r1	; 0x04

	for(loc_iter=0; loc_iter<delay; loc_iter++)
    13fc:	19 82       	std	Y+1, r1	; 0x01
    13fe:	1a 82       	std	Y+2, r1	; 0x02
    1400:	1b 82       	std	Y+3, r1	; 0x03
    1402:	1c 82       	std	Y+4, r1	; 0x04
    1404:	0e c0       	rjmp	.+28     	; 0x1422 <SSD_viddelayWithDisplay_ms+0x4c>
	{
		SSD_viddisplyNum(num);
    1406:	8d 81       	ldd	r24, Y+5	; 0x05
    1408:	0e 94 2c 08 	call	0x1058	; 0x1058 <SSD_viddisplyNum>

void SSD_viddelayWithDisplay_ms(u8 num,u32 delay)
{
	u32 loc_iter =0;

	for(loc_iter=0; loc_iter<delay; loc_iter++)
    140c:	89 81       	ldd	r24, Y+1	; 0x01
    140e:	9a 81       	ldd	r25, Y+2	; 0x02
    1410:	ab 81       	ldd	r26, Y+3	; 0x03
    1412:	bc 81       	ldd	r27, Y+4	; 0x04
    1414:	01 96       	adiw	r24, 0x01	; 1
    1416:	a1 1d       	adc	r26, r1
    1418:	b1 1d       	adc	r27, r1
    141a:	89 83       	std	Y+1, r24	; 0x01
    141c:	9a 83       	std	Y+2, r25	; 0x02
    141e:	ab 83       	std	Y+3, r26	; 0x03
    1420:	bc 83       	std	Y+4, r27	; 0x04
    1422:	29 81       	ldd	r18, Y+1	; 0x01
    1424:	3a 81       	ldd	r19, Y+2	; 0x02
    1426:	4b 81       	ldd	r20, Y+3	; 0x03
    1428:	5c 81       	ldd	r21, Y+4	; 0x04
    142a:	8e 81       	ldd	r24, Y+6	; 0x06
    142c:	9f 81       	ldd	r25, Y+7	; 0x07
    142e:	a8 85       	ldd	r26, Y+8	; 0x08
    1430:	b9 85       	ldd	r27, Y+9	; 0x09
    1432:	28 17       	cp	r18, r24
    1434:	39 07       	cpc	r19, r25
    1436:	4a 07       	cpc	r20, r26
    1438:	5b 07       	cpc	r21, r27
    143a:	28 f3       	brcs	.-54     	; 0x1406 <SSD_viddelayWithDisplay_ms+0x30>
	{
		SSD_viddisplyNum(num);
	}
}
    143c:	29 96       	adiw	r28, 0x09	; 9
    143e:	0f b6       	in	r0, 0x3f	; 63
    1440:	f8 94       	cli
    1442:	de bf       	out	0x3e, r29	; 62
    1444:	0f be       	out	0x3f, r0	; 63
    1446:	cd bf       	out	0x3d, r28	; 61
    1448:	cf 91       	pop	r28
    144a:	df 91       	pop	r29
    144c:	08 95       	ret

0000144e <Led_vidinit>:

#include "Dio.h"
#include "Led.h"

void Led_vidinit(void)
{
    144e:	df 93       	push	r29
    1450:	cf 93       	push	r28
    1452:	cd b7       	in	r28, 0x3d	; 61
    1454:	de b7       	in	r29, 0x3e	; 62
	Dio_vidconfigChanel(DIO_PORTC, DIO_PIN2,DIO_OUTPUT);
    1456:	82 e0       	ldi	r24, 0x02	; 2
    1458:	62 e0       	ldi	r22, 0x02	; 2
    145a:	41 e0       	ldi	r20, 0x01	; 1
    145c:	0e 94 3c 12 	call	0x2478	; 0x2478 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTC, DIO_PIN7,DIO_OUTPUT);
    1460:	82 e0       	ldi	r24, 0x02	; 2
    1462:	67 e0       	ldi	r22, 0x07	; 7
    1464:	41 e0       	ldi	r20, 0x01	; 1
    1466:	0e 94 3c 12 	call	0x2478	; 0x2478 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTD, DIO_PIN3,DIO_OUTPUT);
    146a:	83 e0       	ldi	r24, 0x03	; 3
    146c:	63 e0       	ldi	r22, 0x03	; 3
    146e:	41 e0       	ldi	r20, 0x01	; 1
    1470:	0e 94 3c 12 	call	0x2478	; 0x2478 <Dio_vidconfigChanel>
}
    1474:	cf 91       	pop	r28
    1476:	df 91       	pop	r29
    1478:	08 95       	ret

0000147a <Led_vidledOn>:

void Led_vidledOn(led_ledId_t ledId)
{
    147a:	df 93       	push	r29
    147c:	cf 93       	push	r28
    147e:	00 d0       	rcall	.+0      	; 0x1480 <Led_vidledOn+0x6>
    1480:	0f 92       	push	r0
    1482:	cd b7       	in	r28, 0x3d	; 61
    1484:	de b7       	in	r29, 0x3e	; 62
    1486:	89 83       	std	Y+1, r24	; 0x01
	switch (ledId)
    1488:	89 81       	ldd	r24, Y+1	; 0x01
    148a:	28 2f       	mov	r18, r24
    148c:	30 e0       	ldi	r19, 0x00	; 0
    148e:	3b 83       	std	Y+3, r19	; 0x03
    1490:	2a 83       	std	Y+2, r18	; 0x02
    1492:	8a 81       	ldd	r24, Y+2	; 0x02
    1494:	9b 81       	ldd	r25, Y+3	; 0x03
    1496:	81 30       	cpi	r24, 0x01	; 1
    1498:	91 05       	cpc	r25, r1
    149a:	79 f0       	breq	.+30     	; 0x14ba <Led_vidledOn+0x40>
    149c:	2a 81       	ldd	r18, Y+2	; 0x02
    149e:	3b 81       	ldd	r19, Y+3	; 0x03
    14a0:	22 30       	cpi	r18, 0x02	; 2
    14a2:	31 05       	cpc	r19, r1
    14a4:	81 f0       	breq	.+32     	; 0x14c6 <Led_vidledOn+0x4c>
    14a6:	8a 81       	ldd	r24, Y+2	; 0x02
    14a8:	9b 81       	ldd	r25, Y+3	; 0x03
    14aa:	00 97       	sbiw	r24, 0x00	; 0
    14ac:	89 f4       	brne	.+34     	; 0x14d0 <Led_vidledOn+0x56>
	{
	case LED0:
		Dio_vidwriteChanel(DIO_PORTC, DIO_PIN2, DIO_HIGH);
    14ae:	82 e0       	ldi	r24, 0x02	; 2
    14b0:	62 e0       	ldi	r22, 0x02	; 2
    14b2:	41 e0       	ldi	r20, 0x01	; 1
    14b4:	0e 94 1f 13 	call	0x263e	; 0x263e <Dio_vidwriteChanel>
    14b8:	0b c0       	rjmp	.+22     	; 0x14d0 <Led_vidledOn+0x56>
		break;

	case LED1:
		Dio_vidwriteChanel(DIO_PORTC, DIO_PIN7, DIO_HIGH);
    14ba:	82 e0       	ldi	r24, 0x02	; 2
    14bc:	67 e0       	ldi	r22, 0x07	; 7
    14be:	41 e0       	ldi	r20, 0x01	; 1
    14c0:	0e 94 1f 13 	call	0x263e	; 0x263e <Dio_vidwriteChanel>
    14c4:	05 c0       	rjmp	.+10     	; 0x14d0 <Led_vidledOn+0x56>
		break;

	case LED2:
		Dio_vidwriteChanel(DIO_PORTD, DIO_PIN3, DIO_HIGH);
    14c6:	83 e0       	ldi	r24, 0x03	; 3
    14c8:	63 e0       	ldi	r22, 0x03	; 3
    14ca:	41 e0       	ldi	r20, 0x01	; 1
    14cc:	0e 94 1f 13 	call	0x263e	; 0x263e <Dio_vidwriteChanel>
		break;
	}
}
    14d0:	0f 90       	pop	r0
    14d2:	0f 90       	pop	r0
    14d4:	0f 90       	pop	r0
    14d6:	cf 91       	pop	r28
    14d8:	df 91       	pop	r29
    14da:	08 95       	ret

000014dc <Led_vidledOff>:

void Led_vidledOff(led_ledId_t ledId)
{
    14dc:	df 93       	push	r29
    14de:	cf 93       	push	r28
    14e0:	00 d0       	rcall	.+0      	; 0x14e2 <Led_vidledOff+0x6>
    14e2:	0f 92       	push	r0
    14e4:	cd b7       	in	r28, 0x3d	; 61
    14e6:	de b7       	in	r29, 0x3e	; 62
    14e8:	89 83       	std	Y+1, r24	; 0x01
	switch (ledId)
    14ea:	89 81       	ldd	r24, Y+1	; 0x01
    14ec:	28 2f       	mov	r18, r24
    14ee:	30 e0       	ldi	r19, 0x00	; 0
    14f0:	3b 83       	std	Y+3, r19	; 0x03
    14f2:	2a 83       	std	Y+2, r18	; 0x02
    14f4:	8a 81       	ldd	r24, Y+2	; 0x02
    14f6:	9b 81       	ldd	r25, Y+3	; 0x03
    14f8:	81 30       	cpi	r24, 0x01	; 1
    14fa:	91 05       	cpc	r25, r1
    14fc:	79 f0       	breq	.+30     	; 0x151c <Led_vidledOff+0x40>
    14fe:	2a 81       	ldd	r18, Y+2	; 0x02
    1500:	3b 81       	ldd	r19, Y+3	; 0x03
    1502:	22 30       	cpi	r18, 0x02	; 2
    1504:	31 05       	cpc	r19, r1
    1506:	81 f0       	breq	.+32     	; 0x1528 <Led_vidledOff+0x4c>
    1508:	8a 81       	ldd	r24, Y+2	; 0x02
    150a:	9b 81       	ldd	r25, Y+3	; 0x03
    150c:	00 97       	sbiw	r24, 0x00	; 0
    150e:	89 f4       	brne	.+34     	; 0x1532 <Led_vidledOff+0x56>
	{
	case LED0:
		Dio_vidwriteChanel(DIO_PORTC, DIO_PIN2, DIO_LOW);
    1510:	82 e0       	ldi	r24, 0x02	; 2
    1512:	62 e0       	ldi	r22, 0x02	; 2
    1514:	40 e0       	ldi	r20, 0x00	; 0
    1516:	0e 94 1f 13 	call	0x263e	; 0x263e <Dio_vidwriteChanel>
    151a:	0b c0       	rjmp	.+22     	; 0x1532 <Led_vidledOff+0x56>
		break;

	case LED1:
		Dio_vidwriteChanel(DIO_PORTC, DIO_PIN7, DIO_LOW);
    151c:	82 e0       	ldi	r24, 0x02	; 2
    151e:	67 e0       	ldi	r22, 0x07	; 7
    1520:	40 e0       	ldi	r20, 0x00	; 0
    1522:	0e 94 1f 13 	call	0x263e	; 0x263e <Dio_vidwriteChanel>
    1526:	05 c0       	rjmp	.+10     	; 0x1532 <Led_vidledOff+0x56>
		break;

	case LED2:
		Dio_vidwriteChanel(DIO_PORTD, DIO_PIN3, DIO_LOW);
    1528:	83 e0       	ldi	r24, 0x03	; 3
    152a:	63 e0       	ldi	r22, 0x03	; 3
    152c:	40 e0       	ldi	r20, 0x00	; 0
    152e:	0e 94 1f 13 	call	0x263e	; 0x263e <Dio_vidwriteChanel>
		break;
	}
}
    1532:	0f 90       	pop	r0
    1534:	0f 90       	pop	r0
    1536:	0f 90       	pop	r0
    1538:	cf 91       	pop	r28
    153a:	df 91       	pop	r29
    153c:	08 95       	ret

0000153e <Led_vidledToggle>:
void Led_vidledToggle(led_ledId_t ledId)
{
    153e:	df 93       	push	r29
    1540:	cf 93       	push	r28
    1542:	00 d0       	rcall	.+0      	; 0x1544 <Led_vidledToggle+0x6>
    1544:	0f 92       	push	r0
    1546:	cd b7       	in	r28, 0x3d	; 61
    1548:	de b7       	in	r29, 0x3e	; 62
    154a:	89 83       	std	Y+1, r24	; 0x01
	switch (ledId)
    154c:	89 81       	ldd	r24, Y+1	; 0x01
    154e:	28 2f       	mov	r18, r24
    1550:	30 e0       	ldi	r19, 0x00	; 0
    1552:	3b 83       	std	Y+3, r19	; 0x03
    1554:	2a 83       	std	Y+2, r18	; 0x02
    1556:	8a 81       	ldd	r24, Y+2	; 0x02
    1558:	9b 81       	ldd	r25, Y+3	; 0x03
    155a:	81 30       	cpi	r24, 0x01	; 1
    155c:	91 05       	cpc	r25, r1
    155e:	71 f0       	breq	.+28     	; 0x157c <Led_vidledToggle+0x3e>
    1560:	2a 81       	ldd	r18, Y+2	; 0x02
    1562:	3b 81       	ldd	r19, Y+3	; 0x03
    1564:	22 30       	cpi	r18, 0x02	; 2
    1566:	31 05       	cpc	r19, r1
    1568:	71 f0       	breq	.+28     	; 0x1586 <Led_vidledToggle+0x48>
    156a:	8a 81       	ldd	r24, Y+2	; 0x02
    156c:	9b 81       	ldd	r25, Y+3	; 0x03
    156e:	00 97       	sbiw	r24, 0x00	; 0
    1570:	71 f4       	brne	.+28     	; 0x158e <Led_vidledToggle+0x50>
	{
	case LED0:
		Dio_vidflipChanel(DIO_PORTC, DIO_PIN2);
    1572:	82 e0       	ldi	r24, 0x02	; 2
    1574:	62 e0       	ldi	r22, 0x02	; 2
    1576:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <Dio_vidflipChanel>
    157a:	09 c0       	rjmp	.+18     	; 0x158e <Led_vidledToggle+0x50>
		break;

	case LED1:
		Dio_vidflipChanel(DIO_PORTC, DIO_PIN7);
    157c:	82 e0       	ldi	r24, 0x02	; 2
    157e:	67 e0       	ldi	r22, 0x07	; 7
    1580:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <Dio_vidflipChanel>
    1584:	04 c0       	rjmp	.+8      	; 0x158e <Led_vidledToggle+0x50>
		break;

	case LED2:
		Dio_vidflipChanel(DIO_PORTD, DIO_PIN3);
    1586:	83 e0       	ldi	r24, 0x03	; 3
    1588:	63 e0       	ldi	r22, 0x03	; 3
    158a:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <Dio_vidflipChanel>
		break;
	}
}
    158e:	0f 90       	pop	r0
    1590:	0f 90       	pop	r0
    1592:	0f 90       	pop	r0
    1594:	cf 91       	pop	r28
    1596:	df 91       	pop	r29
    1598:	08 95       	ret

0000159a <Lm35_vidInit>:
 */

#include "Std_Types.h"

void Lm35_vidInit(void)
{
    159a:	df 93       	push	r29
    159c:	cf 93       	push	r28
    159e:	cd b7       	in	r28, 0x3d	; 61
    15a0:	de b7       	in	r29, 0x3e	; 62

}
    15a2:	cf 91       	pop	r28
    15a4:	df 91       	pop	r29
    15a6:	08 95       	ret

000015a8 <Lm35_u8TempRead>:
u8 Lm35_u8TempRead(void)
{
    15a8:	df 93       	push	r29
    15aa:	cf 93       	push	r28
    15ac:	0f 92       	push	r0
    15ae:	cd b7       	in	r28, 0x3d	; 61
    15b0:	de b7       	in	r29, 0x3e	; 62

}
    15b2:	0f 90       	pop	r0
    15b4:	cf 91       	pop	r28
    15b6:	df 91       	pop	r29
    15b8:	08 95       	ret

000015ba <Lcd_vidinit>:
#include "util/delay.h"
#include <stdio.h>


void Lcd_vidinit(void)
{
    15ba:	df 93       	push	r29
    15bc:	cf 93       	push	r28
    15be:	cd b7       	in	r28, 0x3d	; 61
    15c0:	de b7       	in	r29, 0x3e	; 62
    15c2:	e4 97       	sbiw	r28, 0x34	; 52
    15c4:	0f b6       	in	r0, 0x3f	; 63
    15c6:	f8 94       	cli
    15c8:	de bf       	out	0x3e, r29	; 62
    15ca:	0f be       	out	0x3f, r0	; 63
    15cc:	cd bf       	out	0x3d, r28	; 61
	/*	configure control pins as output	*/
	Dio_vidconfigChanel(DIO_PORTB, DIO_PIN1, DIO_OUTPUT);
    15ce:	81 e0       	ldi	r24, 0x01	; 1
    15d0:	61 e0       	ldi	r22, 0x01	; 1
    15d2:	41 e0       	ldi	r20, 0x01	; 1
    15d4:	0e 94 3c 12 	call	0x2478	; 0x2478 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTB, DIO_PIN2, DIO_OUTPUT);
    15d8:	81 e0       	ldi	r24, 0x01	; 1
    15da:	62 e0       	ldi	r22, 0x02	; 2
    15dc:	41 e0       	ldi	r20, 0x01	; 1
    15de:	0e 94 3c 12 	call	0x2478	; 0x2478 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTB, DIO_PIN3, DIO_OUTPUT);
    15e2:	81 e0       	ldi	r24, 0x01	; 1
    15e4:	63 e0       	ldi	r22, 0x03	; 3
    15e6:	41 e0       	ldi	r20, 0x01	; 1
    15e8:	0e 94 3c 12 	call	0x2478	; 0x2478 <Dio_vidconfigChanel>

	/*	configure data pins as output	*/
	Dio_vidconfigChanel(DIO_PORTA, DIO_PIN4, DIO_OUTPUT);
    15ec:	80 e0       	ldi	r24, 0x00	; 0
    15ee:	64 e0       	ldi	r22, 0x04	; 4
    15f0:	41 e0       	ldi	r20, 0x01	; 1
    15f2:	0e 94 3c 12 	call	0x2478	; 0x2478 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTA, DIO_PIN5, DIO_OUTPUT);
    15f6:	80 e0       	ldi	r24, 0x00	; 0
    15f8:	65 e0       	ldi	r22, 0x05	; 5
    15fa:	41 e0       	ldi	r20, 0x01	; 1
    15fc:	0e 94 3c 12 	call	0x2478	; 0x2478 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTA, DIO_PIN6, DIO_OUTPUT);
    1600:	80 e0       	ldi	r24, 0x00	; 0
    1602:	66 e0       	ldi	r22, 0x06	; 6
    1604:	41 e0       	ldi	r20, 0x01	; 1
    1606:	0e 94 3c 12 	call	0x2478	; 0x2478 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTA, DIO_PIN7, DIO_OUTPUT);
    160a:	80 e0       	ldi	r24, 0x00	; 0
    160c:	67 e0       	ldi	r22, 0x07	; 7
    160e:	41 e0       	ldi	r20, 0x01	; 1
    1610:	0e 94 3c 12 	call	0x2478	; 0x2478 <Dio_vidconfigChanel>

	Dio_vidwriteChanel(DIO_PORTB, DIO_PIN2, DIO_LOW);
    1614:	81 e0       	ldi	r24, 0x01	; 1
    1616:	62 e0       	ldi	r22, 0x02	; 2
    1618:	40 e0       	ldi	r20, 0x00	; 0
    161a:	0e 94 1f 13 	call	0x263e	; 0x263e <Dio_vidwriteChanel>
    161e:	80 e0       	ldi	r24, 0x00	; 0
    1620:	90 e0       	ldi	r25, 0x00	; 0
    1622:	a0 e7       	ldi	r26, 0x70	; 112
    1624:	b1 e4       	ldi	r27, 0x41	; 65
    1626:	89 ab       	std	Y+49, r24	; 0x31
    1628:	9a ab       	std	Y+50, r25	; 0x32
    162a:	ab ab       	std	Y+51, r26	; 0x33
    162c:	bc ab       	std	Y+52, r27	; 0x34
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    162e:	69 a9       	ldd	r22, Y+49	; 0x31
    1630:	7a a9       	ldd	r23, Y+50	; 0x32
    1632:	8b a9       	ldd	r24, Y+51	; 0x33
    1634:	9c a9       	ldd	r25, Y+52	; 0x34
    1636:	20 e0       	ldi	r18, 0x00	; 0
    1638:	30 e0       	ldi	r19, 0x00	; 0
    163a:	4a e7       	ldi	r20, 0x7A	; 122
    163c:	55 e4       	ldi	r21, 0x45	; 69
    163e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1642:	dc 01       	movw	r26, r24
    1644:	cb 01       	movw	r24, r22
    1646:	8d a7       	std	Y+45, r24	; 0x2d
    1648:	9e a7       	std	Y+46, r25	; 0x2e
    164a:	af a7       	std	Y+47, r26	; 0x2f
    164c:	b8 ab       	std	Y+48, r27	; 0x30
	if (__tmp < 1.0)
    164e:	6d a5       	ldd	r22, Y+45	; 0x2d
    1650:	7e a5       	ldd	r23, Y+46	; 0x2e
    1652:	8f a5       	ldd	r24, Y+47	; 0x2f
    1654:	98 a9       	ldd	r25, Y+48	; 0x30
    1656:	20 e0       	ldi	r18, 0x00	; 0
    1658:	30 e0       	ldi	r19, 0x00	; 0
    165a:	40 e8       	ldi	r20, 0x80	; 128
    165c:	5f e3       	ldi	r21, 0x3F	; 63
    165e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1662:	88 23       	and	r24, r24
    1664:	2c f4       	brge	.+10     	; 0x1670 <Lcd_vidinit+0xb6>
		__ticks = 1;
    1666:	81 e0       	ldi	r24, 0x01	; 1
    1668:	90 e0       	ldi	r25, 0x00	; 0
    166a:	9c a7       	std	Y+44, r25	; 0x2c
    166c:	8b a7       	std	Y+43, r24	; 0x2b
    166e:	3f c0       	rjmp	.+126    	; 0x16ee <Lcd_vidinit+0x134>
	else if (__tmp > 65535)
    1670:	6d a5       	ldd	r22, Y+45	; 0x2d
    1672:	7e a5       	ldd	r23, Y+46	; 0x2e
    1674:	8f a5       	ldd	r24, Y+47	; 0x2f
    1676:	98 a9       	ldd	r25, Y+48	; 0x30
    1678:	20 e0       	ldi	r18, 0x00	; 0
    167a:	3f ef       	ldi	r19, 0xFF	; 255
    167c:	4f e7       	ldi	r20, 0x7F	; 127
    167e:	57 e4       	ldi	r21, 0x47	; 71
    1680:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1684:	18 16       	cp	r1, r24
    1686:	4c f5       	brge	.+82     	; 0x16da <Lcd_vidinit+0x120>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1688:	69 a9       	ldd	r22, Y+49	; 0x31
    168a:	7a a9       	ldd	r23, Y+50	; 0x32
    168c:	8b a9       	ldd	r24, Y+51	; 0x33
    168e:	9c a9       	ldd	r25, Y+52	; 0x34
    1690:	20 e0       	ldi	r18, 0x00	; 0
    1692:	30 e0       	ldi	r19, 0x00	; 0
    1694:	40 e2       	ldi	r20, 0x20	; 32
    1696:	51 e4       	ldi	r21, 0x41	; 65
    1698:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    169c:	dc 01       	movw	r26, r24
    169e:	cb 01       	movw	r24, r22
    16a0:	bc 01       	movw	r22, r24
    16a2:	cd 01       	movw	r24, r26
    16a4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16a8:	dc 01       	movw	r26, r24
    16aa:	cb 01       	movw	r24, r22
    16ac:	9c a7       	std	Y+44, r25	; 0x2c
    16ae:	8b a7       	std	Y+43, r24	; 0x2b
    16b0:	0f c0       	rjmp	.+30     	; 0x16d0 <Lcd_vidinit+0x116>
    16b2:	80 e9       	ldi	r24, 0x90	; 144
    16b4:	91 e0       	ldi	r25, 0x01	; 1
    16b6:	9a a7       	std	Y+42, r25	; 0x2a
    16b8:	89 a7       	std	Y+41, r24	; 0x29
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    16ba:	89 a5       	ldd	r24, Y+41	; 0x29
    16bc:	9a a5       	ldd	r25, Y+42	; 0x2a
    16be:	01 97       	sbiw	r24, 0x01	; 1
    16c0:	f1 f7       	brne	.-4      	; 0x16be <Lcd_vidinit+0x104>
    16c2:	9a a7       	std	Y+42, r25	; 0x2a
    16c4:	89 a7       	std	Y+41, r24	; 0x29
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16c6:	8b a5       	ldd	r24, Y+43	; 0x2b
    16c8:	9c a5       	ldd	r25, Y+44	; 0x2c
    16ca:	01 97       	sbiw	r24, 0x01	; 1
    16cc:	9c a7       	std	Y+44, r25	; 0x2c
    16ce:	8b a7       	std	Y+43, r24	; 0x2b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16d0:	8b a5       	ldd	r24, Y+43	; 0x2b
    16d2:	9c a5       	ldd	r25, Y+44	; 0x2c
    16d4:	00 97       	sbiw	r24, 0x00	; 0
    16d6:	69 f7       	brne	.-38     	; 0x16b2 <Lcd_vidinit+0xf8>
    16d8:	14 c0       	rjmp	.+40     	; 0x1702 <Lcd_vidinit+0x148>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16da:	6d a5       	ldd	r22, Y+45	; 0x2d
    16dc:	7e a5       	ldd	r23, Y+46	; 0x2e
    16de:	8f a5       	ldd	r24, Y+47	; 0x2f
    16e0:	98 a9       	ldd	r25, Y+48	; 0x30
    16e2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16e6:	dc 01       	movw	r26, r24
    16e8:	cb 01       	movw	r24, r22
    16ea:	9c a7       	std	Y+44, r25	; 0x2c
    16ec:	8b a7       	std	Y+43, r24	; 0x2b
    16ee:	8b a5       	ldd	r24, Y+43	; 0x2b
    16f0:	9c a5       	ldd	r25, Y+44	; 0x2c
    16f2:	98 a7       	std	Y+40, r25	; 0x28
    16f4:	8f a3       	std	Y+39, r24	; 0x27
    16f6:	8f a1       	ldd	r24, Y+39	; 0x27
    16f8:	98 a5       	ldd	r25, Y+40	; 0x28
    16fa:	01 97       	sbiw	r24, 0x01	; 1
    16fc:	f1 f7       	brne	.-4      	; 0x16fa <Lcd_vidinit+0x140>
    16fe:	98 a7       	std	Y+40, r25	; 0x28
    1700:	8f a3       	std	Y+39, r24	; 0x27

	_delay_ms(15);

	Lcd_vidCmd(0x03);
    1702:	83 e0       	ldi	r24, 0x03	; 3
    1704:	0e 94 3d 0e 	call	0x1c7a	; 0x1c7a <Lcd_vidCmd>
    1708:	80 e0       	ldi	r24, 0x00	; 0
    170a:	90 e0       	ldi	r25, 0x00	; 0
    170c:	a0 ea       	ldi	r26, 0xA0	; 160
    170e:	b0 e4       	ldi	r27, 0x40	; 64
    1710:	8b a3       	std	Y+35, r24	; 0x23
    1712:	9c a3       	std	Y+36, r25	; 0x24
    1714:	ad a3       	std	Y+37, r26	; 0x25
    1716:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1718:	6b a1       	ldd	r22, Y+35	; 0x23
    171a:	7c a1       	ldd	r23, Y+36	; 0x24
    171c:	8d a1       	ldd	r24, Y+37	; 0x25
    171e:	9e a1       	ldd	r25, Y+38	; 0x26
    1720:	20 e0       	ldi	r18, 0x00	; 0
    1722:	30 e0       	ldi	r19, 0x00	; 0
    1724:	4a e7       	ldi	r20, 0x7A	; 122
    1726:	55 e4       	ldi	r21, 0x45	; 69
    1728:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    172c:	dc 01       	movw	r26, r24
    172e:	cb 01       	movw	r24, r22
    1730:	8f 8f       	std	Y+31, r24	; 0x1f
    1732:	98 a3       	std	Y+32, r25	; 0x20
    1734:	a9 a3       	std	Y+33, r26	; 0x21
    1736:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    1738:	6f 8d       	ldd	r22, Y+31	; 0x1f
    173a:	78 a1       	ldd	r23, Y+32	; 0x20
    173c:	89 a1       	ldd	r24, Y+33	; 0x21
    173e:	9a a1       	ldd	r25, Y+34	; 0x22
    1740:	20 e0       	ldi	r18, 0x00	; 0
    1742:	30 e0       	ldi	r19, 0x00	; 0
    1744:	40 e8       	ldi	r20, 0x80	; 128
    1746:	5f e3       	ldi	r21, 0x3F	; 63
    1748:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    174c:	88 23       	and	r24, r24
    174e:	2c f4       	brge	.+10     	; 0x175a <Lcd_vidinit+0x1a0>
		__ticks = 1;
    1750:	81 e0       	ldi	r24, 0x01	; 1
    1752:	90 e0       	ldi	r25, 0x00	; 0
    1754:	9e 8f       	std	Y+30, r25	; 0x1e
    1756:	8d 8f       	std	Y+29, r24	; 0x1d
    1758:	3f c0       	rjmp	.+126    	; 0x17d8 <Lcd_vidinit+0x21e>
	else if (__tmp > 65535)
    175a:	6f 8d       	ldd	r22, Y+31	; 0x1f
    175c:	78 a1       	ldd	r23, Y+32	; 0x20
    175e:	89 a1       	ldd	r24, Y+33	; 0x21
    1760:	9a a1       	ldd	r25, Y+34	; 0x22
    1762:	20 e0       	ldi	r18, 0x00	; 0
    1764:	3f ef       	ldi	r19, 0xFF	; 255
    1766:	4f e7       	ldi	r20, 0x7F	; 127
    1768:	57 e4       	ldi	r21, 0x47	; 71
    176a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    176e:	18 16       	cp	r1, r24
    1770:	4c f5       	brge	.+82     	; 0x17c4 <Lcd_vidinit+0x20a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1772:	6b a1       	ldd	r22, Y+35	; 0x23
    1774:	7c a1       	ldd	r23, Y+36	; 0x24
    1776:	8d a1       	ldd	r24, Y+37	; 0x25
    1778:	9e a1       	ldd	r25, Y+38	; 0x26
    177a:	20 e0       	ldi	r18, 0x00	; 0
    177c:	30 e0       	ldi	r19, 0x00	; 0
    177e:	40 e2       	ldi	r20, 0x20	; 32
    1780:	51 e4       	ldi	r21, 0x41	; 65
    1782:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1786:	dc 01       	movw	r26, r24
    1788:	cb 01       	movw	r24, r22
    178a:	bc 01       	movw	r22, r24
    178c:	cd 01       	movw	r24, r26
    178e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1792:	dc 01       	movw	r26, r24
    1794:	cb 01       	movw	r24, r22
    1796:	9e 8f       	std	Y+30, r25	; 0x1e
    1798:	8d 8f       	std	Y+29, r24	; 0x1d
    179a:	0f c0       	rjmp	.+30     	; 0x17ba <Lcd_vidinit+0x200>
    179c:	80 e9       	ldi	r24, 0x90	; 144
    179e:	91 e0       	ldi	r25, 0x01	; 1
    17a0:	9c 8f       	std	Y+28, r25	; 0x1c
    17a2:	8b 8f       	std	Y+27, r24	; 0x1b
    17a4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    17a6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    17a8:	01 97       	sbiw	r24, 0x01	; 1
    17aa:	f1 f7       	brne	.-4      	; 0x17a8 <Lcd_vidinit+0x1ee>
    17ac:	9c 8f       	std	Y+28, r25	; 0x1c
    17ae:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17b0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    17b2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    17b4:	01 97       	sbiw	r24, 0x01	; 1
    17b6:	9e 8f       	std	Y+30, r25	; 0x1e
    17b8:	8d 8f       	std	Y+29, r24	; 0x1d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17ba:	8d 8d       	ldd	r24, Y+29	; 0x1d
    17bc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    17be:	00 97       	sbiw	r24, 0x00	; 0
    17c0:	69 f7       	brne	.-38     	; 0x179c <Lcd_vidinit+0x1e2>
    17c2:	14 c0       	rjmp	.+40     	; 0x17ec <Lcd_vidinit+0x232>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17c4:	6f 8d       	ldd	r22, Y+31	; 0x1f
    17c6:	78 a1       	ldd	r23, Y+32	; 0x20
    17c8:	89 a1       	ldd	r24, Y+33	; 0x21
    17ca:	9a a1       	ldd	r25, Y+34	; 0x22
    17cc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17d0:	dc 01       	movw	r26, r24
    17d2:	cb 01       	movw	r24, r22
    17d4:	9e 8f       	std	Y+30, r25	; 0x1e
    17d6:	8d 8f       	std	Y+29, r24	; 0x1d
    17d8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    17da:	9e 8d       	ldd	r25, Y+30	; 0x1e
    17dc:	9a 8f       	std	Y+26, r25	; 0x1a
    17de:	89 8f       	std	Y+25, r24	; 0x19
    17e0:	89 8d       	ldd	r24, Y+25	; 0x19
    17e2:	9a 8d       	ldd	r25, Y+26	; 0x1a
    17e4:	01 97       	sbiw	r24, 0x01	; 1
    17e6:	f1 f7       	brne	.-4      	; 0x17e4 <Lcd_vidinit+0x22a>
    17e8:	9a 8f       	std	Y+26, r25	; 0x1a
    17ea:	89 8f       	std	Y+25, r24	; 0x19
	_delay_ms(5);
	Lcd_vidCmd(0x03);
    17ec:	83 e0       	ldi	r24, 0x03	; 3
    17ee:	0e 94 3d 0e 	call	0x1c7a	; 0x1c7a <Lcd_vidCmd>
    17f2:	80 e0       	ldi	r24, 0x00	; 0
    17f4:	90 e0       	ldi	r25, 0x00	; 0
    17f6:	a8 ec       	ldi	r26, 0xC8	; 200
    17f8:	b2 e4       	ldi	r27, 0x42	; 66
    17fa:	8d 8b       	std	Y+21, r24	; 0x15
    17fc:	9e 8b       	std	Y+22, r25	; 0x16
    17fe:	af 8b       	std	Y+23, r26	; 0x17
    1800:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1802:	6d 89       	ldd	r22, Y+21	; 0x15
    1804:	7e 89       	ldd	r23, Y+22	; 0x16
    1806:	8f 89       	ldd	r24, Y+23	; 0x17
    1808:	98 8d       	ldd	r25, Y+24	; 0x18
    180a:	2b ea       	ldi	r18, 0xAB	; 171
    180c:	3a ea       	ldi	r19, 0xAA	; 170
    180e:	4a ea       	ldi	r20, 0xAA	; 170
    1810:	50 e4       	ldi	r21, 0x40	; 64
    1812:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1816:	dc 01       	movw	r26, r24
    1818:	cb 01       	movw	r24, r22
    181a:	89 8b       	std	Y+17, r24	; 0x11
    181c:	9a 8b       	std	Y+18, r25	; 0x12
    181e:	ab 8b       	std	Y+19, r26	; 0x13
    1820:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1822:	69 89       	ldd	r22, Y+17	; 0x11
    1824:	7a 89       	ldd	r23, Y+18	; 0x12
    1826:	8b 89       	ldd	r24, Y+19	; 0x13
    1828:	9c 89       	ldd	r25, Y+20	; 0x14
    182a:	20 e0       	ldi	r18, 0x00	; 0
    182c:	30 e0       	ldi	r19, 0x00	; 0
    182e:	40 e8       	ldi	r20, 0x80	; 128
    1830:	5f e3       	ldi	r21, 0x3F	; 63
    1832:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1836:	88 23       	and	r24, r24
    1838:	1c f4       	brge	.+6      	; 0x1840 <Lcd_vidinit+0x286>
		__ticks = 1;
    183a:	81 e0       	ldi	r24, 0x01	; 1
    183c:	88 8b       	std	Y+16, r24	; 0x10
    183e:	91 c0       	rjmp	.+290    	; 0x1962 <Lcd_vidinit+0x3a8>
	else if (__tmp > 255)
    1840:	69 89       	ldd	r22, Y+17	; 0x11
    1842:	7a 89       	ldd	r23, Y+18	; 0x12
    1844:	8b 89       	ldd	r24, Y+19	; 0x13
    1846:	9c 89       	ldd	r25, Y+20	; 0x14
    1848:	20 e0       	ldi	r18, 0x00	; 0
    184a:	30 e0       	ldi	r19, 0x00	; 0
    184c:	4f e7       	ldi	r20, 0x7F	; 127
    184e:	53 e4       	ldi	r21, 0x43	; 67
    1850:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1854:	18 16       	cp	r1, r24
    1856:	0c f0       	brlt	.+2      	; 0x185a <Lcd_vidinit+0x2a0>
    1858:	7b c0       	rjmp	.+246    	; 0x1950 <Lcd_vidinit+0x396>
	{
		_delay_ms(__us / 1000.0);
    185a:	6d 89       	ldd	r22, Y+21	; 0x15
    185c:	7e 89       	ldd	r23, Y+22	; 0x16
    185e:	8f 89       	ldd	r24, Y+23	; 0x17
    1860:	98 8d       	ldd	r25, Y+24	; 0x18
    1862:	20 e0       	ldi	r18, 0x00	; 0
    1864:	30 e0       	ldi	r19, 0x00	; 0
    1866:	4a e7       	ldi	r20, 0x7A	; 122
    1868:	54 e4       	ldi	r21, 0x44	; 68
    186a:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    186e:	dc 01       	movw	r26, r24
    1870:	cb 01       	movw	r24, r22
    1872:	8c 87       	std	Y+12, r24	; 0x0c
    1874:	9d 87       	std	Y+13, r25	; 0x0d
    1876:	ae 87       	std	Y+14, r26	; 0x0e
    1878:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    187a:	6c 85       	ldd	r22, Y+12	; 0x0c
    187c:	7d 85       	ldd	r23, Y+13	; 0x0d
    187e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1880:	9f 85       	ldd	r25, Y+15	; 0x0f
    1882:	20 e0       	ldi	r18, 0x00	; 0
    1884:	30 e0       	ldi	r19, 0x00	; 0
    1886:	4a e7       	ldi	r20, 0x7A	; 122
    1888:	55 e4       	ldi	r21, 0x45	; 69
    188a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    188e:	dc 01       	movw	r26, r24
    1890:	cb 01       	movw	r24, r22
    1892:	88 87       	std	Y+8, r24	; 0x08
    1894:	99 87       	std	Y+9, r25	; 0x09
    1896:	aa 87       	std	Y+10, r26	; 0x0a
    1898:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    189a:	68 85       	ldd	r22, Y+8	; 0x08
    189c:	79 85       	ldd	r23, Y+9	; 0x09
    189e:	8a 85       	ldd	r24, Y+10	; 0x0a
    18a0:	9b 85       	ldd	r25, Y+11	; 0x0b
    18a2:	20 e0       	ldi	r18, 0x00	; 0
    18a4:	30 e0       	ldi	r19, 0x00	; 0
    18a6:	40 e8       	ldi	r20, 0x80	; 128
    18a8:	5f e3       	ldi	r21, 0x3F	; 63
    18aa:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    18ae:	88 23       	and	r24, r24
    18b0:	2c f4       	brge	.+10     	; 0x18bc <Lcd_vidinit+0x302>
		__ticks = 1;
    18b2:	81 e0       	ldi	r24, 0x01	; 1
    18b4:	90 e0       	ldi	r25, 0x00	; 0
    18b6:	9f 83       	std	Y+7, r25	; 0x07
    18b8:	8e 83       	std	Y+6, r24	; 0x06
    18ba:	3f c0       	rjmp	.+126    	; 0x193a <Lcd_vidinit+0x380>
	else if (__tmp > 65535)
    18bc:	68 85       	ldd	r22, Y+8	; 0x08
    18be:	79 85       	ldd	r23, Y+9	; 0x09
    18c0:	8a 85       	ldd	r24, Y+10	; 0x0a
    18c2:	9b 85       	ldd	r25, Y+11	; 0x0b
    18c4:	20 e0       	ldi	r18, 0x00	; 0
    18c6:	3f ef       	ldi	r19, 0xFF	; 255
    18c8:	4f e7       	ldi	r20, 0x7F	; 127
    18ca:	57 e4       	ldi	r21, 0x47	; 71
    18cc:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    18d0:	18 16       	cp	r1, r24
    18d2:	4c f5       	brge	.+82     	; 0x1926 <Lcd_vidinit+0x36c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18d4:	6c 85       	ldd	r22, Y+12	; 0x0c
    18d6:	7d 85       	ldd	r23, Y+13	; 0x0d
    18d8:	8e 85       	ldd	r24, Y+14	; 0x0e
    18da:	9f 85       	ldd	r25, Y+15	; 0x0f
    18dc:	20 e0       	ldi	r18, 0x00	; 0
    18de:	30 e0       	ldi	r19, 0x00	; 0
    18e0:	40 e2       	ldi	r20, 0x20	; 32
    18e2:	51 e4       	ldi	r21, 0x41	; 65
    18e4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18e8:	dc 01       	movw	r26, r24
    18ea:	cb 01       	movw	r24, r22
    18ec:	bc 01       	movw	r22, r24
    18ee:	cd 01       	movw	r24, r26
    18f0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18f4:	dc 01       	movw	r26, r24
    18f6:	cb 01       	movw	r24, r22
    18f8:	9f 83       	std	Y+7, r25	; 0x07
    18fa:	8e 83       	std	Y+6, r24	; 0x06
    18fc:	0f c0       	rjmp	.+30     	; 0x191c <Lcd_vidinit+0x362>
    18fe:	80 e9       	ldi	r24, 0x90	; 144
    1900:	91 e0       	ldi	r25, 0x01	; 1
    1902:	9d 83       	std	Y+5, r25	; 0x05
    1904:	8c 83       	std	Y+4, r24	; 0x04
    1906:	8c 81       	ldd	r24, Y+4	; 0x04
    1908:	9d 81       	ldd	r25, Y+5	; 0x05
    190a:	01 97       	sbiw	r24, 0x01	; 1
    190c:	f1 f7       	brne	.-4      	; 0x190a <Lcd_vidinit+0x350>
    190e:	9d 83       	std	Y+5, r25	; 0x05
    1910:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1912:	8e 81       	ldd	r24, Y+6	; 0x06
    1914:	9f 81       	ldd	r25, Y+7	; 0x07
    1916:	01 97       	sbiw	r24, 0x01	; 1
    1918:	9f 83       	std	Y+7, r25	; 0x07
    191a:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    191c:	8e 81       	ldd	r24, Y+6	; 0x06
    191e:	9f 81       	ldd	r25, Y+7	; 0x07
    1920:	00 97       	sbiw	r24, 0x00	; 0
    1922:	69 f7       	brne	.-38     	; 0x18fe <Lcd_vidinit+0x344>
    1924:	24 c0       	rjmp	.+72     	; 0x196e <Lcd_vidinit+0x3b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1926:	68 85       	ldd	r22, Y+8	; 0x08
    1928:	79 85       	ldd	r23, Y+9	; 0x09
    192a:	8a 85       	ldd	r24, Y+10	; 0x0a
    192c:	9b 85       	ldd	r25, Y+11	; 0x0b
    192e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1932:	dc 01       	movw	r26, r24
    1934:	cb 01       	movw	r24, r22
    1936:	9f 83       	std	Y+7, r25	; 0x07
    1938:	8e 83       	std	Y+6, r24	; 0x06
    193a:	8e 81       	ldd	r24, Y+6	; 0x06
    193c:	9f 81       	ldd	r25, Y+7	; 0x07
    193e:	9b 83       	std	Y+3, r25	; 0x03
    1940:	8a 83       	std	Y+2, r24	; 0x02
    1942:	8a 81       	ldd	r24, Y+2	; 0x02
    1944:	9b 81       	ldd	r25, Y+3	; 0x03
    1946:	01 97       	sbiw	r24, 0x01	; 1
    1948:	f1 f7       	brne	.-4      	; 0x1946 <Lcd_vidinit+0x38c>
    194a:	9b 83       	std	Y+3, r25	; 0x03
    194c:	8a 83       	std	Y+2, r24	; 0x02
    194e:	0f c0       	rjmp	.+30     	; 0x196e <Lcd_vidinit+0x3b4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1950:	69 89       	ldd	r22, Y+17	; 0x11
    1952:	7a 89       	ldd	r23, Y+18	; 0x12
    1954:	8b 89       	ldd	r24, Y+19	; 0x13
    1956:	9c 89       	ldd	r25, Y+20	; 0x14
    1958:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    195c:	dc 01       	movw	r26, r24
    195e:	cb 01       	movw	r24, r22
    1960:	88 8b       	std	Y+16, r24	; 0x10
    1962:	88 89       	ldd	r24, Y+16	; 0x10
    1964:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1966:	89 81       	ldd	r24, Y+1	; 0x01
    1968:	8a 95       	dec	r24
    196a:	f1 f7       	brne	.-4      	; 0x1968 <Lcd_vidinit+0x3ae>
    196c:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(100);
	Lcd_vidCmd(0x03);
    196e:	83 e0       	ldi	r24, 0x03	; 3
    1970:	0e 94 3d 0e 	call	0x1c7a	; 0x1c7a <Lcd_vidCmd>
	Lcd_vidCmd(0x02);
    1974:	82 e0       	ldi	r24, 0x02	; 2
    1976:	0e 94 3d 0e 	call	0x1c7a	; 0x1c7a <Lcd_vidCmd>
	Lcd_vidCmd(_LCD_4BIT_MODE);
    197a:	88 e2       	ldi	r24, 0x28	; 40
    197c:	0e 94 3d 0e 	call	0x1c7a	; 0x1c7a <Lcd_vidCmd>
}
    1980:	e4 96       	adiw	r28, 0x34	; 52
    1982:	0f b6       	in	r0, 0x3f	; 63
    1984:	f8 94       	cli
    1986:	de bf       	out	0x3e, r29	; 62
    1988:	0f be       	out	0x3f, r0	; 63
    198a:	cd bf       	out	0x3d, r28	; 61
    198c:	cf 91       	pop	r28
    198e:	df 91       	pop	r29
    1990:	08 95       	ret

00001992 <Lcd_videnablePulse>:

static void Lcd_videnablePulse(void)
{
    1992:	df 93       	push	r29
    1994:	cf 93       	push	r28
    1996:	cd b7       	in	r28, 0x3d	; 61
    1998:	de b7       	in	r29, 0x3e	; 62
    199a:	a6 97       	sbiw	r28, 0x26	; 38
    199c:	0f b6       	in	r0, 0x3f	; 63
    199e:	f8 94       	cli
    19a0:	de bf       	out	0x3e, r29	; 62
    19a2:	0f be       	out	0x3f, r0	; 63
    19a4:	cd bf       	out	0x3d, r28	; 61
	//send Enable pulse
	Dio_vidwriteChanel(DIO_PORTB, DIO_PIN3, DIO_HIGH);
    19a6:	81 e0       	ldi	r24, 0x01	; 1
    19a8:	63 e0       	ldi	r22, 0x03	; 3
    19aa:	41 e0       	ldi	r20, 0x01	; 1
    19ac:	0e 94 1f 13 	call	0x263e	; 0x263e <Dio_vidwriteChanel>
    19b0:	80 e0       	ldi	r24, 0x00	; 0
    19b2:	90 e0       	ldi	r25, 0x00	; 0
    19b4:	a0 e8       	ldi	r26, 0x80	; 128
    19b6:	bf e3       	ldi	r27, 0x3F	; 63
    19b8:	8b a3       	std	Y+35, r24	; 0x23
    19ba:	9c a3       	std	Y+36, r25	; 0x24
    19bc:	ad a3       	std	Y+37, r26	; 0x25
    19be:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    19c0:	6b a1       	ldd	r22, Y+35	; 0x23
    19c2:	7c a1       	ldd	r23, Y+36	; 0x24
    19c4:	8d a1       	ldd	r24, Y+37	; 0x25
    19c6:	9e a1       	ldd	r25, Y+38	; 0x26
    19c8:	2b ea       	ldi	r18, 0xAB	; 171
    19ca:	3a ea       	ldi	r19, 0xAA	; 170
    19cc:	4a ea       	ldi	r20, 0xAA	; 170
    19ce:	50 e4       	ldi	r21, 0x40	; 64
    19d0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19d4:	dc 01       	movw	r26, r24
    19d6:	cb 01       	movw	r24, r22
    19d8:	8f 8f       	std	Y+31, r24	; 0x1f
    19da:	98 a3       	std	Y+32, r25	; 0x20
    19dc:	a9 a3       	std	Y+33, r26	; 0x21
    19de:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    19e0:	6f 8d       	ldd	r22, Y+31	; 0x1f
    19e2:	78 a1       	ldd	r23, Y+32	; 0x20
    19e4:	89 a1       	ldd	r24, Y+33	; 0x21
    19e6:	9a a1       	ldd	r25, Y+34	; 0x22
    19e8:	20 e0       	ldi	r18, 0x00	; 0
    19ea:	30 e0       	ldi	r19, 0x00	; 0
    19ec:	40 e8       	ldi	r20, 0x80	; 128
    19ee:	5f e3       	ldi	r21, 0x3F	; 63
    19f0:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    19f4:	88 23       	and	r24, r24
    19f6:	1c f4       	brge	.+6      	; 0x19fe <Lcd_videnablePulse+0x6c>
		__ticks = 1;
    19f8:	81 e0       	ldi	r24, 0x01	; 1
    19fa:	8e 8f       	std	Y+30, r24	; 0x1e
    19fc:	91 c0       	rjmp	.+290    	; 0x1b20 <Lcd_videnablePulse+0x18e>
	else if (__tmp > 255)
    19fe:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1a00:	78 a1       	ldd	r23, Y+32	; 0x20
    1a02:	89 a1       	ldd	r24, Y+33	; 0x21
    1a04:	9a a1       	ldd	r25, Y+34	; 0x22
    1a06:	20 e0       	ldi	r18, 0x00	; 0
    1a08:	30 e0       	ldi	r19, 0x00	; 0
    1a0a:	4f e7       	ldi	r20, 0x7F	; 127
    1a0c:	53 e4       	ldi	r21, 0x43	; 67
    1a0e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1a12:	18 16       	cp	r1, r24
    1a14:	0c f0       	brlt	.+2      	; 0x1a18 <Lcd_videnablePulse+0x86>
    1a16:	7b c0       	rjmp	.+246    	; 0x1b0e <Lcd_videnablePulse+0x17c>
	{
		_delay_ms(__us / 1000.0);
    1a18:	6b a1       	ldd	r22, Y+35	; 0x23
    1a1a:	7c a1       	ldd	r23, Y+36	; 0x24
    1a1c:	8d a1       	ldd	r24, Y+37	; 0x25
    1a1e:	9e a1       	ldd	r25, Y+38	; 0x26
    1a20:	20 e0       	ldi	r18, 0x00	; 0
    1a22:	30 e0       	ldi	r19, 0x00	; 0
    1a24:	4a e7       	ldi	r20, 0x7A	; 122
    1a26:	54 e4       	ldi	r21, 0x44	; 68
    1a28:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1a2c:	dc 01       	movw	r26, r24
    1a2e:	cb 01       	movw	r24, r22
    1a30:	8a 8f       	std	Y+26, r24	; 0x1a
    1a32:	9b 8f       	std	Y+27, r25	; 0x1b
    1a34:	ac 8f       	std	Y+28, r26	; 0x1c
    1a36:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a38:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1a3a:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1a3c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1a3e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1a40:	20 e0       	ldi	r18, 0x00	; 0
    1a42:	30 e0       	ldi	r19, 0x00	; 0
    1a44:	4a e7       	ldi	r20, 0x7A	; 122
    1a46:	55 e4       	ldi	r21, 0x45	; 69
    1a48:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a4c:	dc 01       	movw	r26, r24
    1a4e:	cb 01       	movw	r24, r22
    1a50:	8e 8b       	std	Y+22, r24	; 0x16
    1a52:	9f 8b       	std	Y+23, r25	; 0x17
    1a54:	a8 8f       	std	Y+24, r26	; 0x18
    1a56:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    1a58:	6e 89       	ldd	r22, Y+22	; 0x16
    1a5a:	7f 89       	ldd	r23, Y+23	; 0x17
    1a5c:	88 8d       	ldd	r24, Y+24	; 0x18
    1a5e:	99 8d       	ldd	r25, Y+25	; 0x19
    1a60:	20 e0       	ldi	r18, 0x00	; 0
    1a62:	30 e0       	ldi	r19, 0x00	; 0
    1a64:	40 e8       	ldi	r20, 0x80	; 128
    1a66:	5f e3       	ldi	r21, 0x3F	; 63
    1a68:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1a6c:	88 23       	and	r24, r24
    1a6e:	2c f4       	brge	.+10     	; 0x1a7a <Lcd_videnablePulse+0xe8>
		__ticks = 1;
    1a70:	81 e0       	ldi	r24, 0x01	; 1
    1a72:	90 e0       	ldi	r25, 0x00	; 0
    1a74:	9d 8b       	std	Y+21, r25	; 0x15
    1a76:	8c 8b       	std	Y+20, r24	; 0x14
    1a78:	3f c0       	rjmp	.+126    	; 0x1af8 <Lcd_videnablePulse+0x166>
	else if (__tmp > 65535)
    1a7a:	6e 89       	ldd	r22, Y+22	; 0x16
    1a7c:	7f 89       	ldd	r23, Y+23	; 0x17
    1a7e:	88 8d       	ldd	r24, Y+24	; 0x18
    1a80:	99 8d       	ldd	r25, Y+25	; 0x19
    1a82:	20 e0       	ldi	r18, 0x00	; 0
    1a84:	3f ef       	ldi	r19, 0xFF	; 255
    1a86:	4f e7       	ldi	r20, 0x7F	; 127
    1a88:	57 e4       	ldi	r21, 0x47	; 71
    1a8a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1a8e:	18 16       	cp	r1, r24
    1a90:	4c f5       	brge	.+82     	; 0x1ae4 <Lcd_videnablePulse+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a92:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1a94:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1a96:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1a98:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1a9a:	20 e0       	ldi	r18, 0x00	; 0
    1a9c:	30 e0       	ldi	r19, 0x00	; 0
    1a9e:	40 e2       	ldi	r20, 0x20	; 32
    1aa0:	51 e4       	ldi	r21, 0x41	; 65
    1aa2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1aa6:	dc 01       	movw	r26, r24
    1aa8:	cb 01       	movw	r24, r22
    1aaa:	bc 01       	movw	r22, r24
    1aac:	cd 01       	movw	r24, r26
    1aae:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ab2:	dc 01       	movw	r26, r24
    1ab4:	cb 01       	movw	r24, r22
    1ab6:	9d 8b       	std	Y+21, r25	; 0x15
    1ab8:	8c 8b       	std	Y+20, r24	; 0x14
    1aba:	0f c0       	rjmp	.+30     	; 0x1ada <Lcd_videnablePulse+0x148>
    1abc:	80 e9       	ldi	r24, 0x90	; 144
    1abe:	91 e0       	ldi	r25, 0x01	; 1
    1ac0:	9b 8b       	std	Y+19, r25	; 0x13
    1ac2:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1ac4:	8a 89       	ldd	r24, Y+18	; 0x12
    1ac6:	9b 89       	ldd	r25, Y+19	; 0x13
    1ac8:	01 97       	sbiw	r24, 0x01	; 1
    1aca:	f1 f7       	brne	.-4      	; 0x1ac8 <Lcd_videnablePulse+0x136>
    1acc:	9b 8b       	std	Y+19, r25	; 0x13
    1ace:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ad0:	8c 89       	ldd	r24, Y+20	; 0x14
    1ad2:	9d 89       	ldd	r25, Y+21	; 0x15
    1ad4:	01 97       	sbiw	r24, 0x01	; 1
    1ad6:	9d 8b       	std	Y+21, r25	; 0x15
    1ad8:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ada:	8c 89       	ldd	r24, Y+20	; 0x14
    1adc:	9d 89       	ldd	r25, Y+21	; 0x15
    1ade:	00 97       	sbiw	r24, 0x00	; 0
    1ae0:	69 f7       	brne	.-38     	; 0x1abc <Lcd_videnablePulse+0x12a>
    1ae2:	24 c0       	rjmp	.+72     	; 0x1b2c <Lcd_videnablePulse+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ae4:	6e 89       	ldd	r22, Y+22	; 0x16
    1ae6:	7f 89       	ldd	r23, Y+23	; 0x17
    1ae8:	88 8d       	ldd	r24, Y+24	; 0x18
    1aea:	99 8d       	ldd	r25, Y+25	; 0x19
    1aec:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1af0:	dc 01       	movw	r26, r24
    1af2:	cb 01       	movw	r24, r22
    1af4:	9d 8b       	std	Y+21, r25	; 0x15
    1af6:	8c 8b       	std	Y+20, r24	; 0x14
    1af8:	8c 89       	ldd	r24, Y+20	; 0x14
    1afa:	9d 89       	ldd	r25, Y+21	; 0x15
    1afc:	99 8b       	std	Y+17, r25	; 0x11
    1afe:	88 8b       	std	Y+16, r24	; 0x10
    1b00:	88 89       	ldd	r24, Y+16	; 0x10
    1b02:	99 89       	ldd	r25, Y+17	; 0x11
    1b04:	01 97       	sbiw	r24, 0x01	; 1
    1b06:	f1 f7       	brne	.-4      	; 0x1b04 <Lcd_videnablePulse+0x172>
    1b08:	99 8b       	std	Y+17, r25	; 0x11
    1b0a:	88 8b       	std	Y+16, r24	; 0x10
    1b0c:	0f c0       	rjmp	.+30     	; 0x1b2c <Lcd_videnablePulse+0x19a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1b0e:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1b10:	78 a1       	ldd	r23, Y+32	; 0x20
    1b12:	89 a1       	ldd	r24, Y+33	; 0x21
    1b14:	9a a1       	ldd	r25, Y+34	; 0x22
    1b16:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b1a:	dc 01       	movw	r26, r24
    1b1c:	cb 01       	movw	r24, r22
    1b1e:	8e 8f       	std	Y+30, r24	; 0x1e
    1b20:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1b22:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1b24:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b26:	8a 95       	dec	r24
    1b28:	f1 f7       	brne	.-4      	; 0x1b26 <Lcd_videnablePulse+0x194>
    1b2a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(1);
	Dio_vidwriteChanel(DIO_PORTB, DIO_PIN3, DIO_LOW);
    1b2c:	81 e0       	ldi	r24, 0x01	; 1
    1b2e:	63 e0       	ldi	r22, 0x03	; 3
    1b30:	40 e0       	ldi	r20, 0x00	; 0
    1b32:	0e 94 1f 13 	call	0x263e	; 0x263e <Dio_vidwriteChanel>
    1b36:	80 e0       	ldi	r24, 0x00	; 0
    1b38:	90 e0       	ldi	r25, 0x00	; 0
    1b3a:	a0 e0       	ldi	r26, 0x00	; 0
    1b3c:	b0 e4       	ldi	r27, 0x40	; 64
    1b3e:	8b 87       	std	Y+11, r24	; 0x0b
    1b40:	9c 87       	std	Y+12, r25	; 0x0c
    1b42:	ad 87       	std	Y+13, r26	; 0x0d
    1b44:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b46:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b48:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b4a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b4c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b4e:	20 e0       	ldi	r18, 0x00	; 0
    1b50:	30 e0       	ldi	r19, 0x00	; 0
    1b52:	4a e7       	ldi	r20, 0x7A	; 122
    1b54:	55 e4       	ldi	r21, 0x45	; 69
    1b56:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b5a:	dc 01       	movw	r26, r24
    1b5c:	cb 01       	movw	r24, r22
    1b5e:	8f 83       	std	Y+7, r24	; 0x07
    1b60:	98 87       	std	Y+8, r25	; 0x08
    1b62:	a9 87       	std	Y+9, r26	; 0x09
    1b64:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b66:	6f 81       	ldd	r22, Y+7	; 0x07
    1b68:	78 85       	ldd	r23, Y+8	; 0x08
    1b6a:	89 85       	ldd	r24, Y+9	; 0x09
    1b6c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b6e:	20 e0       	ldi	r18, 0x00	; 0
    1b70:	30 e0       	ldi	r19, 0x00	; 0
    1b72:	40 e8       	ldi	r20, 0x80	; 128
    1b74:	5f e3       	ldi	r21, 0x3F	; 63
    1b76:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1b7a:	88 23       	and	r24, r24
    1b7c:	2c f4       	brge	.+10     	; 0x1b88 <Lcd_videnablePulse+0x1f6>
		__ticks = 1;
    1b7e:	81 e0       	ldi	r24, 0x01	; 1
    1b80:	90 e0       	ldi	r25, 0x00	; 0
    1b82:	9e 83       	std	Y+6, r25	; 0x06
    1b84:	8d 83       	std	Y+5, r24	; 0x05
    1b86:	3f c0       	rjmp	.+126    	; 0x1c06 <Lcd_videnablePulse+0x274>
	else if (__tmp > 65535)
    1b88:	6f 81       	ldd	r22, Y+7	; 0x07
    1b8a:	78 85       	ldd	r23, Y+8	; 0x08
    1b8c:	89 85       	ldd	r24, Y+9	; 0x09
    1b8e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b90:	20 e0       	ldi	r18, 0x00	; 0
    1b92:	3f ef       	ldi	r19, 0xFF	; 255
    1b94:	4f e7       	ldi	r20, 0x7F	; 127
    1b96:	57 e4       	ldi	r21, 0x47	; 71
    1b98:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1b9c:	18 16       	cp	r1, r24
    1b9e:	4c f5       	brge	.+82     	; 0x1bf2 <Lcd_videnablePulse+0x260>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ba0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ba2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ba4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ba6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ba8:	20 e0       	ldi	r18, 0x00	; 0
    1baa:	30 e0       	ldi	r19, 0x00	; 0
    1bac:	40 e2       	ldi	r20, 0x20	; 32
    1bae:	51 e4       	ldi	r21, 0x41	; 65
    1bb0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bb4:	dc 01       	movw	r26, r24
    1bb6:	cb 01       	movw	r24, r22
    1bb8:	bc 01       	movw	r22, r24
    1bba:	cd 01       	movw	r24, r26
    1bbc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bc0:	dc 01       	movw	r26, r24
    1bc2:	cb 01       	movw	r24, r22
    1bc4:	9e 83       	std	Y+6, r25	; 0x06
    1bc6:	8d 83       	std	Y+5, r24	; 0x05
    1bc8:	0f c0       	rjmp	.+30     	; 0x1be8 <Lcd_videnablePulse+0x256>
    1bca:	80 e9       	ldi	r24, 0x90	; 144
    1bcc:	91 e0       	ldi	r25, 0x01	; 1
    1bce:	9c 83       	std	Y+4, r25	; 0x04
    1bd0:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1bd2:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd4:	9c 81       	ldd	r25, Y+4	; 0x04
    1bd6:	01 97       	sbiw	r24, 0x01	; 1
    1bd8:	f1 f7       	brne	.-4      	; 0x1bd6 <Lcd_videnablePulse+0x244>
    1bda:	9c 83       	std	Y+4, r25	; 0x04
    1bdc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bde:	8d 81       	ldd	r24, Y+5	; 0x05
    1be0:	9e 81       	ldd	r25, Y+6	; 0x06
    1be2:	01 97       	sbiw	r24, 0x01	; 1
    1be4:	9e 83       	std	Y+6, r25	; 0x06
    1be6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1be8:	8d 81       	ldd	r24, Y+5	; 0x05
    1bea:	9e 81       	ldd	r25, Y+6	; 0x06
    1bec:	00 97       	sbiw	r24, 0x00	; 0
    1bee:	69 f7       	brne	.-38     	; 0x1bca <Lcd_videnablePulse+0x238>
    1bf0:	14 c0       	rjmp	.+40     	; 0x1c1a <Lcd_videnablePulse+0x288>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bf2:	6f 81       	ldd	r22, Y+7	; 0x07
    1bf4:	78 85       	ldd	r23, Y+8	; 0x08
    1bf6:	89 85       	ldd	r24, Y+9	; 0x09
    1bf8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bfa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bfe:	dc 01       	movw	r26, r24
    1c00:	cb 01       	movw	r24, r22
    1c02:	9e 83       	std	Y+6, r25	; 0x06
    1c04:	8d 83       	std	Y+5, r24	; 0x05
    1c06:	8d 81       	ldd	r24, Y+5	; 0x05
    1c08:	9e 81       	ldd	r25, Y+6	; 0x06
    1c0a:	9a 83       	std	Y+2, r25	; 0x02
    1c0c:	89 83       	std	Y+1, r24	; 0x01
    1c0e:	89 81       	ldd	r24, Y+1	; 0x01
    1c10:	9a 81       	ldd	r25, Y+2	; 0x02
    1c12:	01 97       	sbiw	r24, 0x01	; 1
    1c14:	f1 f7       	brne	.-4      	; 0x1c12 <Lcd_videnablePulse+0x280>
    1c16:	9a 83       	std	Y+2, r25	; 0x02
    1c18:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    1c1a:	a6 96       	adiw	r28, 0x26	; 38
    1c1c:	0f b6       	in	r0, 0x3f	; 63
    1c1e:	f8 94       	cli
    1c20:	de bf       	out	0x3e, r29	; 62
    1c22:	0f be       	out	0x3f, r0	; 63
    1c24:	cd bf       	out	0x3d, r28	; 61
    1c26:	cf 91       	pop	r28
    1c28:	df 91       	pop	r29
    1c2a:	08 95       	ret

00001c2c <Lcd_vidDisplayChar>:
void Lcd_vidDisplayChar(u8 chr)
{
    1c2c:	df 93       	push	r29
    1c2e:	cf 93       	push	r28
    1c30:	00 d0       	rcall	.+0      	; 0x1c32 <Lcd_vidDisplayChar+0x6>
    1c32:	0f 92       	push	r0
    1c34:	cd b7       	in	r28, 0x3d	; 61
    1c36:	de b7       	in	r29, 0x3e	; 62
    1c38:	8b 83       	std	Y+3, r24	; 0x03
	0b1101  1001

	1101   0000
	1001   0000
*/
	u8 loc_MSB = (chr & ~LCD_MASK);
    1c3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c3c:	80 7f       	andi	r24, 0xF0	; 240
    1c3e:	8a 83       	std	Y+2, r24	; 0x02
	u8 loc_LSB = (chr<<4);
    1c40:	8b 81       	ldd	r24, Y+3	; 0x03
    1c42:	82 95       	swap	r24
    1c44:	80 7f       	andi	r24, 0xF0	; 240
    1c46:	89 83       	std	Y+1, r24	; 0x01
	//RS->1
	Dio_vidwriteChanel(DIO_PORTB, DIO_PIN1, DIO_HIGH);
    1c48:	81 e0       	ldi	r24, 0x01	; 1
    1c4a:	61 e0       	ldi	r22, 0x01	; 1
    1c4c:	41 e0       	ldi	r20, 0x01	; 1
    1c4e:	0e 94 1f 13 	call	0x263e	; 0x263e <Dio_vidwriteChanel>

	//write data MSB to LCD
	Dio_vidWriteChanelGroup(DIO_PORTA, loc_MSB, LCD_MASK);
    1c52:	80 e0       	ldi	r24, 0x00	; 0
    1c54:	6a 81       	ldd	r22, Y+2	; 0x02
    1c56:	4f e0       	ldi	r20, 0x0F	; 15
    1c58:	0e 94 02 14 	call	0x2804	; 0x2804 <Dio_vidWriteChanelGroup>
	//send Enable pulse
	Lcd_videnablePulse();
    1c5c:	0e 94 c9 0c 	call	0x1992	; 0x1992 <Lcd_videnablePulse>

	//write data LSB to LCD
	Dio_vidWriteChanelGroup(DIO_PORTA, loc_LSB, LCD_MASK);
    1c60:	80 e0       	ldi	r24, 0x00	; 0
    1c62:	69 81       	ldd	r22, Y+1	; 0x01
    1c64:	4f e0       	ldi	r20, 0x0F	; 15
    1c66:	0e 94 02 14 	call	0x2804	; 0x2804 <Dio_vidWriteChanelGroup>
	//send Enable pulse
	Lcd_videnablePulse();
    1c6a:	0e 94 c9 0c 	call	0x1992	; 0x1992 <Lcd_videnablePulse>
}
    1c6e:	0f 90       	pop	r0
    1c70:	0f 90       	pop	r0
    1c72:	0f 90       	pop	r0
    1c74:	cf 91       	pop	r28
    1c76:	df 91       	pop	r29
    1c78:	08 95       	ret

00001c7a <Lcd_vidCmd>:
void Lcd_vidCmd(lcd_Cmd_t cmd)
{
    1c7a:	df 93       	push	r29
    1c7c:	cf 93       	push	r28
    1c7e:	00 d0       	rcall	.+0      	; 0x1c80 <Lcd_vidCmd+0x6>
    1c80:	0f 92       	push	r0
    1c82:	cd b7       	in	r28, 0x3d	; 61
    1c84:	de b7       	in	r29, 0x3e	; 62
    1c86:	8b 83       	std	Y+3, r24	; 0x03
	u8 loc_MSB = cmd & ~LCD_MASK;
    1c88:	8b 81       	ldd	r24, Y+3	; 0x03
    1c8a:	80 7f       	andi	r24, 0xF0	; 240
    1c8c:	8a 83       	std	Y+2, r24	; 0x02
	u8 loc_LSB = cmd<<4;
    1c8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c90:	82 95       	swap	r24
    1c92:	80 7f       	andi	r24, 0xF0	; 240
    1c94:	89 83       	std	Y+1, r24	; 0x01
	//RS->0
	Dio_vidwriteChanel(DIO_PORTB, DIO_PIN1, DIO_LOW);
    1c96:	81 e0       	ldi	r24, 0x01	; 1
    1c98:	61 e0       	ldi	r22, 0x01	; 1
    1c9a:	40 e0       	ldi	r20, 0x00	; 0
    1c9c:	0e 94 1f 13 	call	0x263e	; 0x263e <Dio_vidwriteChanel>

	//write data MSB to LCD
	Dio_vidWriteChanelGroup(DIO_PORTA, loc_MSB, LCD_MASK);
    1ca0:	80 e0       	ldi	r24, 0x00	; 0
    1ca2:	6a 81       	ldd	r22, Y+2	; 0x02
    1ca4:	4f e0       	ldi	r20, 0x0F	; 15
    1ca6:	0e 94 02 14 	call	0x2804	; 0x2804 <Dio_vidWriteChanelGroup>
	//send Enable pulse
	Lcd_videnablePulse();
    1caa:	0e 94 c9 0c 	call	0x1992	; 0x1992 <Lcd_videnablePulse>

	//write data LSB to LCD
	Dio_vidWriteChanelGroup(DIO_PORTA, loc_LSB, LCD_MASK);
    1cae:	80 e0       	ldi	r24, 0x00	; 0
    1cb0:	69 81       	ldd	r22, Y+1	; 0x01
    1cb2:	4f e0       	ldi	r20, 0x0F	; 15
    1cb4:	0e 94 02 14 	call	0x2804	; 0x2804 <Dio_vidWriteChanelGroup>
	//send Enable pulse
	Lcd_videnablePulse();
    1cb8:	0e 94 c9 0c 	call	0x1992	; 0x1992 <Lcd_videnablePulse>
}
    1cbc:	0f 90       	pop	r0
    1cbe:	0f 90       	pop	r0
    1cc0:	0f 90       	pop	r0
    1cc2:	cf 91       	pop	r28
    1cc4:	df 91       	pop	r29
    1cc6:	08 95       	ret

00001cc8 <Lcd_vidRowColumn>:

void Lcd_vidRowColumn(u8 row, u8 col)
{
    1cc8:	df 93       	push	r29
    1cca:	cf 93       	push	r28
    1ccc:	00 d0       	rcall	.+0      	; 0x1cce <Lcd_vidRowColumn+0x6>
    1cce:	00 d0       	rcall	.+0      	; 0x1cd0 <Lcd_vidRowColumn+0x8>
    1cd0:	cd b7       	in	r28, 0x3d	; 61
    1cd2:	de b7       	in	r29, 0x3e	; 62
    1cd4:	89 83       	std	Y+1, r24	; 0x01
    1cd6:	6a 83       	std	Y+2, r22	; 0x02
	switch (row)
    1cd8:	89 81       	ldd	r24, Y+1	; 0x01
    1cda:	28 2f       	mov	r18, r24
    1cdc:	30 e0       	ldi	r19, 0x00	; 0
    1cde:	3c 83       	std	Y+4, r19	; 0x04
    1ce0:	2b 83       	std	Y+3, r18	; 0x03
    1ce2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ce4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ce6:	00 97       	sbiw	r24, 0x00	; 0
    1ce8:	31 f0       	breq	.+12     	; 0x1cf6 <Lcd_vidRowColumn+0x2e>
    1cea:	2b 81       	ldd	r18, Y+3	; 0x03
    1cec:	3c 81       	ldd	r19, Y+4	; 0x04
    1cee:	21 30       	cpi	r18, 0x01	; 1
    1cf0:	31 05       	cpc	r19, r1
    1cf2:	31 f0       	breq	.+12     	; 0x1d00 <Lcd_vidRowColumn+0x38>
    1cf4:	09 c0       	rjmp	.+18     	; 0x1d08 <Lcd_vidRowColumn+0x40>
	{
	case 0:
		Lcd_vidCmd(0x80 + col);
    1cf6:	8a 81       	ldd	r24, Y+2	; 0x02
    1cf8:	80 58       	subi	r24, 0x80	; 128
    1cfa:	0e 94 3d 0e 	call	0x1c7a	; 0x1c7a <Lcd_vidCmd>
    1cfe:	04 c0       	rjmp	.+8      	; 0x1d08 <Lcd_vidRowColumn+0x40>
		break;

	case 1:
		Lcd_vidCmd(0xC0 + col);
    1d00:	8a 81       	ldd	r24, Y+2	; 0x02
    1d02:	80 54       	subi	r24, 0x40	; 64
    1d04:	0e 94 3d 0e 	call	0x1c7a	; 0x1c7a <Lcd_vidCmd>
		break;
	}
}
    1d08:	0f 90       	pop	r0
    1d0a:	0f 90       	pop	r0
    1d0c:	0f 90       	pop	r0
    1d0e:	0f 90       	pop	r0
    1d10:	cf 91       	pop	r28
    1d12:	df 91       	pop	r29
    1d14:	08 95       	ret

00001d16 <Lcd_vidDisplyStr>:
void Lcd_vidDisplyStr(u8* str)
{
    1d16:	df 93       	push	r29
    1d18:	cf 93       	push	r28
    1d1a:	00 d0       	rcall	.+0      	; 0x1d1c <Lcd_vidDisplyStr+0x6>
    1d1c:	cd b7       	in	r28, 0x3d	; 61
    1d1e:	de b7       	in	r29, 0x3e	; 62
    1d20:	9a 83       	std	Y+2, r25	; 0x02
    1d22:	89 83       	std	Y+1, r24	; 0x01
    1d24:	0a c0       	rjmp	.+20     	; 0x1d3a <Lcd_vidDisplyStr+0x24>
	while (*str != '\0')
	{
		Lcd_vidDisplayChar(*str);
    1d26:	e9 81       	ldd	r30, Y+1	; 0x01
    1d28:	fa 81       	ldd	r31, Y+2	; 0x02
    1d2a:	80 81       	ld	r24, Z
    1d2c:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <Lcd_vidDisplayChar>
		str++;
    1d30:	89 81       	ldd	r24, Y+1	; 0x01
    1d32:	9a 81       	ldd	r25, Y+2	; 0x02
    1d34:	01 96       	adiw	r24, 0x01	; 1
    1d36:	9a 83       	std	Y+2, r25	; 0x02
    1d38:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
}
void Lcd_vidDisplyStr(u8* str)
{
	while (*str != '\0')
    1d3a:	e9 81       	ldd	r30, Y+1	; 0x01
    1d3c:	fa 81       	ldd	r31, Y+2	; 0x02
    1d3e:	80 81       	ld	r24, Z
    1d40:	88 23       	and	r24, r24
    1d42:	89 f7       	brne	.-30     	; 0x1d26 <Lcd_vidDisplyStr+0x10>
	{
		Lcd_vidDisplayChar(*str);
		str++;
	}
}
    1d44:	0f 90       	pop	r0
    1d46:	0f 90       	pop	r0
    1d48:	cf 91       	pop	r28
    1d4a:	df 91       	pop	r29
    1d4c:	08 95       	ret

00001d4e <Lcd_vidDisplyInt>:

void Lcd_vidDisplyInt(u32 num)
{
    1d4e:	df 93       	push	r29
    1d50:	cf 93       	push	r28
    1d52:	cd b7       	in	r28, 0x3d	; 61
    1d54:	de b7       	in	r29, 0x3e	; 62
    1d56:	29 97       	sbiw	r28, 0x09	; 9
    1d58:	0f b6       	in	r0, 0x3f	; 63
    1d5a:	f8 94       	cli
    1d5c:	de bf       	out	0x3e, r29	; 62
    1d5e:	0f be       	out	0x3f, r0	; 63
    1d60:	cd bf       	out	0x3d, r28	; 61
    1d62:	6e 83       	std	Y+6, r22	; 0x06
    1d64:	7f 83       	std	Y+7, r23	; 0x07
    1d66:	88 87       	std	Y+8, r24	; 0x08
    1d68:	99 87       	std	Y+9, r25	; 0x09
	u8 buffer[5];
	sprintf(buffer,"%d",num);
    1d6a:	8d b7       	in	r24, 0x3d	; 61
    1d6c:	9e b7       	in	r25, 0x3e	; 62
    1d6e:	08 97       	sbiw	r24, 0x08	; 8
    1d70:	0f b6       	in	r0, 0x3f	; 63
    1d72:	f8 94       	cli
    1d74:	9e bf       	out	0x3e, r25	; 62
    1d76:	0f be       	out	0x3f, r0	; 63
    1d78:	8d bf       	out	0x3d, r24	; 61
    1d7a:	ed b7       	in	r30, 0x3d	; 61
    1d7c:	fe b7       	in	r31, 0x3e	; 62
    1d7e:	31 96       	adiw	r30, 0x01	; 1
    1d80:	ce 01       	movw	r24, r28
    1d82:	01 96       	adiw	r24, 0x01	; 1
    1d84:	91 83       	std	Z+1, r25	; 0x01
    1d86:	80 83       	st	Z, r24
    1d88:	8b e6       	ldi	r24, 0x6B	; 107
    1d8a:	90 e0       	ldi	r25, 0x00	; 0
    1d8c:	93 83       	std	Z+3, r25	; 0x03
    1d8e:	82 83       	std	Z+2, r24	; 0x02
    1d90:	8e 81       	ldd	r24, Y+6	; 0x06
    1d92:	9f 81       	ldd	r25, Y+7	; 0x07
    1d94:	a8 85       	ldd	r26, Y+8	; 0x08
    1d96:	b9 85       	ldd	r27, Y+9	; 0x09
    1d98:	84 83       	std	Z+4, r24	; 0x04
    1d9a:	95 83       	std	Z+5, r25	; 0x05
    1d9c:	a6 83       	std	Z+6, r26	; 0x06
    1d9e:	b7 83       	std	Z+7, r27	; 0x07
    1da0:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <sprintf>
    1da4:	8d b7       	in	r24, 0x3d	; 61
    1da6:	9e b7       	in	r25, 0x3e	; 62
    1da8:	08 96       	adiw	r24, 0x08	; 8
    1daa:	0f b6       	in	r0, 0x3f	; 63
    1dac:	f8 94       	cli
    1dae:	9e bf       	out	0x3e, r25	; 62
    1db0:	0f be       	out	0x3f, r0	; 63
    1db2:	8d bf       	out	0x3d, r24	; 61
	Lcd_vidDisplyStr(buffer);
    1db4:	ce 01       	movw	r24, r28
    1db6:	01 96       	adiw	r24, 0x01	; 1
    1db8:	0e 94 8b 0e 	call	0x1d16	; 0x1d16 <Lcd_vidDisplyStr>
}
    1dbc:	29 96       	adiw	r28, 0x09	; 9
    1dbe:	0f b6       	in	r0, 0x3f	; 63
    1dc0:	f8 94       	cli
    1dc2:	de bf       	out	0x3e, r29	; 62
    1dc4:	0f be       	out	0x3f, r0	; 63
    1dc6:	cd bf       	out	0x3d, r28	; 61
    1dc8:	cf 91       	pop	r28
    1dca:	df 91       	pop	r29
    1dcc:	08 95       	ret

00001dce <Lcd_vidDisplyFlot>:
void Lcd_vidDisplyFlot(f64 num)
{
    1dce:	df 93       	push	r29
    1dd0:	cf 93       	push	r28
    1dd2:	cd b7       	in	r28, 0x3d	; 61
    1dd4:	de b7       	in	r29, 0x3e	; 62
    1dd6:	68 97       	sbiw	r28, 0x18	; 24
    1dd8:	0f b6       	in	r0, 0x3f	; 63
    1dda:	f8 94       	cli
    1ddc:	de bf       	out	0x3e, r29	; 62
    1dde:	0f be       	out	0x3f, r0	; 63
    1de0:	cd bf       	out	0x3d, r28	; 61
    1de2:	6d 8b       	std	Y+21, r22	; 0x15
    1de4:	7e 8b       	std	Y+22, r23	; 0x16
    1de6:	8f 8b       	std	Y+23, r24	; 0x17
    1de8:	98 8f       	std	Y+24, r25	; 0x18
	u8 buffer[20];
	sprintf(buffer,"%f",num);
    1dea:	8d b7       	in	r24, 0x3d	; 61
    1dec:	9e b7       	in	r25, 0x3e	; 62
    1dee:	08 97       	sbiw	r24, 0x08	; 8
    1df0:	0f b6       	in	r0, 0x3f	; 63
    1df2:	f8 94       	cli
    1df4:	9e bf       	out	0x3e, r25	; 62
    1df6:	0f be       	out	0x3f, r0	; 63
    1df8:	8d bf       	out	0x3d, r24	; 61
    1dfa:	ed b7       	in	r30, 0x3d	; 61
    1dfc:	fe b7       	in	r31, 0x3e	; 62
    1dfe:	31 96       	adiw	r30, 0x01	; 1
    1e00:	ce 01       	movw	r24, r28
    1e02:	01 96       	adiw	r24, 0x01	; 1
    1e04:	91 83       	std	Z+1, r25	; 0x01
    1e06:	80 83       	st	Z, r24
    1e08:	8e e6       	ldi	r24, 0x6E	; 110
    1e0a:	90 e0       	ldi	r25, 0x00	; 0
    1e0c:	93 83       	std	Z+3, r25	; 0x03
    1e0e:	82 83       	std	Z+2, r24	; 0x02
    1e10:	8d 89       	ldd	r24, Y+21	; 0x15
    1e12:	9e 89       	ldd	r25, Y+22	; 0x16
    1e14:	af 89       	ldd	r26, Y+23	; 0x17
    1e16:	b8 8d       	ldd	r27, Y+24	; 0x18
    1e18:	84 83       	std	Z+4, r24	; 0x04
    1e1a:	95 83       	std	Z+5, r25	; 0x05
    1e1c:	a6 83       	std	Z+6, r26	; 0x06
    1e1e:	b7 83       	std	Z+7, r27	; 0x07
    1e20:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <sprintf>
    1e24:	8d b7       	in	r24, 0x3d	; 61
    1e26:	9e b7       	in	r25, 0x3e	; 62
    1e28:	08 96       	adiw	r24, 0x08	; 8
    1e2a:	0f b6       	in	r0, 0x3f	; 63
    1e2c:	f8 94       	cli
    1e2e:	9e bf       	out	0x3e, r25	; 62
    1e30:	0f be       	out	0x3f, r0	; 63
    1e32:	8d bf       	out	0x3d, r24	; 61
	Lcd_vidDisplyStr(buffer);
    1e34:	ce 01       	movw	r24, r28
    1e36:	01 96       	adiw	r24, 0x01	; 1
    1e38:	0e 94 8b 0e 	call	0x1d16	; 0x1d16 <Lcd_vidDisplyStr>
}
    1e3c:	68 96       	adiw	r28, 0x18	; 24
    1e3e:	0f b6       	in	r0, 0x3f	; 63
    1e40:	f8 94       	cli
    1e42:	de bf       	out	0x3e, r29	; 62
    1e44:	0f be       	out	0x3f, r0	; 63
    1e46:	cd bf       	out	0x3d, r28	; 61
    1e48:	cf 91       	pop	r28
    1e4a:	df 91       	pop	r29
    1e4c:	08 95       	ret

00001e4e <Keypad_vidInit>:
		{'7','8','9','C'},
		{'*','0','#','D'}
};

void Keypad_vidInit(void)
{
    1e4e:	df 93       	push	r29
    1e50:	cf 93       	push	r28
    1e52:	cd b7       	in	r28, 0x3d	; 61
    1e54:	de b7       	in	r29, 0x3e	; 62
	/*	Configure Rows Pins as input	*/
	Dio_vidconfigChanel(DIO_PORTC, DIO_PIN0, DIO_INPUT);/* ROW0	*/
    1e56:	82 e0       	ldi	r24, 0x02	; 2
    1e58:	60 e0       	ldi	r22, 0x00	; 0
    1e5a:	40 e0       	ldi	r20, 0x00	; 0
    1e5c:	0e 94 3c 12 	call	0x2478	; 0x2478 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTC, DIO_PIN1, DIO_INPUT);/* ROW1	*/
    1e60:	82 e0       	ldi	r24, 0x02	; 2
    1e62:	61 e0       	ldi	r22, 0x01	; 1
    1e64:	40 e0       	ldi	r20, 0x00	; 0
    1e66:	0e 94 3c 12 	call	0x2478	; 0x2478 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTC, DIO_PIN2, DIO_INPUT);/* ROW2	*/
    1e6a:	82 e0       	ldi	r24, 0x02	; 2
    1e6c:	62 e0       	ldi	r22, 0x02	; 2
    1e6e:	40 e0       	ldi	r20, 0x00	; 0
    1e70:	0e 94 3c 12 	call	0x2478	; 0x2478 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTC, DIO_PIN3, DIO_INPUT);/* ROW3 */
    1e74:	82 e0       	ldi	r24, 0x02	; 2
    1e76:	63 e0       	ldi	r22, 0x03	; 3
    1e78:	40 e0       	ldi	r20, 0x00	; 0
    1e7a:	0e 94 3c 12 	call	0x2478	; 0x2478 <Dio_vidconfigChanel>

	/*	Configure Columns Pins as output	*/
	Dio_vidconfigChanel(DIO_PORTC, DIO_PIN4, DIO_OUTPUT);/*	COL0 */
    1e7e:	82 e0       	ldi	r24, 0x02	; 2
    1e80:	64 e0       	ldi	r22, 0x04	; 4
    1e82:	41 e0       	ldi	r20, 0x01	; 1
    1e84:	0e 94 3c 12 	call	0x2478	; 0x2478 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTC, DIO_PIN5, DIO_OUTPUT);/* COL1 */
    1e88:	82 e0       	ldi	r24, 0x02	; 2
    1e8a:	65 e0       	ldi	r22, 0x05	; 5
    1e8c:	41 e0       	ldi	r20, 0x01	; 1
    1e8e:	0e 94 3c 12 	call	0x2478	; 0x2478 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTC, DIO_PIN6, DIO_OUTPUT);/* COL2 */
    1e92:	82 e0       	ldi	r24, 0x02	; 2
    1e94:	66 e0       	ldi	r22, 0x06	; 6
    1e96:	41 e0       	ldi	r20, 0x01	; 1
    1e98:	0e 94 3c 12 	call	0x2478	; 0x2478 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTC, DIO_PIN7, DIO_OUTPUT);/* COL3 */
    1e9c:	82 e0       	ldi	r24, 0x02	; 2
    1e9e:	67 e0       	ldi	r22, 0x07	; 7
    1ea0:	41 e0       	ldi	r20, 0x01	; 1
    1ea2:	0e 94 3c 12 	call	0x2478	; 0x2478 <Dio_vidconfigChanel>

	Dio_vidPullUpEn(DIO_PORTC, DIO_PIN0);
    1ea6:	82 e0       	ldi	r24, 0x02	; 2
    1ea8:	60 e0       	ldi	r22, 0x00	; 0
    1eaa:	0e 94 6e 15 	call	0x2adc	; 0x2adc <Dio_vidPullUpEn>
	Dio_vidPullUpEn(DIO_PORTC, DIO_PIN1);
    1eae:	82 e0       	ldi	r24, 0x02	; 2
    1eb0:	61 e0       	ldi	r22, 0x01	; 1
    1eb2:	0e 94 6e 15 	call	0x2adc	; 0x2adc <Dio_vidPullUpEn>
	Dio_vidPullUpEn(DIO_PORTC, DIO_PIN2);
    1eb6:	82 e0       	ldi	r24, 0x02	; 2
    1eb8:	62 e0       	ldi	r22, 0x02	; 2
    1eba:	0e 94 6e 15 	call	0x2adc	; 0x2adc <Dio_vidPullUpEn>
	Dio_vidPullUpEn(DIO_PORTC, DIO_PIN3);
    1ebe:	82 e0       	ldi	r24, 0x02	; 2
    1ec0:	63 e0       	ldi	r22, 0x03	; 3
    1ec2:	0e 94 6e 15 	call	0x2adc	; 0x2adc <Dio_vidPullUpEn>


	Dio_vidwriteChanel(DIO_PORTC, DIO_PIN4, DIO_LOW);
    1ec6:	82 e0       	ldi	r24, 0x02	; 2
    1ec8:	64 e0       	ldi	r22, 0x04	; 4
    1eca:	40 e0       	ldi	r20, 0x00	; 0
    1ecc:	0e 94 1f 13 	call	0x263e	; 0x263e <Dio_vidwriteChanel>
	Dio_vidwriteChanel(DIO_PORTC, DIO_PIN5, DIO_LOW);
    1ed0:	82 e0       	ldi	r24, 0x02	; 2
    1ed2:	65 e0       	ldi	r22, 0x05	; 5
    1ed4:	40 e0       	ldi	r20, 0x00	; 0
    1ed6:	0e 94 1f 13 	call	0x263e	; 0x263e <Dio_vidwriteChanel>
	Dio_vidwriteChanel(DIO_PORTC, DIO_PIN6, DIO_LOW);
    1eda:	82 e0       	ldi	r24, 0x02	; 2
    1edc:	66 e0       	ldi	r22, 0x06	; 6
    1ede:	40 e0       	ldi	r20, 0x00	; 0
    1ee0:	0e 94 1f 13 	call	0x263e	; 0x263e <Dio_vidwriteChanel>
	Dio_vidwriteChanel(DIO_PORTC, DIO_PIN7, DIO_LOW);
    1ee4:	82 e0       	ldi	r24, 0x02	; 2
    1ee6:	67 e0       	ldi	r22, 0x07	; 7
    1ee8:	40 e0       	ldi	r20, 0x00	; 0
    1eea:	0e 94 1f 13 	call	0x263e	; 0x263e <Dio_vidwriteChanel>
}
    1eee:	cf 91       	pop	r28
    1ef0:	df 91       	pop	r29
    1ef2:	08 95       	ret

00001ef4 <Keypad_IsPressed>:

static boolean Keypad_IsPressed(void)
{
    1ef4:	df 93       	push	r29
    1ef6:	cf 93       	push	r28
    1ef8:	0f 92       	push	r0
    1efa:	cd b7       	in	r28, 0x3d	; 61
    1efc:	de b7       	in	r29, 0x3e	; 62
	if (
    1efe:	82 e0       	ldi	r24, 0x02	; 2
    1f00:	60 e0       	ldi	r22, 0x00	; 0
    1f02:	0e 94 5e 14 	call	0x28bc	; 0x28bc <Dio_udtreadChanel>
    1f06:	88 23       	and	r24, r24
    1f08:	91 f0       	breq	.+36     	; 0x1f2e <Keypad_IsPressed+0x3a>
    1f0a:	82 e0       	ldi	r24, 0x02	; 2
    1f0c:	61 e0       	ldi	r22, 0x01	; 1
    1f0e:	0e 94 5e 14 	call	0x28bc	; 0x28bc <Dio_udtreadChanel>
    1f12:	88 23       	and	r24, r24
    1f14:	61 f0       	breq	.+24     	; 0x1f2e <Keypad_IsPressed+0x3a>
    1f16:	82 e0       	ldi	r24, 0x02	; 2
    1f18:	62 e0       	ldi	r22, 0x02	; 2
    1f1a:	0e 94 5e 14 	call	0x28bc	; 0x28bc <Dio_udtreadChanel>
    1f1e:	88 23       	and	r24, r24
    1f20:	31 f0       	breq	.+12     	; 0x1f2e <Keypad_IsPressed+0x3a>
    1f22:	82 e0       	ldi	r24, 0x02	; 2
    1f24:	63 e0       	ldi	r22, 0x03	; 3
    1f26:	0e 94 5e 14 	call	0x28bc	; 0x28bc <Dio_udtreadChanel>
    1f2a:	88 23       	and	r24, r24
    1f2c:	19 f4       	brne	.+6      	; 0x1f34 <Keypad_IsPressed+0x40>
			Dio_udtreadChanel(DIO_PORTC, DIO_PIN1) == DIO_LOW ||
			Dio_udtreadChanel(DIO_PORTC, DIO_PIN2) == DIO_LOW ||
			Dio_udtreadChanel(DIO_PORTC, DIO_PIN3) == DIO_LOW
	)
	{
		return TRUE;
    1f2e:	81 e0       	ldi	r24, 0x01	; 1
    1f30:	89 83       	std	Y+1, r24	; 0x01
    1f32:	01 c0       	rjmp	.+2      	; 0x1f36 <Keypad_IsPressed+0x42>
	}
	else
	{
		return FALSE;
    1f34:	19 82       	std	Y+1, r1	; 0x01
    1f36:	89 81       	ldd	r24, Y+1	; 0x01
	}
}
    1f38:	0f 90       	pop	r0
    1f3a:	cf 91       	pop	r28
    1f3c:	df 91       	pop	r29
    1f3e:	08 95       	ret

00001f40 <Keypad_GetRow>:


static kp_row_t Keypad_GetRow(void)
{
    1f40:	df 93       	push	r29
    1f42:	cf 93       	push	r28
    1f44:	0f 92       	push	r0
    1f46:	cd b7       	in	r28, 0x3d	; 61
    1f48:	de b7       	in	r29, 0x3e	; 62
	kp_row_t loc_ButtonRow = KP_NOROW;
    1f4a:	8f ef       	ldi	r24, 0xFF	; 255
    1f4c:	89 83       	std	Y+1, r24	; 0x01
	if (Dio_udtreadChanel(DIO_PORTC, DIO_PIN0) == DIO_LOW)
    1f4e:	82 e0       	ldi	r24, 0x02	; 2
    1f50:	60 e0       	ldi	r22, 0x00	; 0
    1f52:	0e 94 5e 14 	call	0x28bc	; 0x28bc <Dio_udtreadChanel>
    1f56:	88 23       	and	r24, r24
    1f58:	11 f4       	brne	.+4      	; 0x1f5e <Keypad_GetRow+0x1e>
	{
		loc_ButtonRow = KP_ROW0;
    1f5a:	19 82       	std	Y+1, r1	; 0x01
    1f5c:	1d c0       	rjmp	.+58     	; 0x1f98 <Keypad_GetRow+0x58>
	}
	else if (Dio_udtreadChanel(DIO_PORTC, DIO_PIN1) == DIO_LOW)
    1f5e:	82 e0       	ldi	r24, 0x02	; 2
    1f60:	61 e0       	ldi	r22, 0x01	; 1
    1f62:	0e 94 5e 14 	call	0x28bc	; 0x28bc <Dio_udtreadChanel>
    1f66:	88 23       	and	r24, r24
    1f68:	19 f4       	brne	.+6      	; 0x1f70 <Keypad_GetRow+0x30>
	{
		loc_ButtonRow = KP_ROW1;
    1f6a:	81 e0       	ldi	r24, 0x01	; 1
    1f6c:	89 83       	std	Y+1, r24	; 0x01
    1f6e:	14 c0       	rjmp	.+40     	; 0x1f98 <Keypad_GetRow+0x58>
	}
	else if (Dio_udtreadChanel(DIO_PORTC, DIO_PIN2) == DIO_LOW)
    1f70:	82 e0       	ldi	r24, 0x02	; 2
    1f72:	62 e0       	ldi	r22, 0x02	; 2
    1f74:	0e 94 5e 14 	call	0x28bc	; 0x28bc <Dio_udtreadChanel>
    1f78:	88 23       	and	r24, r24
    1f7a:	19 f4       	brne	.+6      	; 0x1f82 <Keypad_GetRow+0x42>
	{
		loc_ButtonRow = KP_ROW2;
    1f7c:	82 e0       	ldi	r24, 0x02	; 2
    1f7e:	89 83       	std	Y+1, r24	; 0x01
    1f80:	0b c0       	rjmp	.+22     	; 0x1f98 <Keypad_GetRow+0x58>
	}
	else if (Dio_udtreadChanel(DIO_PORTC, DIO_PIN3) == DIO_LOW)
    1f82:	82 e0       	ldi	r24, 0x02	; 2
    1f84:	63 e0       	ldi	r22, 0x03	; 3
    1f86:	0e 94 5e 14 	call	0x28bc	; 0x28bc <Dio_udtreadChanel>
    1f8a:	88 23       	and	r24, r24
    1f8c:	19 f4       	brne	.+6      	; 0x1f94 <Keypad_GetRow+0x54>
	{
		loc_ButtonRow = KP_ROW3;
    1f8e:	83 e0       	ldi	r24, 0x03	; 3
    1f90:	89 83       	std	Y+1, r24	; 0x01
    1f92:	02 c0       	rjmp	.+4      	; 0x1f98 <Keypad_GetRow+0x58>
	}
	else
	{
		loc_ButtonRow = KP_NOROW;
    1f94:	8f ef       	ldi	r24, 0xFF	; 255
    1f96:	89 83       	std	Y+1, r24	; 0x01
	}
	return loc_ButtonRow;
    1f98:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f9a:	0f 90       	pop	r0
    1f9c:	cf 91       	pop	r28
    1f9e:	df 91       	pop	r29
    1fa0:	08 95       	ret

00001fa2 <Keypad_GetCol>:

static kp_col_t Keypad_GetCol(kp_row_t current_row)
{
    1fa2:	df 93       	push	r29
    1fa4:	cf 93       	push	r28
    1fa6:	00 d0       	rcall	.+0      	; 0x1fa8 <Keypad_GetCol+0x6>
    1fa8:	cd b7       	in	r28, 0x3d	; 61
    1faa:	de b7       	in	r29, 0x3e	; 62
    1fac:	8a 83       	std	Y+2, r24	; 0x02
	kp_col_t loc_ButtonCol = KP_NOCOL;
    1fae:	8f ef       	ldi	r24, 0xFF	; 255
    1fb0:	89 83       	std	Y+1, r24	; 0x01

	Dio_vidwriteChanel(DIO_PORTC, DIO_PIN4, DIO_LOW);
    1fb2:	82 e0       	ldi	r24, 0x02	; 2
    1fb4:	64 e0       	ldi	r22, 0x04	; 4
    1fb6:	40 e0       	ldi	r20, 0x00	; 0
    1fb8:	0e 94 1f 13 	call	0x263e	; 0x263e <Dio_vidwriteChanel>
	Dio_vidwriteChanel(DIO_PORTC, DIO_PIN5, DIO_HIGH);
    1fbc:	82 e0       	ldi	r24, 0x02	; 2
    1fbe:	65 e0       	ldi	r22, 0x05	; 5
    1fc0:	41 e0       	ldi	r20, 0x01	; 1
    1fc2:	0e 94 1f 13 	call	0x263e	; 0x263e <Dio_vidwriteChanel>
	Dio_vidwriteChanel(DIO_PORTC, DIO_PIN6, DIO_HIGH);
    1fc6:	82 e0       	ldi	r24, 0x02	; 2
    1fc8:	66 e0       	ldi	r22, 0x06	; 6
    1fca:	41 e0       	ldi	r20, 0x01	; 1
    1fcc:	0e 94 1f 13 	call	0x263e	; 0x263e <Dio_vidwriteChanel>
	Dio_vidwriteChanel(DIO_PORTC, DIO_PIN7, DIO_HIGH);
    1fd0:	82 e0       	ldi	r24, 0x02	; 2
    1fd2:	67 e0       	ldi	r22, 0x07	; 7
    1fd4:	41 e0       	ldi	r20, 0x01	; 1
    1fd6:	0e 94 1f 13 	call	0x263e	; 0x263e <Dio_vidwriteChanel>

	if (Keypad_GetRow() == current_row)
    1fda:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <Keypad_GetRow>
    1fde:	98 2f       	mov	r25, r24
    1fe0:	8a 81       	ldd	r24, Y+2	; 0x02
    1fe2:	98 17       	cp	r25, r24
    1fe4:	11 f4       	brne	.+4      	; 0x1fea <Keypad_GetCol+0x48>
	{
		loc_ButtonCol = KP_COL0;
    1fe6:	19 82       	std	Y+1, r1	; 0x01
    1fe8:	59 c0       	rjmp	.+178    	; 0x209c <Keypad_GetCol+0xfa>
	}
	else
	{
		Dio_vidwriteChanel(DIO_PORTC, DIO_PIN4, DIO_HIGH);
    1fea:	82 e0       	ldi	r24, 0x02	; 2
    1fec:	64 e0       	ldi	r22, 0x04	; 4
    1fee:	41 e0       	ldi	r20, 0x01	; 1
    1ff0:	0e 94 1f 13 	call	0x263e	; 0x263e <Dio_vidwriteChanel>
		Dio_vidwriteChanel(DIO_PORTC, DIO_PIN5, DIO_LOW);
    1ff4:	82 e0       	ldi	r24, 0x02	; 2
    1ff6:	65 e0       	ldi	r22, 0x05	; 5
    1ff8:	40 e0       	ldi	r20, 0x00	; 0
    1ffa:	0e 94 1f 13 	call	0x263e	; 0x263e <Dio_vidwriteChanel>
		Dio_vidwriteChanel(DIO_PORTC, DIO_PIN6, DIO_HIGH);
    1ffe:	82 e0       	ldi	r24, 0x02	; 2
    2000:	66 e0       	ldi	r22, 0x06	; 6
    2002:	41 e0       	ldi	r20, 0x01	; 1
    2004:	0e 94 1f 13 	call	0x263e	; 0x263e <Dio_vidwriteChanel>
		Dio_vidwriteChanel(DIO_PORTC, DIO_PIN7, DIO_HIGH);
    2008:	82 e0       	ldi	r24, 0x02	; 2
    200a:	67 e0       	ldi	r22, 0x07	; 7
    200c:	41 e0       	ldi	r20, 0x01	; 1
    200e:	0e 94 1f 13 	call	0x263e	; 0x263e <Dio_vidwriteChanel>

		if (Keypad_GetRow() == current_row)
    2012:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <Keypad_GetRow>
    2016:	98 2f       	mov	r25, r24
    2018:	8a 81       	ldd	r24, Y+2	; 0x02
    201a:	98 17       	cp	r25, r24
    201c:	19 f4       	brne	.+6      	; 0x2024 <Keypad_GetCol+0x82>
		{
			loc_ButtonCol = KP_COL1;
    201e:	81 e0       	ldi	r24, 0x01	; 1
    2020:	89 83       	std	Y+1, r24	; 0x01
    2022:	3c c0       	rjmp	.+120    	; 0x209c <Keypad_GetCol+0xfa>
		}
		else
		{
			Dio_vidwriteChanel(DIO_PORTC, DIO_PIN4, DIO_HIGH);
    2024:	82 e0       	ldi	r24, 0x02	; 2
    2026:	64 e0       	ldi	r22, 0x04	; 4
    2028:	41 e0       	ldi	r20, 0x01	; 1
    202a:	0e 94 1f 13 	call	0x263e	; 0x263e <Dio_vidwriteChanel>
			Dio_vidwriteChanel(DIO_PORTC, DIO_PIN5, DIO_HIGH);
    202e:	82 e0       	ldi	r24, 0x02	; 2
    2030:	65 e0       	ldi	r22, 0x05	; 5
    2032:	41 e0       	ldi	r20, 0x01	; 1
    2034:	0e 94 1f 13 	call	0x263e	; 0x263e <Dio_vidwriteChanel>
			Dio_vidwriteChanel(DIO_PORTC, DIO_PIN6, DIO_LOW);
    2038:	82 e0       	ldi	r24, 0x02	; 2
    203a:	66 e0       	ldi	r22, 0x06	; 6
    203c:	40 e0       	ldi	r20, 0x00	; 0
    203e:	0e 94 1f 13 	call	0x263e	; 0x263e <Dio_vidwriteChanel>
			Dio_vidwriteChanel(DIO_PORTC, DIO_PIN7, DIO_HIGH);
    2042:	82 e0       	ldi	r24, 0x02	; 2
    2044:	67 e0       	ldi	r22, 0x07	; 7
    2046:	41 e0       	ldi	r20, 0x01	; 1
    2048:	0e 94 1f 13 	call	0x263e	; 0x263e <Dio_vidwriteChanel>

			if (Keypad_GetRow() == current_row)
    204c:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <Keypad_GetRow>
    2050:	98 2f       	mov	r25, r24
    2052:	8a 81       	ldd	r24, Y+2	; 0x02
    2054:	98 17       	cp	r25, r24
    2056:	19 f4       	brne	.+6      	; 0x205e <Keypad_GetCol+0xbc>
			{
				loc_ButtonCol = KP_COL2;
    2058:	82 e0       	ldi	r24, 0x02	; 2
    205a:	89 83       	std	Y+1, r24	; 0x01
    205c:	1f c0       	rjmp	.+62     	; 0x209c <Keypad_GetCol+0xfa>
			}
			else
			{
				Dio_vidwriteChanel(DIO_PORTC, DIO_PIN4, DIO_HIGH);
    205e:	82 e0       	ldi	r24, 0x02	; 2
    2060:	64 e0       	ldi	r22, 0x04	; 4
    2062:	41 e0       	ldi	r20, 0x01	; 1
    2064:	0e 94 1f 13 	call	0x263e	; 0x263e <Dio_vidwriteChanel>
				Dio_vidwriteChanel(DIO_PORTC, DIO_PIN5, DIO_HIGH);
    2068:	82 e0       	ldi	r24, 0x02	; 2
    206a:	65 e0       	ldi	r22, 0x05	; 5
    206c:	41 e0       	ldi	r20, 0x01	; 1
    206e:	0e 94 1f 13 	call	0x263e	; 0x263e <Dio_vidwriteChanel>
				Dio_vidwriteChanel(DIO_PORTC, DIO_PIN6, DIO_HIGH);
    2072:	82 e0       	ldi	r24, 0x02	; 2
    2074:	66 e0       	ldi	r22, 0x06	; 6
    2076:	41 e0       	ldi	r20, 0x01	; 1
    2078:	0e 94 1f 13 	call	0x263e	; 0x263e <Dio_vidwriteChanel>
				Dio_vidwriteChanel(DIO_PORTC, DIO_PIN7, DIO_LOW);
    207c:	82 e0       	ldi	r24, 0x02	; 2
    207e:	67 e0       	ldi	r22, 0x07	; 7
    2080:	40 e0       	ldi	r20, 0x00	; 0
    2082:	0e 94 1f 13 	call	0x263e	; 0x263e <Dio_vidwriteChanel>

				if (Keypad_GetRow() == current_row)
    2086:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <Keypad_GetRow>
    208a:	98 2f       	mov	r25, r24
    208c:	8a 81       	ldd	r24, Y+2	; 0x02
    208e:	98 17       	cp	r25, r24
    2090:	19 f4       	brne	.+6      	; 0x2098 <Keypad_GetCol+0xf6>
				{
					loc_ButtonCol = KP_COL3;
    2092:	83 e0       	ldi	r24, 0x03	; 3
    2094:	89 83       	std	Y+1, r24	; 0x01
    2096:	02 c0       	rjmp	.+4      	; 0x209c <Keypad_GetCol+0xfa>
				}
				else
				{
					loc_ButtonCol = KP_NOCOL;
    2098:	8f ef       	ldi	r24, 0xFF	; 255
    209a:	89 83       	std	Y+1, r24	; 0x01
				}
			}
		}
	}
	return loc_ButtonCol;
    209c:	89 81       	ldd	r24, Y+1	; 0x01
}
    209e:	0f 90       	pop	r0
    20a0:	0f 90       	pop	r0
    20a2:	cf 91       	pop	r28
    20a4:	df 91       	pop	r29
    20a6:	08 95       	ret

000020a8 <Keypad_u8GetKey>:

u8 Keypad_u8GetKey(void)
{
    20a8:	df 93       	push	r29
    20aa:	cf 93       	push	r28
    20ac:	00 d0       	rcall	.+0      	; 0x20ae <Keypad_u8GetKey+0x6>
    20ae:	0f 92       	push	r0
    20b0:	cd b7       	in	r28, 0x3d	; 61
    20b2:	de b7       	in	r29, 0x3e	; 62
	u8 loc_key = 0xFF;
    20b4:	8f ef       	ldi	r24, 0xFF	; 255
    20b6:	8b 83       	std	Y+3, r24	; 0x03
	kp_row_t loc_Row = KP_NOROW;
    20b8:	8f ef       	ldi	r24, 0xFF	; 255
    20ba:	8a 83       	std	Y+2, r24	; 0x02
	kp_row_t loc_Col = KP_NOCOL;
    20bc:	8f ef       	ldi	r24, 0xFF	; 255
    20be:	89 83       	std	Y+1, r24	; 0x01

	Keypad_vidInit();
    20c0:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <Keypad_vidInit>
	/*	Check If Keypad Pressed*/
	if (Keypad_IsPressed() == TRUE)
    20c4:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <Keypad_IsPressed>
    20c8:	81 30       	cpi	r24, 0x01	; 1
    20ca:	f1 f4       	brne	.+60     	; 0x2108 <Keypad_u8GetKey+0x60>
	{
		/*	Get pressed key ROW*/
		loc_Row = Keypad_GetRow();
    20cc:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <Keypad_GetRow>
    20d0:	8a 83       	std	Y+2, r24	; 0x02
		/*	Get pressed key COLUMN	*/
		loc_Col = Keypad_GetCol(loc_Row);
    20d2:	8a 81       	ldd	r24, Y+2	; 0x02
    20d4:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <Keypad_GetCol>
    20d8:	89 83       	std	Y+1, r24	; 0x01
		/* loc_key = Keypad_layout[ROW][COLUMN]	*/
		loc_key = Keypad_layout[loc_Row][loc_Col];
    20da:	8a 81       	ldd	r24, Y+2	; 0x02
    20dc:	48 2f       	mov	r20, r24
    20de:	55 27       	eor	r21, r21
    20e0:	47 fd       	sbrc	r20, 7
    20e2:	50 95       	com	r21
    20e4:	89 81       	ldd	r24, Y+1	; 0x01
    20e6:	28 2f       	mov	r18, r24
    20e8:	33 27       	eor	r19, r19
    20ea:	27 fd       	sbrc	r18, 7
    20ec:	30 95       	com	r19
    20ee:	ca 01       	movw	r24, r20
    20f0:	88 0f       	add	r24, r24
    20f2:	99 1f       	adc	r25, r25
    20f4:	88 0f       	add	r24, r24
    20f6:	99 1f       	adc	r25, r25
    20f8:	82 0f       	add	r24, r18
    20fa:	93 1f       	adc	r25, r19
    20fc:	fc 01       	movw	r30, r24
    20fe:	e7 58       	subi	r30, 0x87	; 135
    2100:	fe 4f       	sbci	r31, 0xFE	; 254
    2102:	80 81       	ld	r24, Z
    2104:	8b 83       	std	Y+3, r24	; 0x03
    2106:	02 c0       	rjmp	.+4      	; 0x210c <Keypad_u8GetKey+0x64>
	}
	else
	{
		/*	Do Nothing	*/
		loc_key = 0xFF;
    2108:	8f ef       	ldi	r24, 0xFF	; 255
    210a:	8b 83       	std	Y+3, r24	; 0x03
	}
	return loc_key;
    210c:	8b 81       	ldd	r24, Y+3	; 0x03
}
    210e:	0f 90       	pop	r0
    2110:	0f 90       	pop	r0
    2112:	0f 90       	pop	r0
    2114:	cf 91       	pop	r28
    2116:	df 91       	pop	r29
    2118:	08 95       	ret

0000211a <Buzzer_vidinit>:
 *      Author: Eng_Fawzi
 */
#include "Dio.h"

void Buzzer_vidinit(void)
{
    211a:	df 93       	push	r29
    211c:	cf 93       	push	r28
    211e:	cd b7       	in	r28, 0x3d	; 61
    2120:	de b7       	in	r29, 0x3e	; 62
	Dio_vidconfigChanel(DIO_PORTA,DIO_PIN3,DIO_OUTPUT);
    2122:	80 e0       	ldi	r24, 0x00	; 0
    2124:	63 e0       	ldi	r22, 0x03	; 3
    2126:	41 e0       	ldi	r20, 0x01	; 1
    2128:	0e 94 3c 12 	call	0x2478	; 0x2478 <Dio_vidconfigChanel>
}
    212c:	cf 91       	pop	r28
    212e:	df 91       	pop	r29
    2130:	08 95       	ret

00002132 <Buzzer_vidbuzzerOn>:
void Buzzer_vidbuzzerOn(void)
{
    2132:	df 93       	push	r29
    2134:	cf 93       	push	r28
    2136:	cd b7       	in	r28, 0x3d	; 61
    2138:	de b7       	in	r29, 0x3e	; 62
	Dio_vidwriteChanel(DIO_PORTA, DIO_PIN3, DIO_HIGH);
    213a:	80 e0       	ldi	r24, 0x00	; 0
    213c:	63 e0       	ldi	r22, 0x03	; 3
    213e:	41 e0       	ldi	r20, 0x01	; 1
    2140:	0e 94 1f 13 	call	0x263e	; 0x263e <Dio_vidwriteChanel>
}
    2144:	cf 91       	pop	r28
    2146:	df 91       	pop	r29
    2148:	08 95       	ret

0000214a <Buzzer_vidbuzzerOff>:
void Buzzer_vidbuzzerOff(void)
{
    214a:	df 93       	push	r29
    214c:	cf 93       	push	r28
    214e:	cd b7       	in	r28, 0x3d	; 61
    2150:	de b7       	in	r29, 0x3e	; 62
	Dio_vidwriteChanel(DIO_PORTA, DIO_PIN3, DIO_LOW);
    2152:	80 e0       	ldi	r24, 0x00	; 0
    2154:	63 e0       	ldi	r22, 0x03	; 3
    2156:	40 e0       	ldi	r20, 0x00	; 0
    2158:	0e 94 1f 13 	call	0x263e	; 0x263e <Dio_vidwriteChanel>
}
    215c:	cf 91       	pop	r28
    215e:	df 91       	pop	r29
    2160:	08 95       	ret

00002162 <Button_vidbuttonInit>:
 */
#include "Button.h"
#include "Dio.h"

void Button_vidbuttonInit(void)
{
    2162:	df 93       	push	r29
    2164:	cf 93       	push	r28
    2166:	cd b7       	in	r28, 0x3d	; 61
    2168:	de b7       	in	r29, 0x3e	; 62
	Dio_vidconfigChanel(DIO_PORTB, DIO_PIN0, DIO_INPUT);
    216a:	81 e0       	ldi	r24, 0x01	; 1
    216c:	60 e0       	ldi	r22, 0x00	; 0
    216e:	40 e0       	ldi	r20, 0x00	; 0
    2170:	0e 94 3c 12 	call	0x2478	; 0x2478 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTD, DIO_PIN6, DIO_INPUT);
    2174:	83 e0       	ldi	r24, 0x03	; 3
    2176:	66 e0       	ldi	r22, 0x06	; 6
    2178:	40 e0       	ldi	r20, 0x00	; 0
    217a:	0e 94 3c 12 	call	0x2478	; 0x2478 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTD, DIO_PIN2, DIO_INPUT);
    217e:	83 e0       	ldi	r24, 0x03	; 3
    2180:	62 e0       	ldi	r22, 0x02	; 2
    2182:	40 e0       	ldi	r20, 0x00	; 0
    2184:	0e 94 3c 12 	call	0x2478	; 0x2478 <Dio_vidconfigChanel>
}
    2188:	cf 91       	pop	r28
    218a:	df 91       	pop	r29
    218c:	08 95       	ret

0000218e <Button_udtbuttonStatus>:


button_butStatus_t Button_udtbuttonStatus(button_buttonId_t butnId)
{
    218e:	df 93       	push	r29
    2190:	cf 93       	push	r28
    2192:	00 d0       	rcall	.+0      	; 0x2194 <Button_udtbuttonStatus+0x6>
    2194:	00 d0       	rcall	.+0      	; 0x2196 <Button_udtbuttonStatus+0x8>
    2196:	cd b7       	in	r28, 0x3d	; 61
    2198:	de b7       	in	r29, 0x3e	; 62
    219a:	8a 83       	std	Y+2, r24	; 0x02
	button_butStatus_t locBtnStatus = RELAEASED;
    219c:	19 82       	std	Y+1, r1	; 0x01
	switch (butnId)
    219e:	8a 81       	ldd	r24, Y+2	; 0x02
    21a0:	28 2f       	mov	r18, r24
    21a2:	30 e0       	ldi	r19, 0x00	; 0
    21a4:	3c 83       	std	Y+4, r19	; 0x04
    21a6:	2b 83       	std	Y+3, r18	; 0x03
    21a8:	8b 81       	ldd	r24, Y+3	; 0x03
    21aa:	9c 81       	ldd	r25, Y+4	; 0x04
    21ac:	81 30       	cpi	r24, 0x01	; 1
    21ae:	91 05       	cpc	r25, r1
    21b0:	a1 f0       	breq	.+40     	; 0x21da <Button_udtbuttonStatus+0x4c>
    21b2:	2b 81       	ldd	r18, Y+3	; 0x03
    21b4:	3c 81       	ldd	r19, Y+4	; 0x04
    21b6:	22 30       	cpi	r18, 0x02	; 2
    21b8:	31 05       	cpc	r19, r1
    21ba:	d1 f0       	breq	.+52     	; 0x21f0 <Button_udtbuttonStatus+0x62>
    21bc:	8b 81       	ldd	r24, Y+3	; 0x03
    21be:	9c 81       	ldd	r25, Y+4	; 0x04
    21c0:	00 97       	sbiw	r24, 0x00	; 0
    21c2:	01 f5       	brne	.+64     	; 0x2204 <Button_udtbuttonStatus+0x76>
	{
		case BUTTON0:
			if (Dio_udtreadChanel(DIO_PORTB, DIO_PIN0) == DIO_HIGH)
    21c4:	81 e0       	ldi	r24, 0x01	; 1
    21c6:	60 e0       	ldi	r22, 0x00	; 0
    21c8:	0e 94 5e 14 	call	0x28bc	; 0x28bc <Dio_udtreadChanel>
    21cc:	81 30       	cpi	r24, 0x01	; 1
    21ce:	19 f4       	brne	.+6      	; 0x21d6 <Button_udtbuttonStatus+0x48>
			{
				locBtnStatus = PRESSED;
    21d0:	81 e0       	ldi	r24, 0x01	; 1
    21d2:	89 83       	std	Y+1, r24	; 0x01
    21d4:	17 c0       	rjmp	.+46     	; 0x2204 <Button_udtbuttonStatus+0x76>
			}
			else
			{
				locBtnStatus = RELAEASED;
    21d6:	19 82       	std	Y+1, r1	; 0x01
    21d8:	15 c0       	rjmp	.+42     	; 0x2204 <Button_udtbuttonStatus+0x76>
			}
			break;

		case BUTTON1:
			if (Dio_udtreadChanel(DIO_PORTD, DIO_PIN6) == DIO_HIGH)
    21da:	83 e0       	ldi	r24, 0x03	; 3
    21dc:	66 e0       	ldi	r22, 0x06	; 6
    21de:	0e 94 5e 14 	call	0x28bc	; 0x28bc <Dio_udtreadChanel>
    21e2:	81 30       	cpi	r24, 0x01	; 1
    21e4:	19 f4       	brne	.+6      	; 0x21ec <Button_udtbuttonStatus+0x5e>
			{
				locBtnStatus = PRESSED;
    21e6:	81 e0       	ldi	r24, 0x01	; 1
    21e8:	89 83       	std	Y+1, r24	; 0x01
    21ea:	0c c0       	rjmp	.+24     	; 0x2204 <Button_udtbuttonStatus+0x76>
			}
			else
			{
				locBtnStatus = RELAEASED;
    21ec:	19 82       	std	Y+1, r1	; 0x01
    21ee:	0a c0       	rjmp	.+20     	; 0x2204 <Button_udtbuttonStatus+0x76>
			}
			break;

		case BUTTON2:
			if (Dio_udtreadChanel(DIO_PORTD, DIO_PIN2) == DIO_HIGH)
    21f0:	83 e0       	ldi	r24, 0x03	; 3
    21f2:	62 e0       	ldi	r22, 0x02	; 2
    21f4:	0e 94 5e 14 	call	0x28bc	; 0x28bc <Dio_udtreadChanel>
    21f8:	81 30       	cpi	r24, 0x01	; 1
    21fa:	19 f4       	brne	.+6      	; 0x2202 <Button_udtbuttonStatus+0x74>
			{
				locBtnStatus = PRESSED;
    21fc:	81 e0       	ldi	r24, 0x01	; 1
    21fe:	89 83       	std	Y+1, r24	; 0x01
    2200:	01 c0       	rjmp	.+2      	; 0x2204 <Button_udtbuttonStatus+0x76>
			}
			else
			{
				locBtnStatus = RELAEASED;
    2202:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
	}
	return locBtnStatus;
    2204:	89 81       	ldd	r24, Y+1	; 0x01
}
    2206:	0f 90       	pop	r0
    2208:	0f 90       	pop	r0
    220a:	0f 90       	pop	r0
    220c:	0f 90       	pop	r0
    220e:	cf 91       	pop	r28
    2210:	df 91       	pop	r29
    2212:	08 95       	ret

00002214 <GINT_vidEnableAllInterrupts>:

#include "GINT_Reg.h"
#include "Bit_Math.h"

void GINT_vidEnableAllInterrupts(void)
{
    2214:	df 93       	push	r29
    2216:	cf 93       	push	r28
    2218:	cd b7       	in	r28, 0x3d	; 61
    221a:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GINT_SREG_REG,7);
    221c:	af e5       	ldi	r26, 0x5F	; 95
    221e:	b0 e0       	ldi	r27, 0x00	; 0
    2220:	ef e5       	ldi	r30, 0x5F	; 95
    2222:	f0 e0       	ldi	r31, 0x00	; 0
    2224:	80 81       	ld	r24, Z
    2226:	80 68       	ori	r24, 0x80	; 128
    2228:	8c 93       	st	X, r24
}
    222a:	cf 91       	pop	r28
    222c:	df 91       	pop	r29
    222e:	08 95       	ret

00002230 <GINT_vidDisableAllInterrupts>:

void GINT_vidDisableAllInterrupts(void)
{
    2230:	df 93       	push	r29
    2232:	cf 93       	push	r28
    2234:	cd b7       	in	r28, 0x3d	; 61
    2236:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(GINT_SREG_REG,7);
    2238:	af e5       	ldi	r26, 0x5F	; 95
    223a:	b0 e0       	ldi	r27, 0x00	; 0
    223c:	ef e5       	ldi	r30, 0x5F	; 95
    223e:	f0 e0       	ldi	r31, 0x00	; 0
    2240:	80 81       	ld	r24, Z
    2242:	8f 77       	andi	r24, 0x7F	; 127
    2244:	8c 93       	st	X, r24
}
    2246:	cf 91       	pop	r28
    2248:	df 91       	pop	r29
    224a:	08 95       	ret

0000224c <ExtInt_vidConfigExtInt>:
#include "ExtInt_Reg.h"
#include "ExtInt.h"
#include "Std_Types.h"

void ExtInt_vidConfigExtInt(extint_id_t intId, extint_sensectrl_t sensCtrl)
{
    224c:	df 93       	push	r29
    224e:	cf 93       	push	r28
    2250:	00 d0       	rcall	.+0      	; 0x2252 <ExtInt_vidConfigExtInt+0x6>
    2252:	00 d0       	rcall	.+0      	; 0x2254 <ExtInt_vidConfigExtInt+0x8>
    2254:	cd b7       	in	r28, 0x3d	; 61
    2256:	de b7       	in	r29, 0x3e	; 62
    2258:	89 83       	std	Y+1, r24	; 0x01
    225a:	6a 83       	std	Y+2, r22	; 0x02
	switch(intId)
    225c:	89 81       	ldd	r24, Y+1	; 0x01
    225e:	28 2f       	mov	r18, r24
    2260:	30 e0       	ldi	r19, 0x00	; 0
    2262:	3c 83       	std	Y+4, r19	; 0x04
    2264:	2b 83       	std	Y+3, r18	; 0x03
    2266:	8b 81       	ldd	r24, Y+3	; 0x03
    2268:	9c 81       	ldd	r25, Y+4	; 0x04
    226a:	81 30       	cpi	r24, 0x01	; 1
    226c:	91 05       	cpc	r25, r1
    226e:	09 f4       	brne	.+2      	; 0x2272 <ExtInt_vidConfigExtInt+0x26>
    2270:	5a c0       	rjmp	.+180    	; 0x2326 <ExtInt_vidConfigExtInt+0xda>
    2272:	2b 81       	ldd	r18, Y+3	; 0x03
    2274:	3c 81       	ldd	r19, Y+4	; 0x04
    2276:	22 30       	cpi	r18, 0x02	; 2
    2278:	31 05       	cpc	r19, r1
    227a:	09 f4       	brne	.+2      	; 0x227e <ExtInt_vidConfigExtInt+0x32>
    227c:	a3 c0       	rjmp	.+326    	; 0x23c4 <ExtInt_vidConfigExtInt+0x178>
    227e:	8b 81       	ldd	r24, Y+3	; 0x03
    2280:	9c 81       	ldd	r25, Y+4	; 0x04
    2282:	00 97       	sbiw	r24, 0x00	; 0
    2284:	09 f0       	breq	.+2      	; 0x2288 <ExtInt_vidConfigExtInt+0x3c>
    2286:	ba c0       	rjmp	.+372    	; 0x23fc <ExtInt_vidConfigExtInt+0x1b0>
	{
	case EXT_INT0:
		/*	configure sense control	*/
		if (sensCtrl == EXT_RISING_EDGE)
    2288:	8a 81       	ldd	r24, Y+2	; 0x02
    228a:	81 30       	cpi	r24, 0x01	; 1
    228c:	79 f4       	brne	.+30     	; 0x22ac <ExtInt_vidConfigExtInt+0x60>
		{
			SET_BIT(EXTINT_MCUCR_REG,0);
    228e:	a5 e5       	ldi	r26, 0x55	; 85
    2290:	b0 e0       	ldi	r27, 0x00	; 0
    2292:	e5 e5       	ldi	r30, 0x55	; 85
    2294:	f0 e0       	ldi	r31, 0x00	; 0
    2296:	80 81       	ld	r24, Z
    2298:	81 60       	ori	r24, 0x01	; 1
    229a:	8c 93       	st	X, r24
			SET_BIT(EXTINT_MCUCR_REG,1);
    229c:	a5 e5       	ldi	r26, 0x55	; 85
    229e:	b0 e0       	ldi	r27, 0x00	; 0
    22a0:	e5 e5       	ldi	r30, 0x55	; 85
    22a2:	f0 e0       	ldi	r31, 0x00	; 0
    22a4:	80 81       	ld	r24, Z
    22a6:	82 60       	ori	r24, 0x02	; 2
    22a8:	8c 93       	st	X, r24
    22aa:	35 c0       	rjmp	.+106    	; 0x2316 <ExtInt_vidConfigExtInt+0xca>
		}
		else if (sensCtrl == EXT_FAILING_EDGE)
    22ac:	8a 81       	ldd	r24, Y+2	; 0x02
    22ae:	88 23       	and	r24, r24
    22b0:	79 f4       	brne	.+30     	; 0x22d0 <ExtInt_vidConfigExtInt+0x84>
		{
			CLEAR_BIT(EXTINT_MCUCR_REG,0);
    22b2:	a5 e5       	ldi	r26, 0x55	; 85
    22b4:	b0 e0       	ldi	r27, 0x00	; 0
    22b6:	e5 e5       	ldi	r30, 0x55	; 85
    22b8:	f0 e0       	ldi	r31, 0x00	; 0
    22ba:	80 81       	ld	r24, Z
    22bc:	8e 7f       	andi	r24, 0xFE	; 254
    22be:	8c 93       	st	X, r24
			SET_BIT(EXTINT_MCUCR_REG,1);
    22c0:	a5 e5       	ldi	r26, 0x55	; 85
    22c2:	b0 e0       	ldi	r27, 0x00	; 0
    22c4:	e5 e5       	ldi	r30, 0x55	; 85
    22c6:	f0 e0       	ldi	r31, 0x00	; 0
    22c8:	80 81       	ld	r24, Z
    22ca:	82 60       	ori	r24, 0x02	; 2
    22cc:	8c 93       	st	X, r24
    22ce:	23 c0       	rjmp	.+70     	; 0x2316 <ExtInt_vidConfigExtInt+0xca>
		}
		else if (sensCtrl == EXT_BOTH_EDGE)
    22d0:	8a 81       	ldd	r24, Y+2	; 0x02
    22d2:	82 30       	cpi	r24, 0x02	; 2
    22d4:	79 f4       	brne	.+30     	; 0x22f4 <ExtInt_vidConfigExtInt+0xa8>
		{
			SET_BIT(EXTINT_MCUCR_REG,0);
    22d6:	a5 e5       	ldi	r26, 0x55	; 85
    22d8:	b0 e0       	ldi	r27, 0x00	; 0
    22da:	e5 e5       	ldi	r30, 0x55	; 85
    22dc:	f0 e0       	ldi	r31, 0x00	; 0
    22de:	80 81       	ld	r24, Z
    22e0:	81 60       	ori	r24, 0x01	; 1
    22e2:	8c 93       	st	X, r24
			CLEAR_BIT(EXTINT_MCUCR_REG,1);
    22e4:	a5 e5       	ldi	r26, 0x55	; 85
    22e6:	b0 e0       	ldi	r27, 0x00	; 0
    22e8:	e5 e5       	ldi	r30, 0x55	; 85
    22ea:	f0 e0       	ldi	r31, 0x00	; 0
    22ec:	80 81       	ld	r24, Z
    22ee:	8d 7f       	andi	r24, 0xFD	; 253
    22f0:	8c 93       	st	X, r24
    22f2:	11 c0       	rjmp	.+34     	; 0x2316 <ExtInt_vidConfigExtInt+0xca>
		}
		else if (sensCtrl == EXT_LOW_LEVEL)
    22f4:	8a 81       	ldd	r24, Y+2	; 0x02
    22f6:	83 30       	cpi	r24, 0x03	; 3
    22f8:	71 f4       	brne	.+28     	; 0x2316 <ExtInt_vidConfigExtInt+0xca>
		{
			CLEAR_BIT(EXTINT_MCUCR_REG,0);
    22fa:	a5 e5       	ldi	r26, 0x55	; 85
    22fc:	b0 e0       	ldi	r27, 0x00	; 0
    22fe:	e5 e5       	ldi	r30, 0x55	; 85
    2300:	f0 e0       	ldi	r31, 0x00	; 0
    2302:	80 81       	ld	r24, Z
    2304:	8e 7f       	andi	r24, 0xFE	; 254
    2306:	8c 93       	st	X, r24
			CLEAR_BIT(EXTINT_MCUCR_REG,1);
    2308:	a5 e5       	ldi	r26, 0x55	; 85
    230a:	b0 e0       	ldi	r27, 0x00	; 0
    230c:	e5 e5       	ldi	r30, 0x55	; 85
    230e:	f0 e0       	ldi	r31, 0x00	; 0
    2310:	80 81       	ld	r24, Z
    2312:	8d 7f       	andi	r24, 0xFD	; 253
    2314:	8c 93       	st	X, r24
		else
		{
			/*	Do Nothing	*/
		}
		/*	Enable Int0 Interrupt	*/
		SET_BIT(EXTINT_GICR_REG,INT0_EN_BIT);
    2316:	ab e5       	ldi	r26, 0x5B	; 91
    2318:	b0 e0       	ldi	r27, 0x00	; 0
    231a:	eb e5       	ldi	r30, 0x5B	; 91
    231c:	f0 e0       	ldi	r31, 0x00	; 0
    231e:	80 81       	ld	r24, Z
    2320:	80 64       	ori	r24, 0x40	; 64
    2322:	8c 93       	st	X, r24
    2324:	6b c0       	rjmp	.+214    	; 0x23fc <ExtInt_vidConfigExtInt+0x1b0>
		break;

	case EXT_INT1:

		/*	configure sense control	*/
				if (sensCtrl == EXT_RISING_EDGE)
    2326:	8a 81       	ldd	r24, Y+2	; 0x02
    2328:	81 30       	cpi	r24, 0x01	; 1
    232a:	79 f4       	brne	.+30     	; 0x234a <ExtInt_vidConfigExtInt+0xfe>
				{
					SET_BIT(EXTINT_MCUCR_REG,2);
    232c:	a5 e5       	ldi	r26, 0x55	; 85
    232e:	b0 e0       	ldi	r27, 0x00	; 0
    2330:	e5 e5       	ldi	r30, 0x55	; 85
    2332:	f0 e0       	ldi	r31, 0x00	; 0
    2334:	80 81       	ld	r24, Z
    2336:	84 60       	ori	r24, 0x04	; 4
    2338:	8c 93       	st	X, r24
					SET_BIT(EXTINT_MCUCR_REG,3);
    233a:	a5 e5       	ldi	r26, 0x55	; 85
    233c:	b0 e0       	ldi	r27, 0x00	; 0
    233e:	e5 e5       	ldi	r30, 0x55	; 85
    2340:	f0 e0       	ldi	r31, 0x00	; 0
    2342:	80 81       	ld	r24, Z
    2344:	88 60       	ori	r24, 0x08	; 8
    2346:	8c 93       	st	X, r24
    2348:	35 c0       	rjmp	.+106    	; 0x23b4 <ExtInt_vidConfigExtInt+0x168>
				}
				else if (sensCtrl == EXT_FAILING_EDGE)
    234a:	8a 81       	ldd	r24, Y+2	; 0x02
    234c:	88 23       	and	r24, r24
    234e:	79 f4       	brne	.+30     	; 0x236e <ExtInt_vidConfigExtInt+0x122>
				{
					CLEAR_BIT(EXTINT_MCUCR_REG,2);
    2350:	a5 e5       	ldi	r26, 0x55	; 85
    2352:	b0 e0       	ldi	r27, 0x00	; 0
    2354:	e5 e5       	ldi	r30, 0x55	; 85
    2356:	f0 e0       	ldi	r31, 0x00	; 0
    2358:	80 81       	ld	r24, Z
    235a:	8b 7f       	andi	r24, 0xFB	; 251
    235c:	8c 93       	st	X, r24
					SET_BIT(EXTINT_MCUCR_REG,3);
    235e:	a5 e5       	ldi	r26, 0x55	; 85
    2360:	b0 e0       	ldi	r27, 0x00	; 0
    2362:	e5 e5       	ldi	r30, 0x55	; 85
    2364:	f0 e0       	ldi	r31, 0x00	; 0
    2366:	80 81       	ld	r24, Z
    2368:	88 60       	ori	r24, 0x08	; 8
    236a:	8c 93       	st	X, r24
    236c:	23 c0       	rjmp	.+70     	; 0x23b4 <ExtInt_vidConfigExtInt+0x168>
				}
				else if (sensCtrl == EXT_BOTH_EDGE)
    236e:	8a 81       	ldd	r24, Y+2	; 0x02
    2370:	82 30       	cpi	r24, 0x02	; 2
    2372:	79 f4       	brne	.+30     	; 0x2392 <ExtInt_vidConfigExtInt+0x146>
				{
					SET_BIT(EXTINT_MCUCR_REG,2);
    2374:	a5 e5       	ldi	r26, 0x55	; 85
    2376:	b0 e0       	ldi	r27, 0x00	; 0
    2378:	e5 e5       	ldi	r30, 0x55	; 85
    237a:	f0 e0       	ldi	r31, 0x00	; 0
    237c:	80 81       	ld	r24, Z
    237e:	84 60       	ori	r24, 0x04	; 4
    2380:	8c 93       	st	X, r24
					CLEAR_BIT(EXTINT_MCUCR_REG,3);
    2382:	a5 e5       	ldi	r26, 0x55	; 85
    2384:	b0 e0       	ldi	r27, 0x00	; 0
    2386:	e5 e5       	ldi	r30, 0x55	; 85
    2388:	f0 e0       	ldi	r31, 0x00	; 0
    238a:	80 81       	ld	r24, Z
    238c:	87 7f       	andi	r24, 0xF7	; 247
    238e:	8c 93       	st	X, r24
    2390:	11 c0       	rjmp	.+34     	; 0x23b4 <ExtInt_vidConfigExtInt+0x168>
				}
				else if (sensCtrl == EXT_LOW_LEVEL)
    2392:	8a 81       	ldd	r24, Y+2	; 0x02
    2394:	83 30       	cpi	r24, 0x03	; 3
    2396:	71 f4       	brne	.+28     	; 0x23b4 <ExtInt_vidConfigExtInt+0x168>
				{
					CLEAR_BIT(EXTINT_MCUCR_REG,2);
    2398:	a5 e5       	ldi	r26, 0x55	; 85
    239a:	b0 e0       	ldi	r27, 0x00	; 0
    239c:	e5 e5       	ldi	r30, 0x55	; 85
    239e:	f0 e0       	ldi	r31, 0x00	; 0
    23a0:	80 81       	ld	r24, Z
    23a2:	8b 7f       	andi	r24, 0xFB	; 251
    23a4:	8c 93       	st	X, r24
					CLEAR_BIT(EXTINT_MCUCR_REG,3);
    23a6:	a5 e5       	ldi	r26, 0x55	; 85
    23a8:	b0 e0       	ldi	r27, 0x00	; 0
    23aa:	e5 e5       	ldi	r30, 0x55	; 85
    23ac:	f0 e0       	ldi	r31, 0x00	; 0
    23ae:	80 81       	ld	r24, Z
    23b0:	87 7f       	andi	r24, 0xF7	; 247
    23b2:	8c 93       	st	X, r24
				else
				{
					/*	Do Nothing	*/
				}

		SET_BIT(EXTINT_GICR_REG,INT1_EN_BIT);
    23b4:	ab e5       	ldi	r26, 0x5B	; 91
    23b6:	b0 e0       	ldi	r27, 0x00	; 0
    23b8:	eb e5       	ldi	r30, 0x5B	; 91
    23ba:	f0 e0       	ldi	r31, 0x00	; 0
    23bc:	80 81       	ld	r24, Z
    23be:	80 68       	ori	r24, 0x80	; 128
    23c0:	8c 93       	st	X, r24
    23c2:	1c c0       	rjmp	.+56     	; 0x23fc <ExtInt_vidConfigExtInt+0x1b0>
		break;

	case EXT_INT2:

		if (sensCtrl == EXT_FAILING_EDGE)
    23c4:	8a 81       	ldd	r24, Y+2	; 0x02
    23c6:	88 23       	and	r24, r24
    23c8:	41 f4       	brne	.+16     	; 0x23da <ExtInt_vidConfigExtInt+0x18e>
		{
			CLEAR_BIT(EXTINT_MCUCSR_REG,6);
    23ca:	a4 e5       	ldi	r26, 0x54	; 84
    23cc:	b0 e0       	ldi	r27, 0x00	; 0
    23ce:	e4 e5       	ldi	r30, 0x54	; 84
    23d0:	f0 e0       	ldi	r31, 0x00	; 0
    23d2:	80 81       	ld	r24, Z
    23d4:	8f 7b       	andi	r24, 0xBF	; 191
    23d6:	8c 93       	st	X, r24
    23d8:	0a c0       	rjmp	.+20     	; 0x23ee <ExtInt_vidConfigExtInt+0x1a2>
		}
		else if (sensCtrl == EXT_RISING_EDGE)
    23da:	8a 81       	ldd	r24, Y+2	; 0x02
    23dc:	81 30       	cpi	r24, 0x01	; 1
    23de:	39 f4       	brne	.+14     	; 0x23ee <ExtInt_vidConfigExtInt+0x1a2>
		{
			SET_BIT(EXTINT_MCUCSR_REG,6);
    23e0:	a4 e5       	ldi	r26, 0x54	; 84
    23e2:	b0 e0       	ldi	r27, 0x00	; 0
    23e4:	e4 e5       	ldi	r30, 0x54	; 84
    23e6:	f0 e0       	ldi	r31, 0x00	; 0
    23e8:	80 81       	ld	r24, Z
    23ea:	80 64       	ori	r24, 0x40	; 64
    23ec:	8c 93       	st	X, r24
		}
		else
		{
			/*	Do Nothing	*/
		}
		SET_BIT(EXTINT_GICR_REG,INT2_EN_BIT);
    23ee:	ab e5       	ldi	r26, 0x5B	; 91
    23f0:	b0 e0       	ldi	r27, 0x00	; 0
    23f2:	eb e5       	ldi	r30, 0x5B	; 91
    23f4:	f0 e0       	ldi	r31, 0x00	; 0
    23f6:	80 81       	ld	r24, Z
    23f8:	80 62       	ori	r24, 0x20	; 32
    23fa:	8c 93       	st	X, r24
		break;
	}
}
    23fc:	0f 90       	pop	r0
    23fe:	0f 90       	pop	r0
    2400:	0f 90       	pop	r0
    2402:	0f 90       	pop	r0
    2404:	cf 91       	pop	r28
    2406:	df 91       	pop	r29
    2408:	08 95       	ret

0000240a <ExtInt_vidDisableExtInt>:

void ExtInt_vidDisableExtInt(extint_id_t intId)
{
    240a:	df 93       	push	r29
    240c:	cf 93       	push	r28
    240e:	00 d0       	rcall	.+0      	; 0x2410 <ExtInt_vidDisableExtInt+0x6>
    2410:	0f 92       	push	r0
    2412:	cd b7       	in	r28, 0x3d	; 61
    2414:	de b7       	in	r29, 0x3e	; 62
    2416:	89 83       	std	Y+1, r24	; 0x01
	switch (intId)
    2418:	89 81       	ldd	r24, Y+1	; 0x01
    241a:	28 2f       	mov	r18, r24
    241c:	30 e0       	ldi	r19, 0x00	; 0
    241e:	3b 83       	std	Y+3, r19	; 0x03
    2420:	2a 83       	std	Y+2, r18	; 0x02
    2422:	8a 81       	ldd	r24, Y+2	; 0x02
    2424:	9b 81       	ldd	r25, Y+3	; 0x03
    2426:	81 30       	cpi	r24, 0x01	; 1
    2428:	91 05       	cpc	r25, r1
    242a:	89 f0       	breq	.+34     	; 0x244e <ExtInt_vidDisableExtInt+0x44>
    242c:	2a 81       	ldd	r18, Y+2	; 0x02
    242e:	3b 81       	ldd	r19, Y+3	; 0x03
    2430:	22 30       	cpi	r18, 0x02	; 2
    2432:	31 05       	cpc	r19, r1
    2434:	a1 f0       	breq	.+40     	; 0x245e <ExtInt_vidDisableExtInt+0x54>
    2436:	8a 81       	ldd	r24, Y+2	; 0x02
    2438:	9b 81       	ldd	r25, Y+3	; 0x03
    243a:	00 97       	sbiw	r24, 0x00	; 0
    243c:	b9 f4       	brne	.+46     	; 0x246c <ExtInt_vidDisableExtInt+0x62>
	{
	case EXT_INT0:
		SET_BIT(EXTINT_GICR_REG,INT0_EN_BIT);
    243e:	ab e5       	ldi	r26, 0x5B	; 91
    2440:	b0 e0       	ldi	r27, 0x00	; 0
    2442:	eb e5       	ldi	r30, 0x5B	; 91
    2444:	f0 e0       	ldi	r31, 0x00	; 0
    2446:	80 81       	ld	r24, Z
    2448:	80 64       	ori	r24, 0x40	; 64
    244a:	8c 93       	st	X, r24
    244c:	0f c0       	rjmp	.+30     	; 0x246c <ExtInt_vidDisableExtInt+0x62>
		break;

	case EXT_INT1:
		SET_BIT(EXTINT_GICR_REG,INT1_EN_BIT);
    244e:	ab e5       	ldi	r26, 0x5B	; 91
    2450:	b0 e0       	ldi	r27, 0x00	; 0
    2452:	eb e5       	ldi	r30, 0x5B	; 91
    2454:	f0 e0       	ldi	r31, 0x00	; 0
    2456:	80 81       	ld	r24, Z
    2458:	80 68       	ori	r24, 0x80	; 128
    245a:	8c 93       	st	X, r24
    245c:	07 c0       	rjmp	.+14     	; 0x246c <ExtInt_vidDisableExtInt+0x62>
		break;

	case EXT_INT2:
		SET_BIT(EXTINT_GICR_REG,INT2_EN_BIT);
    245e:	ab e5       	ldi	r26, 0x5B	; 91
    2460:	b0 e0       	ldi	r27, 0x00	; 0
    2462:	eb e5       	ldi	r30, 0x5B	; 91
    2464:	f0 e0       	ldi	r31, 0x00	; 0
    2466:	80 81       	ld	r24, Z
    2468:	80 62       	ori	r24, 0x20	; 32
    246a:	8c 93       	st	X, r24
		break;
	}
}
    246c:	0f 90       	pop	r0
    246e:	0f 90       	pop	r0
    2470:	0f 90       	pop	r0
    2472:	cf 91       	pop	r28
    2474:	df 91       	pop	r29
    2476:	08 95       	ret

00002478 <Dio_vidconfigChanel>:
 */
#include "Dio.h"
#include "Bit_Math.h"

void Dio_vidconfigChanel(dio_port_t port, dio_pin_t pin,dio_dir_t dir)
{
    2478:	df 93       	push	r29
    247a:	cf 93       	push	r28
    247c:	00 d0       	rcall	.+0      	; 0x247e <Dio_vidconfigChanel+0x6>
    247e:	00 d0       	rcall	.+0      	; 0x2480 <Dio_vidconfigChanel+0x8>
    2480:	0f 92       	push	r0
    2482:	cd b7       	in	r28, 0x3d	; 61
    2484:	de b7       	in	r29, 0x3e	; 62
    2486:	89 83       	std	Y+1, r24	; 0x01
    2488:	6a 83       	std	Y+2, r22	; 0x02
    248a:	4b 83       	std	Y+3, r20	; 0x03
	switch(port)
    248c:	89 81       	ldd	r24, Y+1	; 0x01
    248e:	28 2f       	mov	r18, r24
    2490:	30 e0       	ldi	r19, 0x00	; 0
    2492:	3d 83       	std	Y+5, r19	; 0x05
    2494:	2c 83       	std	Y+4, r18	; 0x04
    2496:	8c 81       	ldd	r24, Y+4	; 0x04
    2498:	9d 81       	ldd	r25, Y+5	; 0x05
    249a:	81 30       	cpi	r24, 0x01	; 1
    249c:	91 05       	cpc	r25, r1
    249e:	09 f4       	brne	.+2      	; 0x24a2 <Dio_vidconfigChanel+0x2a>
    24a0:	43 c0       	rjmp	.+134    	; 0x2528 <Dio_vidconfigChanel+0xb0>
    24a2:	2c 81       	ldd	r18, Y+4	; 0x04
    24a4:	3d 81       	ldd	r19, Y+5	; 0x05
    24a6:	22 30       	cpi	r18, 0x02	; 2
    24a8:	31 05       	cpc	r19, r1
    24aa:	2c f4       	brge	.+10     	; 0x24b6 <Dio_vidconfigChanel+0x3e>
    24ac:	8c 81       	ldd	r24, Y+4	; 0x04
    24ae:	9d 81       	ldd	r25, Y+5	; 0x05
    24b0:	00 97       	sbiw	r24, 0x00	; 0
    24b2:	71 f0       	breq	.+28     	; 0x24d0 <Dio_vidconfigChanel+0x58>
    24b4:	bc c0       	rjmp	.+376    	; 0x262e <Dio_vidconfigChanel+0x1b6>
    24b6:	2c 81       	ldd	r18, Y+4	; 0x04
    24b8:	3d 81       	ldd	r19, Y+5	; 0x05
    24ba:	22 30       	cpi	r18, 0x02	; 2
    24bc:	31 05       	cpc	r19, r1
    24be:	09 f4       	brne	.+2      	; 0x24c2 <Dio_vidconfigChanel+0x4a>
    24c0:	5f c0       	rjmp	.+190    	; 0x2580 <Dio_vidconfigChanel+0x108>
    24c2:	8c 81       	ldd	r24, Y+4	; 0x04
    24c4:	9d 81       	ldd	r25, Y+5	; 0x05
    24c6:	83 30       	cpi	r24, 0x03	; 3
    24c8:	91 05       	cpc	r25, r1
    24ca:	09 f4       	brne	.+2      	; 0x24ce <Dio_vidconfigChanel+0x56>
    24cc:	85 c0       	rjmp	.+266    	; 0x25d8 <Dio_vidconfigChanel+0x160>
    24ce:	af c0       	rjmp	.+350    	; 0x262e <Dio_vidconfigChanel+0x1b6>
	{
	case DIO_PORTA:
		if (dir == DIO_INPUT)
    24d0:	8b 81       	ldd	r24, Y+3	; 0x03
    24d2:	88 23       	and	r24, r24
    24d4:	a9 f4       	brne	.+42     	; 0x2500 <Dio_vidconfigChanel+0x88>
		{
			CLEAR_BIT(DIO_DDRA_REG,pin);
    24d6:	aa e3       	ldi	r26, 0x3A	; 58
    24d8:	b0 e0       	ldi	r27, 0x00	; 0
    24da:	ea e3       	ldi	r30, 0x3A	; 58
    24dc:	f0 e0       	ldi	r31, 0x00	; 0
    24de:	80 81       	ld	r24, Z
    24e0:	48 2f       	mov	r20, r24
    24e2:	8a 81       	ldd	r24, Y+2	; 0x02
    24e4:	28 2f       	mov	r18, r24
    24e6:	30 e0       	ldi	r19, 0x00	; 0
    24e8:	81 e0       	ldi	r24, 0x01	; 1
    24ea:	90 e0       	ldi	r25, 0x00	; 0
    24ec:	02 2e       	mov	r0, r18
    24ee:	02 c0       	rjmp	.+4      	; 0x24f4 <Dio_vidconfigChanel+0x7c>
    24f0:	88 0f       	add	r24, r24
    24f2:	99 1f       	adc	r25, r25
    24f4:	0a 94       	dec	r0
    24f6:	e2 f7       	brpl	.-8      	; 0x24f0 <Dio_vidconfigChanel+0x78>
    24f8:	80 95       	com	r24
    24fa:	84 23       	and	r24, r20
    24fc:	8c 93       	st	X, r24
    24fe:	97 c0       	rjmp	.+302    	; 0x262e <Dio_vidconfigChanel+0x1b6>
		}
		else
		{
			SET_BIT(DIO_DDRA_REG,pin);
    2500:	aa e3       	ldi	r26, 0x3A	; 58
    2502:	b0 e0       	ldi	r27, 0x00	; 0
    2504:	ea e3       	ldi	r30, 0x3A	; 58
    2506:	f0 e0       	ldi	r31, 0x00	; 0
    2508:	80 81       	ld	r24, Z
    250a:	48 2f       	mov	r20, r24
    250c:	8a 81       	ldd	r24, Y+2	; 0x02
    250e:	28 2f       	mov	r18, r24
    2510:	30 e0       	ldi	r19, 0x00	; 0
    2512:	81 e0       	ldi	r24, 0x01	; 1
    2514:	90 e0       	ldi	r25, 0x00	; 0
    2516:	02 2e       	mov	r0, r18
    2518:	02 c0       	rjmp	.+4      	; 0x251e <Dio_vidconfigChanel+0xa6>
    251a:	88 0f       	add	r24, r24
    251c:	99 1f       	adc	r25, r25
    251e:	0a 94       	dec	r0
    2520:	e2 f7       	brpl	.-8      	; 0x251a <Dio_vidconfigChanel+0xa2>
    2522:	84 2b       	or	r24, r20
    2524:	8c 93       	st	X, r24
    2526:	83 c0       	rjmp	.+262    	; 0x262e <Dio_vidconfigChanel+0x1b6>
		}
		break;

	case DIO_PORTB:
		if (dir == DIO_INPUT)
    2528:	8b 81       	ldd	r24, Y+3	; 0x03
    252a:	88 23       	and	r24, r24
    252c:	a9 f4       	brne	.+42     	; 0x2558 <Dio_vidconfigChanel+0xe0>
		{
			CLEAR_BIT(DIO_DDRB_REG,pin);
    252e:	a7 e3       	ldi	r26, 0x37	; 55
    2530:	b0 e0       	ldi	r27, 0x00	; 0
    2532:	e7 e3       	ldi	r30, 0x37	; 55
    2534:	f0 e0       	ldi	r31, 0x00	; 0
    2536:	80 81       	ld	r24, Z
    2538:	48 2f       	mov	r20, r24
    253a:	8a 81       	ldd	r24, Y+2	; 0x02
    253c:	28 2f       	mov	r18, r24
    253e:	30 e0       	ldi	r19, 0x00	; 0
    2540:	81 e0       	ldi	r24, 0x01	; 1
    2542:	90 e0       	ldi	r25, 0x00	; 0
    2544:	02 2e       	mov	r0, r18
    2546:	02 c0       	rjmp	.+4      	; 0x254c <Dio_vidconfigChanel+0xd4>
    2548:	88 0f       	add	r24, r24
    254a:	99 1f       	adc	r25, r25
    254c:	0a 94       	dec	r0
    254e:	e2 f7       	brpl	.-8      	; 0x2548 <Dio_vidconfigChanel+0xd0>
    2550:	80 95       	com	r24
    2552:	84 23       	and	r24, r20
    2554:	8c 93       	st	X, r24
    2556:	6b c0       	rjmp	.+214    	; 0x262e <Dio_vidconfigChanel+0x1b6>
		}
		else
		{
			SET_BIT(DIO_DDRB_REG,pin);
    2558:	a7 e3       	ldi	r26, 0x37	; 55
    255a:	b0 e0       	ldi	r27, 0x00	; 0
    255c:	e7 e3       	ldi	r30, 0x37	; 55
    255e:	f0 e0       	ldi	r31, 0x00	; 0
    2560:	80 81       	ld	r24, Z
    2562:	48 2f       	mov	r20, r24
    2564:	8a 81       	ldd	r24, Y+2	; 0x02
    2566:	28 2f       	mov	r18, r24
    2568:	30 e0       	ldi	r19, 0x00	; 0
    256a:	81 e0       	ldi	r24, 0x01	; 1
    256c:	90 e0       	ldi	r25, 0x00	; 0
    256e:	02 2e       	mov	r0, r18
    2570:	02 c0       	rjmp	.+4      	; 0x2576 <Dio_vidconfigChanel+0xfe>
    2572:	88 0f       	add	r24, r24
    2574:	99 1f       	adc	r25, r25
    2576:	0a 94       	dec	r0
    2578:	e2 f7       	brpl	.-8      	; 0x2572 <Dio_vidconfigChanel+0xfa>
    257a:	84 2b       	or	r24, r20
    257c:	8c 93       	st	X, r24
    257e:	57 c0       	rjmp	.+174    	; 0x262e <Dio_vidconfigChanel+0x1b6>
		}
		break;

	case DIO_PORTC:
		if (dir == DIO_INPUT)
    2580:	8b 81       	ldd	r24, Y+3	; 0x03
    2582:	88 23       	and	r24, r24
    2584:	a9 f4       	brne	.+42     	; 0x25b0 <Dio_vidconfigChanel+0x138>
		{
			CLEAR_BIT(DIO_DDRC_REG,pin);
    2586:	a4 e3       	ldi	r26, 0x34	; 52
    2588:	b0 e0       	ldi	r27, 0x00	; 0
    258a:	e4 e3       	ldi	r30, 0x34	; 52
    258c:	f0 e0       	ldi	r31, 0x00	; 0
    258e:	80 81       	ld	r24, Z
    2590:	48 2f       	mov	r20, r24
    2592:	8a 81       	ldd	r24, Y+2	; 0x02
    2594:	28 2f       	mov	r18, r24
    2596:	30 e0       	ldi	r19, 0x00	; 0
    2598:	81 e0       	ldi	r24, 0x01	; 1
    259a:	90 e0       	ldi	r25, 0x00	; 0
    259c:	02 2e       	mov	r0, r18
    259e:	02 c0       	rjmp	.+4      	; 0x25a4 <Dio_vidconfigChanel+0x12c>
    25a0:	88 0f       	add	r24, r24
    25a2:	99 1f       	adc	r25, r25
    25a4:	0a 94       	dec	r0
    25a6:	e2 f7       	brpl	.-8      	; 0x25a0 <Dio_vidconfigChanel+0x128>
    25a8:	80 95       	com	r24
    25aa:	84 23       	and	r24, r20
    25ac:	8c 93       	st	X, r24
    25ae:	3f c0       	rjmp	.+126    	; 0x262e <Dio_vidconfigChanel+0x1b6>
		}
		else
		{
			SET_BIT(DIO_DDRC_REG,pin);
    25b0:	a4 e3       	ldi	r26, 0x34	; 52
    25b2:	b0 e0       	ldi	r27, 0x00	; 0
    25b4:	e4 e3       	ldi	r30, 0x34	; 52
    25b6:	f0 e0       	ldi	r31, 0x00	; 0
    25b8:	80 81       	ld	r24, Z
    25ba:	48 2f       	mov	r20, r24
    25bc:	8a 81       	ldd	r24, Y+2	; 0x02
    25be:	28 2f       	mov	r18, r24
    25c0:	30 e0       	ldi	r19, 0x00	; 0
    25c2:	81 e0       	ldi	r24, 0x01	; 1
    25c4:	90 e0       	ldi	r25, 0x00	; 0
    25c6:	02 2e       	mov	r0, r18
    25c8:	02 c0       	rjmp	.+4      	; 0x25ce <Dio_vidconfigChanel+0x156>
    25ca:	88 0f       	add	r24, r24
    25cc:	99 1f       	adc	r25, r25
    25ce:	0a 94       	dec	r0
    25d0:	e2 f7       	brpl	.-8      	; 0x25ca <Dio_vidconfigChanel+0x152>
    25d2:	84 2b       	or	r24, r20
    25d4:	8c 93       	st	X, r24
    25d6:	2b c0       	rjmp	.+86     	; 0x262e <Dio_vidconfigChanel+0x1b6>
		}
		break;

	case DIO_PORTD:
		if (dir == DIO_INPUT)
    25d8:	8b 81       	ldd	r24, Y+3	; 0x03
    25da:	88 23       	and	r24, r24
    25dc:	a9 f4       	brne	.+42     	; 0x2608 <Dio_vidconfigChanel+0x190>
		{
			CLEAR_BIT(DIO_DDRD_REG,pin);
    25de:	a1 e3       	ldi	r26, 0x31	; 49
    25e0:	b0 e0       	ldi	r27, 0x00	; 0
    25e2:	e1 e3       	ldi	r30, 0x31	; 49
    25e4:	f0 e0       	ldi	r31, 0x00	; 0
    25e6:	80 81       	ld	r24, Z
    25e8:	48 2f       	mov	r20, r24
    25ea:	8a 81       	ldd	r24, Y+2	; 0x02
    25ec:	28 2f       	mov	r18, r24
    25ee:	30 e0       	ldi	r19, 0x00	; 0
    25f0:	81 e0       	ldi	r24, 0x01	; 1
    25f2:	90 e0       	ldi	r25, 0x00	; 0
    25f4:	02 2e       	mov	r0, r18
    25f6:	02 c0       	rjmp	.+4      	; 0x25fc <Dio_vidconfigChanel+0x184>
    25f8:	88 0f       	add	r24, r24
    25fa:	99 1f       	adc	r25, r25
    25fc:	0a 94       	dec	r0
    25fe:	e2 f7       	brpl	.-8      	; 0x25f8 <Dio_vidconfigChanel+0x180>
    2600:	80 95       	com	r24
    2602:	84 23       	and	r24, r20
    2604:	8c 93       	st	X, r24
    2606:	13 c0       	rjmp	.+38     	; 0x262e <Dio_vidconfigChanel+0x1b6>
		}
		else
		{
			SET_BIT(DIO_DDRD_REG,pin);
    2608:	a1 e3       	ldi	r26, 0x31	; 49
    260a:	b0 e0       	ldi	r27, 0x00	; 0
    260c:	e1 e3       	ldi	r30, 0x31	; 49
    260e:	f0 e0       	ldi	r31, 0x00	; 0
    2610:	80 81       	ld	r24, Z
    2612:	48 2f       	mov	r20, r24
    2614:	8a 81       	ldd	r24, Y+2	; 0x02
    2616:	28 2f       	mov	r18, r24
    2618:	30 e0       	ldi	r19, 0x00	; 0
    261a:	81 e0       	ldi	r24, 0x01	; 1
    261c:	90 e0       	ldi	r25, 0x00	; 0
    261e:	02 2e       	mov	r0, r18
    2620:	02 c0       	rjmp	.+4      	; 0x2626 <Dio_vidconfigChanel+0x1ae>
    2622:	88 0f       	add	r24, r24
    2624:	99 1f       	adc	r25, r25
    2626:	0a 94       	dec	r0
    2628:	e2 f7       	brpl	.-8      	; 0x2622 <Dio_vidconfigChanel+0x1aa>
    262a:	84 2b       	or	r24, r20
    262c:	8c 93       	st	X, r24
		}
		break;
	}
}
    262e:	0f 90       	pop	r0
    2630:	0f 90       	pop	r0
    2632:	0f 90       	pop	r0
    2634:	0f 90       	pop	r0
    2636:	0f 90       	pop	r0
    2638:	cf 91       	pop	r28
    263a:	df 91       	pop	r29
    263c:	08 95       	ret

0000263e <Dio_vidwriteChanel>:

void Dio_vidwriteChanel(dio_port_t port, dio_pin_t pin,dio_level_t level)
{
    263e:	df 93       	push	r29
    2640:	cf 93       	push	r28
    2642:	00 d0       	rcall	.+0      	; 0x2644 <Dio_vidwriteChanel+0x6>
    2644:	00 d0       	rcall	.+0      	; 0x2646 <Dio_vidwriteChanel+0x8>
    2646:	0f 92       	push	r0
    2648:	cd b7       	in	r28, 0x3d	; 61
    264a:	de b7       	in	r29, 0x3e	; 62
    264c:	89 83       	std	Y+1, r24	; 0x01
    264e:	6a 83       	std	Y+2, r22	; 0x02
    2650:	4b 83       	std	Y+3, r20	; 0x03
	switch (port)
    2652:	89 81       	ldd	r24, Y+1	; 0x01
    2654:	28 2f       	mov	r18, r24
    2656:	30 e0       	ldi	r19, 0x00	; 0
    2658:	3d 83       	std	Y+5, r19	; 0x05
    265a:	2c 83       	std	Y+4, r18	; 0x04
    265c:	8c 81       	ldd	r24, Y+4	; 0x04
    265e:	9d 81       	ldd	r25, Y+5	; 0x05
    2660:	81 30       	cpi	r24, 0x01	; 1
    2662:	91 05       	cpc	r25, r1
    2664:	09 f4       	brne	.+2      	; 0x2668 <Dio_vidwriteChanel+0x2a>
    2666:	43 c0       	rjmp	.+134    	; 0x26ee <Dio_vidwriteChanel+0xb0>
    2668:	2c 81       	ldd	r18, Y+4	; 0x04
    266a:	3d 81       	ldd	r19, Y+5	; 0x05
    266c:	22 30       	cpi	r18, 0x02	; 2
    266e:	31 05       	cpc	r19, r1
    2670:	2c f4       	brge	.+10     	; 0x267c <Dio_vidwriteChanel+0x3e>
    2672:	8c 81       	ldd	r24, Y+4	; 0x04
    2674:	9d 81       	ldd	r25, Y+5	; 0x05
    2676:	00 97       	sbiw	r24, 0x00	; 0
    2678:	71 f0       	breq	.+28     	; 0x2696 <Dio_vidwriteChanel+0x58>
    267a:	bc c0       	rjmp	.+376    	; 0x27f4 <Dio_vidwriteChanel+0x1b6>
    267c:	2c 81       	ldd	r18, Y+4	; 0x04
    267e:	3d 81       	ldd	r19, Y+5	; 0x05
    2680:	22 30       	cpi	r18, 0x02	; 2
    2682:	31 05       	cpc	r19, r1
    2684:	09 f4       	brne	.+2      	; 0x2688 <Dio_vidwriteChanel+0x4a>
    2686:	5f c0       	rjmp	.+190    	; 0x2746 <Dio_vidwriteChanel+0x108>
    2688:	8c 81       	ldd	r24, Y+4	; 0x04
    268a:	9d 81       	ldd	r25, Y+5	; 0x05
    268c:	83 30       	cpi	r24, 0x03	; 3
    268e:	91 05       	cpc	r25, r1
    2690:	09 f4       	brne	.+2      	; 0x2694 <Dio_vidwriteChanel+0x56>
    2692:	85 c0       	rjmp	.+266    	; 0x279e <Dio_vidwriteChanel+0x160>
    2694:	af c0       	rjmp	.+350    	; 0x27f4 <Dio_vidwriteChanel+0x1b6>
	{
	case DIO_PORTA:
		if (level == DIO_HIGH)
    2696:	8b 81       	ldd	r24, Y+3	; 0x03
    2698:	81 30       	cpi	r24, 0x01	; 1
    269a:	a1 f4       	brne	.+40     	; 0x26c4 <Dio_vidwriteChanel+0x86>
		{
			SET_BIT(DIO_PORTA_REG,pin);
    269c:	ab e3       	ldi	r26, 0x3B	; 59
    269e:	b0 e0       	ldi	r27, 0x00	; 0
    26a0:	eb e3       	ldi	r30, 0x3B	; 59
    26a2:	f0 e0       	ldi	r31, 0x00	; 0
    26a4:	80 81       	ld	r24, Z
    26a6:	48 2f       	mov	r20, r24
    26a8:	8a 81       	ldd	r24, Y+2	; 0x02
    26aa:	28 2f       	mov	r18, r24
    26ac:	30 e0       	ldi	r19, 0x00	; 0
    26ae:	81 e0       	ldi	r24, 0x01	; 1
    26b0:	90 e0       	ldi	r25, 0x00	; 0
    26b2:	02 2e       	mov	r0, r18
    26b4:	02 c0       	rjmp	.+4      	; 0x26ba <Dio_vidwriteChanel+0x7c>
    26b6:	88 0f       	add	r24, r24
    26b8:	99 1f       	adc	r25, r25
    26ba:	0a 94       	dec	r0
    26bc:	e2 f7       	brpl	.-8      	; 0x26b6 <Dio_vidwriteChanel+0x78>
    26be:	84 2b       	or	r24, r20
    26c0:	8c 93       	st	X, r24
    26c2:	98 c0       	rjmp	.+304    	; 0x27f4 <Dio_vidwriteChanel+0x1b6>
		}
		else
		{
			CLEAR_BIT(DIO_PORTA_REG,pin);
    26c4:	ab e3       	ldi	r26, 0x3B	; 59
    26c6:	b0 e0       	ldi	r27, 0x00	; 0
    26c8:	eb e3       	ldi	r30, 0x3B	; 59
    26ca:	f0 e0       	ldi	r31, 0x00	; 0
    26cc:	80 81       	ld	r24, Z
    26ce:	48 2f       	mov	r20, r24
    26d0:	8a 81       	ldd	r24, Y+2	; 0x02
    26d2:	28 2f       	mov	r18, r24
    26d4:	30 e0       	ldi	r19, 0x00	; 0
    26d6:	81 e0       	ldi	r24, 0x01	; 1
    26d8:	90 e0       	ldi	r25, 0x00	; 0
    26da:	02 2e       	mov	r0, r18
    26dc:	02 c0       	rjmp	.+4      	; 0x26e2 <Dio_vidwriteChanel+0xa4>
    26de:	88 0f       	add	r24, r24
    26e0:	99 1f       	adc	r25, r25
    26e2:	0a 94       	dec	r0
    26e4:	e2 f7       	brpl	.-8      	; 0x26de <Dio_vidwriteChanel+0xa0>
    26e6:	80 95       	com	r24
    26e8:	84 23       	and	r24, r20
    26ea:	8c 93       	st	X, r24
    26ec:	83 c0       	rjmp	.+262    	; 0x27f4 <Dio_vidwriteChanel+0x1b6>
		}
		break;

	case DIO_PORTB:
		if (level == DIO_HIGH)
    26ee:	8b 81       	ldd	r24, Y+3	; 0x03
    26f0:	81 30       	cpi	r24, 0x01	; 1
    26f2:	a1 f4       	brne	.+40     	; 0x271c <Dio_vidwriteChanel+0xde>
		{
			SET_BIT(DIO_PORTB_REG,pin);
    26f4:	a8 e3       	ldi	r26, 0x38	; 56
    26f6:	b0 e0       	ldi	r27, 0x00	; 0
    26f8:	e8 e3       	ldi	r30, 0x38	; 56
    26fa:	f0 e0       	ldi	r31, 0x00	; 0
    26fc:	80 81       	ld	r24, Z
    26fe:	48 2f       	mov	r20, r24
    2700:	8a 81       	ldd	r24, Y+2	; 0x02
    2702:	28 2f       	mov	r18, r24
    2704:	30 e0       	ldi	r19, 0x00	; 0
    2706:	81 e0       	ldi	r24, 0x01	; 1
    2708:	90 e0       	ldi	r25, 0x00	; 0
    270a:	02 2e       	mov	r0, r18
    270c:	02 c0       	rjmp	.+4      	; 0x2712 <Dio_vidwriteChanel+0xd4>
    270e:	88 0f       	add	r24, r24
    2710:	99 1f       	adc	r25, r25
    2712:	0a 94       	dec	r0
    2714:	e2 f7       	brpl	.-8      	; 0x270e <Dio_vidwriteChanel+0xd0>
    2716:	84 2b       	or	r24, r20
    2718:	8c 93       	st	X, r24
    271a:	6c c0       	rjmp	.+216    	; 0x27f4 <Dio_vidwriteChanel+0x1b6>
		}
		else
		{
			CLEAR_BIT(DIO_PORTB_REG,pin);
    271c:	a8 e3       	ldi	r26, 0x38	; 56
    271e:	b0 e0       	ldi	r27, 0x00	; 0
    2720:	e8 e3       	ldi	r30, 0x38	; 56
    2722:	f0 e0       	ldi	r31, 0x00	; 0
    2724:	80 81       	ld	r24, Z
    2726:	48 2f       	mov	r20, r24
    2728:	8a 81       	ldd	r24, Y+2	; 0x02
    272a:	28 2f       	mov	r18, r24
    272c:	30 e0       	ldi	r19, 0x00	; 0
    272e:	81 e0       	ldi	r24, 0x01	; 1
    2730:	90 e0       	ldi	r25, 0x00	; 0
    2732:	02 2e       	mov	r0, r18
    2734:	02 c0       	rjmp	.+4      	; 0x273a <Dio_vidwriteChanel+0xfc>
    2736:	88 0f       	add	r24, r24
    2738:	99 1f       	adc	r25, r25
    273a:	0a 94       	dec	r0
    273c:	e2 f7       	brpl	.-8      	; 0x2736 <Dio_vidwriteChanel+0xf8>
    273e:	80 95       	com	r24
    2740:	84 23       	and	r24, r20
    2742:	8c 93       	st	X, r24
    2744:	57 c0       	rjmp	.+174    	; 0x27f4 <Dio_vidwriteChanel+0x1b6>
		}
		break;

	case DIO_PORTC:
		if (level == DIO_HIGH)
    2746:	8b 81       	ldd	r24, Y+3	; 0x03
    2748:	81 30       	cpi	r24, 0x01	; 1
    274a:	a1 f4       	brne	.+40     	; 0x2774 <Dio_vidwriteChanel+0x136>
		{
			SET_BIT(DIO_PORTC_REG,pin);
    274c:	a5 e3       	ldi	r26, 0x35	; 53
    274e:	b0 e0       	ldi	r27, 0x00	; 0
    2750:	e5 e3       	ldi	r30, 0x35	; 53
    2752:	f0 e0       	ldi	r31, 0x00	; 0
    2754:	80 81       	ld	r24, Z
    2756:	48 2f       	mov	r20, r24
    2758:	8a 81       	ldd	r24, Y+2	; 0x02
    275a:	28 2f       	mov	r18, r24
    275c:	30 e0       	ldi	r19, 0x00	; 0
    275e:	81 e0       	ldi	r24, 0x01	; 1
    2760:	90 e0       	ldi	r25, 0x00	; 0
    2762:	02 2e       	mov	r0, r18
    2764:	02 c0       	rjmp	.+4      	; 0x276a <Dio_vidwriteChanel+0x12c>
    2766:	88 0f       	add	r24, r24
    2768:	99 1f       	adc	r25, r25
    276a:	0a 94       	dec	r0
    276c:	e2 f7       	brpl	.-8      	; 0x2766 <Dio_vidwriteChanel+0x128>
    276e:	84 2b       	or	r24, r20
    2770:	8c 93       	st	X, r24
    2772:	40 c0       	rjmp	.+128    	; 0x27f4 <Dio_vidwriteChanel+0x1b6>
		}
		else
		{
			CLEAR_BIT(DIO_PORTC_REG,pin);
    2774:	a5 e3       	ldi	r26, 0x35	; 53
    2776:	b0 e0       	ldi	r27, 0x00	; 0
    2778:	e5 e3       	ldi	r30, 0x35	; 53
    277a:	f0 e0       	ldi	r31, 0x00	; 0
    277c:	80 81       	ld	r24, Z
    277e:	48 2f       	mov	r20, r24
    2780:	8a 81       	ldd	r24, Y+2	; 0x02
    2782:	28 2f       	mov	r18, r24
    2784:	30 e0       	ldi	r19, 0x00	; 0
    2786:	81 e0       	ldi	r24, 0x01	; 1
    2788:	90 e0       	ldi	r25, 0x00	; 0
    278a:	02 2e       	mov	r0, r18
    278c:	02 c0       	rjmp	.+4      	; 0x2792 <Dio_vidwriteChanel+0x154>
    278e:	88 0f       	add	r24, r24
    2790:	99 1f       	adc	r25, r25
    2792:	0a 94       	dec	r0
    2794:	e2 f7       	brpl	.-8      	; 0x278e <Dio_vidwriteChanel+0x150>
    2796:	80 95       	com	r24
    2798:	84 23       	and	r24, r20
    279a:	8c 93       	st	X, r24
    279c:	2b c0       	rjmp	.+86     	; 0x27f4 <Dio_vidwriteChanel+0x1b6>
		}
		break;

	case DIO_PORTD:
		if (level == DIO_HIGH)
    279e:	8b 81       	ldd	r24, Y+3	; 0x03
    27a0:	81 30       	cpi	r24, 0x01	; 1
    27a2:	a1 f4       	brne	.+40     	; 0x27cc <Dio_vidwriteChanel+0x18e>
		{
			SET_BIT(DIO_PORTD_REG,pin);
    27a4:	a2 e3       	ldi	r26, 0x32	; 50
    27a6:	b0 e0       	ldi	r27, 0x00	; 0
    27a8:	e2 e3       	ldi	r30, 0x32	; 50
    27aa:	f0 e0       	ldi	r31, 0x00	; 0
    27ac:	80 81       	ld	r24, Z
    27ae:	48 2f       	mov	r20, r24
    27b0:	8a 81       	ldd	r24, Y+2	; 0x02
    27b2:	28 2f       	mov	r18, r24
    27b4:	30 e0       	ldi	r19, 0x00	; 0
    27b6:	81 e0       	ldi	r24, 0x01	; 1
    27b8:	90 e0       	ldi	r25, 0x00	; 0
    27ba:	02 2e       	mov	r0, r18
    27bc:	02 c0       	rjmp	.+4      	; 0x27c2 <Dio_vidwriteChanel+0x184>
    27be:	88 0f       	add	r24, r24
    27c0:	99 1f       	adc	r25, r25
    27c2:	0a 94       	dec	r0
    27c4:	e2 f7       	brpl	.-8      	; 0x27be <Dio_vidwriteChanel+0x180>
    27c6:	84 2b       	or	r24, r20
    27c8:	8c 93       	st	X, r24
    27ca:	14 c0       	rjmp	.+40     	; 0x27f4 <Dio_vidwriteChanel+0x1b6>
		}
		else
		{
			CLEAR_BIT(DIO_PORTD_REG,pin);
    27cc:	a2 e3       	ldi	r26, 0x32	; 50
    27ce:	b0 e0       	ldi	r27, 0x00	; 0
    27d0:	e2 e3       	ldi	r30, 0x32	; 50
    27d2:	f0 e0       	ldi	r31, 0x00	; 0
    27d4:	80 81       	ld	r24, Z
    27d6:	48 2f       	mov	r20, r24
    27d8:	8a 81       	ldd	r24, Y+2	; 0x02
    27da:	28 2f       	mov	r18, r24
    27dc:	30 e0       	ldi	r19, 0x00	; 0
    27de:	81 e0       	ldi	r24, 0x01	; 1
    27e0:	90 e0       	ldi	r25, 0x00	; 0
    27e2:	02 2e       	mov	r0, r18
    27e4:	02 c0       	rjmp	.+4      	; 0x27ea <Dio_vidwriteChanel+0x1ac>
    27e6:	88 0f       	add	r24, r24
    27e8:	99 1f       	adc	r25, r25
    27ea:	0a 94       	dec	r0
    27ec:	e2 f7       	brpl	.-8      	; 0x27e6 <Dio_vidwriteChanel+0x1a8>
    27ee:	80 95       	com	r24
    27f0:	84 23       	and	r24, r20
    27f2:	8c 93       	st	X, r24
		}
		break;
	}
}
    27f4:	0f 90       	pop	r0
    27f6:	0f 90       	pop	r0
    27f8:	0f 90       	pop	r0
    27fa:	0f 90       	pop	r0
    27fc:	0f 90       	pop	r0
    27fe:	cf 91       	pop	r28
    2800:	df 91       	pop	r29
    2802:	08 95       	ret

00002804 <Dio_vidWriteChanelGroup>:

void Dio_vidWriteChanelGroup(dio_port_t port, u8 data, u8 mask)
{
    2804:	df 93       	push	r29
    2806:	cf 93       	push	r28
    2808:	00 d0       	rcall	.+0      	; 0x280a <Dio_vidWriteChanelGroup+0x6>
    280a:	00 d0       	rcall	.+0      	; 0x280c <Dio_vidWriteChanelGroup+0x8>
    280c:	0f 92       	push	r0
    280e:	cd b7       	in	r28, 0x3d	; 61
    2810:	de b7       	in	r29, 0x3e	; 62
    2812:	89 83       	std	Y+1, r24	; 0x01
    2814:	6a 83       	std	Y+2, r22	; 0x02
    2816:	4b 83       	std	Y+3, r20	; 0x03
	switch(port)
    2818:	89 81       	ldd	r24, Y+1	; 0x01
    281a:	28 2f       	mov	r18, r24
    281c:	30 e0       	ldi	r19, 0x00	; 0
    281e:	3d 83       	std	Y+5, r19	; 0x05
    2820:	2c 83       	std	Y+4, r18	; 0x04
    2822:	8c 81       	ldd	r24, Y+4	; 0x04
    2824:	9d 81       	ldd	r25, Y+5	; 0x05
    2826:	81 30       	cpi	r24, 0x01	; 1
    2828:	91 05       	cpc	r25, r1
    282a:	01 f1       	breq	.+64     	; 0x286c <Dio_vidWriteChanelGroup+0x68>
    282c:	2c 81       	ldd	r18, Y+4	; 0x04
    282e:	3d 81       	ldd	r19, Y+5	; 0x05
    2830:	22 30       	cpi	r18, 0x02	; 2
    2832:	31 05       	cpc	r19, r1
    2834:	2c f4       	brge	.+10     	; 0x2840 <Dio_vidWriteChanelGroup+0x3c>
    2836:	8c 81       	ldd	r24, Y+4	; 0x04
    2838:	9d 81       	ldd	r25, Y+5	; 0x05
    283a:	00 97       	sbiw	r24, 0x00	; 0
    283c:	61 f0       	breq	.+24     	; 0x2856 <Dio_vidWriteChanelGroup+0x52>
    283e:	36 c0       	rjmp	.+108    	; 0x28ac <Dio_vidWriteChanelGroup+0xa8>
    2840:	2c 81       	ldd	r18, Y+4	; 0x04
    2842:	3d 81       	ldd	r19, Y+5	; 0x05
    2844:	22 30       	cpi	r18, 0x02	; 2
    2846:	31 05       	cpc	r19, r1
    2848:	e1 f0       	breq	.+56     	; 0x2882 <Dio_vidWriteChanelGroup+0x7e>
    284a:	8c 81       	ldd	r24, Y+4	; 0x04
    284c:	9d 81       	ldd	r25, Y+5	; 0x05
    284e:	83 30       	cpi	r24, 0x03	; 3
    2850:	91 05       	cpc	r25, r1
    2852:	11 f1       	breq	.+68     	; 0x2898 <Dio_vidWriteChanelGroup+0x94>
    2854:	2b c0       	rjmp	.+86     	; 0x28ac <Dio_vidWriteChanelGroup+0xa8>
	{
	case DIO_PORTA:
		DIO_PORTA_REG = (DIO_PORTA_REG & mask)|(data);
    2856:	ab e3       	ldi	r26, 0x3B	; 59
    2858:	b0 e0       	ldi	r27, 0x00	; 0
    285a:	eb e3       	ldi	r30, 0x3B	; 59
    285c:	f0 e0       	ldi	r31, 0x00	; 0
    285e:	90 81       	ld	r25, Z
    2860:	8b 81       	ldd	r24, Y+3	; 0x03
    2862:	98 23       	and	r25, r24
    2864:	8a 81       	ldd	r24, Y+2	; 0x02
    2866:	89 2b       	or	r24, r25
    2868:	8c 93       	st	X, r24
    286a:	20 c0       	rjmp	.+64     	; 0x28ac <Dio_vidWriteChanelGroup+0xa8>
		break;

	case DIO_PORTB:
		DIO_PORTB_REG = (DIO_PORTB_REG & mask)|(data);
    286c:	a8 e3       	ldi	r26, 0x38	; 56
    286e:	b0 e0       	ldi	r27, 0x00	; 0
    2870:	e8 e3       	ldi	r30, 0x38	; 56
    2872:	f0 e0       	ldi	r31, 0x00	; 0
    2874:	90 81       	ld	r25, Z
    2876:	8b 81       	ldd	r24, Y+3	; 0x03
    2878:	98 23       	and	r25, r24
    287a:	8a 81       	ldd	r24, Y+2	; 0x02
    287c:	89 2b       	or	r24, r25
    287e:	8c 93       	st	X, r24
    2880:	15 c0       	rjmp	.+42     	; 0x28ac <Dio_vidWriteChanelGroup+0xa8>
		break;

	case DIO_PORTC:
		DIO_PORTC_REG = (DIO_PORTC_REG & mask)|(data);
    2882:	a5 e3       	ldi	r26, 0x35	; 53
    2884:	b0 e0       	ldi	r27, 0x00	; 0
    2886:	e5 e3       	ldi	r30, 0x35	; 53
    2888:	f0 e0       	ldi	r31, 0x00	; 0
    288a:	90 81       	ld	r25, Z
    288c:	8b 81       	ldd	r24, Y+3	; 0x03
    288e:	98 23       	and	r25, r24
    2890:	8a 81       	ldd	r24, Y+2	; 0x02
    2892:	89 2b       	or	r24, r25
    2894:	8c 93       	st	X, r24
    2896:	0a c0       	rjmp	.+20     	; 0x28ac <Dio_vidWriteChanelGroup+0xa8>
		break;

	case DIO_PORTD:
		DIO_PORTD_REG = (DIO_PORTD_REG & mask)|(data);
    2898:	a2 e3       	ldi	r26, 0x32	; 50
    289a:	b0 e0       	ldi	r27, 0x00	; 0
    289c:	e2 e3       	ldi	r30, 0x32	; 50
    289e:	f0 e0       	ldi	r31, 0x00	; 0
    28a0:	90 81       	ld	r25, Z
    28a2:	8b 81       	ldd	r24, Y+3	; 0x03
    28a4:	98 23       	and	r25, r24
    28a6:	8a 81       	ldd	r24, Y+2	; 0x02
    28a8:	89 2b       	or	r24, r25
    28aa:	8c 93       	st	X, r24
		break;
	}
}
    28ac:	0f 90       	pop	r0
    28ae:	0f 90       	pop	r0
    28b0:	0f 90       	pop	r0
    28b2:	0f 90       	pop	r0
    28b4:	0f 90       	pop	r0
    28b6:	cf 91       	pop	r28
    28b8:	df 91       	pop	r29
    28ba:	08 95       	ret

000028bc <Dio_udtreadChanel>:

dio_level_t Dio_udtreadChanel(dio_port_t port, dio_pin_t pin)
{
    28bc:	df 93       	push	r29
    28be:	cf 93       	push	r28
    28c0:	00 d0       	rcall	.+0      	; 0x28c2 <Dio_udtreadChanel+0x6>
    28c2:	00 d0       	rcall	.+0      	; 0x28c4 <Dio_udtreadChanel+0x8>
    28c4:	0f 92       	push	r0
    28c6:	cd b7       	in	r28, 0x3d	; 61
    28c8:	de b7       	in	r29, 0x3e	; 62
    28ca:	8a 83       	std	Y+2, r24	; 0x02
    28cc:	6b 83       	std	Y+3, r22	; 0x03
	dio_level_t loc_result = DIO_LOW;
    28ce:	19 82       	std	Y+1, r1	; 0x01

	switch (port)
    28d0:	8a 81       	ldd	r24, Y+2	; 0x02
    28d2:	28 2f       	mov	r18, r24
    28d4:	30 e0       	ldi	r19, 0x00	; 0
    28d6:	3d 83       	std	Y+5, r19	; 0x05
    28d8:	2c 83       	std	Y+4, r18	; 0x04
    28da:	4c 81       	ldd	r20, Y+4	; 0x04
    28dc:	5d 81       	ldd	r21, Y+5	; 0x05
    28de:	41 30       	cpi	r20, 0x01	; 1
    28e0:	51 05       	cpc	r21, r1
    28e2:	79 f1       	breq	.+94     	; 0x2942 <Dio_udtreadChanel+0x86>
    28e4:	8c 81       	ldd	r24, Y+4	; 0x04
    28e6:	9d 81       	ldd	r25, Y+5	; 0x05
    28e8:	82 30       	cpi	r24, 0x02	; 2
    28ea:	91 05       	cpc	r25, r1
    28ec:	34 f4       	brge	.+12     	; 0x28fa <Dio_udtreadChanel+0x3e>
    28ee:	2c 81       	ldd	r18, Y+4	; 0x04
    28f0:	3d 81       	ldd	r19, Y+5	; 0x05
    28f2:	21 15       	cp	r18, r1
    28f4:	31 05       	cpc	r19, r1
    28f6:	69 f0       	breq	.+26     	; 0x2912 <Dio_udtreadChanel+0x56>
    28f8:	6b c0       	rjmp	.+214    	; 0x29d0 <Dio_udtreadChanel+0x114>
    28fa:	4c 81       	ldd	r20, Y+4	; 0x04
    28fc:	5d 81       	ldd	r21, Y+5	; 0x05
    28fe:	42 30       	cpi	r20, 0x02	; 2
    2900:	51 05       	cpc	r21, r1
    2902:	b9 f1       	breq	.+110    	; 0x2972 <Dio_udtreadChanel+0xb6>
    2904:	8c 81       	ldd	r24, Y+4	; 0x04
    2906:	9d 81       	ldd	r25, Y+5	; 0x05
    2908:	83 30       	cpi	r24, 0x03	; 3
    290a:	91 05       	cpc	r25, r1
    290c:	09 f4       	brne	.+2      	; 0x2910 <Dio_udtreadChanel+0x54>
    290e:	49 c0       	rjmp	.+146    	; 0x29a2 <Dio_udtreadChanel+0xe6>
    2910:	5f c0       	rjmp	.+190    	; 0x29d0 <Dio_udtreadChanel+0x114>
	{
	case DIO_PORTA:
		if (CHECK_BIT(DIO_PINA_REG,pin) == 1)
    2912:	e9 e3       	ldi	r30, 0x39	; 57
    2914:	f0 e0       	ldi	r31, 0x00	; 0
    2916:	80 81       	ld	r24, Z
    2918:	28 2f       	mov	r18, r24
    291a:	30 e0       	ldi	r19, 0x00	; 0
    291c:	8b 81       	ldd	r24, Y+3	; 0x03
    291e:	88 2f       	mov	r24, r24
    2920:	90 e0       	ldi	r25, 0x00	; 0
    2922:	a9 01       	movw	r20, r18
    2924:	02 c0       	rjmp	.+4      	; 0x292a <Dio_udtreadChanel+0x6e>
    2926:	55 95       	asr	r21
    2928:	47 95       	ror	r20
    292a:	8a 95       	dec	r24
    292c:	e2 f7       	brpl	.-8      	; 0x2926 <Dio_udtreadChanel+0x6a>
    292e:	ca 01       	movw	r24, r20
    2930:	81 70       	andi	r24, 0x01	; 1
    2932:	90 70       	andi	r25, 0x00	; 0
    2934:	88 23       	and	r24, r24
    2936:	19 f0       	breq	.+6      	; 0x293e <Dio_udtreadChanel+0x82>
		{
			loc_result = DIO_HIGH;
    2938:	81 e0       	ldi	r24, 0x01	; 1
    293a:	89 83       	std	Y+1, r24	; 0x01
    293c:	49 c0       	rjmp	.+146    	; 0x29d0 <Dio_udtreadChanel+0x114>
		}
		else
		{
			loc_result = DIO_LOW;
    293e:	19 82       	std	Y+1, r1	; 0x01
    2940:	47 c0       	rjmp	.+142    	; 0x29d0 <Dio_udtreadChanel+0x114>
		}
		break;

	case DIO_PORTB:
		if (CHECK_BIT(DIO_PINB_REG,pin) == 1)
    2942:	e6 e3       	ldi	r30, 0x36	; 54
    2944:	f0 e0       	ldi	r31, 0x00	; 0
    2946:	80 81       	ld	r24, Z
    2948:	28 2f       	mov	r18, r24
    294a:	30 e0       	ldi	r19, 0x00	; 0
    294c:	8b 81       	ldd	r24, Y+3	; 0x03
    294e:	88 2f       	mov	r24, r24
    2950:	90 e0       	ldi	r25, 0x00	; 0
    2952:	a9 01       	movw	r20, r18
    2954:	02 c0       	rjmp	.+4      	; 0x295a <Dio_udtreadChanel+0x9e>
    2956:	55 95       	asr	r21
    2958:	47 95       	ror	r20
    295a:	8a 95       	dec	r24
    295c:	e2 f7       	brpl	.-8      	; 0x2956 <Dio_udtreadChanel+0x9a>
    295e:	ca 01       	movw	r24, r20
    2960:	81 70       	andi	r24, 0x01	; 1
    2962:	90 70       	andi	r25, 0x00	; 0
    2964:	88 23       	and	r24, r24
    2966:	19 f0       	breq	.+6      	; 0x296e <Dio_udtreadChanel+0xb2>
		{
			loc_result = DIO_HIGH;
    2968:	81 e0       	ldi	r24, 0x01	; 1
    296a:	89 83       	std	Y+1, r24	; 0x01
    296c:	31 c0       	rjmp	.+98     	; 0x29d0 <Dio_udtreadChanel+0x114>
		}
		else
		{
			loc_result = DIO_LOW;
    296e:	19 82       	std	Y+1, r1	; 0x01
    2970:	2f c0       	rjmp	.+94     	; 0x29d0 <Dio_udtreadChanel+0x114>
		}
		break;

	case DIO_PORTC:
		if (CHECK_BIT(DIO_PINC_REG,pin) == 1)
    2972:	e3 e3       	ldi	r30, 0x33	; 51
    2974:	f0 e0       	ldi	r31, 0x00	; 0
    2976:	80 81       	ld	r24, Z
    2978:	28 2f       	mov	r18, r24
    297a:	30 e0       	ldi	r19, 0x00	; 0
    297c:	8b 81       	ldd	r24, Y+3	; 0x03
    297e:	88 2f       	mov	r24, r24
    2980:	90 e0       	ldi	r25, 0x00	; 0
    2982:	a9 01       	movw	r20, r18
    2984:	02 c0       	rjmp	.+4      	; 0x298a <Dio_udtreadChanel+0xce>
    2986:	55 95       	asr	r21
    2988:	47 95       	ror	r20
    298a:	8a 95       	dec	r24
    298c:	e2 f7       	brpl	.-8      	; 0x2986 <Dio_udtreadChanel+0xca>
    298e:	ca 01       	movw	r24, r20
    2990:	81 70       	andi	r24, 0x01	; 1
    2992:	90 70       	andi	r25, 0x00	; 0
    2994:	88 23       	and	r24, r24
    2996:	19 f0       	breq	.+6      	; 0x299e <Dio_udtreadChanel+0xe2>
		{
			loc_result = DIO_HIGH;
    2998:	81 e0       	ldi	r24, 0x01	; 1
    299a:	89 83       	std	Y+1, r24	; 0x01
    299c:	19 c0       	rjmp	.+50     	; 0x29d0 <Dio_udtreadChanel+0x114>
		}
		else
		{
			loc_result = DIO_LOW;
    299e:	19 82       	std	Y+1, r1	; 0x01
    29a0:	17 c0       	rjmp	.+46     	; 0x29d0 <Dio_udtreadChanel+0x114>
		}
		break;

	case DIO_PORTD:
		if (CHECK_BIT(DIO_PIND_REG,pin) == 1)
    29a2:	e0 e3       	ldi	r30, 0x30	; 48
    29a4:	f0 e0       	ldi	r31, 0x00	; 0
    29a6:	80 81       	ld	r24, Z
    29a8:	28 2f       	mov	r18, r24
    29aa:	30 e0       	ldi	r19, 0x00	; 0
    29ac:	8b 81       	ldd	r24, Y+3	; 0x03
    29ae:	88 2f       	mov	r24, r24
    29b0:	90 e0       	ldi	r25, 0x00	; 0
    29b2:	a9 01       	movw	r20, r18
    29b4:	02 c0       	rjmp	.+4      	; 0x29ba <Dio_udtreadChanel+0xfe>
    29b6:	55 95       	asr	r21
    29b8:	47 95       	ror	r20
    29ba:	8a 95       	dec	r24
    29bc:	e2 f7       	brpl	.-8      	; 0x29b6 <Dio_udtreadChanel+0xfa>
    29be:	ca 01       	movw	r24, r20
    29c0:	81 70       	andi	r24, 0x01	; 1
    29c2:	90 70       	andi	r25, 0x00	; 0
    29c4:	88 23       	and	r24, r24
    29c6:	19 f0       	breq	.+6      	; 0x29ce <Dio_udtreadChanel+0x112>
		{
			loc_result = DIO_HIGH;
    29c8:	81 e0       	ldi	r24, 0x01	; 1
    29ca:	89 83       	std	Y+1, r24	; 0x01
    29cc:	01 c0       	rjmp	.+2      	; 0x29d0 <Dio_udtreadChanel+0x114>
		}
		else
		{
			loc_result = DIO_LOW;
    29ce:	19 82       	std	Y+1, r1	; 0x01
		}
		break;
	}
	return loc_result;
    29d0:	89 81       	ldd	r24, Y+1	; 0x01
}
    29d2:	0f 90       	pop	r0
    29d4:	0f 90       	pop	r0
    29d6:	0f 90       	pop	r0
    29d8:	0f 90       	pop	r0
    29da:	0f 90       	pop	r0
    29dc:	cf 91       	pop	r28
    29de:	df 91       	pop	r29
    29e0:	08 95       	ret

000029e2 <Dio_vidflipChanel>:

void Dio_vidflipChanel(dio_port_t port, dio_pin_t pin)
{
    29e2:	df 93       	push	r29
    29e4:	cf 93       	push	r28
    29e6:	00 d0       	rcall	.+0      	; 0x29e8 <Dio_vidflipChanel+0x6>
    29e8:	00 d0       	rcall	.+0      	; 0x29ea <Dio_vidflipChanel+0x8>
    29ea:	cd b7       	in	r28, 0x3d	; 61
    29ec:	de b7       	in	r29, 0x3e	; 62
    29ee:	89 83       	std	Y+1, r24	; 0x01
    29f0:	6a 83       	std	Y+2, r22	; 0x02
	switch (port)
    29f2:	89 81       	ldd	r24, Y+1	; 0x01
    29f4:	28 2f       	mov	r18, r24
    29f6:	30 e0       	ldi	r19, 0x00	; 0
    29f8:	3c 83       	std	Y+4, r19	; 0x04
    29fa:	2b 83       	std	Y+3, r18	; 0x03
    29fc:	8b 81       	ldd	r24, Y+3	; 0x03
    29fe:	9c 81       	ldd	r25, Y+4	; 0x04
    2a00:	81 30       	cpi	r24, 0x01	; 1
    2a02:	91 05       	cpc	r25, r1
    2a04:	49 f1       	breq	.+82     	; 0x2a58 <Dio_vidflipChanel+0x76>
    2a06:	2b 81       	ldd	r18, Y+3	; 0x03
    2a08:	3c 81       	ldd	r19, Y+4	; 0x04
    2a0a:	22 30       	cpi	r18, 0x02	; 2
    2a0c:	31 05       	cpc	r19, r1
    2a0e:	2c f4       	brge	.+10     	; 0x2a1a <Dio_vidflipChanel+0x38>
    2a10:	8b 81       	ldd	r24, Y+3	; 0x03
    2a12:	9c 81       	ldd	r25, Y+4	; 0x04
    2a14:	00 97       	sbiw	r24, 0x00	; 0
    2a16:	61 f0       	breq	.+24     	; 0x2a30 <Dio_vidflipChanel+0x4e>
    2a18:	5a c0       	rjmp	.+180    	; 0x2ace <Dio_vidflipChanel+0xec>
    2a1a:	2b 81       	ldd	r18, Y+3	; 0x03
    2a1c:	3c 81       	ldd	r19, Y+4	; 0x04
    2a1e:	22 30       	cpi	r18, 0x02	; 2
    2a20:	31 05       	cpc	r19, r1
    2a22:	71 f1       	breq	.+92     	; 0x2a80 <Dio_vidflipChanel+0x9e>
    2a24:	8b 81       	ldd	r24, Y+3	; 0x03
    2a26:	9c 81       	ldd	r25, Y+4	; 0x04
    2a28:	83 30       	cpi	r24, 0x03	; 3
    2a2a:	91 05       	cpc	r25, r1
    2a2c:	e9 f1       	breq	.+122    	; 0x2aa8 <Dio_vidflipChanel+0xc6>
    2a2e:	4f c0       	rjmp	.+158    	; 0x2ace <Dio_vidflipChanel+0xec>
	{
	case DIO_PORTA:
		FLIP_BIT(DIO_PORTA_REG,pin);
    2a30:	ab e3       	ldi	r26, 0x3B	; 59
    2a32:	b0 e0       	ldi	r27, 0x00	; 0
    2a34:	eb e3       	ldi	r30, 0x3B	; 59
    2a36:	f0 e0       	ldi	r31, 0x00	; 0
    2a38:	80 81       	ld	r24, Z
    2a3a:	48 2f       	mov	r20, r24
    2a3c:	8a 81       	ldd	r24, Y+2	; 0x02
    2a3e:	28 2f       	mov	r18, r24
    2a40:	30 e0       	ldi	r19, 0x00	; 0
    2a42:	81 e0       	ldi	r24, 0x01	; 1
    2a44:	90 e0       	ldi	r25, 0x00	; 0
    2a46:	02 2e       	mov	r0, r18
    2a48:	02 c0       	rjmp	.+4      	; 0x2a4e <Dio_vidflipChanel+0x6c>
    2a4a:	88 0f       	add	r24, r24
    2a4c:	99 1f       	adc	r25, r25
    2a4e:	0a 94       	dec	r0
    2a50:	e2 f7       	brpl	.-8      	; 0x2a4a <Dio_vidflipChanel+0x68>
    2a52:	84 27       	eor	r24, r20
    2a54:	8c 93       	st	X, r24
    2a56:	3b c0       	rjmp	.+118    	; 0x2ace <Dio_vidflipChanel+0xec>
		break;

	case DIO_PORTB:
		FLIP_BIT(DIO_PORTB_REG,pin);
    2a58:	a8 e3       	ldi	r26, 0x38	; 56
    2a5a:	b0 e0       	ldi	r27, 0x00	; 0
    2a5c:	e8 e3       	ldi	r30, 0x38	; 56
    2a5e:	f0 e0       	ldi	r31, 0x00	; 0
    2a60:	80 81       	ld	r24, Z
    2a62:	48 2f       	mov	r20, r24
    2a64:	8a 81       	ldd	r24, Y+2	; 0x02
    2a66:	28 2f       	mov	r18, r24
    2a68:	30 e0       	ldi	r19, 0x00	; 0
    2a6a:	81 e0       	ldi	r24, 0x01	; 1
    2a6c:	90 e0       	ldi	r25, 0x00	; 0
    2a6e:	02 2e       	mov	r0, r18
    2a70:	02 c0       	rjmp	.+4      	; 0x2a76 <Dio_vidflipChanel+0x94>
    2a72:	88 0f       	add	r24, r24
    2a74:	99 1f       	adc	r25, r25
    2a76:	0a 94       	dec	r0
    2a78:	e2 f7       	brpl	.-8      	; 0x2a72 <Dio_vidflipChanel+0x90>
    2a7a:	84 27       	eor	r24, r20
    2a7c:	8c 93       	st	X, r24
    2a7e:	27 c0       	rjmp	.+78     	; 0x2ace <Dio_vidflipChanel+0xec>
		break;

	case DIO_PORTC:
		FLIP_BIT(DIO_PORTC_REG,pin);
    2a80:	a5 e3       	ldi	r26, 0x35	; 53
    2a82:	b0 e0       	ldi	r27, 0x00	; 0
    2a84:	e5 e3       	ldi	r30, 0x35	; 53
    2a86:	f0 e0       	ldi	r31, 0x00	; 0
    2a88:	80 81       	ld	r24, Z
    2a8a:	48 2f       	mov	r20, r24
    2a8c:	8a 81       	ldd	r24, Y+2	; 0x02
    2a8e:	28 2f       	mov	r18, r24
    2a90:	30 e0       	ldi	r19, 0x00	; 0
    2a92:	81 e0       	ldi	r24, 0x01	; 1
    2a94:	90 e0       	ldi	r25, 0x00	; 0
    2a96:	02 2e       	mov	r0, r18
    2a98:	02 c0       	rjmp	.+4      	; 0x2a9e <Dio_vidflipChanel+0xbc>
    2a9a:	88 0f       	add	r24, r24
    2a9c:	99 1f       	adc	r25, r25
    2a9e:	0a 94       	dec	r0
    2aa0:	e2 f7       	brpl	.-8      	; 0x2a9a <Dio_vidflipChanel+0xb8>
    2aa2:	84 27       	eor	r24, r20
    2aa4:	8c 93       	st	X, r24
    2aa6:	13 c0       	rjmp	.+38     	; 0x2ace <Dio_vidflipChanel+0xec>
		break;

	case DIO_PORTD:
		FLIP_BIT(DIO_PORTD_REG,pin);
    2aa8:	a2 e3       	ldi	r26, 0x32	; 50
    2aaa:	b0 e0       	ldi	r27, 0x00	; 0
    2aac:	e2 e3       	ldi	r30, 0x32	; 50
    2aae:	f0 e0       	ldi	r31, 0x00	; 0
    2ab0:	80 81       	ld	r24, Z
    2ab2:	48 2f       	mov	r20, r24
    2ab4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ab6:	28 2f       	mov	r18, r24
    2ab8:	30 e0       	ldi	r19, 0x00	; 0
    2aba:	81 e0       	ldi	r24, 0x01	; 1
    2abc:	90 e0       	ldi	r25, 0x00	; 0
    2abe:	02 2e       	mov	r0, r18
    2ac0:	02 c0       	rjmp	.+4      	; 0x2ac6 <Dio_vidflipChanel+0xe4>
    2ac2:	88 0f       	add	r24, r24
    2ac4:	99 1f       	adc	r25, r25
    2ac6:	0a 94       	dec	r0
    2ac8:	e2 f7       	brpl	.-8      	; 0x2ac2 <Dio_vidflipChanel+0xe0>
    2aca:	84 27       	eor	r24, r20
    2acc:	8c 93       	st	X, r24
		break;
	}
}
    2ace:	0f 90       	pop	r0
    2ad0:	0f 90       	pop	r0
    2ad2:	0f 90       	pop	r0
    2ad4:	0f 90       	pop	r0
    2ad6:	cf 91       	pop	r28
    2ad8:	df 91       	pop	r29
    2ada:	08 95       	ret

00002adc <Dio_vidPullUpEn>:
void Dio_vidPullUpEn(dio_port_t port, dio_pin_t pin)
{
    2adc:	df 93       	push	r29
    2ade:	cf 93       	push	r28
    2ae0:	00 d0       	rcall	.+0      	; 0x2ae2 <Dio_vidPullUpEn+0x6>
    2ae2:	00 d0       	rcall	.+0      	; 0x2ae4 <Dio_vidPullUpEn+0x8>
    2ae4:	cd b7       	in	r28, 0x3d	; 61
    2ae6:	de b7       	in	r29, 0x3e	; 62
    2ae8:	89 83       	std	Y+1, r24	; 0x01
    2aea:	6a 83       	std	Y+2, r22	; 0x02
	switch (port)
    2aec:	89 81       	ldd	r24, Y+1	; 0x01
    2aee:	28 2f       	mov	r18, r24
    2af0:	30 e0       	ldi	r19, 0x00	; 0
    2af2:	3c 83       	std	Y+4, r19	; 0x04
    2af4:	2b 83       	std	Y+3, r18	; 0x03
    2af6:	8b 81       	ldd	r24, Y+3	; 0x03
    2af8:	9c 81       	ldd	r25, Y+4	; 0x04
    2afa:	81 30       	cpi	r24, 0x01	; 1
    2afc:	91 05       	cpc	r25, r1
    2afe:	49 f1       	breq	.+82     	; 0x2b52 <Dio_vidPullUpEn+0x76>
    2b00:	2b 81       	ldd	r18, Y+3	; 0x03
    2b02:	3c 81       	ldd	r19, Y+4	; 0x04
    2b04:	22 30       	cpi	r18, 0x02	; 2
    2b06:	31 05       	cpc	r19, r1
    2b08:	2c f4       	brge	.+10     	; 0x2b14 <Dio_vidPullUpEn+0x38>
    2b0a:	8b 81       	ldd	r24, Y+3	; 0x03
    2b0c:	9c 81       	ldd	r25, Y+4	; 0x04
    2b0e:	00 97       	sbiw	r24, 0x00	; 0
    2b10:	61 f0       	breq	.+24     	; 0x2b2a <Dio_vidPullUpEn+0x4e>
    2b12:	5a c0       	rjmp	.+180    	; 0x2bc8 <Dio_vidPullUpEn+0xec>
    2b14:	2b 81       	ldd	r18, Y+3	; 0x03
    2b16:	3c 81       	ldd	r19, Y+4	; 0x04
    2b18:	22 30       	cpi	r18, 0x02	; 2
    2b1a:	31 05       	cpc	r19, r1
    2b1c:	71 f1       	breq	.+92     	; 0x2b7a <Dio_vidPullUpEn+0x9e>
    2b1e:	8b 81       	ldd	r24, Y+3	; 0x03
    2b20:	9c 81       	ldd	r25, Y+4	; 0x04
    2b22:	83 30       	cpi	r24, 0x03	; 3
    2b24:	91 05       	cpc	r25, r1
    2b26:	e9 f1       	breq	.+122    	; 0x2ba2 <Dio_vidPullUpEn+0xc6>
    2b28:	4f c0       	rjmp	.+158    	; 0x2bc8 <Dio_vidPullUpEn+0xec>
	{
	case DIO_PORTA:
		SET_BIT(DIO_PORTA_REG,pin);
    2b2a:	ab e3       	ldi	r26, 0x3B	; 59
    2b2c:	b0 e0       	ldi	r27, 0x00	; 0
    2b2e:	eb e3       	ldi	r30, 0x3B	; 59
    2b30:	f0 e0       	ldi	r31, 0x00	; 0
    2b32:	80 81       	ld	r24, Z
    2b34:	48 2f       	mov	r20, r24
    2b36:	8a 81       	ldd	r24, Y+2	; 0x02
    2b38:	28 2f       	mov	r18, r24
    2b3a:	30 e0       	ldi	r19, 0x00	; 0
    2b3c:	81 e0       	ldi	r24, 0x01	; 1
    2b3e:	90 e0       	ldi	r25, 0x00	; 0
    2b40:	02 2e       	mov	r0, r18
    2b42:	02 c0       	rjmp	.+4      	; 0x2b48 <Dio_vidPullUpEn+0x6c>
    2b44:	88 0f       	add	r24, r24
    2b46:	99 1f       	adc	r25, r25
    2b48:	0a 94       	dec	r0
    2b4a:	e2 f7       	brpl	.-8      	; 0x2b44 <Dio_vidPullUpEn+0x68>
    2b4c:	84 2b       	or	r24, r20
    2b4e:	8c 93       	st	X, r24
    2b50:	3b c0       	rjmp	.+118    	; 0x2bc8 <Dio_vidPullUpEn+0xec>
		break;

	case DIO_PORTB:
		SET_BIT(DIO_PORTB_REG,pin);
    2b52:	a8 e3       	ldi	r26, 0x38	; 56
    2b54:	b0 e0       	ldi	r27, 0x00	; 0
    2b56:	e8 e3       	ldi	r30, 0x38	; 56
    2b58:	f0 e0       	ldi	r31, 0x00	; 0
    2b5a:	80 81       	ld	r24, Z
    2b5c:	48 2f       	mov	r20, r24
    2b5e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b60:	28 2f       	mov	r18, r24
    2b62:	30 e0       	ldi	r19, 0x00	; 0
    2b64:	81 e0       	ldi	r24, 0x01	; 1
    2b66:	90 e0       	ldi	r25, 0x00	; 0
    2b68:	02 2e       	mov	r0, r18
    2b6a:	02 c0       	rjmp	.+4      	; 0x2b70 <Dio_vidPullUpEn+0x94>
    2b6c:	88 0f       	add	r24, r24
    2b6e:	99 1f       	adc	r25, r25
    2b70:	0a 94       	dec	r0
    2b72:	e2 f7       	brpl	.-8      	; 0x2b6c <Dio_vidPullUpEn+0x90>
    2b74:	84 2b       	or	r24, r20
    2b76:	8c 93       	st	X, r24
    2b78:	27 c0       	rjmp	.+78     	; 0x2bc8 <Dio_vidPullUpEn+0xec>
		break;

	case DIO_PORTC:
		SET_BIT(DIO_PORTC_REG,pin);
    2b7a:	a5 e3       	ldi	r26, 0x35	; 53
    2b7c:	b0 e0       	ldi	r27, 0x00	; 0
    2b7e:	e5 e3       	ldi	r30, 0x35	; 53
    2b80:	f0 e0       	ldi	r31, 0x00	; 0
    2b82:	80 81       	ld	r24, Z
    2b84:	48 2f       	mov	r20, r24
    2b86:	8a 81       	ldd	r24, Y+2	; 0x02
    2b88:	28 2f       	mov	r18, r24
    2b8a:	30 e0       	ldi	r19, 0x00	; 0
    2b8c:	81 e0       	ldi	r24, 0x01	; 1
    2b8e:	90 e0       	ldi	r25, 0x00	; 0
    2b90:	02 2e       	mov	r0, r18
    2b92:	02 c0       	rjmp	.+4      	; 0x2b98 <Dio_vidPullUpEn+0xbc>
    2b94:	88 0f       	add	r24, r24
    2b96:	99 1f       	adc	r25, r25
    2b98:	0a 94       	dec	r0
    2b9a:	e2 f7       	brpl	.-8      	; 0x2b94 <Dio_vidPullUpEn+0xb8>
    2b9c:	84 2b       	or	r24, r20
    2b9e:	8c 93       	st	X, r24
    2ba0:	13 c0       	rjmp	.+38     	; 0x2bc8 <Dio_vidPullUpEn+0xec>
		break;

	case DIO_PORTD:
		SET_BIT(DIO_PORTD_REG,pin);
    2ba2:	a2 e3       	ldi	r26, 0x32	; 50
    2ba4:	b0 e0       	ldi	r27, 0x00	; 0
    2ba6:	e2 e3       	ldi	r30, 0x32	; 50
    2ba8:	f0 e0       	ldi	r31, 0x00	; 0
    2baa:	80 81       	ld	r24, Z
    2bac:	48 2f       	mov	r20, r24
    2bae:	8a 81       	ldd	r24, Y+2	; 0x02
    2bb0:	28 2f       	mov	r18, r24
    2bb2:	30 e0       	ldi	r19, 0x00	; 0
    2bb4:	81 e0       	ldi	r24, 0x01	; 1
    2bb6:	90 e0       	ldi	r25, 0x00	; 0
    2bb8:	02 2e       	mov	r0, r18
    2bba:	02 c0       	rjmp	.+4      	; 0x2bc0 <Dio_vidPullUpEn+0xe4>
    2bbc:	88 0f       	add	r24, r24
    2bbe:	99 1f       	adc	r25, r25
    2bc0:	0a 94       	dec	r0
    2bc2:	e2 f7       	brpl	.-8      	; 0x2bbc <Dio_vidPullUpEn+0xe0>
    2bc4:	84 2b       	or	r24, r20
    2bc6:	8c 93       	st	X, r24
		break;
	}
}
    2bc8:	0f 90       	pop	r0
    2bca:	0f 90       	pop	r0
    2bcc:	0f 90       	pop	r0
    2bce:	0f 90       	pop	r0
    2bd0:	cf 91       	pop	r28
    2bd2:	df 91       	pop	r29
    2bd4:	08 95       	ret

00002bd6 <Adc_vidInit>:
#include "Adc_Reg.h"
#include "Adc_Types.h"
#include "Bit_Math.h"

void Adc_vidInit(void)
{
    2bd6:	df 93       	push	r29
    2bd8:	cf 93       	push	r28
    2bda:	cd b7       	in	r28, 0x3d	; 61
    2bdc:	de b7       	in	r29, 0x3e	; 62

	/*	Enable ADC	*/
	SET_BIT(ADC_ADCSRA_REG, 7);
    2bde:	a6 e2       	ldi	r26, 0x26	; 38
    2be0:	b0 e0       	ldi	r27, 0x00	; 0
    2be2:	e6 e2       	ldi	r30, 0x26	; 38
    2be4:	f0 e0       	ldi	r31, 0x00	; 0
    2be6:	80 81       	ld	r24, Z
    2be8:	80 68       	ori	r24, 0x80	; 128
    2bea:	8c 93       	st	X, r24
	/*	Configure ADC prescaler	 /128	*/
	ADC_ADCSRA_REG |= 7 /*0000 0111*/;
    2bec:	a6 e2       	ldi	r26, 0x26	; 38
    2bee:	b0 e0       	ldi	r27, 0x00	; 0
    2bf0:	e6 e2       	ldi	r30, 0x26	; 38
    2bf2:	f0 e0       	ldi	r31, 0x00	; 0
    2bf4:	80 81       	ld	r24, Z
    2bf6:	87 60       	ori	r24, 0x07	; 7
    2bf8:	8c 93       	st	X, r24
	/*	Select Vref +	AVCC	*/
	SET_BIT(ADC_ADMUX_REG,6);
    2bfa:	a7 e2       	ldi	r26, 0x27	; 39
    2bfc:	b0 e0       	ldi	r27, 0x00	; 0
    2bfe:	e7 e2       	ldi	r30, 0x27	; 39
    2c00:	f0 e0       	ldi	r31, 0x00	; 0
    2c02:	80 81       	ld	r24, Z
    2c04:	80 64       	ori	r24, 0x40	; 64
    2c06:	8c 93       	st	X, r24
}
    2c08:	cf 91       	pop	r28
    2c0a:	df 91       	pop	r29
    2c0c:	08 95       	ret

00002c0e <Adc_u16AdcRead>:

u16 Adc_u16AdcRead(adc_channlId_t channel)
{
    2c0e:	df 93       	push	r29
    2c10:	cf 93       	push	r28
    2c12:	00 d0       	rcall	.+0      	; 0x2c14 <Adc_u16AdcRead+0x6>
    2c14:	0f 92       	push	r0
    2c16:	cd b7       	in	r28, 0x3d	; 61
    2c18:	de b7       	in	r29, 0x3e	; 62
    2c1a:	8b 83       	std	Y+3, r24	; 0x03
	u16 loc_adcResult = 0;
    2c1c:	1a 82       	std	Y+2, r1	; 0x02
    2c1e:	19 82       	std	Y+1, r1	; 0x01
	/*	select ADC channel	*/
	ADC_ADMUX_REG =  (ADC_ADMUX_REG & 0xF8)| channel;
    2c20:	a7 e2       	ldi	r26, 0x27	; 39
    2c22:	b0 e0       	ldi	r27, 0x00	; 0
    2c24:	e7 e2       	ldi	r30, 0x27	; 39
    2c26:	f0 e0       	ldi	r31, 0x00	; 0
    2c28:	80 81       	ld	r24, Z
    2c2a:	98 2f       	mov	r25, r24
    2c2c:	98 7f       	andi	r25, 0xF8	; 248
    2c2e:	8b 81       	ldd	r24, Y+3	; 0x03
    2c30:	89 2b       	or	r24, r25
    2c32:	8c 93       	st	X, r24
	/*	Start ADC conversion	*/
	SET_BIT(ADC_ADCSRA_REG,6);
    2c34:	a6 e2       	ldi	r26, 0x26	; 38
    2c36:	b0 e0       	ldi	r27, 0x00	; 0
    2c38:	e6 e2       	ldi	r30, 0x26	; 38
    2c3a:	f0 e0       	ldi	r31, 0x00	; 0
    2c3c:	80 81       	ld	r24, Z
    2c3e:	80 64       	ori	r24, 0x40	; 64
    2c40:	8c 93       	st	X, r24

	/*	wait until ADIF flag become 1 */
	while(CHECK_BIT(ADC_ADCSRA_REG,4) !=1)
    2c42:	e6 e2       	ldi	r30, 0x26	; 38
    2c44:	f0 e0       	ldi	r31, 0x00	; 0
    2c46:	80 81       	ld	r24, Z
    2c48:	82 95       	swap	r24
    2c4a:	8f 70       	andi	r24, 0x0F	; 15
    2c4c:	88 2f       	mov	r24, r24
    2c4e:	90 e0       	ldi	r25, 0x00	; 0
    2c50:	81 70       	andi	r24, 0x01	; 1
    2c52:	90 70       	andi	r25, 0x00	; 0
    2c54:	00 97       	sbiw	r24, 0x00	; 0
    2c56:	a9 f3       	breq	.-22     	; 0x2c42 <Adc_u16AdcRead+0x34>
	{
		/*	Do Nothing	*/
	}

	/*	clear ADIF by writing 1 	*/
	SET_BIT(ADC_ADCSRA_REG,4);
    2c58:	a6 e2       	ldi	r26, 0x26	; 38
    2c5a:	b0 e0       	ldi	r27, 0x00	; 0
    2c5c:	e6 e2       	ldi	r30, 0x26	; 38
    2c5e:	f0 e0       	ldi	r31, 0x00	; 0
    2c60:	80 81       	ld	r24, Z
    2c62:	80 61       	ori	r24, 0x10	; 16
    2c64:	8c 93       	st	X, r24

	/*	read ADC result form ADCL, ADCH	*/
	loc_adcResult=(ADC_ADCL_REG|(ADC_ADCH_REG<<8));
    2c66:	e4 e2       	ldi	r30, 0x24	; 36
    2c68:	f0 e0       	ldi	r31, 0x00	; 0
    2c6a:	80 81       	ld	r24, Z
    2c6c:	28 2f       	mov	r18, r24
    2c6e:	30 e0       	ldi	r19, 0x00	; 0
    2c70:	e5 e2       	ldi	r30, 0x25	; 37
    2c72:	f0 e0       	ldi	r31, 0x00	; 0
    2c74:	80 81       	ld	r24, Z
    2c76:	88 2f       	mov	r24, r24
    2c78:	90 e0       	ldi	r25, 0x00	; 0
    2c7a:	98 2f       	mov	r25, r24
    2c7c:	88 27       	eor	r24, r24
    2c7e:	82 2b       	or	r24, r18
    2c80:	93 2b       	or	r25, r19
    2c82:	9a 83       	std	Y+2, r25	; 0x02
    2c84:	89 83       	std	Y+1, r24	; 0x01

	return loc_adcResult;
    2c86:	89 81       	ldd	r24, Y+1	; 0x01
    2c88:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2c8a:	0f 90       	pop	r0
    2c8c:	0f 90       	pop	r0
    2c8e:	0f 90       	pop	r0
    2c90:	cf 91       	pop	r28
    2c92:	df 91       	pop	r29
    2c94:	08 95       	ret

00002c96 <__udivmodqi4>:
    2c96:	99 1b       	sub	r25, r25
    2c98:	79 e0       	ldi	r23, 0x09	; 9
    2c9a:	04 c0       	rjmp	.+8      	; 0x2ca4 <__udivmodqi4_ep>

00002c9c <__udivmodqi4_loop>:
    2c9c:	99 1f       	adc	r25, r25
    2c9e:	96 17       	cp	r25, r22
    2ca0:	08 f0       	brcs	.+2      	; 0x2ca4 <__udivmodqi4_ep>
    2ca2:	96 1b       	sub	r25, r22

00002ca4 <__udivmodqi4_ep>:
    2ca4:	88 1f       	adc	r24, r24
    2ca6:	7a 95       	dec	r23
    2ca8:	c9 f7       	brne	.-14     	; 0x2c9c <__udivmodqi4_loop>
    2caa:	80 95       	com	r24
    2cac:	08 95       	ret

00002cae <__prologue_saves__>:
    2cae:	2f 92       	push	r2
    2cb0:	3f 92       	push	r3
    2cb2:	4f 92       	push	r4
    2cb4:	5f 92       	push	r5
    2cb6:	6f 92       	push	r6
    2cb8:	7f 92       	push	r7
    2cba:	8f 92       	push	r8
    2cbc:	9f 92       	push	r9
    2cbe:	af 92       	push	r10
    2cc0:	bf 92       	push	r11
    2cc2:	cf 92       	push	r12
    2cc4:	df 92       	push	r13
    2cc6:	ef 92       	push	r14
    2cc8:	ff 92       	push	r15
    2cca:	0f 93       	push	r16
    2ccc:	1f 93       	push	r17
    2cce:	cf 93       	push	r28
    2cd0:	df 93       	push	r29
    2cd2:	cd b7       	in	r28, 0x3d	; 61
    2cd4:	de b7       	in	r29, 0x3e	; 62
    2cd6:	ca 1b       	sub	r28, r26
    2cd8:	db 0b       	sbc	r29, r27
    2cda:	0f b6       	in	r0, 0x3f	; 63
    2cdc:	f8 94       	cli
    2cde:	de bf       	out	0x3e, r29	; 62
    2ce0:	0f be       	out	0x3f, r0	; 63
    2ce2:	cd bf       	out	0x3d, r28	; 61
    2ce4:	09 94       	ijmp

00002ce6 <__epilogue_restores__>:
    2ce6:	2a 88       	ldd	r2, Y+18	; 0x12
    2ce8:	39 88       	ldd	r3, Y+17	; 0x11
    2cea:	48 88       	ldd	r4, Y+16	; 0x10
    2cec:	5f 84       	ldd	r5, Y+15	; 0x0f
    2cee:	6e 84       	ldd	r6, Y+14	; 0x0e
    2cf0:	7d 84       	ldd	r7, Y+13	; 0x0d
    2cf2:	8c 84       	ldd	r8, Y+12	; 0x0c
    2cf4:	9b 84       	ldd	r9, Y+11	; 0x0b
    2cf6:	aa 84       	ldd	r10, Y+10	; 0x0a
    2cf8:	b9 84       	ldd	r11, Y+9	; 0x09
    2cfa:	c8 84       	ldd	r12, Y+8	; 0x08
    2cfc:	df 80       	ldd	r13, Y+7	; 0x07
    2cfe:	ee 80       	ldd	r14, Y+6	; 0x06
    2d00:	fd 80       	ldd	r15, Y+5	; 0x05
    2d02:	0c 81       	ldd	r16, Y+4	; 0x04
    2d04:	1b 81       	ldd	r17, Y+3	; 0x03
    2d06:	aa 81       	ldd	r26, Y+2	; 0x02
    2d08:	b9 81       	ldd	r27, Y+1	; 0x01
    2d0a:	ce 0f       	add	r28, r30
    2d0c:	d1 1d       	adc	r29, r1
    2d0e:	0f b6       	in	r0, 0x3f	; 63
    2d10:	f8 94       	cli
    2d12:	de bf       	out	0x3e, r29	; 62
    2d14:	0f be       	out	0x3f, r0	; 63
    2d16:	cd bf       	out	0x3d, r28	; 61
    2d18:	ed 01       	movw	r28, r26
    2d1a:	08 95       	ret

00002d1c <sprintf>:
    2d1c:	ae e0       	ldi	r26, 0x0E	; 14
    2d1e:	b0 e0       	ldi	r27, 0x00	; 0
    2d20:	e4 e9       	ldi	r30, 0x94	; 148
    2d22:	f6 e1       	ldi	r31, 0x16	; 22
    2d24:	0c 94 65 16 	jmp	0x2cca	; 0x2cca <__prologue_saves__+0x1c>
    2d28:	0d 89       	ldd	r16, Y+21	; 0x15
    2d2a:	1e 89       	ldd	r17, Y+22	; 0x16
    2d2c:	86 e0       	ldi	r24, 0x06	; 6
    2d2e:	8c 83       	std	Y+4, r24	; 0x04
    2d30:	1a 83       	std	Y+2, r17	; 0x02
    2d32:	09 83       	std	Y+1, r16	; 0x01
    2d34:	8f ef       	ldi	r24, 0xFF	; 255
    2d36:	9f e7       	ldi	r25, 0x7F	; 127
    2d38:	9e 83       	std	Y+6, r25	; 0x06
    2d3a:	8d 83       	std	Y+5, r24	; 0x05
    2d3c:	9e 01       	movw	r18, r28
    2d3e:	27 5e       	subi	r18, 0xE7	; 231
    2d40:	3f 4f       	sbci	r19, 0xFF	; 255
    2d42:	ce 01       	movw	r24, r28
    2d44:	01 96       	adiw	r24, 0x01	; 1
    2d46:	6f 89       	ldd	r22, Y+23	; 0x17
    2d48:	78 8d       	ldd	r23, Y+24	; 0x18
    2d4a:	a9 01       	movw	r20, r18
    2d4c:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <vfprintf>
    2d50:	2f 81       	ldd	r18, Y+7	; 0x07
    2d52:	38 85       	ldd	r19, Y+8	; 0x08
    2d54:	02 0f       	add	r16, r18
    2d56:	13 1f       	adc	r17, r19
    2d58:	f8 01       	movw	r30, r16
    2d5a:	10 82       	st	Z, r1
    2d5c:	2e 96       	adiw	r28, 0x0e	; 14
    2d5e:	e4 e0       	ldi	r30, 0x04	; 4
    2d60:	0c 94 81 16 	jmp	0x2d02	; 0x2d02 <__epilogue_restores__+0x1c>

00002d64 <vfprintf>:
    2d64:	ab e0       	ldi	r26, 0x0B	; 11
    2d66:	b0 e0       	ldi	r27, 0x00	; 0
    2d68:	e8 eb       	ldi	r30, 0xB8	; 184
    2d6a:	f6 e1       	ldi	r31, 0x16	; 22
    2d6c:	0c 94 57 16 	jmp	0x2cae	; 0x2cae <__prologue_saves__>
    2d70:	3c 01       	movw	r6, r24
    2d72:	2b 01       	movw	r4, r22
    2d74:	5a 01       	movw	r10, r20
    2d76:	fc 01       	movw	r30, r24
    2d78:	17 82       	std	Z+7, r1	; 0x07
    2d7a:	16 82       	std	Z+6, r1	; 0x06
    2d7c:	83 81       	ldd	r24, Z+3	; 0x03
    2d7e:	81 fd       	sbrc	r24, 1
    2d80:	03 c0       	rjmp	.+6      	; 0x2d88 <vfprintf+0x24>
    2d82:	6f ef       	ldi	r22, 0xFF	; 255
    2d84:	7f ef       	ldi	r23, 0xFF	; 255
    2d86:	c6 c1       	rjmp	.+908    	; 0x3114 <vfprintf+0x3b0>
    2d88:	9a e0       	ldi	r25, 0x0A	; 10
    2d8a:	89 2e       	mov	r8, r25
    2d8c:	1e 01       	movw	r2, r28
    2d8e:	08 94       	sec
    2d90:	21 1c       	adc	r2, r1
    2d92:	31 1c       	adc	r3, r1
    2d94:	f3 01       	movw	r30, r6
    2d96:	23 81       	ldd	r18, Z+3	; 0x03
    2d98:	f2 01       	movw	r30, r4
    2d9a:	23 fd       	sbrc	r18, 3
    2d9c:	85 91       	lpm	r24, Z+
    2d9e:	23 ff       	sbrs	r18, 3
    2da0:	81 91       	ld	r24, Z+
    2da2:	2f 01       	movw	r4, r30
    2da4:	88 23       	and	r24, r24
    2da6:	09 f4       	brne	.+2      	; 0x2daa <vfprintf+0x46>
    2da8:	b2 c1       	rjmp	.+868    	; 0x310e <vfprintf+0x3aa>
    2daa:	85 32       	cpi	r24, 0x25	; 37
    2dac:	39 f4       	brne	.+14     	; 0x2dbc <vfprintf+0x58>
    2dae:	23 fd       	sbrc	r18, 3
    2db0:	85 91       	lpm	r24, Z+
    2db2:	23 ff       	sbrs	r18, 3
    2db4:	81 91       	ld	r24, Z+
    2db6:	2f 01       	movw	r4, r30
    2db8:	85 32       	cpi	r24, 0x25	; 37
    2dba:	29 f4       	brne	.+10     	; 0x2dc6 <vfprintf+0x62>
    2dbc:	90 e0       	ldi	r25, 0x00	; 0
    2dbe:	b3 01       	movw	r22, r6
    2dc0:	0e 94 a5 18 	call	0x314a	; 0x314a <fputc>
    2dc4:	e7 cf       	rjmp	.-50     	; 0x2d94 <vfprintf+0x30>
    2dc6:	98 2f       	mov	r25, r24
    2dc8:	ff 24       	eor	r15, r15
    2dca:	ee 24       	eor	r14, r14
    2dcc:	99 24       	eor	r9, r9
    2dce:	ff e1       	ldi	r31, 0x1F	; 31
    2dd0:	ff 15       	cp	r31, r15
    2dd2:	d0 f0       	brcs	.+52     	; 0x2e08 <vfprintf+0xa4>
    2dd4:	9b 32       	cpi	r25, 0x2B	; 43
    2dd6:	69 f0       	breq	.+26     	; 0x2df2 <vfprintf+0x8e>
    2dd8:	9c 32       	cpi	r25, 0x2C	; 44
    2dda:	28 f4       	brcc	.+10     	; 0x2de6 <vfprintf+0x82>
    2ddc:	90 32       	cpi	r25, 0x20	; 32
    2dde:	59 f0       	breq	.+22     	; 0x2df6 <vfprintf+0x92>
    2de0:	93 32       	cpi	r25, 0x23	; 35
    2de2:	91 f4       	brne	.+36     	; 0x2e08 <vfprintf+0xa4>
    2de4:	0e c0       	rjmp	.+28     	; 0x2e02 <vfprintf+0x9e>
    2de6:	9d 32       	cpi	r25, 0x2D	; 45
    2de8:	49 f0       	breq	.+18     	; 0x2dfc <vfprintf+0x98>
    2dea:	90 33       	cpi	r25, 0x30	; 48
    2dec:	69 f4       	brne	.+26     	; 0x2e08 <vfprintf+0xa4>
    2dee:	41 e0       	ldi	r20, 0x01	; 1
    2df0:	24 c0       	rjmp	.+72     	; 0x2e3a <vfprintf+0xd6>
    2df2:	52 e0       	ldi	r21, 0x02	; 2
    2df4:	f5 2a       	or	r15, r21
    2df6:	84 e0       	ldi	r24, 0x04	; 4
    2df8:	f8 2a       	or	r15, r24
    2dfa:	28 c0       	rjmp	.+80     	; 0x2e4c <vfprintf+0xe8>
    2dfc:	98 e0       	ldi	r25, 0x08	; 8
    2dfe:	f9 2a       	or	r15, r25
    2e00:	25 c0       	rjmp	.+74     	; 0x2e4c <vfprintf+0xe8>
    2e02:	e0 e1       	ldi	r30, 0x10	; 16
    2e04:	fe 2a       	or	r15, r30
    2e06:	22 c0       	rjmp	.+68     	; 0x2e4c <vfprintf+0xe8>
    2e08:	f7 fc       	sbrc	r15, 7
    2e0a:	29 c0       	rjmp	.+82     	; 0x2e5e <vfprintf+0xfa>
    2e0c:	89 2f       	mov	r24, r25
    2e0e:	80 53       	subi	r24, 0x30	; 48
    2e10:	8a 30       	cpi	r24, 0x0A	; 10
    2e12:	70 f4       	brcc	.+28     	; 0x2e30 <vfprintf+0xcc>
    2e14:	f6 fe       	sbrs	r15, 6
    2e16:	05 c0       	rjmp	.+10     	; 0x2e22 <vfprintf+0xbe>
    2e18:	98 9c       	mul	r9, r8
    2e1a:	90 2c       	mov	r9, r0
    2e1c:	11 24       	eor	r1, r1
    2e1e:	98 0e       	add	r9, r24
    2e20:	15 c0       	rjmp	.+42     	; 0x2e4c <vfprintf+0xe8>
    2e22:	e8 9c       	mul	r14, r8
    2e24:	e0 2c       	mov	r14, r0
    2e26:	11 24       	eor	r1, r1
    2e28:	e8 0e       	add	r14, r24
    2e2a:	f0 e2       	ldi	r31, 0x20	; 32
    2e2c:	ff 2a       	or	r15, r31
    2e2e:	0e c0       	rjmp	.+28     	; 0x2e4c <vfprintf+0xe8>
    2e30:	9e 32       	cpi	r25, 0x2E	; 46
    2e32:	29 f4       	brne	.+10     	; 0x2e3e <vfprintf+0xda>
    2e34:	f6 fc       	sbrc	r15, 6
    2e36:	6b c1       	rjmp	.+726    	; 0x310e <vfprintf+0x3aa>
    2e38:	40 e4       	ldi	r20, 0x40	; 64
    2e3a:	f4 2a       	or	r15, r20
    2e3c:	07 c0       	rjmp	.+14     	; 0x2e4c <vfprintf+0xe8>
    2e3e:	9c 36       	cpi	r25, 0x6C	; 108
    2e40:	19 f4       	brne	.+6      	; 0x2e48 <vfprintf+0xe4>
    2e42:	50 e8       	ldi	r21, 0x80	; 128
    2e44:	f5 2a       	or	r15, r21
    2e46:	02 c0       	rjmp	.+4      	; 0x2e4c <vfprintf+0xe8>
    2e48:	98 36       	cpi	r25, 0x68	; 104
    2e4a:	49 f4       	brne	.+18     	; 0x2e5e <vfprintf+0xfa>
    2e4c:	f2 01       	movw	r30, r4
    2e4e:	23 fd       	sbrc	r18, 3
    2e50:	95 91       	lpm	r25, Z+
    2e52:	23 ff       	sbrs	r18, 3
    2e54:	91 91       	ld	r25, Z+
    2e56:	2f 01       	movw	r4, r30
    2e58:	99 23       	and	r25, r25
    2e5a:	09 f0       	breq	.+2      	; 0x2e5e <vfprintf+0xfa>
    2e5c:	b8 cf       	rjmp	.-144    	; 0x2dce <vfprintf+0x6a>
    2e5e:	89 2f       	mov	r24, r25
    2e60:	85 54       	subi	r24, 0x45	; 69
    2e62:	83 30       	cpi	r24, 0x03	; 3
    2e64:	18 f0       	brcs	.+6      	; 0x2e6c <vfprintf+0x108>
    2e66:	80 52       	subi	r24, 0x20	; 32
    2e68:	83 30       	cpi	r24, 0x03	; 3
    2e6a:	38 f4       	brcc	.+14     	; 0x2e7a <vfprintf+0x116>
    2e6c:	44 e0       	ldi	r20, 0x04	; 4
    2e6e:	50 e0       	ldi	r21, 0x00	; 0
    2e70:	a4 0e       	add	r10, r20
    2e72:	b5 1e       	adc	r11, r21
    2e74:	5f e3       	ldi	r21, 0x3F	; 63
    2e76:	59 83       	std	Y+1, r21	; 0x01
    2e78:	0f c0       	rjmp	.+30     	; 0x2e98 <vfprintf+0x134>
    2e7a:	93 36       	cpi	r25, 0x63	; 99
    2e7c:	31 f0       	breq	.+12     	; 0x2e8a <vfprintf+0x126>
    2e7e:	93 37       	cpi	r25, 0x73	; 115
    2e80:	79 f0       	breq	.+30     	; 0x2ea0 <vfprintf+0x13c>
    2e82:	93 35       	cpi	r25, 0x53	; 83
    2e84:	09 f0       	breq	.+2      	; 0x2e88 <vfprintf+0x124>
    2e86:	56 c0       	rjmp	.+172    	; 0x2f34 <vfprintf+0x1d0>
    2e88:	20 c0       	rjmp	.+64     	; 0x2eca <vfprintf+0x166>
    2e8a:	f5 01       	movw	r30, r10
    2e8c:	80 81       	ld	r24, Z
    2e8e:	89 83       	std	Y+1, r24	; 0x01
    2e90:	42 e0       	ldi	r20, 0x02	; 2
    2e92:	50 e0       	ldi	r21, 0x00	; 0
    2e94:	a4 0e       	add	r10, r20
    2e96:	b5 1e       	adc	r11, r21
    2e98:	61 01       	movw	r12, r2
    2e9a:	01 e0       	ldi	r16, 0x01	; 1
    2e9c:	10 e0       	ldi	r17, 0x00	; 0
    2e9e:	12 c0       	rjmp	.+36     	; 0x2ec4 <vfprintf+0x160>
    2ea0:	f5 01       	movw	r30, r10
    2ea2:	c0 80       	ld	r12, Z
    2ea4:	d1 80       	ldd	r13, Z+1	; 0x01
    2ea6:	f6 fc       	sbrc	r15, 6
    2ea8:	03 c0       	rjmp	.+6      	; 0x2eb0 <vfprintf+0x14c>
    2eaa:	6f ef       	ldi	r22, 0xFF	; 255
    2eac:	7f ef       	ldi	r23, 0xFF	; 255
    2eae:	02 c0       	rjmp	.+4      	; 0x2eb4 <vfprintf+0x150>
    2eb0:	69 2d       	mov	r22, r9
    2eb2:	70 e0       	ldi	r23, 0x00	; 0
    2eb4:	42 e0       	ldi	r20, 0x02	; 2
    2eb6:	50 e0       	ldi	r21, 0x00	; 0
    2eb8:	a4 0e       	add	r10, r20
    2eba:	b5 1e       	adc	r11, r21
    2ebc:	c6 01       	movw	r24, r12
    2ebe:	0e 94 9a 18 	call	0x3134	; 0x3134 <strnlen>
    2ec2:	8c 01       	movw	r16, r24
    2ec4:	5f e7       	ldi	r21, 0x7F	; 127
    2ec6:	f5 22       	and	r15, r21
    2ec8:	14 c0       	rjmp	.+40     	; 0x2ef2 <vfprintf+0x18e>
    2eca:	f5 01       	movw	r30, r10
    2ecc:	c0 80       	ld	r12, Z
    2ece:	d1 80       	ldd	r13, Z+1	; 0x01
    2ed0:	f6 fc       	sbrc	r15, 6
    2ed2:	03 c0       	rjmp	.+6      	; 0x2eda <vfprintf+0x176>
    2ed4:	6f ef       	ldi	r22, 0xFF	; 255
    2ed6:	7f ef       	ldi	r23, 0xFF	; 255
    2ed8:	02 c0       	rjmp	.+4      	; 0x2ede <vfprintf+0x17a>
    2eda:	69 2d       	mov	r22, r9
    2edc:	70 e0       	ldi	r23, 0x00	; 0
    2ede:	42 e0       	ldi	r20, 0x02	; 2
    2ee0:	50 e0       	ldi	r21, 0x00	; 0
    2ee2:	a4 0e       	add	r10, r20
    2ee4:	b5 1e       	adc	r11, r21
    2ee6:	c6 01       	movw	r24, r12
    2ee8:	0e 94 8f 18 	call	0x311e	; 0x311e <strnlen_P>
    2eec:	8c 01       	movw	r16, r24
    2eee:	50 e8       	ldi	r21, 0x80	; 128
    2ef0:	f5 2a       	or	r15, r21
    2ef2:	f3 fe       	sbrs	r15, 3
    2ef4:	07 c0       	rjmp	.+14     	; 0x2f04 <vfprintf+0x1a0>
    2ef6:	1a c0       	rjmp	.+52     	; 0x2f2c <vfprintf+0x1c8>
    2ef8:	80 e2       	ldi	r24, 0x20	; 32
    2efa:	90 e0       	ldi	r25, 0x00	; 0
    2efc:	b3 01       	movw	r22, r6
    2efe:	0e 94 a5 18 	call	0x314a	; 0x314a <fputc>
    2f02:	ea 94       	dec	r14
    2f04:	8e 2d       	mov	r24, r14
    2f06:	90 e0       	ldi	r25, 0x00	; 0
    2f08:	08 17       	cp	r16, r24
    2f0a:	19 07       	cpc	r17, r25
    2f0c:	a8 f3       	brcs	.-22     	; 0x2ef8 <vfprintf+0x194>
    2f0e:	0e c0       	rjmp	.+28     	; 0x2f2c <vfprintf+0x1c8>
    2f10:	f6 01       	movw	r30, r12
    2f12:	f7 fc       	sbrc	r15, 7
    2f14:	85 91       	lpm	r24, Z+
    2f16:	f7 fe       	sbrs	r15, 7
    2f18:	81 91       	ld	r24, Z+
    2f1a:	6f 01       	movw	r12, r30
    2f1c:	90 e0       	ldi	r25, 0x00	; 0
    2f1e:	b3 01       	movw	r22, r6
    2f20:	0e 94 a5 18 	call	0x314a	; 0x314a <fputc>
    2f24:	e1 10       	cpse	r14, r1
    2f26:	ea 94       	dec	r14
    2f28:	01 50       	subi	r16, 0x01	; 1
    2f2a:	10 40       	sbci	r17, 0x00	; 0
    2f2c:	01 15       	cp	r16, r1
    2f2e:	11 05       	cpc	r17, r1
    2f30:	79 f7       	brne	.-34     	; 0x2f10 <vfprintf+0x1ac>
    2f32:	ea c0       	rjmp	.+468    	; 0x3108 <vfprintf+0x3a4>
    2f34:	94 36       	cpi	r25, 0x64	; 100
    2f36:	11 f0       	breq	.+4      	; 0x2f3c <vfprintf+0x1d8>
    2f38:	99 36       	cpi	r25, 0x69	; 105
    2f3a:	69 f5       	brne	.+90     	; 0x2f96 <vfprintf+0x232>
    2f3c:	f7 fe       	sbrs	r15, 7
    2f3e:	08 c0       	rjmp	.+16     	; 0x2f50 <vfprintf+0x1ec>
    2f40:	f5 01       	movw	r30, r10
    2f42:	20 81       	ld	r18, Z
    2f44:	31 81       	ldd	r19, Z+1	; 0x01
    2f46:	42 81       	ldd	r20, Z+2	; 0x02
    2f48:	53 81       	ldd	r21, Z+3	; 0x03
    2f4a:	84 e0       	ldi	r24, 0x04	; 4
    2f4c:	90 e0       	ldi	r25, 0x00	; 0
    2f4e:	0a c0       	rjmp	.+20     	; 0x2f64 <vfprintf+0x200>
    2f50:	f5 01       	movw	r30, r10
    2f52:	80 81       	ld	r24, Z
    2f54:	91 81       	ldd	r25, Z+1	; 0x01
    2f56:	9c 01       	movw	r18, r24
    2f58:	44 27       	eor	r20, r20
    2f5a:	37 fd       	sbrc	r19, 7
    2f5c:	40 95       	com	r20
    2f5e:	54 2f       	mov	r21, r20
    2f60:	82 e0       	ldi	r24, 0x02	; 2
    2f62:	90 e0       	ldi	r25, 0x00	; 0
    2f64:	a8 0e       	add	r10, r24
    2f66:	b9 1e       	adc	r11, r25
    2f68:	9f e6       	ldi	r25, 0x6F	; 111
    2f6a:	f9 22       	and	r15, r25
    2f6c:	57 ff       	sbrs	r21, 7
    2f6e:	09 c0       	rjmp	.+18     	; 0x2f82 <vfprintf+0x21e>
    2f70:	50 95       	com	r21
    2f72:	40 95       	com	r20
    2f74:	30 95       	com	r19
    2f76:	21 95       	neg	r18
    2f78:	3f 4f       	sbci	r19, 0xFF	; 255
    2f7a:	4f 4f       	sbci	r20, 0xFF	; 255
    2f7c:	5f 4f       	sbci	r21, 0xFF	; 255
    2f7e:	e0 e8       	ldi	r30, 0x80	; 128
    2f80:	fe 2a       	or	r15, r30
    2f82:	ca 01       	movw	r24, r20
    2f84:	b9 01       	movw	r22, r18
    2f86:	a1 01       	movw	r20, r2
    2f88:	2a e0       	ldi	r18, 0x0A	; 10
    2f8a:	30 e0       	ldi	r19, 0x00	; 0
    2f8c:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <__ultoa_invert>
    2f90:	d8 2e       	mov	r13, r24
    2f92:	d2 18       	sub	r13, r2
    2f94:	40 c0       	rjmp	.+128    	; 0x3016 <vfprintf+0x2b2>
    2f96:	95 37       	cpi	r25, 0x75	; 117
    2f98:	29 f4       	brne	.+10     	; 0x2fa4 <vfprintf+0x240>
    2f9a:	1f 2d       	mov	r17, r15
    2f9c:	1f 7e       	andi	r17, 0xEF	; 239
    2f9e:	2a e0       	ldi	r18, 0x0A	; 10
    2fa0:	30 e0       	ldi	r19, 0x00	; 0
    2fa2:	1d c0       	rjmp	.+58     	; 0x2fde <vfprintf+0x27a>
    2fa4:	1f 2d       	mov	r17, r15
    2fa6:	19 7f       	andi	r17, 0xF9	; 249
    2fa8:	9f 36       	cpi	r25, 0x6F	; 111
    2faa:	61 f0       	breq	.+24     	; 0x2fc4 <vfprintf+0x260>
    2fac:	90 37       	cpi	r25, 0x70	; 112
    2fae:	20 f4       	brcc	.+8      	; 0x2fb8 <vfprintf+0x254>
    2fb0:	98 35       	cpi	r25, 0x58	; 88
    2fb2:	09 f0       	breq	.+2      	; 0x2fb6 <vfprintf+0x252>
    2fb4:	ac c0       	rjmp	.+344    	; 0x310e <vfprintf+0x3aa>
    2fb6:	0f c0       	rjmp	.+30     	; 0x2fd6 <vfprintf+0x272>
    2fb8:	90 37       	cpi	r25, 0x70	; 112
    2fba:	39 f0       	breq	.+14     	; 0x2fca <vfprintf+0x266>
    2fbc:	98 37       	cpi	r25, 0x78	; 120
    2fbe:	09 f0       	breq	.+2      	; 0x2fc2 <vfprintf+0x25e>
    2fc0:	a6 c0       	rjmp	.+332    	; 0x310e <vfprintf+0x3aa>
    2fc2:	04 c0       	rjmp	.+8      	; 0x2fcc <vfprintf+0x268>
    2fc4:	28 e0       	ldi	r18, 0x08	; 8
    2fc6:	30 e0       	ldi	r19, 0x00	; 0
    2fc8:	0a c0       	rjmp	.+20     	; 0x2fde <vfprintf+0x27a>
    2fca:	10 61       	ori	r17, 0x10	; 16
    2fcc:	14 fd       	sbrc	r17, 4
    2fce:	14 60       	ori	r17, 0x04	; 4
    2fd0:	20 e1       	ldi	r18, 0x10	; 16
    2fd2:	30 e0       	ldi	r19, 0x00	; 0
    2fd4:	04 c0       	rjmp	.+8      	; 0x2fde <vfprintf+0x27a>
    2fd6:	14 fd       	sbrc	r17, 4
    2fd8:	16 60       	ori	r17, 0x06	; 6
    2fda:	20 e1       	ldi	r18, 0x10	; 16
    2fdc:	32 e0       	ldi	r19, 0x02	; 2
    2fde:	17 ff       	sbrs	r17, 7
    2fe0:	08 c0       	rjmp	.+16     	; 0x2ff2 <vfprintf+0x28e>
    2fe2:	f5 01       	movw	r30, r10
    2fe4:	60 81       	ld	r22, Z
    2fe6:	71 81       	ldd	r23, Z+1	; 0x01
    2fe8:	82 81       	ldd	r24, Z+2	; 0x02
    2fea:	93 81       	ldd	r25, Z+3	; 0x03
    2fec:	44 e0       	ldi	r20, 0x04	; 4
    2fee:	50 e0       	ldi	r21, 0x00	; 0
    2ff0:	08 c0       	rjmp	.+16     	; 0x3002 <vfprintf+0x29e>
    2ff2:	f5 01       	movw	r30, r10
    2ff4:	80 81       	ld	r24, Z
    2ff6:	91 81       	ldd	r25, Z+1	; 0x01
    2ff8:	bc 01       	movw	r22, r24
    2ffa:	80 e0       	ldi	r24, 0x00	; 0
    2ffc:	90 e0       	ldi	r25, 0x00	; 0
    2ffe:	42 e0       	ldi	r20, 0x02	; 2
    3000:	50 e0       	ldi	r21, 0x00	; 0
    3002:	a4 0e       	add	r10, r20
    3004:	b5 1e       	adc	r11, r21
    3006:	a1 01       	movw	r20, r2
    3008:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <__ultoa_invert>
    300c:	d8 2e       	mov	r13, r24
    300e:	d2 18       	sub	r13, r2
    3010:	8f e7       	ldi	r24, 0x7F	; 127
    3012:	f8 2e       	mov	r15, r24
    3014:	f1 22       	and	r15, r17
    3016:	f6 fe       	sbrs	r15, 6
    3018:	0b c0       	rjmp	.+22     	; 0x3030 <vfprintf+0x2cc>
    301a:	5e ef       	ldi	r21, 0xFE	; 254
    301c:	f5 22       	and	r15, r21
    301e:	d9 14       	cp	r13, r9
    3020:	38 f4       	brcc	.+14     	; 0x3030 <vfprintf+0x2cc>
    3022:	f4 fe       	sbrs	r15, 4
    3024:	07 c0       	rjmp	.+14     	; 0x3034 <vfprintf+0x2d0>
    3026:	f2 fc       	sbrc	r15, 2
    3028:	05 c0       	rjmp	.+10     	; 0x3034 <vfprintf+0x2d0>
    302a:	8f ee       	ldi	r24, 0xEF	; 239
    302c:	f8 22       	and	r15, r24
    302e:	02 c0       	rjmp	.+4      	; 0x3034 <vfprintf+0x2d0>
    3030:	1d 2d       	mov	r17, r13
    3032:	01 c0       	rjmp	.+2      	; 0x3036 <vfprintf+0x2d2>
    3034:	19 2d       	mov	r17, r9
    3036:	f4 fe       	sbrs	r15, 4
    3038:	0d c0       	rjmp	.+26     	; 0x3054 <vfprintf+0x2f0>
    303a:	fe 01       	movw	r30, r28
    303c:	ed 0d       	add	r30, r13
    303e:	f1 1d       	adc	r31, r1
    3040:	80 81       	ld	r24, Z
    3042:	80 33       	cpi	r24, 0x30	; 48
    3044:	19 f4       	brne	.+6      	; 0x304c <vfprintf+0x2e8>
    3046:	99 ee       	ldi	r25, 0xE9	; 233
    3048:	f9 22       	and	r15, r25
    304a:	08 c0       	rjmp	.+16     	; 0x305c <vfprintf+0x2f8>
    304c:	1f 5f       	subi	r17, 0xFF	; 255
    304e:	f2 fe       	sbrs	r15, 2
    3050:	05 c0       	rjmp	.+10     	; 0x305c <vfprintf+0x2f8>
    3052:	03 c0       	rjmp	.+6      	; 0x305a <vfprintf+0x2f6>
    3054:	8f 2d       	mov	r24, r15
    3056:	86 78       	andi	r24, 0x86	; 134
    3058:	09 f0       	breq	.+2      	; 0x305c <vfprintf+0x2f8>
    305a:	1f 5f       	subi	r17, 0xFF	; 255
    305c:	0f 2d       	mov	r16, r15
    305e:	f3 fc       	sbrc	r15, 3
    3060:	14 c0       	rjmp	.+40     	; 0x308a <vfprintf+0x326>
    3062:	f0 fe       	sbrs	r15, 0
    3064:	0f c0       	rjmp	.+30     	; 0x3084 <vfprintf+0x320>
    3066:	1e 15       	cp	r17, r14
    3068:	10 f0       	brcs	.+4      	; 0x306e <vfprintf+0x30a>
    306a:	9d 2c       	mov	r9, r13
    306c:	0b c0       	rjmp	.+22     	; 0x3084 <vfprintf+0x320>
    306e:	9d 2c       	mov	r9, r13
    3070:	9e 0c       	add	r9, r14
    3072:	91 1a       	sub	r9, r17
    3074:	1e 2d       	mov	r17, r14
    3076:	06 c0       	rjmp	.+12     	; 0x3084 <vfprintf+0x320>
    3078:	80 e2       	ldi	r24, 0x20	; 32
    307a:	90 e0       	ldi	r25, 0x00	; 0
    307c:	b3 01       	movw	r22, r6
    307e:	0e 94 a5 18 	call	0x314a	; 0x314a <fputc>
    3082:	1f 5f       	subi	r17, 0xFF	; 255
    3084:	1e 15       	cp	r17, r14
    3086:	c0 f3       	brcs	.-16     	; 0x3078 <vfprintf+0x314>
    3088:	04 c0       	rjmp	.+8      	; 0x3092 <vfprintf+0x32e>
    308a:	1e 15       	cp	r17, r14
    308c:	10 f4       	brcc	.+4      	; 0x3092 <vfprintf+0x32e>
    308e:	e1 1a       	sub	r14, r17
    3090:	01 c0       	rjmp	.+2      	; 0x3094 <vfprintf+0x330>
    3092:	ee 24       	eor	r14, r14
    3094:	04 ff       	sbrs	r16, 4
    3096:	0f c0       	rjmp	.+30     	; 0x30b6 <vfprintf+0x352>
    3098:	80 e3       	ldi	r24, 0x30	; 48
    309a:	90 e0       	ldi	r25, 0x00	; 0
    309c:	b3 01       	movw	r22, r6
    309e:	0e 94 a5 18 	call	0x314a	; 0x314a <fputc>
    30a2:	02 ff       	sbrs	r16, 2
    30a4:	1d c0       	rjmp	.+58     	; 0x30e0 <vfprintf+0x37c>
    30a6:	01 fd       	sbrc	r16, 1
    30a8:	03 c0       	rjmp	.+6      	; 0x30b0 <vfprintf+0x34c>
    30aa:	88 e7       	ldi	r24, 0x78	; 120
    30ac:	90 e0       	ldi	r25, 0x00	; 0
    30ae:	0e c0       	rjmp	.+28     	; 0x30cc <vfprintf+0x368>
    30b0:	88 e5       	ldi	r24, 0x58	; 88
    30b2:	90 e0       	ldi	r25, 0x00	; 0
    30b4:	0b c0       	rjmp	.+22     	; 0x30cc <vfprintf+0x368>
    30b6:	80 2f       	mov	r24, r16
    30b8:	86 78       	andi	r24, 0x86	; 134
    30ba:	91 f0       	breq	.+36     	; 0x30e0 <vfprintf+0x37c>
    30bc:	01 ff       	sbrs	r16, 1
    30be:	02 c0       	rjmp	.+4      	; 0x30c4 <vfprintf+0x360>
    30c0:	8b e2       	ldi	r24, 0x2B	; 43
    30c2:	01 c0       	rjmp	.+2      	; 0x30c6 <vfprintf+0x362>
    30c4:	80 e2       	ldi	r24, 0x20	; 32
    30c6:	f7 fc       	sbrc	r15, 7
    30c8:	8d e2       	ldi	r24, 0x2D	; 45
    30ca:	90 e0       	ldi	r25, 0x00	; 0
    30cc:	b3 01       	movw	r22, r6
    30ce:	0e 94 a5 18 	call	0x314a	; 0x314a <fputc>
    30d2:	06 c0       	rjmp	.+12     	; 0x30e0 <vfprintf+0x37c>
    30d4:	80 e3       	ldi	r24, 0x30	; 48
    30d6:	90 e0       	ldi	r25, 0x00	; 0
    30d8:	b3 01       	movw	r22, r6
    30da:	0e 94 a5 18 	call	0x314a	; 0x314a <fputc>
    30de:	9a 94       	dec	r9
    30e0:	d9 14       	cp	r13, r9
    30e2:	c0 f3       	brcs	.-16     	; 0x30d4 <vfprintf+0x370>
    30e4:	da 94       	dec	r13
    30e6:	f1 01       	movw	r30, r2
    30e8:	ed 0d       	add	r30, r13
    30ea:	f1 1d       	adc	r31, r1
    30ec:	80 81       	ld	r24, Z
    30ee:	90 e0       	ldi	r25, 0x00	; 0
    30f0:	b3 01       	movw	r22, r6
    30f2:	0e 94 a5 18 	call	0x314a	; 0x314a <fputc>
    30f6:	dd 20       	and	r13, r13
    30f8:	a9 f7       	brne	.-22     	; 0x30e4 <vfprintf+0x380>
    30fa:	06 c0       	rjmp	.+12     	; 0x3108 <vfprintf+0x3a4>
    30fc:	80 e2       	ldi	r24, 0x20	; 32
    30fe:	90 e0       	ldi	r25, 0x00	; 0
    3100:	b3 01       	movw	r22, r6
    3102:	0e 94 a5 18 	call	0x314a	; 0x314a <fputc>
    3106:	ea 94       	dec	r14
    3108:	ee 20       	and	r14, r14
    310a:	c1 f7       	brne	.-16     	; 0x30fc <vfprintf+0x398>
    310c:	43 ce       	rjmp	.-890    	; 0x2d94 <vfprintf+0x30>
    310e:	f3 01       	movw	r30, r6
    3110:	66 81       	ldd	r22, Z+6	; 0x06
    3112:	77 81       	ldd	r23, Z+7	; 0x07
    3114:	cb 01       	movw	r24, r22
    3116:	2b 96       	adiw	r28, 0x0b	; 11
    3118:	e2 e1       	ldi	r30, 0x12	; 18
    311a:	0c 94 73 16 	jmp	0x2ce6	; 0x2ce6 <__epilogue_restores__>

0000311e <strnlen_P>:
    311e:	fc 01       	movw	r30, r24
    3120:	05 90       	lpm	r0, Z+
    3122:	61 50       	subi	r22, 0x01	; 1
    3124:	70 40       	sbci	r23, 0x00	; 0
    3126:	01 10       	cpse	r0, r1
    3128:	d8 f7       	brcc	.-10     	; 0x3120 <strnlen_P+0x2>
    312a:	80 95       	com	r24
    312c:	90 95       	com	r25
    312e:	8e 0f       	add	r24, r30
    3130:	9f 1f       	adc	r25, r31
    3132:	08 95       	ret

00003134 <strnlen>:
    3134:	fc 01       	movw	r30, r24
    3136:	61 50       	subi	r22, 0x01	; 1
    3138:	70 40       	sbci	r23, 0x00	; 0
    313a:	01 90       	ld	r0, Z+
    313c:	01 10       	cpse	r0, r1
    313e:	d8 f7       	brcc	.-10     	; 0x3136 <strnlen+0x2>
    3140:	80 95       	com	r24
    3142:	90 95       	com	r25
    3144:	8e 0f       	add	r24, r30
    3146:	9f 1f       	adc	r25, r31
    3148:	08 95       	ret

0000314a <fputc>:
    314a:	0f 93       	push	r16
    314c:	1f 93       	push	r17
    314e:	cf 93       	push	r28
    3150:	df 93       	push	r29
    3152:	8c 01       	movw	r16, r24
    3154:	eb 01       	movw	r28, r22
    3156:	8b 81       	ldd	r24, Y+3	; 0x03
    3158:	81 ff       	sbrs	r24, 1
    315a:	1b c0       	rjmp	.+54     	; 0x3192 <fputc+0x48>
    315c:	82 ff       	sbrs	r24, 2
    315e:	0d c0       	rjmp	.+26     	; 0x317a <fputc+0x30>
    3160:	2e 81       	ldd	r18, Y+6	; 0x06
    3162:	3f 81       	ldd	r19, Y+7	; 0x07
    3164:	8c 81       	ldd	r24, Y+4	; 0x04
    3166:	9d 81       	ldd	r25, Y+5	; 0x05
    3168:	28 17       	cp	r18, r24
    316a:	39 07       	cpc	r19, r25
    316c:	64 f4       	brge	.+24     	; 0x3186 <fputc+0x3c>
    316e:	e8 81       	ld	r30, Y
    3170:	f9 81       	ldd	r31, Y+1	; 0x01
    3172:	01 93       	st	Z+, r16
    3174:	f9 83       	std	Y+1, r31	; 0x01
    3176:	e8 83       	st	Y, r30
    3178:	06 c0       	rjmp	.+12     	; 0x3186 <fputc+0x3c>
    317a:	e8 85       	ldd	r30, Y+8	; 0x08
    317c:	f9 85       	ldd	r31, Y+9	; 0x09
    317e:	80 2f       	mov	r24, r16
    3180:	09 95       	icall
    3182:	89 2b       	or	r24, r25
    3184:	31 f4       	brne	.+12     	; 0x3192 <fputc+0x48>
    3186:	8e 81       	ldd	r24, Y+6	; 0x06
    3188:	9f 81       	ldd	r25, Y+7	; 0x07
    318a:	01 96       	adiw	r24, 0x01	; 1
    318c:	9f 83       	std	Y+7, r25	; 0x07
    318e:	8e 83       	std	Y+6, r24	; 0x06
    3190:	02 c0       	rjmp	.+4      	; 0x3196 <fputc+0x4c>
    3192:	0f ef       	ldi	r16, 0xFF	; 255
    3194:	1f ef       	ldi	r17, 0xFF	; 255
    3196:	c8 01       	movw	r24, r16
    3198:	df 91       	pop	r29
    319a:	cf 91       	pop	r28
    319c:	1f 91       	pop	r17
    319e:	0f 91       	pop	r16
    31a0:	08 95       	ret

000031a2 <__ultoa_invert>:
    31a2:	fa 01       	movw	r30, r20
    31a4:	aa 27       	eor	r26, r26
    31a6:	28 30       	cpi	r18, 0x08	; 8
    31a8:	51 f1       	breq	.+84     	; 0x31fe <__ultoa_invert+0x5c>
    31aa:	20 31       	cpi	r18, 0x10	; 16
    31ac:	81 f1       	breq	.+96     	; 0x320e <__ultoa_invert+0x6c>
    31ae:	e8 94       	clt
    31b0:	6f 93       	push	r22
    31b2:	6e 7f       	andi	r22, 0xFE	; 254
    31b4:	6e 5f       	subi	r22, 0xFE	; 254
    31b6:	7f 4f       	sbci	r23, 0xFF	; 255
    31b8:	8f 4f       	sbci	r24, 0xFF	; 255
    31ba:	9f 4f       	sbci	r25, 0xFF	; 255
    31bc:	af 4f       	sbci	r26, 0xFF	; 255
    31be:	b1 e0       	ldi	r27, 0x01	; 1
    31c0:	3e d0       	rcall	.+124    	; 0x323e <__ultoa_invert+0x9c>
    31c2:	b4 e0       	ldi	r27, 0x04	; 4
    31c4:	3c d0       	rcall	.+120    	; 0x323e <__ultoa_invert+0x9c>
    31c6:	67 0f       	add	r22, r23
    31c8:	78 1f       	adc	r23, r24
    31ca:	89 1f       	adc	r24, r25
    31cc:	9a 1f       	adc	r25, r26
    31ce:	a1 1d       	adc	r26, r1
    31d0:	68 0f       	add	r22, r24
    31d2:	79 1f       	adc	r23, r25
    31d4:	8a 1f       	adc	r24, r26
    31d6:	91 1d       	adc	r25, r1
    31d8:	a1 1d       	adc	r26, r1
    31da:	6a 0f       	add	r22, r26
    31dc:	71 1d       	adc	r23, r1
    31de:	81 1d       	adc	r24, r1
    31e0:	91 1d       	adc	r25, r1
    31e2:	a1 1d       	adc	r26, r1
    31e4:	20 d0       	rcall	.+64     	; 0x3226 <__ultoa_invert+0x84>
    31e6:	09 f4       	brne	.+2      	; 0x31ea <__ultoa_invert+0x48>
    31e8:	68 94       	set
    31ea:	3f 91       	pop	r19
    31ec:	2a e0       	ldi	r18, 0x0A	; 10
    31ee:	26 9f       	mul	r18, r22
    31f0:	11 24       	eor	r1, r1
    31f2:	30 19       	sub	r19, r0
    31f4:	30 5d       	subi	r19, 0xD0	; 208
    31f6:	31 93       	st	Z+, r19
    31f8:	de f6       	brtc	.-74     	; 0x31b0 <__ultoa_invert+0xe>
    31fa:	cf 01       	movw	r24, r30
    31fc:	08 95       	ret
    31fe:	46 2f       	mov	r20, r22
    3200:	47 70       	andi	r20, 0x07	; 7
    3202:	40 5d       	subi	r20, 0xD0	; 208
    3204:	41 93       	st	Z+, r20
    3206:	b3 e0       	ldi	r27, 0x03	; 3
    3208:	0f d0       	rcall	.+30     	; 0x3228 <__ultoa_invert+0x86>
    320a:	c9 f7       	brne	.-14     	; 0x31fe <__ultoa_invert+0x5c>
    320c:	f6 cf       	rjmp	.-20     	; 0x31fa <__ultoa_invert+0x58>
    320e:	46 2f       	mov	r20, r22
    3210:	4f 70       	andi	r20, 0x0F	; 15
    3212:	40 5d       	subi	r20, 0xD0	; 208
    3214:	4a 33       	cpi	r20, 0x3A	; 58
    3216:	18 f0       	brcs	.+6      	; 0x321e <__ultoa_invert+0x7c>
    3218:	49 5d       	subi	r20, 0xD9	; 217
    321a:	31 fd       	sbrc	r19, 1
    321c:	40 52       	subi	r20, 0x20	; 32
    321e:	41 93       	st	Z+, r20
    3220:	02 d0       	rcall	.+4      	; 0x3226 <__ultoa_invert+0x84>
    3222:	a9 f7       	brne	.-22     	; 0x320e <__ultoa_invert+0x6c>
    3224:	ea cf       	rjmp	.-44     	; 0x31fa <__ultoa_invert+0x58>
    3226:	b4 e0       	ldi	r27, 0x04	; 4
    3228:	a6 95       	lsr	r26
    322a:	97 95       	ror	r25
    322c:	87 95       	ror	r24
    322e:	77 95       	ror	r23
    3230:	67 95       	ror	r22
    3232:	ba 95       	dec	r27
    3234:	c9 f7       	brne	.-14     	; 0x3228 <__ultoa_invert+0x86>
    3236:	00 97       	sbiw	r24, 0x00	; 0
    3238:	61 05       	cpc	r22, r1
    323a:	71 05       	cpc	r23, r1
    323c:	08 95       	ret
    323e:	9b 01       	movw	r18, r22
    3240:	ac 01       	movw	r20, r24
    3242:	0a 2e       	mov	r0, r26
    3244:	06 94       	lsr	r0
    3246:	57 95       	ror	r21
    3248:	47 95       	ror	r20
    324a:	37 95       	ror	r19
    324c:	27 95       	ror	r18
    324e:	ba 95       	dec	r27
    3250:	c9 f7       	brne	.-14     	; 0x3244 <__ultoa_invert+0xa2>
    3252:	62 0f       	add	r22, r18
    3254:	73 1f       	adc	r23, r19
    3256:	84 1f       	adc	r24, r20
    3258:	95 1f       	adc	r25, r21
    325a:	a0 1d       	adc	r26, r0
    325c:	08 95       	ret

0000325e <_exit>:
    325e:	f8 94       	cli

00003260 <__stop_program>:
    3260:	ff cf       	rjmp	.-2      	; 0x3260 <__stop_program>
