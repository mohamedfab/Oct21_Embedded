
Oct21_Amit_Interfacing.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000344c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000012e  00800060  0000344c  000034c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000035a0  00000000  00000000  000035f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00001e00  00000000  00000000  00006b90  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000001a0  00000000  00000000  00008990  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000001f2  00000000  00000000  00008b30  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000240b  00000000  00000000  00008d22  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001386  00000000  00000000  0000b12d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011d6  00000000  00000000  0000c4b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c0  00000000  00000000  0000d68c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002f6  00000000  00000000  0000d84c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000096e  00000000  00000000  0000db42  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000e4b0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e4       	ldi	r30, 0x4C	; 76
      68:	f4 e3       	ldi	r31, 0x34	; 52
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 38       	cpi	r26, 0x8E	; 142
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 0f 07 	call	0xe1e	; 0xe1e <main>
      7a:	0c 94 24 1a 	jmp	0x3448	; 0x3448 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 4c 17 	jmp	0x2e98	; 0x2e98 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a4 e7       	ldi	r26, 0x74	; 116
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 68 17 	jmp	0x2ed0	; 0x2ed0 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 58 17 	jmp	0x2eb0	; 0x2eb0 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 74 17 	jmp	0x2ee8	; 0x2ee8 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 58 17 	jmp	0x2eb0	; 0x2eb0 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 74 17 	jmp	0x2ee8	; 0x2ee8 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 4c 17 	jmp	0x2e98	; 0x2e98 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	84 e7       	ldi	r24, 0x74	; 116
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 68 17 	jmp	0x2ed0	; 0x2ed0 <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 54 17 	jmp	0x2ea8	; 0x2ea8 <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	64 e7       	ldi	r22, 0x74	; 116
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 70 17 	jmp	0x2ee0	; 0x2ee0 <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 58 17 	jmp	0x2eb0	; 0x2eb0 <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 74 17 	jmp	0x2ee8	; 0x2ee8 <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 58 17 	jmp	0x2eb0	; 0x2eb0 <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 74 17 	jmp	0x2ee8	; 0x2ee8 <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 58 17 	jmp	0x2eb0	; 0x2eb0 <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 74 17 	jmp	0x2ee8	; 0x2ee8 <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 5c 17 	jmp	0x2eb8	; 0x2eb8 <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 78 17 	jmp	0x2ef0	; 0x2ef0 <__epilogue_restores__+0x20>

00000942 <__floatunsisf>:
     942:	a8 e0       	ldi	r26, 0x08	; 8
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e7 ea       	ldi	r30, 0xA7	; 167
     948:	f4 e0       	ldi	r31, 0x04	; 4
     94a:	0c 94 54 17 	jmp	0x2ea8	; 0x2ea8 <__prologue_saves__+0x10>
     94e:	7b 01       	movw	r14, r22
     950:	8c 01       	movw	r16, r24
     952:	61 15       	cp	r22, r1
     954:	71 05       	cpc	r23, r1
     956:	81 05       	cpc	r24, r1
     958:	91 05       	cpc	r25, r1
     95a:	19 f4       	brne	.+6      	; 0x962 <__floatunsisf+0x20>
     95c:	82 e0       	ldi	r24, 0x02	; 2
     95e:	89 83       	std	Y+1, r24	; 0x01
     960:	60 c0       	rjmp	.+192    	; 0xa22 <__floatunsisf+0xe0>
     962:	83 e0       	ldi	r24, 0x03	; 3
     964:	89 83       	std	Y+1, r24	; 0x01
     966:	8e e1       	ldi	r24, 0x1E	; 30
     968:	c8 2e       	mov	r12, r24
     96a:	d1 2c       	mov	r13, r1
     96c:	dc 82       	std	Y+4, r13	; 0x04
     96e:	cb 82       	std	Y+3, r12	; 0x03
     970:	ed 82       	std	Y+5, r14	; 0x05
     972:	fe 82       	std	Y+6, r15	; 0x06
     974:	0f 83       	std	Y+7, r16	; 0x07
     976:	18 87       	std	Y+8, r17	; 0x08
     978:	c8 01       	movw	r24, r16
     97a:	b7 01       	movw	r22, r14
     97c:	0e 94 1a 05 	call	0xa34	; 0xa34 <__clzsi2>
     980:	fc 01       	movw	r30, r24
     982:	31 97       	sbiw	r30, 0x01	; 1
     984:	f7 ff       	sbrs	r31, 7
     986:	3b c0       	rjmp	.+118    	; 0x9fe <__floatunsisf+0xbc>
     988:	22 27       	eor	r18, r18
     98a:	33 27       	eor	r19, r19
     98c:	2e 1b       	sub	r18, r30
     98e:	3f 0b       	sbc	r19, r31
     990:	57 01       	movw	r10, r14
     992:	68 01       	movw	r12, r16
     994:	02 2e       	mov	r0, r18
     996:	04 c0       	rjmp	.+8      	; 0x9a0 <__floatunsisf+0x5e>
     998:	d6 94       	lsr	r13
     99a:	c7 94       	ror	r12
     99c:	b7 94       	ror	r11
     99e:	a7 94       	ror	r10
     9a0:	0a 94       	dec	r0
     9a2:	d2 f7       	brpl	.-12     	; 0x998 <__floatunsisf+0x56>
     9a4:	40 e0       	ldi	r20, 0x00	; 0
     9a6:	50 e0       	ldi	r21, 0x00	; 0
     9a8:	60 e0       	ldi	r22, 0x00	; 0
     9aa:	70 e0       	ldi	r23, 0x00	; 0
     9ac:	81 e0       	ldi	r24, 0x01	; 1
     9ae:	90 e0       	ldi	r25, 0x00	; 0
     9b0:	a0 e0       	ldi	r26, 0x00	; 0
     9b2:	b0 e0       	ldi	r27, 0x00	; 0
     9b4:	04 c0       	rjmp	.+8      	; 0x9be <__floatunsisf+0x7c>
     9b6:	88 0f       	add	r24, r24
     9b8:	99 1f       	adc	r25, r25
     9ba:	aa 1f       	adc	r26, r26
     9bc:	bb 1f       	adc	r27, r27
     9be:	2a 95       	dec	r18
     9c0:	d2 f7       	brpl	.-12     	; 0x9b6 <__floatunsisf+0x74>
     9c2:	01 97       	sbiw	r24, 0x01	; 1
     9c4:	a1 09       	sbc	r26, r1
     9c6:	b1 09       	sbc	r27, r1
     9c8:	8e 21       	and	r24, r14
     9ca:	9f 21       	and	r25, r15
     9cc:	a0 23       	and	r26, r16
     9ce:	b1 23       	and	r27, r17
     9d0:	00 97       	sbiw	r24, 0x00	; 0
     9d2:	a1 05       	cpc	r26, r1
     9d4:	b1 05       	cpc	r27, r1
     9d6:	21 f0       	breq	.+8      	; 0x9e0 <__floatunsisf+0x9e>
     9d8:	41 e0       	ldi	r20, 0x01	; 1
     9da:	50 e0       	ldi	r21, 0x00	; 0
     9dc:	60 e0       	ldi	r22, 0x00	; 0
     9de:	70 e0       	ldi	r23, 0x00	; 0
     9e0:	4a 29       	or	r20, r10
     9e2:	5b 29       	or	r21, r11
     9e4:	6c 29       	or	r22, r12
     9e6:	7d 29       	or	r23, r13
     9e8:	4d 83       	std	Y+5, r20	; 0x05
     9ea:	5e 83       	std	Y+6, r21	; 0x06
     9ec:	6f 83       	std	Y+7, r22	; 0x07
     9ee:	78 87       	std	Y+8, r23	; 0x08
     9f0:	8e e1       	ldi	r24, 0x1E	; 30
     9f2:	90 e0       	ldi	r25, 0x00	; 0
     9f4:	8e 1b       	sub	r24, r30
     9f6:	9f 0b       	sbc	r25, r31
     9f8:	9c 83       	std	Y+4, r25	; 0x04
     9fa:	8b 83       	std	Y+3, r24	; 0x03
     9fc:	12 c0       	rjmp	.+36     	; 0xa22 <__floatunsisf+0xe0>
     9fe:	30 97       	sbiw	r30, 0x00	; 0
     a00:	81 f0       	breq	.+32     	; 0xa22 <__floatunsisf+0xe0>
     a02:	0e 2e       	mov	r0, r30
     a04:	04 c0       	rjmp	.+8      	; 0xa0e <__floatunsisf+0xcc>
     a06:	ee 0c       	add	r14, r14
     a08:	ff 1c       	adc	r15, r15
     a0a:	00 1f       	adc	r16, r16
     a0c:	11 1f       	adc	r17, r17
     a0e:	0a 94       	dec	r0
     a10:	d2 f7       	brpl	.-12     	; 0xa06 <__floatunsisf+0xc4>
     a12:	ed 82       	std	Y+5, r14	; 0x05
     a14:	fe 82       	std	Y+6, r15	; 0x06
     a16:	0f 83       	std	Y+7, r16	; 0x07
     a18:	18 87       	std	Y+8, r17	; 0x08
     a1a:	ce 1a       	sub	r12, r30
     a1c:	df 0a       	sbc	r13, r31
     a1e:	dc 82       	std	Y+4, r13	; 0x04
     a20:	cb 82       	std	Y+3, r12	; 0x03
     a22:	1a 82       	std	Y+2, r1	; 0x02
     a24:	ce 01       	movw	r24, r28
     a26:	01 96       	adiw	r24, 0x01	; 1
     a28:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     a2c:	28 96       	adiw	r28, 0x08	; 8
     a2e:	ea e0       	ldi	r30, 0x0A	; 10
     a30:	0c 94 70 17 	jmp	0x2ee0	; 0x2ee0 <__epilogue_restores__+0x10>

00000a34 <__clzsi2>:
     a34:	ef 92       	push	r14
     a36:	ff 92       	push	r15
     a38:	0f 93       	push	r16
     a3a:	1f 93       	push	r17
     a3c:	7b 01       	movw	r14, r22
     a3e:	8c 01       	movw	r16, r24
     a40:	80 e0       	ldi	r24, 0x00	; 0
     a42:	e8 16       	cp	r14, r24
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	f8 06       	cpc	r15, r24
     a48:	81 e0       	ldi	r24, 0x01	; 1
     a4a:	08 07       	cpc	r16, r24
     a4c:	80 e0       	ldi	r24, 0x00	; 0
     a4e:	18 07       	cpc	r17, r24
     a50:	88 f4       	brcc	.+34     	; 0xa74 <__clzsi2+0x40>
     a52:	8f ef       	ldi	r24, 0xFF	; 255
     a54:	e8 16       	cp	r14, r24
     a56:	f1 04       	cpc	r15, r1
     a58:	01 05       	cpc	r16, r1
     a5a:	11 05       	cpc	r17, r1
     a5c:	31 f0       	breq	.+12     	; 0xa6a <__clzsi2+0x36>
     a5e:	28 f0       	brcs	.+10     	; 0xa6a <__clzsi2+0x36>
     a60:	88 e0       	ldi	r24, 0x08	; 8
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	a0 e0       	ldi	r26, 0x00	; 0
     a66:	b0 e0       	ldi	r27, 0x00	; 0
     a68:	17 c0       	rjmp	.+46     	; 0xa98 <__clzsi2+0x64>
     a6a:	80 e0       	ldi	r24, 0x00	; 0
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	a0 e0       	ldi	r26, 0x00	; 0
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	12 c0       	rjmp	.+36     	; 0xa98 <__clzsi2+0x64>
     a74:	80 e0       	ldi	r24, 0x00	; 0
     a76:	e8 16       	cp	r14, r24
     a78:	80 e0       	ldi	r24, 0x00	; 0
     a7a:	f8 06       	cpc	r15, r24
     a7c:	80 e0       	ldi	r24, 0x00	; 0
     a7e:	08 07       	cpc	r16, r24
     a80:	81 e0       	ldi	r24, 0x01	; 1
     a82:	18 07       	cpc	r17, r24
     a84:	28 f0       	brcs	.+10     	; 0xa90 <__clzsi2+0x5c>
     a86:	88 e1       	ldi	r24, 0x18	; 24
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	04 c0       	rjmp	.+8      	; 0xa98 <__clzsi2+0x64>
     a90:	80 e1       	ldi	r24, 0x10	; 16
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	a0 e0       	ldi	r26, 0x00	; 0
     a96:	b0 e0       	ldi	r27, 0x00	; 0
     a98:	20 e2       	ldi	r18, 0x20	; 32
     a9a:	30 e0       	ldi	r19, 0x00	; 0
     a9c:	40 e0       	ldi	r20, 0x00	; 0
     a9e:	50 e0       	ldi	r21, 0x00	; 0
     aa0:	28 1b       	sub	r18, r24
     aa2:	39 0b       	sbc	r19, r25
     aa4:	4a 0b       	sbc	r20, r26
     aa6:	5b 0b       	sbc	r21, r27
     aa8:	04 c0       	rjmp	.+8      	; 0xab2 <__clzsi2+0x7e>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	8a 95       	dec	r24
     ab4:	d2 f7       	brpl	.-12     	; 0xaaa <__clzsi2+0x76>
     ab6:	f7 01       	movw	r30, r14
     ab8:	e4 58       	subi	r30, 0x84	; 132
     aba:	ff 4f       	sbci	r31, 0xFF	; 255
     abc:	80 81       	ld	r24, Z
     abe:	28 1b       	sub	r18, r24
     ac0:	31 09       	sbc	r19, r1
     ac2:	41 09       	sbc	r20, r1
     ac4:	51 09       	sbc	r21, r1
     ac6:	c9 01       	movw	r24, r18
     ac8:	1f 91       	pop	r17
     aca:	0f 91       	pop	r16
     acc:	ff 90       	pop	r15
     ace:	ef 90       	pop	r14
     ad0:	08 95       	ret

00000ad2 <__pack_f>:
     ad2:	df 92       	push	r13
     ad4:	ef 92       	push	r14
     ad6:	ff 92       	push	r15
     ad8:	0f 93       	push	r16
     ada:	1f 93       	push	r17
     adc:	fc 01       	movw	r30, r24
     ade:	e4 80       	ldd	r14, Z+4	; 0x04
     ae0:	f5 80       	ldd	r15, Z+5	; 0x05
     ae2:	06 81       	ldd	r16, Z+6	; 0x06
     ae4:	17 81       	ldd	r17, Z+7	; 0x07
     ae6:	d1 80       	ldd	r13, Z+1	; 0x01
     ae8:	80 81       	ld	r24, Z
     aea:	82 30       	cpi	r24, 0x02	; 2
     aec:	48 f4       	brcc	.+18     	; 0xb00 <__pack_f+0x2e>
     aee:	80 e0       	ldi	r24, 0x00	; 0
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	a0 e1       	ldi	r26, 0x10	; 16
     af4:	b0 e0       	ldi	r27, 0x00	; 0
     af6:	e8 2a       	or	r14, r24
     af8:	f9 2a       	or	r15, r25
     afa:	0a 2b       	or	r16, r26
     afc:	1b 2b       	or	r17, r27
     afe:	a5 c0       	rjmp	.+330    	; 0xc4a <__pack_f+0x178>
     b00:	84 30       	cpi	r24, 0x04	; 4
     b02:	09 f4       	brne	.+2      	; 0xb06 <__pack_f+0x34>
     b04:	9f c0       	rjmp	.+318    	; 0xc44 <__pack_f+0x172>
     b06:	82 30       	cpi	r24, 0x02	; 2
     b08:	21 f4       	brne	.+8      	; 0xb12 <__pack_f+0x40>
     b0a:	ee 24       	eor	r14, r14
     b0c:	ff 24       	eor	r15, r15
     b0e:	87 01       	movw	r16, r14
     b10:	05 c0       	rjmp	.+10     	; 0xb1c <__pack_f+0x4a>
     b12:	e1 14       	cp	r14, r1
     b14:	f1 04       	cpc	r15, r1
     b16:	01 05       	cpc	r16, r1
     b18:	11 05       	cpc	r17, r1
     b1a:	19 f4       	brne	.+6      	; 0xb22 <__pack_f+0x50>
     b1c:	e0 e0       	ldi	r30, 0x00	; 0
     b1e:	f0 e0       	ldi	r31, 0x00	; 0
     b20:	96 c0       	rjmp	.+300    	; 0xc4e <__pack_f+0x17c>
     b22:	62 81       	ldd	r22, Z+2	; 0x02
     b24:	73 81       	ldd	r23, Z+3	; 0x03
     b26:	9f ef       	ldi	r25, 0xFF	; 255
     b28:	62 38       	cpi	r22, 0x82	; 130
     b2a:	79 07       	cpc	r23, r25
     b2c:	0c f0       	brlt	.+2      	; 0xb30 <__pack_f+0x5e>
     b2e:	5b c0       	rjmp	.+182    	; 0xbe6 <__pack_f+0x114>
     b30:	22 e8       	ldi	r18, 0x82	; 130
     b32:	3f ef       	ldi	r19, 0xFF	; 255
     b34:	26 1b       	sub	r18, r22
     b36:	37 0b       	sbc	r19, r23
     b38:	2a 31       	cpi	r18, 0x1A	; 26
     b3a:	31 05       	cpc	r19, r1
     b3c:	2c f0       	brlt	.+10     	; 0xb48 <__pack_f+0x76>
     b3e:	20 e0       	ldi	r18, 0x00	; 0
     b40:	30 e0       	ldi	r19, 0x00	; 0
     b42:	40 e0       	ldi	r20, 0x00	; 0
     b44:	50 e0       	ldi	r21, 0x00	; 0
     b46:	2a c0       	rjmp	.+84     	; 0xb9c <__pack_f+0xca>
     b48:	b8 01       	movw	r22, r16
     b4a:	a7 01       	movw	r20, r14
     b4c:	02 2e       	mov	r0, r18
     b4e:	04 c0       	rjmp	.+8      	; 0xb58 <__pack_f+0x86>
     b50:	76 95       	lsr	r23
     b52:	67 95       	ror	r22
     b54:	57 95       	ror	r21
     b56:	47 95       	ror	r20
     b58:	0a 94       	dec	r0
     b5a:	d2 f7       	brpl	.-12     	; 0xb50 <__pack_f+0x7e>
     b5c:	81 e0       	ldi	r24, 0x01	; 1
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	04 c0       	rjmp	.+8      	; 0xb6e <__pack_f+0x9c>
     b66:	88 0f       	add	r24, r24
     b68:	99 1f       	adc	r25, r25
     b6a:	aa 1f       	adc	r26, r26
     b6c:	bb 1f       	adc	r27, r27
     b6e:	2a 95       	dec	r18
     b70:	d2 f7       	brpl	.-12     	; 0xb66 <__pack_f+0x94>
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	a1 09       	sbc	r26, r1
     b76:	b1 09       	sbc	r27, r1
     b78:	8e 21       	and	r24, r14
     b7a:	9f 21       	and	r25, r15
     b7c:	a0 23       	and	r26, r16
     b7e:	b1 23       	and	r27, r17
     b80:	00 97       	sbiw	r24, 0x00	; 0
     b82:	a1 05       	cpc	r26, r1
     b84:	b1 05       	cpc	r27, r1
     b86:	21 f0       	breq	.+8      	; 0xb90 <__pack_f+0xbe>
     b88:	81 e0       	ldi	r24, 0x01	; 1
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	a0 e0       	ldi	r26, 0x00	; 0
     b8e:	b0 e0       	ldi	r27, 0x00	; 0
     b90:	9a 01       	movw	r18, r20
     b92:	ab 01       	movw	r20, r22
     b94:	28 2b       	or	r18, r24
     b96:	39 2b       	or	r19, r25
     b98:	4a 2b       	or	r20, r26
     b9a:	5b 2b       	or	r21, r27
     b9c:	da 01       	movw	r26, r20
     b9e:	c9 01       	movw	r24, r18
     ba0:	8f 77       	andi	r24, 0x7F	; 127
     ba2:	90 70       	andi	r25, 0x00	; 0
     ba4:	a0 70       	andi	r26, 0x00	; 0
     ba6:	b0 70       	andi	r27, 0x00	; 0
     ba8:	80 34       	cpi	r24, 0x40	; 64
     baa:	91 05       	cpc	r25, r1
     bac:	a1 05       	cpc	r26, r1
     bae:	b1 05       	cpc	r27, r1
     bb0:	39 f4       	brne	.+14     	; 0xbc0 <__pack_f+0xee>
     bb2:	27 ff       	sbrs	r18, 7
     bb4:	09 c0       	rjmp	.+18     	; 0xbc8 <__pack_f+0xf6>
     bb6:	20 5c       	subi	r18, 0xC0	; 192
     bb8:	3f 4f       	sbci	r19, 0xFF	; 255
     bba:	4f 4f       	sbci	r20, 0xFF	; 255
     bbc:	5f 4f       	sbci	r21, 0xFF	; 255
     bbe:	04 c0       	rjmp	.+8      	; 0xbc8 <__pack_f+0xf6>
     bc0:	21 5c       	subi	r18, 0xC1	; 193
     bc2:	3f 4f       	sbci	r19, 0xFF	; 255
     bc4:	4f 4f       	sbci	r20, 0xFF	; 255
     bc6:	5f 4f       	sbci	r21, 0xFF	; 255
     bc8:	e0 e0       	ldi	r30, 0x00	; 0
     bca:	f0 e0       	ldi	r31, 0x00	; 0
     bcc:	20 30       	cpi	r18, 0x00	; 0
     bce:	a0 e0       	ldi	r26, 0x00	; 0
     bd0:	3a 07       	cpc	r19, r26
     bd2:	a0 e0       	ldi	r26, 0x00	; 0
     bd4:	4a 07       	cpc	r20, r26
     bd6:	a0 e4       	ldi	r26, 0x40	; 64
     bd8:	5a 07       	cpc	r21, r26
     bda:	10 f0       	brcs	.+4      	; 0xbe0 <__pack_f+0x10e>
     bdc:	e1 e0       	ldi	r30, 0x01	; 1
     bde:	f0 e0       	ldi	r31, 0x00	; 0
     be0:	79 01       	movw	r14, r18
     be2:	8a 01       	movw	r16, r20
     be4:	27 c0       	rjmp	.+78     	; 0xc34 <__pack_f+0x162>
     be6:	60 38       	cpi	r22, 0x80	; 128
     be8:	71 05       	cpc	r23, r1
     bea:	64 f5       	brge	.+88     	; 0xc44 <__pack_f+0x172>
     bec:	fb 01       	movw	r30, r22
     bee:	e1 58       	subi	r30, 0x81	; 129
     bf0:	ff 4f       	sbci	r31, 0xFF	; 255
     bf2:	d8 01       	movw	r26, r16
     bf4:	c7 01       	movw	r24, r14
     bf6:	8f 77       	andi	r24, 0x7F	; 127
     bf8:	90 70       	andi	r25, 0x00	; 0
     bfa:	a0 70       	andi	r26, 0x00	; 0
     bfc:	b0 70       	andi	r27, 0x00	; 0
     bfe:	80 34       	cpi	r24, 0x40	; 64
     c00:	91 05       	cpc	r25, r1
     c02:	a1 05       	cpc	r26, r1
     c04:	b1 05       	cpc	r27, r1
     c06:	39 f4       	brne	.+14     	; 0xc16 <__pack_f+0x144>
     c08:	e7 fe       	sbrs	r14, 7
     c0a:	0d c0       	rjmp	.+26     	; 0xc26 <__pack_f+0x154>
     c0c:	80 e4       	ldi	r24, 0x40	; 64
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	a0 e0       	ldi	r26, 0x00	; 0
     c12:	b0 e0       	ldi	r27, 0x00	; 0
     c14:	04 c0       	rjmp	.+8      	; 0xc1e <__pack_f+0x14c>
     c16:	8f e3       	ldi	r24, 0x3F	; 63
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	a0 e0       	ldi	r26, 0x00	; 0
     c1c:	b0 e0       	ldi	r27, 0x00	; 0
     c1e:	e8 0e       	add	r14, r24
     c20:	f9 1e       	adc	r15, r25
     c22:	0a 1f       	adc	r16, r26
     c24:	1b 1f       	adc	r17, r27
     c26:	17 ff       	sbrs	r17, 7
     c28:	05 c0       	rjmp	.+10     	; 0xc34 <__pack_f+0x162>
     c2a:	16 95       	lsr	r17
     c2c:	07 95       	ror	r16
     c2e:	f7 94       	ror	r15
     c30:	e7 94       	ror	r14
     c32:	31 96       	adiw	r30, 0x01	; 1
     c34:	87 e0       	ldi	r24, 0x07	; 7
     c36:	16 95       	lsr	r17
     c38:	07 95       	ror	r16
     c3a:	f7 94       	ror	r15
     c3c:	e7 94       	ror	r14
     c3e:	8a 95       	dec	r24
     c40:	d1 f7       	brne	.-12     	; 0xc36 <__pack_f+0x164>
     c42:	05 c0       	rjmp	.+10     	; 0xc4e <__pack_f+0x17c>
     c44:	ee 24       	eor	r14, r14
     c46:	ff 24       	eor	r15, r15
     c48:	87 01       	movw	r16, r14
     c4a:	ef ef       	ldi	r30, 0xFF	; 255
     c4c:	f0 e0       	ldi	r31, 0x00	; 0
     c4e:	6e 2f       	mov	r22, r30
     c50:	67 95       	ror	r22
     c52:	66 27       	eor	r22, r22
     c54:	67 95       	ror	r22
     c56:	90 2f       	mov	r25, r16
     c58:	9f 77       	andi	r25, 0x7F	; 127
     c5a:	d7 94       	ror	r13
     c5c:	dd 24       	eor	r13, r13
     c5e:	d7 94       	ror	r13
     c60:	8e 2f       	mov	r24, r30
     c62:	86 95       	lsr	r24
     c64:	49 2f       	mov	r20, r25
     c66:	46 2b       	or	r20, r22
     c68:	58 2f       	mov	r21, r24
     c6a:	5d 29       	or	r21, r13
     c6c:	b7 01       	movw	r22, r14
     c6e:	ca 01       	movw	r24, r20
     c70:	1f 91       	pop	r17
     c72:	0f 91       	pop	r16
     c74:	ff 90       	pop	r15
     c76:	ef 90       	pop	r14
     c78:	df 90       	pop	r13
     c7a:	08 95       	ret

00000c7c <__unpack_f>:
     c7c:	fc 01       	movw	r30, r24
     c7e:	db 01       	movw	r26, r22
     c80:	40 81       	ld	r20, Z
     c82:	51 81       	ldd	r21, Z+1	; 0x01
     c84:	22 81       	ldd	r18, Z+2	; 0x02
     c86:	62 2f       	mov	r22, r18
     c88:	6f 77       	andi	r22, 0x7F	; 127
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	22 1f       	adc	r18, r18
     c8e:	22 27       	eor	r18, r18
     c90:	22 1f       	adc	r18, r18
     c92:	93 81       	ldd	r25, Z+3	; 0x03
     c94:	89 2f       	mov	r24, r25
     c96:	88 0f       	add	r24, r24
     c98:	82 2b       	or	r24, r18
     c9a:	28 2f       	mov	r18, r24
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	99 1f       	adc	r25, r25
     ca0:	99 27       	eor	r25, r25
     ca2:	99 1f       	adc	r25, r25
     ca4:	11 96       	adiw	r26, 0x01	; 1
     ca6:	9c 93       	st	X, r25
     ca8:	11 97       	sbiw	r26, 0x01	; 1
     caa:	21 15       	cp	r18, r1
     cac:	31 05       	cpc	r19, r1
     cae:	a9 f5       	brne	.+106    	; 0xd1a <__unpack_f+0x9e>
     cb0:	41 15       	cp	r20, r1
     cb2:	51 05       	cpc	r21, r1
     cb4:	61 05       	cpc	r22, r1
     cb6:	71 05       	cpc	r23, r1
     cb8:	11 f4       	brne	.+4      	; 0xcbe <__unpack_f+0x42>
     cba:	82 e0       	ldi	r24, 0x02	; 2
     cbc:	37 c0       	rjmp	.+110    	; 0xd2c <__unpack_f+0xb0>
     cbe:	82 e8       	ldi	r24, 0x82	; 130
     cc0:	9f ef       	ldi	r25, 0xFF	; 255
     cc2:	13 96       	adiw	r26, 0x03	; 3
     cc4:	9c 93       	st	X, r25
     cc6:	8e 93       	st	-X, r24
     cc8:	12 97       	sbiw	r26, 0x02	; 2
     cca:	9a 01       	movw	r18, r20
     ccc:	ab 01       	movw	r20, r22
     cce:	67 e0       	ldi	r22, 0x07	; 7
     cd0:	22 0f       	add	r18, r18
     cd2:	33 1f       	adc	r19, r19
     cd4:	44 1f       	adc	r20, r20
     cd6:	55 1f       	adc	r21, r21
     cd8:	6a 95       	dec	r22
     cda:	d1 f7       	brne	.-12     	; 0xcd0 <__unpack_f+0x54>
     cdc:	83 e0       	ldi	r24, 0x03	; 3
     cde:	8c 93       	st	X, r24
     ce0:	0d c0       	rjmp	.+26     	; 0xcfc <__unpack_f+0x80>
     ce2:	22 0f       	add	r18, r18
     ce4:	33 1f       	adc	r19, r19
     ce6:	44 1f       	adc	r20, r20
     ce8:	55 1f       	adc	r21, r21
     cea:	12 96       	adiw	r26, 0x02	; 2
     cec:	8d 91       	ld	r24, X+
     cee:	9c 91       	ld	r25, X
     cf0:	13 97       	sbiw	r26, 0x03	; 3
     cf2:	01 97       	sbiw	r24, 0x01	; 1
     cf4:	13 96       	adiw	r26, 0x03	; 3
     cf6:	9c 93       	st	X, r25
     cf8:	8e 93       	st	-X, r24
     cfa:	12 97       	sbiw	r26, 0x02	; 2
     cfc:	20 30       	cpi	r18, 0x00	; 0
     cfe:	80 e0       	ldi	r24, 0x00	; 0
     d00:	38 07       	cpc	r19, r24
     d02:	80 e0       	ldi	r24, 0x00	; 0
     d04:	48 07       	cpc	r20, r24
     d06:	80 e4       	ldi	r24, 0x40	; 64
     d08:	58 07       	cpc	r21, r24
     d0a:	58 f3       	brcs	.-42     	; 0xce2 <__unpack_f+0x66>
     d0c:	14 96       	adiw	r26, 0x04	; 4
     d0e:	2d 93       	st	X+, r18
     d10:	3d 93       	st	X+, r19
     d12:	4d 93       	st	X+, r20
     d14:	5c 93       	st	X, r21
     d16:	17 97       	sbiw	r26, 0x07	; 7
     d18:	08 95       	ret
     d1a:	2f 3f       	cpi	r18, 0xFF	; 255
     d1c:	31 05       	cpc	r19, r1
     d1e:	79 f4       	brne	.+30     	; 0xd3e <__unpack_f+0xc2>
     d20:	41 15       	cp	r20, r1
     d22:	51 05       	cpc	r21, r1
     d24:	61 05       	cpc	r22, r1
     d26:	71 05       	cpc	r23, r1
     d28:	19 f4       	brne	.+6      	; 0xd30 <__unpack_f+0xb4>
     d2a:	84 e0       	ldi	r24, 0x04	; 4
     d2c:	8c 93       	st	X, r24
     d2e:	08 95       	ret
     d30:	64 ff       	sbrs	r22, 4
     d32:	03 c0       	rjmp	.+6      	; 0xd3a <__unpack_f+0xbe>
     d34:	81 e0       	ldi	r24, 0x01	; 1
     d36:	8c 93       	st	X, r24
     d38:	12 c0       	rjmp	.+36     	; 0xd5e <__unpack_f+0xe2>
     d3a:	1c 92       	st	X, r1
     d3c:	10 c0       	rjmp	.+32     	; 0xd5e <__unpack_f+0xe2>
     d3e:	2f 57       	subi	r18, 0x7F	; 127
     d40:	30 40       	sbci	r19, 0x00	; 0
     d42:	13 96       	adiw	r26, 0x03	; 3
     d44:	3c 93       	st	X, r19
     d46:	2e 93       	st	-X, r18
     d48:	12 97       	sbiw	r26, 0x02	; 2
     d4a:	83 e0       	ldi	r24, 0x03	; 3
     d4c:	8c 93       	st	X, r24
     d4e:	87 e0       	ldi	r24, 0x07	; 7
     d50:	44 0f       	add	r20, r20
     d52:	55 1f       	adc	r21, r21
     d54:	66 1f       	adc	r22, r22
     d56:	77 1f       	adc	r23, r23
     d58:	8a 95       	dec	r24
     d5a:	d1 f7       	brne	.-12     	; 0xd50 <__unpack_f+0xd4>
     d5c:	70 64       	ori	r23, 0x40	; 64
     d5e:	14 96       	adiw	r26, 0x04	; 4
     d60:	4d 93       	st	X+, r20
     d62:	5d 93       	st	X+, r21
     d64:	6d 93       	st	X+, r22
     d66:	7c 93       	st	X, r23
     d68:	17 97       	sbiw	r26, 0x07	; 7
     d6a:	08 95       	ret

00000d6c <__fpcmp_parts_f>:
     d6c:	1f 93       	push	r17
     d6e:	dc 01       	movw	r26, r24
     d70:	fb 01       	movw	r30, r22
     d72:	9c 91       	ld	r25, X
     d74:	92 30       	cpi	r25, 0x02	; 2
     d76:	08 f4       	brcc	.+2      	; 0xd7a <__fpcmp_parts_f+0xe>
     d78:	47 c0       	rjmp	.+142    	; 0xe08 <__fpcmp_parts_f+0x9c>
     d7a:	80 81       	ld	r24, Z
     d7c:	82 30       	cpi	r24, 0x02	; 2
     d7e:	08 f4       	brcc	.+2      	; 0xd82 <__fpcmp_parts_f+0x16>
     d80:	43 c0       	rjmp	.+134    	; 0xe08 <__fpcmp_parts_f+0x9c>
     d82:	94 30       	cpi	r25, 0x04	; 4
     d84:	51 f4       	brne	.+20     	; 0xd9a <__fpcmp_parts_f+0x2e>
     d86:	11 96       	adiw	r26, 0x01	; 1
     d88:	1c 91       	ld	r17, X
     d8a:	84 30       	cpi	r24, 0x04	; 4
     d8c:	99 f5       	brne	.+102    	; 0xdf4 <__fpcmp_parts_f+0x88>
     d8e:	81 81       	ldd	r24, Z+1	; 0x01
     d90:	68 2f       	mov	r22, r24
     d92:	70 e0       	ldi	r23, 0x00	; 0
     d94:	61 1b       	sub	r22, r17
     d96:	71 09       	sbc	r23, r1
     d98:	3f c0       	rjmp	.+126    	; 0xe18 <__fpcmp_parts_f+0xac>
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	21 f0       	breq	.+8      	; 0xda6 <__fpcmp_parts_f+0x3a>
     d9e:	92 30       	cpi	r25, 0x02	; 2
     da0:	31 f4       	brne	.+12     	; 0xdae <__fpcmp_parts_f+0x42>
     da2:	82 30       	cpi	r24, 0x02	; 2
     da4:	b9 f1       	breq	.+110    	; 0xe14 <__fpcmp_parts_f+0xa8>
     da6:	81 81       	ldd	r24, Z+1	; 0x01
     da8:	88 23       	and	r24, r24
     daa:	89 f1       	breq	.+98     	; 0xe0e <__fpcmp_parts_f+0xa2>
     dac:	2d c0       	rjmp	.+90     	; 0xe08 <__fpcmp_parts_f+0x9c>
     dae:	11 96       	adiw	r26, 0x01	; 1
     db0:	1c 91       	ld	r17, X
     db2:	11 97       	sbiw	r26, 0x01	; 1
     db4:	82 30       	cpi	r24, 0x02	; 2
     db6:	f1 f0       	breq	.+60     	; 0xdf4 <__fpcmp_parts_f+0x88>
     db8:	81 81       	ldd	r24, Z+1	; 0x01
     dba:	18 17       	cp	r17, r24
     dbc:	d9 f4       	brne	.+54     	; 0xdf4 <__fpcmp_parts_f+0x88>
     dbe:	12 96       	adiw	r26, 0x02	; 2
     dc0:	2d 91       	ld	r18, X+
     dc2:	3c 91       	ld	r19, X
     dc4:	13 97       	sbiw	r26, 0x03	; 3
     dc6:	82 81       	ldd	r24, Z+2	; 0x02
     dc8:	93 81       	ldd	r25, Z+3	; 0x03
     dca:	82 17       	cp	r24, r18
     dcc:	93 07       	cpc	r25, r19
     dce:	94 f0       	brlt	.+36     	; 0xdf4 <__fpcmp_parts_f+0x88>
     dd0:	28 17       	cp	r18, r24
     dd2:	39 07       	cpc	r19, r25
     dd4:	bc f0       	brlt	.+46     	; 0xe04 <__fpcmp_parts_f+0x98>
     dd6:	14 96       	adiw	r26, 0x04	; 4
     dd8:	8d 91       	ld	r24, X+
     dda:	9d 91       	ld	r25, X+
     ddc:	0d 90       	ld	r0, X+
     dde:	bc 91       	ld	r27, X
     de0:	a0 2d       	mov	r26, r0
     de2:	24 81       	ldd	r18, Z+4	; 0x04
     de4:	35 81       	ldd	r19, Z+5	; 0x05
     de6:	46 81       	ldd	r20, Z+6	; 0x06
     de8:	57 81       	ldd	r21, Z+7	; 0x07
     dea:	28 17       	cp	r18, r24
     dec:	39 07       	cpc	r19, r25
     dee:	4a 07       	cpc	r20, r26
     df0:	5b 07       	cpc	r21, r27
     df2:	18 f4       	brcc	.+6      	; 0xdfa <__fpcmp_parts_f+0x8e>
     df4:	11 23       	and	r17, r17
     df6:	41 f0       	breq	.+16     	; 0xe08 <__fpcmp_parts_f+0x9c>
     df8:	0a c0       	rjmp	.+20     	; 0xe0e <__fpcmp_parts_f+0xa2>
     dfa:	82 17       	cp	r24, r18
     dfc:	93 07       	cpc	r25, r19
     dfe:	a4 07       	cpc	r26, r20
     e00:	b5 07       	cpc	r27, r21
     e02:	40 f4       	brcc	.+16     	; 0xe14 <__fpcmp_parts_f+0xa8>
     e04:	11 23       	and	r17, r17
     e06:	19 f0       	breq	.+6      	; 0xe0e <__fpcmp_parts_f+0xa2>
     e08:	61 e0       	ldi	r22, 0x01	; 1
     e0a:	70 e0       	ldi	r23, 0x00	; 0
     e0c:	05 c0       	rjmp	.+10     	; 0xe18 <__fpcmp_parts_f+0xac>
     e0e:	6f ef       	ldi	r22, 0xFF	; 255
     e10:	7f ef       	ldi	r23, 0xFF	; 255
     e12:	02 c0       	rjmp	.+4      	; 0xe18 <__fpcmp_parts_f+0xac>
     e14:	60 e0       	ldi	r22, 0x00	; 0
     e16:	70 e0       	ldi	r23, 0x00	; 0
     e18:	cb 01       	movw	r24, r22
     e1a:	1f 91       	pop	r17
     e1c:	08 95       	ret

00000e1e <main>:
#include "Adc.h"
#include "Lm35.h"
#include "Uart.h"

int main()
{
     e1e:	df 93       	push	r29
     e20:	cf 93       	push	r28
     e22:	cd b7       	in	r28, 0x3d	; 61
     e24:	de b7       	in	r29, 0x3e	; 62
	USART_Init(9600);
     e26:	80 e8       	ldi	r24, 0x80	; 128
     e28:	95 e2       	ldi	r25, 0x25	; 37
     e2a:	0e 94 e7 10 	call	0x21ce	; 0x21ce <USART_Init>
	USART_TransmitStr("Hello Uart...");
     e2e:	80 e6       	ldi	r24, 0x60	; 96
     e30:	90 e0       	ldi	r25, 0x00	; 0
     e32:	0e 94 65 11 	call	0x22ca	; 0x22ca <USART_TransmitStr>
     e36:	ff cf       	rjmp	.-2      	; 0xe36 <main+0x18>

00000e38 <SSD_vidinit>:
#include "SSD.h"
#include "Dio.h"
#include <util/delay.h>

void SSD_vidinit(void)
{
     e38:	df 93       	push	r29
     e3a:	cf 93       	push	r28
     e3c:	cd b7       	in	r28, 0x3d	; 61
     e3e:	de b7       	in	r29, 0x3e	; 62
	Dio_vidconfigChanel(DIO_PORTB, DIO_PIN1, DIO_OUTPUT);
     e40:	81 e0       	ldi	r24, 0x01	; 1
     e42:	61 e0       	ldi	r22, 0x01	; 1
     e44:	41 e0       	ldi	r20, 0x01	; 1
     e46:	0e 94 e3 12 	call	0x25c6	; 0x25c6 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTB, DIO_PIN2, DIO_OUTPUT);
     e4a:	81 e0       	ldi	r24, 0x01	; 1
     e4c:	62 e0       	ldi	r22, 0x02	; 2
     e4e:	41 e0       	ldi	r20, 0x01	; 1
     e50:	0e 94 e3 12 	call	0x25c6	; 0x25c6 <Dio_vidconfigChanel>

	Dio_vidconfigChanel(DIO_PORTA, DIO_PIN4, DIO_OUTPUT);
     e54:	80 e0       	ldi	r24, 0x00	; 0
     e56:	64 e0       	ldi	r22, 0x04	; 4
     e58:	41 e0       	ldi	r20, 0x01	; 1
     e5a:	0e 94 e3 12 	call	0x25c6	; 0x25c6 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTA, DIO_PIN5, DIO_OUTPUT);
     e5e:	80 e0       	ldi	r24, 0x00	; 0
     e60:	65 e0       	ldi	r22, 0x05	; 5
     e62:	41 e0       	ldi	r20, 0x01	; 1
     e64:	0e 94 e3 12 	call	0x25c6	; 0x25c6 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTA, DIO_PIN6, DIO_OUTPUT);
     e68:	80 e0       	ldi	r24, 0x00	; 0
     e6a:	66 e0       	ldi	r22, 0x06	; 6
     e6c:	41 e0       	ldi	r20, 0x01	; 1
     e6e:	0e 94 e3 12 	call	0x25c6	; 0x25c6 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTA, DIO_PIN7, DIO_OUTPUT);
     e72:	80 e0       	ldi	r24, 0x00	; 0
     e74:	67 e0       	ldi	r22, 0x07	; 7
     e76:	41 e0       	ldi	r20, 0x01	; 1
     e78:	0e 94 e3 12 	call	0x25c6	; 0x25c6 <Dio_vidconfigChanel>
}
     e7c:	cf 91       	pop	r28
     e7e:	df 91       	pop	r29
     e80:	08 95       	ret

00000e82 <SSD_viddisplyNum>:

void SSD_viddisplyNum(u8 num)
{
     e82:	df 93       	push	r29
     e84:	cf 93       	push	r28
     e86:	cd b7       	in	r28, 0x3d	; 61
     e88:	de b7       	in	r29, 0x3e	; 62
     e8a:	e3 97       	sbiw	r28, 0x33	; 51
     e8c:	0f b6       	in	r0, 0x3f	; 63
     e8e:	f8 94       	cli
     e90:	de bf       	out	0x3e, r29	; 62
     e92:	0f be       	out	0x3f, r0	; 63
     e94:	cd bf       	out	0x3d, r28	; 61
     e96:	8b ab       	std	Y+51, r24	; 0x33
	u8 loc_secondDigit =  (num%10)<<4;
     e98:	8b a9       	ldd	r24, Y+51	; 0x33
     e9a:	9a e0       	ldi	r25, 0x0A	; 10
     e9c:	69 2f       	mov	r22, r25
     e9e:	0e 94 1e 17 	call	0x2e3c	; 0x2e3c <__udivmodqi4>
     ea2:	89 2f       	mov	r24, r25
     ea4:	82 95       	swap	r24
     ea6:	80 7f       	andi	r24, 0xF0	; 240
     ea8:	8a ab       	std	Y+50, r24	; 0x32
	u8 loc_firstDigit = (num/10)<<4;
     eaa:	8b a9       	ldd	r24, Y+51	; 0x33
     eac:	9a e0       	ldi	r25, 0x0A	; 10
     eae:	69 2f       	mov	r22, r25
     eb0:	0e 94 1e 17 	call	0x2e3c	; 0x2e3c <__udivmodqi4>
     eb4:	82 95       	swap	r24
     eb6:	80 7f       	andi	r24, 0xF0	; 240
     eb8:	89 ab       	std	Y+49, r24	; 0x31
	static boolean loc_once = TRUE;

	/* Enable SSD 1	-> EN1 = High	*/
	Dio_vidwriteChanel(DIO_PORTB, DIO_PIN2, DIO_HIGH);
     eba:	81 e0       	ldi	r24, 0x01	; 1
     ebc:	62 e0       	ldi	r22, 0x02	; 2
     ebe:	41 e0       	ldi	r20, 0x01	; 1
     ec0:	0e 94 c6 13 	call	0x278c	; 0x278c <Dio_vidwriteChanel>
	/* Disable SSD 2 -> EN2 =Low	*/
	Dio_vidwriteChanel(DIO_PORTB, DIO_PIN1, DIO_LOW);
     ec4:	81 e0       	ldi	r24, 0x01	; 1
     ec6:	61 e0       	ldi	r22, 0x01	; 1
     ec8:	40 e0       	ldi	r20, 0x00	; 0
     eca:	0e 94 c6 13 	call	0x278c	; 0x278c <Dio_vidwriteChanel>
	/* Write first digit */
	Dio_vidWriteChanelGroup(DIO_PORTA, loc_firstDigit, SSD_MASK);
     ece:	80 e0       	ldi	r24, 0x00	; 0
     ed0:	69 a9       	ldd	r22, Y+49	; 0x31
     ed2:	4f e0       	ldi	r20, 0x0F	; 15
     ed4:	0e 94 a9 14 	call	0x2952	; 0x2952 <Dio_vidWriteChanelGroup>
     ed8:	80 e0       	ldi	r24, 0x00	; 0
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	aa ef       	ldi	r26, 0xFA	; 250
     ede:	b3 e4       	ldi	r27, 0x43	; 67
     ee0:	8d a7       	std	Y+45, r24	; 0x2d
     ee2:	9e a7       	std	Y+46, r25	; 0x2e
     ee4:	af a7       	std	Y+47, r26	; 0x2f
     ee6:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     ee8:	6d a5       	ldd	r22, Y+45	; 0x2d
     eea:	7e a5       	ldd	r23, Y+46	; 0x2e
     eec:	8f a5       	ldd	r24, Y+47	; 0x2f
     eee:	98 a9       	ldd	r25, Y+48	; 0x30
     ef0:	2b ea       	ldi	r18, 0xAB	; 171
     ef2:	3a ea       	ldi	r19, 0xAA	; 170
     ef4:	4a ea       	ldi	r20, 0xAA	; 170
     ef6:	50 e4       	ldi	r21, 0x40	; 64
     ef8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     efc:	dc 01       	movw	r26, r24
     efe:	cb 01       	movw	r24, r22
     f00:	89 a7       	std	Y+41, r24	; 0x29
     f02:	9a a7       	std	Y+42, r25	; 0x2a
     f04:	ab a7       	std	Y+43, r26	; 0x2b
     f06:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
     f08:	69 a5       	ldd	r22, Y+41	; 0x29
     f0a:	7a a5       	ldd	r23, Y+42	; 0x2a
     f0c:	8b a5       	ldd	r24, Y+43	; 0x2b
     f0e:	9c a5       	ldd	r25, Y+44	; 0x2c
     f10:	20 e0       	ldi	r18, 0x00	; 0
     f12:	30 e0       	ldi	r19, 0x00	; 0
     f14:	40 e8       	ldi	r20, 0x80	; 128
     f16:	5f e3       	ldi	r21, 0x3F	; 63
     f18:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
     f1c:	88 23       	and	r24, r24
     f1e:	1c f4       	brge	.+6      	; 0xf26 <SSD_viddisplyNum+0xa4>
		__ticks = 1;
     f20:	81 e0       	ldi	r24, 0x01	; 1
     f22:	88 a7       	std	Y+40, r24	; 0x28
     f24:	91 c0       	rjmp	.+290    	; 0x1048 <SSD_viddisplyNum+0x1c6>
	else if (__tmp > 255)
     f26:	69 a5       	ldd	r22, Y+41	; 0x29
     f28:	7a a5       	ldd	r23, Y+42	; 0x2a
     f2a:	8b a5       	ldd	r24, Y+43	; 0x2b
     f2c:	9c a5       	ldd	r25, Y+44	; 0x2c
     f2e:	20 e0       	ldi	r18, 0x00	; 0
     f30:	30 e0       	ldi	r19, 0x00	; 0
     f32:	4f e7       	ldi	r20, 0x7F	; 127
     f34:	53 e4       	ldi	r21, 0x43	; 67
     f36:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
     f3a:	18 16       	cp	r1, r24
     f3c:	0c f0       	brlt	.+2      	; 0xf40 <SSD_viddisplyNum+0xbe>
     f3e:	7b c0       	rjmp	.+246    	; 0x1036 <SSD_viddisplyNum+0x1b4>
	{
		_delay_ms(__us / 1000.0);
     f40:	6d a5       	ldd	r22, Y+45	; 0x2d
     f42:	7e a5       	ldd	r23, Y+46	; 0x2e
     f44:	8f a5       	ldd	r24, Y+47	; 0x2f
     f46:	98 a9       	ldd	r25, Y+48	; 0x30
     f48:	20 e0       	ldi	r18, 0x00	; 0
     f4a:	30 e0       	ldi	r19, 0x00	; 0
     f4c:	4a e7       	ldi	r20, 0x7A	; 122
     f4e:	54 e4       	ldi	r21, 0x44	; 68
     f50:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
     f54:	dc 01       	movw	r26, r24
     f56:	cb 01       	movw	r24, r22
     f58:	8c a3       	std	Y+36, r24	; 0x24
     f5a:	9d a3       	std	Y+37, r25	; 0x25
     f5c:	ae a3       	std	Y+38, r26	; 0x26
     f5e:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f60:	6c a1       	ldd	r22, Y+36	; 0x24
     f62:	7d a1       	ldd	r23, Y+37	; 0x25
     f64:	8e a1       	ldd	r24, Y+38	; 0x26
     f66:	9f a1       	ldd	r25, Y+39	; 0x27
     f68:	20 e0       	ldi	r18, 0x00	; 0
     f6a:	30 e0       	ldi	r19, 0x00	; 0
     f6c:	4a e7       	ldi	r20, 0x7A	; 122
     f6e:	55 e4       	ldi	r21, 0x45	; 69
     f70:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f74:	dc 01       	movw	r26, r24
     f76:	cb 01       	movw	r24, r22
     f78:	88 a3       	std	Y+32, r24	; 0x20
     f7a:	99 a3       	std	Y+33, r25	; 0x21
     f7c:	aa a3       	std	Y+34, r26	; 0x22
     f7e:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
     f80:	68 a1       	ldd	r22, Y+32	; 0x20
     f82:	79 a1       	ldd	r23, Y+33	; 0x21
     f84:	8a a1       	ldd	r24, Y+34	; 0x22
     f86:	9b a1       	ldd	r25, Y+35	; 0x23
     f88:	20 e0       	ldi	r18, 0x00	; 0
     f8a:	30 e0       	ldi	r19, 0x00	; 0
     f8c:	40 e8       	ldi	r20, 0x80	; 128
     f8e:	5f e3       	ldi	r21, 0x3F	; 63
     f90:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
     f94:	88 23       	and	r24, r24
     f96:	2c f4       	brge	.+10     	; 0xfa2 <SSD_viddisplyNum+0x120>
		__ticks = 1;
     f98:	81 e0       	ldi	r24, 0x01	; 1
     f9a:	90 e0       	ldi	r25, 0x00	; 0
     f9c:	9f 8f       	std	Y+31, r25	; 0x1f
     f9e:	8e 8f       	std	Y+30, r24	; 0x1e
     fa0:	3f c0       	rjmp	.+126    	; 0x1020 <SSD_viddisplyNum+0x19e>
	else if (__tmp > 65535)
     fa2:	68 a1       	ldd	r22, Y+32	; 0x20
     fa4:	79 a1       	ldd	r23, Y+33	; 0x21
     fa6:	8a a1       	ldd	r24, Y+34	; 0x22
     fa8:	9b a1       	ldd	r25, Y+35	; 0x23
     faa:	20 e0       	ldi	r18, 0x00	; 0
     fac:	3f ef       	ldi	r19, 0xFF	; 255
     fae:	4f e7       	ldi	r20, 0x7F	; 127
     fb0:	57 e4       	ldi	r21, 0x47	; 71
     fb2:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
     fb6:	18 16       	cp	r1, r24
     fb8:	4c f5       	brge	.+82     	; 0x100c <SSD_viddisplyNum+0x18a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fba:	6c a1       	ldd	r22, Y+36	; 0x24
     fbc:	7d a1       	ldd	r23, Y+37	; 0x25
     fbe:	8e a1       	ldd	r24, Y+38	; 0x26
     fc0:	9f a1       	ldd	r25, Y+39	; 0x27
     fc2:	20 e0       	ldi	r18, 0x00	; 0
     fc4:	30 e0       	ldi	r19, 0x00	; 0
     fc6:	40 e2       	ldi	r20, 0x20	; 32
     fc8:	51 e4       	ldi	r21, 0x41	; 65
     fca:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     fce:	dc 01       	movw	r26, r24
     fd0:	cb 01       	movw	r24, r22
     fd2:	bc 01       	movw	r22, r24
     fd4:	cd 01       	movw	r24, r26
     fd6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     fda:	dc 01       	movw	r26, r24
     fdc:	cb 01       	movw	r24, r22
     fde:	9f 8f       	std	Y+31, r25	; 0x1f
     fe0:	8e 8f       	std	Y+30, r24	; 0x1e
     fe2:	0f c0       	rjmp	.+30     	; 0x1002 <SSD_viddisplyNum+0x180>
     fe4:	80 e9       	ldi	r24, 0x90	; 144
     fe6:	91 e0       	ldi	r25, 0x01	; 1
     fe8:	9d 8f       	std	Y+29, r25	; 0x1d
     fea:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     fec:	8c 8d       	ldd	r24, Y+28	; 0x1c
     fee:	9d 8d       	ldd	r25, Y+29	; 0x1d
     ff0:	01 97       	sbiw	r24, 0x01	; 1
     ff2:	f1 f7       	brne	.-4      	; 0xff0 <SSD_viddisplyNum+0x16e>
     ff4:	9d 8f       	std	Y+29, r25	; 0x1d
     ff6:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ff8:	8e 8d       	ldd	r24, Y+30	; 0x1e
     ffa:	9f 8d       	ldd	r25, Y+31	; 0x1f
     ffc:	01 97       	sbiw	r24, 0x01	; 1
     ffe:	9f 8f       	std	Y+31, r25	; 0x1f
    1000:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1002:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1004:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1006:	00 97       	sbiw	r24, 0x00	; 0
    1008:	69 f7       	brne	.-38     	; 0xfe4 <SSD_viddisplyNum+0x162>
    100a:	24 c0       	rjmp	.+72     	; 0x1054 <SSD_viddisplyNum+0x1d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    100c:	68 a1       	ldd	r22, Y+32	; 0x20
    100e:	79 a1       	ldd	r23, Y+33	; 0x21
    1010:	8a a1       	ldd	r24, Y+34	; 0x22
    1012:	9b a1       	ldd	r25, Y+35	; 0x23
    1014:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1018:	dc 01       	movw	r26, r24
    101a:	cb 01       	movw	r24, r22
    101c:	9f 8f       	std	Y+31, r25	; 0x1f
    101e:	8e 8f       	std	Y+30, r24	; 0x1e
    1020:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1022:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1024:	9b 8f       	std	Y+27, r25	; 0x1b
    1026:	8a 8f       	std	Y+26, r24	; 0x1a
    1028:	8a 8d       	ldd	r24, Y+26	; 0x1a
    102a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    102c:	01 97       	sbiw	r24, 0x01	; 1
    102e:	f1 f7       	brne	.-4      	; 0x102c <SSD_viddisplyNum+0x1aa>
    1030:	9b 8f       	std	Y+27, r25	; 0x1b
    1032:	8a 8f       	std	Y+26, r24	; 0x1a
    1034:	0f c0       	rjmp	.+30     	; 0x1054 <SSD_viddisplyNum+0x1d2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1036:	69 a5       	ldd	r22, Y+41	; 0x29
    1038:	7a a5       	ldd	r23, Y+42	; 0x2a
    103a:	8b a5       	ldd	r24, Y+43	; 0x2b
    103c:	9c a5       	ldd	r25, Y+44	; 0x2c
    103e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1042:	dc 01       	movw	r26, r24
    1044:	cb 01       	movw	r24, r22
    1046:	88 a7       	std	Y+40, r24	; 0x28
    1048:	88 a5       	ldd	r24, Y+40	; 0x28
    104a:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    104c:	89 8d       	ldd	r24, Y+25	; 0x19
    104e:	8a 95       	dec	r24
    1050:	f1 f7       	brne	.-4      	; 0x104e <SSD_viddisplyNum+0x1cc>
    1052:	89 8f       	std	Y+25, r24	; 0x19

	_delay_us(500);

	/* Disable SSD 1	-> EN1 = Low	*/
	Dio_vidwriteChanel(DIO_PORTB, DIO_PIN2, DIO_LOW);
    1054:	81 e0       	ldi	r24, 0x01	; 1
    1056:	62 e0       	ldi	r22, 0x02	; 2
    1058:	40 e0       	ldi	r20, 0x00	; 0
    105a:	0e 94 c6 13 	call	0x278c	; 0x278c <Dio_vidwriteChanel>
	/* Enable SSD 2 -> EN2 = High	*/
	Dio_vidwriteChanel(DIO_PORTB, DIO_PIN1, DIO_HIGH);
    105e:	81 e0       	ldi	r24, 0x01	; 1
    1060:	61 e0       	ldi	r22, 0x01	; 1
    1062:	41 e0       	ldi	r20, 0x01	; 1
    1064:	0e 94 c6 13 	call	0x278c	; 0x278c <Dio_vidwriteChanel>
	/* Write second digit */
	Dio_vidWriteChanelGroup(DIO_PORTA, loc_secondDigit, SSD_MASK);
    1068:	80 e0       	ldi	r24, 0x00	; 0
    106a:	6a a9       	ldd	r22, Y+50	; 0x32
    106c:	4f e0       	ldi	r20, 0x0F	; 15
    106e:	0e 94 a9 14 	call	0x2952	; 0x2952 <Dio_vidWriteChanelGroup>
    1072:	80 e0       	ldi	r24, 0x00	; 0
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	aa ef       	ldi	r26, 0xFA	; 250
    1078:	b3 e4       	ldi	r27, 0x43	; 67
    107a:	8d 8b       	std	Y+21, r24	; 0x15
    107c:	9e 8b       	std	Y+22, r25	; 0x16
    107e:	af 8b       	std	Y+23, r26	; 0x17
    1080:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1082:	6d 89       	ldd	r22, Y+21	; 0x15
    1084:	7e 89       	ldd	r23, Y+22	; 0x16
    1086:	8f 89       	ldd	r24, Y+23	; 0x17
    1088:	98 8d       	ldd	r25, Y+24	; 0x18
    108a:	2b ea       	ldi	r18, 0xAB	; 171
    108c:	3a ea       	ldi	r19, 0xAA	; 170
    108e:	4a ea       	ldi	r20, 0xAA	; 170
    1090:	50 e4       	ldi	r21, 0x40	; 64
    1092:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1096:	dc 01       	movw	r26, r24
    1098:	cb 01       	movw	r24, r22
    109a:	89 8b       	std	Y+17, r24	; 0x11
    109c:	9a 8b       	std	Y+18, r25	; 0x12
    109e:	ab 8b       	std	Y+19, r26	; 0x13
    10a0:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    10a2:	69 89       	ldd	r22, Y+17	; 0x11
    10a4:	7a 89       	ldd	r23, Y+18	; 0x12
    10a6:	8b 89       	ldd	r24, Y+19	; 0x13
    10a8:	9c 89       	ldd	r25, Y+20	; 0x14
    10aa:	20 e0       	ldi	r18, 0x00	; 0
    10ac:	30 e0       	ldi	r19, 0x00	; 0
    10ae:	40 e8       	ldi	r20, 0x80	; 128
    10b0:	5f e3       	ldi	r21, 0x3F	; 63
    10b2:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    10b6:	88 23       	and	r24, r24
    10b8:	1c f4       	brge	.+6      	; 0x10c0 <SSD_viddisplyNum+0x23e>
		__ticks = 1;
    10ba:	81 e0       	ldi	r24, 0x01	; 1
    10bc:	88 8b       	std	Y+16, r24	; 0x10
    10be:	91 c0       	rjmp	.+290    	; 0x11e2 <SSD_viddisplyNum+0x360>
	else if (__tmp > 255)
    10c0:	69 89       	ldd	r22, Y+17	; 0x11
    10c2:	7a 89       	ldd	r23, Y+18	; 0x12
    10c4:	8b 89       	ldd	r24, Y+19	; 0x13
    10c6:	9c 89       	ldd	r25, Y+20	; 0x14
    10c8:	20 e0       	ldi	r18, 0x00	; 0
    10ca:	30 e0       	ldi	r19, 0x00	; 0
    10cc:	4f e7       	ldi	r20, 0x7F	; 127
    10ce:	53 e4       	ldi	r21, 0x43	; 67
    10d0:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    10d4:	18 16       	cp	r1, r24
    10d6:	0c f0       	brlt	.+2      	; 0x10da <SSD_viddisplyNum+0x258>
    10d8:	7b c0       	rjmp	.+246    	; 0x11d0 <SSD_viddisplyNum+0x34e>
	{
		_delay_ms(__us / 1000.0);
    10da:	6d 89       	ldd	r22, Y+21	; 0x15
    10dc:	7e 89       	ldd	r23, Y+22	; 0x16
    10de:	8f 89       	ldd	r24, Y+23	; 0x17
    10e0:	98 8d       	ldd	r25, Y+24	; 0x18
    10e2:	20 e0       	ldi	r18, 0x00	; 0
    10e4:	30 e0       	ldi	r19, 0x00	; 0
    10e6:	4a e7       	ldi	r20, 0x7A	; 122
    10e8:	54 e4       	ldi	r21, 0x44	; 68
    10ea:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    10ee:	dc 01       	movw	r26, r24
    10f0:	cb 01       	movw	r24, r22
    10f2:	8c 87       	std	Y+12, r24	; 0x0c
    10f4:	9d 87       	std	Y+13, r25	; 0x0d
    10f6:	ae 87       	std	Y+14, r26	; 0x0e
    10f8:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10fa:	6c 85       	ldd	r22, Y+12	; 0x0c
    10fc:	7d 85       	ldd	r23, Y+13	; 0x0d
    10fe:	8e 85       	ldd	r24, Y+14	; 0x0e
    1100:	9f 85       	ldd	r25, Y+15	; 0x0f
    1102:	20 e0       	ldi	r18, 0x00	; 0
    1104:	30 e0       	ldi	r19, 0x00	; 0
    1106:	4a e7       	ldi	r20, 0x7A	; 122
    1108:	55 e4       	ldi	r21, 0x45	; 69
    110a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    110e:	dc 01       	movw	r26, r24
    1110:	cb 01       	movw	r24, r22
    1112:	88 87       	std	Y+8, r24	; 0x08
    1114:	99 87       	std	Y+9, r25	; 0x09
    1116:	aa 87       	std	Y+10, r26	; 0x0a
    1118:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    111a:	68 85       	ldd	r22, Y+8	; 0x08
    111c:	79 85       	ldd	r23, Y+9	; 0x09
    111e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1120:	9b 85       	ldd	r25, Y+11	; 0x0b
    1122:	20 e0       	ldi	r18, 0x00	; 0
    1124:	30 e0       	ldi	r19, 0x00	; 0
    1126:	40 e8       	ldi	r20, 0x80	; 128
    1128:	5f e3       	ldi	r21, 0x3F	; 63
    112a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    112e:	88 23       	and	r24, r24
    1130:	2c f4       	brge	.+10     	; 0x113c <SSD_viddisplyNum+0x2ba>
		__ticks = 1;
    1132:	81 e0       	ldi	r24, 0x01	; 1
    1134:	90 e0       	ldi	r25, 0x00	; 0
    1136:	9f 83       	std	Y+7, r25	; 0x07
    1138:	8e 83       	std	Y+6, r24	; 0x06
    113a:	3f c0       	rjmp	.+126    	; 0x11ba <SSD_viddisplyNum+0x338>
	else if (__tmp > 65535)
    113c:	68 85       	ldd	r22, Y+8	; 0x08
    113e:	79 85       	ldd	r23, Y+9	; 0x09
    1140:	8a 85       	ldd	r24, Y+10	; 0x0a
    1142:	9b 85       	ldd	r25, Y+11	; 0x0b
    1144:	20 e0       	ldi	r18, 0x00	; 0
    1146:	3f ef       	ldi	r19, 0xFF	; 255
    1148:	4f e7       	ldi	r20, 0x7F	; 127
    114a:	57 e4       	ldi	r21, 0x47	; 71
    114c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1150:	18 16       	cp	r1, r24
    1152:	4c f5       	brge	.+82     	; 0x11a6 <SSD_viddisplyNum+0x324>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1154:	6c 85       	ldd	r22, Y+12	; 0x0c
    1156:	7d 85       	ldd	r23, Y+13	; 0x0d
    1158:	8e 85       	ldd	r24, Y+14	; 0x0e
    115a:	9f 85       	ldd	r25, Y+15	; 0x0f
    115c:	20 e0       	ldi	r18, 0x00	; 0
    115e:	30 e0       	ldi	r19, 0x00	; 0
    1160:	40 e2       	ldi	r20, 0x20	; 32
    1162:	51 e4       	ldi	r21, 0x41	; 65
    1164:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1168:	dc 01       	movw	r26, r24
    116a:	cb 01       	movw	r24, r22
    116c:	bc 01       	movw	r22, r24
    116e:	cd 01       	movw	r24, r26
    1170:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1174:	dc 01       	movw	r26, r24
    1176:	cb 01       	movw	r24, r22
    1178:	9f 83       	std	Y+7, r25	; 0x07
    117a:	8e 83       	std	Y+6, r24	; 0x06
    117c:	0f c0       	rjmp	.+30     	; 0x119c <SSD_viddisplyNum+0x31a>
    117e:	80 e9       	ldi	r24, 0x90	; 144
    1180:	91 e0       	ldi	r25, 0x01	; 1
    1182:	9d 83       	std	Y+5, r25	; 0x05
    1184:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1186:	8c 81       	ldd	r24, Y+4	; 0x04
    1188:	9d 81       	ldd	r25, Y+5	; 0x05
    118a:	01 97       	sbiw	r24, 0x01	; 1
    118c:	f1 f7       	brne	.-4      	; 0x118a <SSD_viddisplyNum+0x308>
    118e:	9d 83       	std	Y+5, r25	; 0x05
    1190:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1192:	8e 81       	ldd	r24, Y+6	; 0x06
    1194:	9f 81       	ldd	r25, Y+7	; 0x07
    1196:	01 97       	sbiw	r24, 0x01	; 1
    1198:	9f 83       	std	Y+7, r25	; 0x07
    119a:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    119c:	8e 81       	ldd	r24, Y+6	; 0x06
    119e:	9f 81       	ldd	r25, Y+7	; 0x07
    11a0:	00 97       	sbiw	r24, 0x00	; 0
    11a2:	69 f7       	brne	.-38     	; 0x117e <SSD_viddisplyNum+0x2fc>
    11a4:	24 c0       	rjmp	.+72     	; 0x11ee <SSD_viddisplyNum+0x36c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11a6:	68 85       	ldd	r22, Y+8	; 0x08
    11a8:	79 85       	ldd	r23, Y+9	; 0x09
    11aa:	8a 85       	ldd	r24, Y+10	; 0x0a
    11ac:	9b 85       	ldd	r25, Y+11	; 0x0b
    11ae:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    11b2:	dc 01       	movw	r26, r24
    11b4:	cb 01       	movw	r24, r22
    11b6:	9f 83       	std	Y+7, r25	; 0x07
    11b8:	8e 83       	std	Y+6, r24	; 0x06
    11ba:	8e 81       	ldd	r24, Y+6	; 0x06
    11bc:	9f 81       	ldd	r25, Y+7	; 0x07
    11be:	9b 83       	std	Y+3, r25	; 0x03
    11c0:	8a 83       	std	Y+2, r24	; 0x02
    11c2:	8a 81       	ldd	r24, Y+2	; 0x02
    11c4:	9b 81       	ldd	r25, Y+3	; 0x03
    11c6:	01 97       	sbiw	r24, 0x01	; 1
    11c8:	f1 f7       	brne	.-4      	; 0x11c6 <SSD_viddisplyNum+0x344>
    11ca:	9b 83       	std	Y+3, r25	; 0x03
    11cc:	8a 83       	std	Y+2, r24	; 0x02
    11ce:	0f c0       	rjmp	.+30     	; 0x11ee <SSD_viddisplyNum+0x36c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    11d0:	69 89       	ldd	r22, Y+17	; 0x11
    11d2:	7a 89       	ldd	r23, Y+18	; 0x12
    11d4:	8b 89       	ldd	r24, Y+19	; 0x13
    11d6:	9c 89       	ldd	r25, Y+20	; 0x14
    11d8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    11dc:	dc 01       	movw	r26, r24
    11de:	cb 01       	movw	r24, r22
    11e0:	88 8b       	std	Y+16, r24	; 0x10
    11e2:	88 89       	ldd	r24, Y+16	; 0x10
    11e4:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    11e6:	89 81       	ldd	r24, Y+1	; 0x01
    11e8:	8a 95       	dec	r24
    11ea:	f1 f7       	brne	.-4      	; 0x11e8 <SSD_viddisplyNum+0x366>
    11ec:	89 83       	std	Y+1, r24	; 0x01


	_delay_us(500);
}
    11ee:	e3 96       	adiw	r28, 0x33	; 51
    11f0:	0f b6       	in	r0, 0x3f	; 63
    11f2:	f8 94       	cli
    11f4:	de bf       	out	0x3e, r29	; 62
    11f6:	0f be       	out	0x3f, r0	; 63
    11f8:	cd bf       	out	0x3d, r28	; 61
    11fa:	cf 91       	pop	r28
    11fc:	df 91       	pop	r29
    11fe:	08 95       	ret

00001200 <SSD_viddelayWithDisplay_ms>:

void SSD_viddelayWithDisplay_ms(u8 num,u32 delay)
{
    1200:	df 93       	push	r29
    1202:	cf 93       	push	r28
    1204:	cd b7       	in	r28, 0x3d	; 61
    1206:	de b7       	in	r29, 0x3e	; 62
    1208:	29 97       	sbiw	r28, 0x09	; 9
    120a:	0f b6       	in	r0, 0x3f	; 63
    120c:	f8 94       	cli
    120e:	de bf       	out	0x3e, r29	; 62
    1210:	0f be       	out	0x3f, r0	; 63
    1212:	cd bf       	out	0x3d, r28	; 61
    1214:	8d 83       	std	Y+5, r24	; 0x05
    1216:	4e 83       	std	Y+6, r20	; 0x06
    1218:	5f 83       	std	Y+7, r21	; 0x07
    121a:	68 87       	std	Y+8, r22	; 0x08
    121c:	79 87       	std	Y+9, r23	; 0x09
	u32 loc_iter =0;
    121e:	19 82       	std	Y+1, r1	; 0x01
    1220:	1a 82       	std	Y+2, r1	; 0x02
    1222:	1b 82       	std	Y+3, r1	; 0x03
    1224:	1c 82       	std	Y+4, r1	; 0x04

	for(loc_iter=0; loc_iter<delay; loc_iter++)
    1226:	19 82       	std	Y+1, r1	; 0x01
    1228:	1a 82       	std	Y+2, r1	; 0x02
    122a:	1b 82       	std	Y+3, r1	; 0x03
    122c:	1c 82       	std	Y+4, r1	; 0x04
    122e:	0e c0       	rjmp	.+28     	; 0x124c <SSD_viddelayWithDisplay_ms+0x4c>
	{
		SSD_viddisplyNum(num);
    1230:	8d 81       	ldd	r24, Y+5	; 0x05
    1232:	0e 94 41 07 	call	0xe82	; 0xe82 <SSD_viddisplyNum>

void SSD_viddelayWithDisplay_ms(u8 num,u32 delay)
{
	u32 loc_iter =0;

	for(loc_iter=0; loc_iter<delay; loc_iter++)
    1236:	89 81       	ldd	r24, Y+1	; 0x01
    1238:	9a 81       	ldd	r25, Y+2	; 0x02
    123a:	ab 81       	ldd	r26, Y+3	; 0x03
    123c:	bc 81       	ldd	r27, Y+4	; 0x04
    123e:	01 96       	adiw	r24, 0x01	; 1
    1240:	a1 1d       	adc	r26, r1
    1242:	b1 1d       	adc	r27, r1
    1244:	89 83       	std	Y+1, r24	; 0x01
    1246:	9a 83       	std	Y+2, r25	; 0x02
    1248:	ab 83       	std	Y+3, r26	; 0x03
    124a:	bc 83       	std	Y+4, r27	; 0x04
    124c:	29 81       	ldd	r18, Y+1	; 0x01
    124e:	3a 81       	ldd	r19, Y+2	; 0x02
    1250:	4b 81       	ldd	r20, Y+3	; 0x03
    1252:	5c 81       	ldd	r21, Y+4	; 0x04
    1254:	8e 81       	ldd	r24, Y+6	; 0x06
    1256:	9f 81       	ldd	r25, Y+7	; 0x07
    1258:	a8 85       	ldd	r26, Y+8	; 0x08
    125a:	b9 85       	ldd	r27, Y+9	; 0x09
    125c:	28 17       	cp	r18, r24
    125e:	39 07       	cpc	r19, r25
    1260:	4a 07       	cpc	r20, r26
    1262:	5b 07       	cpc	r21, r27
    1264:	28 f3       	brcs	.-54     	; 0x1230 <SSD_viddelayWithDisplay_ms+0x30>
	{
		SSD_viddisplyNum(num);
	}
}
    1266:	29 96       	adiw	r28, 0x09	; 9
    1268:	0f b6       	in	r0, 0x3f	; 63
    126a:	f8 94       	cli
    126c:	de bf       	out	0x3e, r29	; 62
    126e:	0f be       	out	0x3f, r0	; 63
    1270:	cd bf       	out	0x3d, r28	; 61
    1272:	cf 91       	pop	r28
    1274:	df 91       	pop	r29
    1276:	08 95       	ret

00001278 <Led_vidinit>:

#include "Dio.h"
#include "Led.h"

void Led_vidinit(void)
{
    1278:	df 93       	push	r29
    127a:	cf 93       	push	r28
    127c:	cd b7       	in	r28, 0x3d	; 61
    127e:	de b7       	in	r29, 0x3e	; 62
	Dio_vidconfigChanel(DIO_PORTC, DIO_PIN2,DIO_OUTPUT);
    1280:	82 e0       	ldi	r24, 0x02	; 2
    1282:	62 e0       	ldi	r22, 0x02	; 2
    1284:	41 e0       	ldi	r20, 0x01	; 1
    1286:	0e 94 e3 12 	call	0x25c6	; 0x25c6 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTC, DIO_PIN7,DIO_OUTPUT);
    128a:	82 e0       	ldi	r24, 0x02	; 2
    128c:	67 e0       	ldi	r22, 0x07	; 7
    128e:	41 e0       	ldi	r20, 0x01	; 1
    1290:	0e 94 e3 12 	call	0x25c6	; 0x25c6 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTD, DIO_PIN3,DIO_OUTPUT);
    1294:	83 e0       	ldi	r24, 0x03	; 3
    1296:	63 e0       	ldi	r22, 0x03	; 3
    1298:	41 e0       	ldi	r20, 0x01	; 1
    129a:	0e 94 e3 12 	call	0x25c6	; 0x25c6 <Dio_vidconfigChanel>
}
    129e:	cf 91       	pop	r28
    12a0:	df 91       	pop	r29
    12a2:	08 95       	ret

000012a4 <Led_vidledOn>:

void Led_vidledOn(led_ledId_t ledId)
{
    12a4:	df 93       	push	r29
    12a6:	cf 93       	push	r28
    12a8:	00 d0       	rcall	.+0      	; 0x12aa <Led_vidledOn+0x6>
    12aa:	0f 92       	push	r0
    12ac:	cd b7       	in	r28, 0x3d	; 61
    12ae:	de b7       	in	r29, 0x3e	; 62
    12b0:	89 83       	std	Y+1, r24	; 0x01
	switch (ledId)
    12b2:	89 81       	ldd	r24, Y+1	; 0x01
    12b4:	28 2f       	mov	r18, r24
    12b6:	30 e0       	ldi	r19, 0x00	; 0
    12b8:	3b 83       	std	Y+3, r19	; 0x03
    12ba:	2a 83       	std	Y+2, r18	; 0x02
    12bc:	8a 81       	ldd	r24, Y+2	; 0x02
    12be:	9b 81       	ldd	r25, Y+3	; 0x03
    12c0:	81 30       	cpi	r24, 0x01	; 1
    12c2:	91 05       	cpc	r25, r1
    12c4:	79 f0       	breq	.+30     	; 0x12e4 <Led_vidledOn+0x40>
    12c6:	2a 81       	ldd	r18, Y+2	; 0x02
    12c8:	3b 81       	ldd	r19, Y+3	; 0x03
    12ca:	22 30       	cpi	r18, 0x02	; 2
    12cc:	31 05       	cpc	r19, r1
    12ce:	81 f0       	breq	.+32     	; 0x12f0 <Led_vidledOn+0x4c>
    12d0:	8a 81       	ldd	r24, Y+2	; 0x02
    12d2:	9b 81       	ldd	r25, Y+3	; 0x03
    12d4:	00 97       	sbiw	r24, 0x00	; 0
    12d6:	89 f4       	brne	.+34     	; 0x12fa <Led_vidledOn+0x56>
	{
	case LED0:
		Dio_vidwriteChanel(DIO_PORTC, DIO_PIN2, DIO_HIGH);
    12d8:	82 e0       	ldi	r24, 0x02	; 2
    12da:	62 e0       	ldi	r22, 0x02	; 2
    12dc:	41 e0       	ldi	r20, 0x01	; 1
    12de:	0e 94 c6 13 	call	0x278c	; 0x278c <Dio_vidwriteChanel>
    12e2:	0b c0       	rjmp	.+22     	; 0x12fa <Led_vidledOn+0x56>
		break;

	case LED1:
		Dio_vidwriteChanel(DIO_PORTC, DIO_PIN7, DIO_HIGH);
    12e4:	82 e0       	ldi	r24, 0x02	; 2
    12e6:	67 e0       	ldi	r22, 0x07	; 7
    12e8:	41 e0       	ldi	r20, 0x01	; 1
    12ea:	0e 94 c6 13 	call	0x278c	; 0x278c <Dio_vidwriteChanel>
    12ee:	05 c0       	rjmp	.+10     	; 0x12fa <Led_vidledOn+0x56>
		break;

	case LED2:
		Dio_vidwriteChanel(DIO_PORTD, DIO_PIN3, DIO_HIGH);
    12f0:	83 e0       	ldi	r24, 0x03	; 3
    12f2:	63 e0       	ldi	r22, 0x03	; 3
    12f4:	41 e0       	ldi	r20, 0x01	; 1
    12f6:	0e 94 c6 13 	call	0x278c	; 0x278c <Dio_vidwriteChanel>
		break;
	}
}
    12fa:	0f 90       	pop	r0
    12fc:	0f 90       	pop	r0
    12fe:	0f 90       	pop	r0
    1300:	cf 91       	pop	r28
    1302:	df 91       	pop	r29
    1304:	08 95       	ret

00001306 <Led_vidledOff>:

void Led_vidledOff(led_ledId_t ledId)
{
    1306:	df 93       	push	r29
    1308:	cf 93       	push	r28
    130a:	00 d0       	rcall	.+0      	; 0x130c <Led_vidledOff+0x6>
    130c:	0f 92       	push	r0
    130e:	cd b7       	in	r28, 0x3d	; 61
    1310:	de b7       	in	r29, 0x3e	; 62
    1312:	89 83       	std	Y+1, r24	; 0x01
	switch (ledId)
    1314:	89 81       	ldd	r24, Y+1	; 0x01
    1316:	28 2f       	mov	r18, r24
    1318:	30 e0       	ldi	r19, 0x00	; 0
    131a:	3b 83       	std	Y+3, r19	; 0x03
    131c:	2a 83       	std	Y+2, r18	; 0x02
    131e:	8a 81       	ldd	r24, Y+2	; 0x02
    1320:	9b 81       	ldd	r25, Y+3	; 0x03
    1322:	81 30       	cpi	r24, 0x01	; 1
    1324:	91 05       	cpc	r25, r1
    1326:	79 f0       	breq	.+30     	; 0x1346 <Led_vidledOff+0x40>
    1328:	2a 81       	ldd	r18, Y+2	; 0x02
    132a:	3b 81       	ldd	r19, Y+3	; 0x03
    132c:	22 30       	cpi	r18, 0x02	; 2
    132e:	31 05       	cpc	r19, r1
    1330:	81 f0       	breq	.+32     	; 0x1352 <Led_vidledOff+0x4c>
    1332:	8a 81       	ldd	r24, Y+2	; 0x02
    1334:	9b 81       	ldd	r25, Y+3	; 0x03
    1336:	00 97       	sbiw	r24, 0x00	; 0
    1338:	89 f4       	brne	.+34     	; 0x135c <Led_vidledOff+0x56>
	{
	case LED0:
		Dio_vidwriteChanel(DIO_PORTC, DIO_PIN2, DIO_LOW);
    133a:	82 e0       	ldi	r24, 0x02	; 2
    133c:	62 e0       	ldi	r22, 0x02	; 2
    133e:	40 e0       	ldi	r20, 0x00	; 0
    1340:	0e 94 c6 13 	call	0x278c	; 0x278c <Dio_vidwriteChanel>
    1344:	0b c0       	rjmp	.+22     	; 0x135c <Led_vidledOff+0x56>
		break;

	case LED1:
		Dio_vidwriteChanel(DIO_PORTC, DIO_PIN7, DIO_LOW);
    1346:	82 e0       	ldi	r24, 0x02	; 2
    1348:	67 e0       	ldi	r22, 0x07	; 7
    134a:	40 e0       	ldi	r20, 0x00	; 0
    134c:	0e 94 c6 13 	call	0x278c	; 0x278c <Dio_vidwriteChanel>
    1350:	05 c0       	rjmp	.+10     	; 0x135c <Led_vidledOff+0x56>
		break;

	case LED2:
		Dio_vidwriteChanel(DIO_PORTD, DIO_PIN3, DIO_LOW);
    1352:	83 e0       	ldi	r24, 0x03	; 3
    1354:	63 e0       	ldi	r22, 0x03	; 3
    1356:	40 e0       	ldi	r20, 0x00	; 0
    1358:	0e 94 c6 13 	call	0x278c	; 0x278c <Dio_vidwriteChanel>
		break;
	}
}
    135c:	0f 90       	pop	r0
    135e:	0f 90       	pop	r0
    1360:	0f 90       	pop	r0
    1362:	cf 91       	pop	r28
    1364:	df 91       	pop	r29
    1366:	08 95       	ret

00001368 <Led_vidledToggle>:
void Led_vidledToggle(led_ledId_t ledId)
{
    1368:	df 93       	push	r29
    136a:	cf 93       	push	r28
    136c:	00 d0       	rcall	.+0      	; 0x136e <Led_vidledToggle+0x6>
    136e:	0f 92       	push	r0
    1370:	cd b7       	in	r28, 0x3d	; 61
    1372:	de b7       	in	r29, 0x3e	; 62
    1374:	89 83       	std	Y+1, r24	; 0x01
	switch (ledId)
    1376:	89 81       	ldd	r24, Y+1	; 0x01
    1378:	28 2f       	mov	r18, r24
    137a:	30 e0       	ldi	r19, 0x00	; 0
    137c:	3b 83       	std	Y+3, r19	; 0x03
    137e:	2a 83       	std	Y+2, r18	; 0x02
    1380:	8a 81       	ldd	r24, Y+2	; 0x02
    1382:	9b 81       	ldd	r25, Y+3	; 0x03
    1384:	81 30       	cpi	r24, 0x01	; 1
    1386:	91 05       	cpc	r25, r1
    1388:	71 f0       	breq	.+28     	; 0x13a6 <Led_vidledToggle+0x3e>
    138a:	2a 81       	ldd	r18, Y+2	; 0x02
    138c:	3b 81       	ldd	r19, Y+3	; 0x03
    138e:	22 30       	cpi	r18, 0x02	; 2
    1390:	31 05       	cpc	r19, r1
    1392:	71 f0       	breq	.+28     	; 0x13b0 <Led_vidledToggle+0x48>
    1394:	8a 81       	ldd	r24, Y+2	; 0x02
    1396:	9b 81       	ldd	r25, Y+3	; 0x03
    1398:	00 97       	sbiw	r24, 0x00	; 0
    139a:	71 f4       	brne	.+28     	; 0x13b8 <Led_vidledToggle+0x50>
	{
	case LED0:
		Dio_vidflipChanel(DIO_PORTC, DIO_PIN2);
    139c:	82 e0       	ldi	r24, 0x02	; 2
    139e:	62 e0       	ldi	r22, 0x02	; 2
    13a0:	0e 94 98 15 	call	0x2b30	; 0x2b30 <Dio_vidflipChanel>
    13a4:	09 c0       	rjmp	.+18     	; 0x13b8 <Led_vidledToggle+0x50>
		break;

	case LED1:
		Dio_vidflipChanel(DIO_PORTC, DIO_PIN7);
    13a6:	82 e0       	ldi	r24, 0x02	; 2
    13a8:	67 e0       	ldi	r22, 0x07	; 7
    13aa:	0e 94 98 15 	call	0x2b30	; 0x2b30 <Dio_vidflipChanel>
    13ae:	04 c0       	rjmp	.+8      	; 0x13b8 <Led_vidledToggle+0x50>
		break;

	case LED2:
		Dio_vidflipChanel(DIO_PORTD, DIO_PIN3);
    13b0:	83 e0       	ldi	r24, 0x03	; 3
    13b2:	63 e0       	ldi	r22, 0x03	; 3
    13b4:	0e 94 98 15 	call	0x2b30	; 0x2b30 <Dio_vidflipChanel>
		break;
	}
}
    13b8:	0f 90       	pop	r0
    13ba:	0f 90       	pop	r0
    13bc:	0f 90       	pop	r0
    13be:	cf 91       	pop	r28
    13c0:	df 91       	pop	r29
    13c2:	08 95       	ret

000013c4 <Lm35_vidInit>:

#include "Std_Types.h"
#include "Adc.h"

void Lm35_vidInit(void)
{
    13c4:	df 93       	push	r29
    13c6:	cf 93       	push	r28
    13c8:	cd b7       	in	r28, 0x3d	; 61
    13ca:	de b7       	in	r29, 0x3e	; 62
	Adc_vidInit();
    13cc:	0e 94 92 16 	call	0x2d24	; 0x2d24 <Adc_vidInit>
}
    13d0:	cf 91       	pop	r28
    13d2:	df 91       	pop	r29
    13d4:	08 95       	ret

000013d6 <Lm35_u8TempRead>:
u16 Lm35_u8TempRead(void)
{
    13d6:	df 93       	push	r29
    13d8:	cf 93       	push	r28
    13da:	00 d0       	rcall	.+0      	; 0x13dc <Lm35_u8TempRead+0x6>
    13dc:	00 d0       	rcall	.+0      	; 0x13de <Lm35_u8TempRead+0x8>
    13de:	00 d0       	rcall	.+0      	; 0x13e0 <Lm35_u8TempRead+0xa>
    13e0:	cd b7       	in	r28, 0x3d	; 61
    13e2:	de b7       	in	r29, 0x3e	; 62
	f64 loc_adcRead = 0;
    13e4:	80 e0       	ldi	r24, 0x00	; 0
    13e6:	90 e0       	ldi	r25, 0x00	; 0
    13e8:	a0 e0       	ldi	r26, 0x00	; 0
    13ea:	b0 e0       	ldi	r27, 0x00	; 0
    13ec:	8b 83       	std	Y+3, r24	; 0x03
    13ee:	9c 83       	std	Y+4, r25	; 0x04
    13f0:	ad 83       	std	Y+5, r26	; 0x05
    13f2:	be 83       	std	Y+6, r27	; 0x06
	u16 loc_temp = 0;
    13f4:	1a 82       	std	Y+2, r1	; 0x02
    13f6:	19 82       	std	Y+1, r1	; 0x01

	loc_adcRead = Adc_u16AdcRead(ADC_CHANNEL1);
    13f8:	81 e0       	ldi	r24, 0x01	; 1
    13fa:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <Adc_u16AdcRead>
    13fe:	dc 01       	movw	r26, r24
    1400:	cb 01       	movw	r24, r22
    1402:	8b 83       	std	Y+3, r24	; 0x03
    1404:	9c 83       	std	Y+4, r25	; 0x04
    1406:	ad 83       	std	Y+5, r26	; 0x05
    1408:	be 83       	std	Y+6, r27	; 0x06
	loc_temp = loc_adcRead/10;
    140a:	6b 81       	ldd	r22, Y+3	; 0x03
    140c:	7c 81       	ldd	r23, Y+4	; 0x04
    140e:	8d 81       	ldd	r24, Y+5	; 0x05
    1410:	9e 81       	ldd	r25, Y+6	; 0x06
    1412:	20 e0       	ldi	r18, 0x00	; 0
    1414:	30 e0       	ldi	r19, 0x00	; 0
    1416:	40 e2       	ldi	r20, 0x20	; 32
    1418:	51 e4       	ldi	r21, 0x41	; 65
    141a:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    141e:	dc 01       	movw	r26, r24
    1420:	cb 01       	movw	r24, r22
    1422:	bc 01       	movw	r22, r24
    1424:	cd 01       	movw	r24, r26
    1426:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    142a:	dc 01       	movw	r26, r24
    142c:	cb 01       	movw	r24, r22
    142e:	9a 83       	std	Y+2, r25	; 0x02
    1430:	89 83       	std	Y+1, r24	; 0x01

	return loc_temp;
    1432:	89 81       	ldd	r24, Y+1	; 0x01
    1434:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1436:	26 96       	adiw	r28, 0x06	; 6
    1438:	0f b6       	in	r0, 0x3f	; 63
    143a:	f8 94       	cli
    143c:	de bf       	out	0x3e, r29	; 62
    143e:	0f be       	out	0x3f, r0	; 63
    1440:	cd bf       	out	0x3d, r28	; 61
    1442:	cf 91       	pop	r28
    1444:	df 91       	pop	r29
    1446:	08 95       	ret

00001448 <Lcd_vidinit>:
#include "util/delay.h"
#include <stdio.h>


void Lcd_vidinit(void)
{
    1448:	df 93       	push	r29
    144a:	cf 93       	push	r28
    144c:	cd b7       	in	r28, 0x3d	; 61
    144e:	de b7       	in	r29, 0x3e	; 62
    1450:	e4 97       	sbiw	r28, 0x34	; 52
    1452:	0f b6       	in	r0, 0x3f	; 63
    1454:	f8 94       	cli
    1456:	de bf       	out	0x3e, r29	; 62
    1458:	0f be       	out	0x3f, r0	; 63
    145a:	cd bf       	out	0x3d, r28	; 61
	/*	configure control pins as output	*/
	Dio_vidconfigChanel(DIO_PORTB, DIO_PIN1, DIO_OUTPUT);
    145c:	81 e0       	ldi	r24, 0x01	; 1
    145e:	61 e0       	ldi	r22, 0x01	; 1
    1460:	41 e0       	ldi	r20, 0x01	; 1
    1462:	0e 94 e3 12 	call	0x25c6	; 0x25c6 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTB, DIO_PIN2, DIO_OUTPUT);
    1466:	81 e0       	ldi	r24, 0x01	; 1
    1468:	62 e0       	ldi	r22, 0x02	; 2
    146a:	41 e0       	ldi	r20, 0x01	; 1
    146c:	0e 94 e3 12 	call	0x25c6	; 0x25c6 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTB, DIO_PIN3, DIO_OUTPUT);
    1470:	81 e0       	ldi	r24, 0x01	; 1
    1472:	63 e0       	ldi	r22, 0x03	; 3
    1474:	41 e0       	ldi	r20, 0x01	; 1
    1476:	0e 94 e3 12 	call	0x25c6	; 0x25c6 <Dio_vidconfigChanel>

	/*	configure data pins as output	*/
	Dio_vidconfigChanel(DIO_PORTA, DIO_PIN4, DIO_OUTPUT);
    147a:	80 e0       	ldi	r24, 0x00	; 0
    147c:	64 e0       	ldi	r22, 0x04	; 4
    147e:	41 e0       	ldi	r20, 0x01	; 1
    1480:	0e 94 e3 12 	call	0x25c6	; 0x25c6 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTA, DIO_PIN5, DIO_OUTPUT);
    1484:	80 e0       	ldi	r24, 0x00	; 0
    1486:	65 e0       	ldi	r22, 0x05	; 5
    1488:	41 e0       	ldi	r20, 0x01	; 1
    148a:	0e 94 e3 12 	call	0x25c6	; 0x25c6 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTA, DIO_PIN6, DIO_OUTPUT);
    148e:	80 e0       	ldi	r24, 0x00	; 0
    1490:	66 e0       	ldi	r22, 0x06	; 6
    1492:	41 e0       	ldi	r20, 0x01	; 1
    1494:	0e 94 e3 12 	call	0x25c6	; 0x25c6 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTA, DIO_PIN7, DIO_OUTPUT);
    1498:	80 e0       	ldi	r24, 0x00	; 0
    149a:	67 e0       	ldi	r22, 0x07	; 7
    149c:	41 e0       	ldi	r20, 0x01	; 1
    149e:	0e 94 e3 12 	call	0x25c6	; 0x25c6 <Dio_vidconfigChanel>

	Dio_vidwriteChanel(DIO_PORTB, DIO_PIN2, DIO_LOW);
    14a2:	81 e0       	ldi	r24, 0x01	; 1
    14a4:	62 e0       	ldi	r22, 0x02	; 2
    14a6:	40 e0       	ldi	r20, 0x00	; 0
    14a8:	0e 94 c6 13 	call	0x278c	; 0x278c <Dio_vidwriteChanel>
    14ac:	80 e0       	ldi	r24, 0x00	; 0
    14ae:	90 e0       	ldi	r25, 0x00	; 0
    14b0:	a0 e7       	ldi	r26, 0x70	; 112
    14b2:	b1 e4       	ldi	r27, 0x41	; 65
    14b4:	89 ab       	std	Y+49, r24	; 0x31
    14b6:	9a ab       	std	Y+50, r25	; 0x32
    14b8:	ab ab       	std	Y+51, r26	; 0x33
    14ba:	bc ab       	std	Y+52, r27	; 0x34
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14bc:	69 a9       	ldd	r22, Y+49	; 0x31
    14be:	7a a9       	ldd	r23, Y+50	; 0x32
    14c0:	8b a9       	ldd	r24, Y+51	; 0x33
    14c2:	9c a9       	ldd	r25, Y+52	; 0x34
    14c4:	20 e0       	ldi	r18, 0x00	; 0
    14c6:	30 e0       	ldi	r19, 0x00	; 0
    14c8:	4a e7       	ldi	r20, 0x7A	; 122
    14ca:	55 e4       	ldi	r21, 0x45	; 69
    14cc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    14d0:	dc 01       	movw	r26, r24
    14d2:	cb 01       	movw	r24, r22
    14d4:	8d a7       	std	Y+45, r24	; 0x2d
    14d6:	9e a7       	std	Y+46, r25	; 0x2e
    14d8:	af a7       	std	Y+47, r26	; 0x2f
    14da:	b8 ab       	std	Y+48, r27	; 0x30
	if (__tmp < 1.0)
    14dc:	6d a5       	ldd	r22, Y+45	; 0x2d
    14de:	7e a5       	ldd	r23, Y+46	; 0x2e
    14e0:	8f a5       	ldd	r24, Y+47	; 0x2f
    14e2:	98 a9       	ldd	r25, Y+48	; 0x30
    14e4:	20 e0       	ldi	r18, 0x00	; 0
    14e6:	30 e0       	ldi	r19, 0x00	; 0
    14e8:	40 e8       	ldi	r20, 0x80	; 128
    14ea:	5f e3       	ldi	r21, 0x3F	; 63
    14ec:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    14f0:	88 23       	and	r24, r24
    14f2:	2c f4       	brge	.+10     	; 0x14fe <Lcd_vidinit+0xb6>
		__ticks = 1;
    14f4:	81 e0       	ldi	r24, 0x01	; 1
    14f6:	90 e0       	ldi	r25, 0x00	; 0
    14f8:	9c a7       	std	Y+44, r25	; 0x2c
    14fa:	8b a7       	std	Y+43, r24	; 0x2b
    14fc:	3f c0       	rjmp	.+126    	; 0x157c <Lcd_vidinit+0x134>
	else if (__tmp > 65535)
    14fe:	6d a5       	ldd	r22, Y+45	; 0x2d
    1500:	7e a5       	ldd	r23, Y+46	; 0x2e
    1502:	8f a5       	ldd	r24, Y+47	; 0x2f
    1504:	98 a9       	ldd	r25, Y+48	; 0x30
    1506:	20 e0       	ldi	r18, 0x00	; 0
    1508:	3f ef       	ldi	r19, 0xFF	; 255
    150a:	4f e7       	ldi	r20, 0x7F	; 127
    150c:	57 e4       	ldi	r21, 0x47	; 71
    150e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1512:	18 16       	cp	r1, r24
    1514:	4c f5       	brge	.+82     	; 0x1568 <Lcd_vidinit+0x120>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1516:	69 a9       	ldd	r22, Y+49	; 0x31
    1518:	7a a9       	ldd	r23, Y+50	; 0x32
    151a:	8b a9       	ldd	r24, Y+51	; 0x33
    151c:	9c a9       	ldd	r25, Y+52	; 0x34
    151e:	20 e0       	ldi	r18, 0x00	; 0
    1520:	30 e0       	ldi	r19, 0x00	; 0
    1522:	40 e2       	ldi	r20, 0x20	; 32
    1524:	51 e4       	ldi	r21, 0x41	; 65
    1526:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    152a:	dc 01       	movw	r26, r24
    152c:	cb 01       	movw	r24, r22
    152e:	bc 01       	movw	r22, r24
    1530:	cd 01       	movw	r24, r26
    1532:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1536:	dc 01       	movw	r26, r24
    1538:	cb 01       	movw	r24, r22
    153a:	9c a7       	std	Y+44, r25	; 0x2c
    153c:	8b a7       	std	Y+43, r24	; 0x2b
    153e:	0f c0       	rjmp	.+30     	; 0x155e <Lcd_vidinit+0x116>
    1540:	80 e9       	ldi	r24, 0x90	; 144
    1542:	91 e0       	ldi	r25, 0x01	; 1
    1544:	9a a7       	std	Y+42, r25	; 0x2a
    1546:	89 a7       	std	Y+41, r24	; 0x29
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1548:	89 a5       	ldd	r24, Y+41	; 0x29
    154a:	9a a5       	ldd	r25, Y+42	; 0x2a
    154c:	01 97       	sbiw	r24, 0x01	; 1
    154e:	f1 f7       	brne	.-4      	; 0x154c <Lcd_vidinit+0x104>
    1550:	9a a7       	std	Y+42, r25	; 0x2a
    1552:	89 a7       	std	Y+41, r24	; 0x29
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1554:	8b a5       	ldd	r24, Y+43	; 0x2b
    1556:	9c a5       	ldd	r25, Y+44	; 0x2c
    1558:	01 97       	sbiw	r24, 0x01	; 1
    155a:	9c a7       	std	Y+44, r25	; 0x2c
    155c:	8b a7       	std	Y+43, r24	; 0x2b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    155e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1560:	9c a5       	ldd	r25, Y+44	; 0x2c
    1562:	00 97       	sbiw	r24, 0x00	; 0
    1564:	69 f7       	brne	.-38     	; 0x1540 <Lcd_vidinit+0xf8>
    1566:	14 c0       	rjmp	.+40     	; 0x1590 <Lcd_vidinit+0x148>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1568:	6d a5       	ldd	r22, Y+45	; 0x2d
    156a:	7e a5       	ldd	r23, Y+46	; 0x2e
    156c:	8f a5       	ldd	r24, Y+47	; 0x2f
    156e:	98 a9       	ldd	r25, Y+48	; 0x30
    1570:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1574:	dc 01       	movw	r26, r24
    1576:	cb 01       	movw	r24, r22
    1578:	9c a7       	std	Y+44, r25	; 0x2c
    157a:	8b a7       	std	Y+43, r24	; 0x2b
    157c:	8b a5       	ldd	r24, Y+43	; 0x2b
    157e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1580:	98 a7       	std	Y+40, r25	; 0x28
    1582:	8f a3       	std	Y+39, r24	; 0x27
    1584:	8f a1       	ldd	r24, Y+39	; 0x27
    1586:	98 a5       	ldd	r25, Y+40	; 0x28
    1588:	01 97       	sbiw	r24, 0x01	; 1
    158a:	f1 f7       	brne	.-4      	; 0x1588 <Lcd_vidinit+0x140>
    158c:	98 a7       	std	Y+40, r25	; 0x28
    158e:	8f a3       	std	Y+39, r24	; 0x27

	_delay_ms(15);

	Lcd_vidCmd(0x03);
    1590:	83 e0       	ldi	r24, 0x03	; 3
    1592:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <Lcd_vidCmd>
    1596:	80 e0       	ldi	r24, 0x00	; 0
    1598:	90 e0       	ldi	r25, 0x00	; 0
    159a:	a0 ea       	ldi	r26, 0xA0	; 160
    159c:	b0 e4       	ldi	r27, 0x40	; 64
    159e:	8b a3       	std	Y+35, r24	; 0x23
    15a0:	9c a3       	std	Y+36, r25	; 0x24
    15a2:	ad a3       	std	Y+37, r26	; 0x25
    15a4:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15a6:	6b a1       	ldd	r22, Y+35	; 0x23
    15a8:	7c a1       	ldd	r23, Y+36	; 0x24
    15aa:	8d a1       	ldd	r24, Y+37	; 0x25
    15ac:	9e a1       	ldd	r25, Y+38	; 0x26
    15ae:	20 e0       	ldi	r18, 0x00	; 0
    15b0:	30 e0       	ldi	r19, 0x00	; 0
    15b2:	4a e7       	ldi	r20, 0x7A	; 122
    15b4:	55 e4       	ldi	r21, 0x45	; 69
    15b6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15ba:	dc 01       	movw	r26, r24
    15bc:	cb 01       	movw	r24, r22
    15be:	8f 8f       	std	Y+31, r24	; 0x1f
    15c0:	98 a3       	std	Y+32, r25	; 0x20
    15c2:	a9 a3       	std	Y+33, r26	; 0x21
    15c4:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    15c6:	6f 8d       	ldd	r22, Y+31	; 0x1f
    15c8:	78 a1       	ldd	r23, Y+32	; 0x20
    15ca:	89 a1       	ldd	r24, Y+33	; 0x21
    15cc:	9a a1       	ldd	r25, Y+34	; 0x22
    15ce:	20 e0       	ldi	r18, 0x00	; 0
    15d0:	30 e0       	ldi	r19, 0x00	; 0
    15d2:	40 e8       	ldi	r20, 0x80	; 128
    15d4:	5f e3       	ldi	r21, 0x3F	; 63
    15d6:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    15da:	88 23       	and	r24, r24
    15dc:	2c f4       	brge	.+10     	; 0x15e8 <Lcd_vidinit+0x1a0>
		__ticks = 1;
    15de:	81 e0       	ldi	r24, 0x01	; 1
    15e0:	90 e0       	ldi	r25, 0x00	; 0
    15e2:	9e 8f       	std	Y+30, r25	; 0x1e
    15e4:	8d 8f       	std	Y+29, r24	; 0x1d
    15e6:	3f c0       	rjmp	.+126    	; 0x1666 <Lcd_vidinit+0x21e>
	else if (__tmp > 65535)
    15e8:	6f 8d       	ldd	r22, Y+31	; 0x1f
    15ea:	78 a1       	ldd	r23, Y+32	; 0x20
    15ec:	89 a1       	ldd	r24, Y+33	; 0x21
    15ee:	9a a1       	ldd	r25, Y+34	; 0x22
    15f0:	20 e0       	ldi	r18, 0x00	; 0
    15f2:	3f ef       	ldi	r19, 0xFF	; 255
    15f4:	4f e7       	ldi	r20, 0x7F	; 127
    15f6:	57 e4       	ldi	r21, 0x47	; 71
    15f8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    15fc:	18 16       	cp	r1, r24
    15fe:	4c f5       	brge	.+82     	; 0x1652 <Lcd_vidinit+0x20a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1600:	6b a1       	ldd	r22, Y+35	; 0x23
    1602:	7c a1       	ldd	r23, Y+36	; 0x24
    1604:	8d a1       	ldd	r24, Y+37	; 0x25
    1606:	9e a1       	ldd	r25, Y+38	; 0x26
    1608:	20 e0       	ldi	r18, 0x00	; 0
    160a:	30 e0       	ldi	r19, 0x00	; 0
    160c:	40 e2       	ldi	r20, 0x20	; 32
    160e:	51 e4       	ldi	r21, 0x41	; 65
    1610:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1614:	dc 01       	movw	r26, r24
    1616:	cb 01       	movw	r24, r22
    1618:	bc 01       	movw	r22, r24
    161a:	cd 01       	movw	r24, r26
    161c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1620:	dc 01       	movw	r26, r24
    1622:	cb 01       	movw	r24, r22
    1624:	9e 8f       	std	Y+30, r25	; 0x1e
    1626:	8d 8f       	std	Y+29, r24	; 0x1d
    1628:	0f c0       	rjmp	.+30     	; 0x1648 <Lcd_vidinit+0x200>
    162a:	80 e9       	ldi	r24, 0x90	; 144
    162c:	91 e0       	ldi	r25, 0x01	; 1
    162e:	9c 8f       	std	Y+28, r25	; 0x1c
    1630:	8b 8f       	std	Y+27, r24	; 0x1b
    1632:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1634:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1636:	01 97       	sbiw	r24, 0x01	; 1
    1638:	f1 f7       	brne	.-4      	; 0x1636 <Lcd_vidinit+0x1ee>
    163a:	9c 8f       	std	Y+28, r25	; 0x1c
    163c:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    163e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1640:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1642:	01 97       	sbiw	r24, 0x01	; 1
    1644:	9e 8f       	std	Y+30, r25	; 0x1e
    1646:	8d 8f       	std	Y+29, r24	; 0x1d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1648:	8d 8d       	ldd	r24, Y+29	; 0x1d
    164a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    164c:	00 97       	sbiw	r24, 0x00	; 0
    164e:	69 f7       	brne	.-38     	; 0x162a <Lcd_vidinit+0x1e2>
    1650:	14 c0       	rjmp	.+40     	; 0x167a <Lcd_vidinit+0x232>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1652:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1654:	78 a1       	ldd	r23, Y+32	; 0x20
    1656:	89 a1       	ldd	r24, Y+33	; 0x21
    1658:	9a a1       	ldd	r25, Y+34	; 0x22
    165a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    165e:	dc 01       	movw	r26, r24
    1660:	cb 01       	movw	r24, r22
    1662:	9e 8f       	std	Y+30, r25	; 0x1e
    1664:	8d 8f       	std	Y+29, r24	; 0x1d
    1666:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1668:	9e 8d       	ldd	r25, Y+30	; 0x1e
    166a:	9a 8f       	std	Y+26, r25	; 0x1a
    166c:	89 8f       	std	Y+25, r24	; 0x19
    166e:	89 8d       	ldd	r24, Y+25	; 0x19
    1670:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1672:	01 97       	sbiw	r24, 0x01	; 1
    1674:	f1 f7       	brne	.-4      	; 0x1672 <Lcd_vidinit+0x22a>
    1676:	9a 8f       	std	Y+26, r25	; 0x1a
    1678:	89 8f       	std	Y+25, r24	; 0x19
	_delay_ms(5);
	Lcd_vidCmd(0x03);
    167a:	83 e0       	ldi	r24, 0x03	; 3
    167c:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <Lcd_vidCmd>
    1680:	80 e0       	ldi	r24, 0x00	; 0
    1682:	90 e0       	ldi	r25, 0x00	; 0
    1684:	a8 ec       	ldi	r26, 0xC8	; 200
    1686:	b2 e4       	ldi	r27, 0x42	; 66
    1688:	8d 8b       	std	Y+21, r24	; 0x15
    168a:	9e 8b       	std	Y+22, r25	; 0x16
    168c:	af 8b       	std	Y+23, r26	; 0x17
    168e:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1690:	6d 89       	ldd	r22, Y+21	; 0x15
    1692:	7e 89       	ldd	r23, Y+22	; 0x16
    1694:	8f 89       	ldd	r24, Y+23	; 0x17
    1696:	98 8d       	ldd	r25, Y+24	; 0x18
    1698:	2b ea       	ldi	r18, 0xAB	; 171
    169a:	3a ea       	ldi	r19, 0xAA	; 170
    169c:	4a ea       	ldi	r20, 0xAA	; 170
    169e:	50 e4       	ldi	r21, 0x40	; 64
    16a0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16a4:	dc 01       	movw	r26, r24
    16a6:	cb 01       	movw	r24, r22
    16a8:	89 8b       	std	Y+17, r24	; 0x11
    16aa:	9a 8b       	std	Y+18, r25	; 0x12
    16ac:	ab 8b       	std	Y+19, r26	; 0x13
    16ae:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    16b0:	69 89       	ldd	r22, Y+17	; 0x11
    16b2:	7a 89       	ldd	r23, Y+18	; 0x12
    16b4:	8b 89       	ldd	r24, Y+19	; 0x13
    16b6:	9c 89       	ldd	r25, Y+20	; 0x14
    16b8:	20 e0       	ldi	r18, 0x00	; 0
    16ba:	30 e0       	ldi	r19, 0x00	; 0
    16bc:	40 e8       	ldi	r20, 0x80	; 128
    16be:	5f e3       	ldi	r21, 0x3F	; 63
    16c0:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    16c4:	88 23       	and	r24, r24
    16c6:	1c f4       	brge	.+6      	; 0x16ce <Lcd_vidinit+0x286>
		__ticks = 1;
    16c8:	81 e0       	ldi	r24, 0x01	; 1
    16ca:	88 8b       	std	Y+16, r24	; 0x10
    16cc:	91 c0       	rjmp	.+290    	; 0x17f0 <Lcd_vidinit+0x3a8>
	else if (__tmp > 255)
    16ce:	69 89       	ldd	r22, Y+17	; 0x11
    16d0:	7a 89       	ldd	r23, Y+18	; 0x12
    16d2:	8b 89       	ldd	r24, Y+19	; 0x13
    16d4:	9c 89       	ldd	r25, Y+20	; 0x14
    16d6:	20 e0       	ldi	r18, 0x00	; 0
    16d8:	30 e0       	ldi	r19, 0x00	; 0
    16da:	4f e7       	ldi	r20, 0x7F	; 127
    16dc:	53 e4       	ldi	r21, 0x43	; 67
    16de:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    16e2:	18 16       	cp	r1, r24
    16e4:	0c f0       	brlt	.+2      	; 0x16e8 <Lcd_vidinit+0x2a0>
    16e6:	7b c0       	rjmp	.+246    	; 0x17de <Lcd_vidinit+0x396>
	{
		_delay_ms(__us / 1000.0);
    16e8:	6d 89       	ldd	r22, Y+21	; 0x15
    16ea:	7e 89       	ldd	r23, Y+22	; 0x16
    16ec:	8f 89       	ldd	r24, Y+23	; 0x17
    16ee:	98 8d       	ldd	r25, Y+24	; 0x18
    16f0:	20 e0       	ldi	r18, 0x00	; 0
    16f2:	30 e0       	ldi	r19, 0x00	; 0
    16f4:	4a e7       	ldi	r20, 0x7A	; 122
    16f6:	54 e4       	ldi	r21, 0x44	; 68
    16f8:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    16fc:	dc 01       	movw	r26, r24
    16fe:	cb 01       	movw	r24, r22
    1700:	8c 87       	std	Y+12, r24	; 0x0c
    1702:	9d 87       	std	Y+13, r25	; 0x0d
    1704:	ae 87       	std	Y+14, r26	; 0x0e
    1706:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1708:	6c 85       	ldd	r22, Y+12	; 0x0c
    170a:	7d 85       	ldd	r23, Y+13	; 0x0d
    170c:	8e 85       	ldd	r24, Y+14	; 0x0e
    170e:	9f 85       	ldd	r25, Y+15	; 0x0f
    1710:	20 e0       	ldi	r18, 0x00	; 0
    1712:	30 e0       	ldi	r19, 0x00	; 0
    1714:	4a e7       	ldi	r20, 0x7A	; 122
    1716:	55 e4       	ldi	r21, 0x45	; 69
    1718:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    171c:	dc 01       	movw	r26, r24
    171e:	cb 01       	movw	r24, r22
    1720:	88 87       	std	Y+8, r24	; 0x08
    1722:	99 87       	std	Y+9, r25	; 0x09
    1724:	aa 87       	std	Y+10, r26	; 0x0a
    1726:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1728:	68 85       	ldd	r22, Y+8	; 0x08
    172a:	79 85       	ldd	r23, Y+9	; 0x09
    172c:	8a 85       	ldd	r24, Y+10	; 0x0a
    172e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1730:	20 e0       	ldi	r18, 0x00	; 0
    1732:	30 e0       	ldi	r19, 0x00	; 0
    1734:	40 e8       	ldi	r20, 0x80	; 128
    1736:	5f e3       	ldi	r21, 0x3F	; 63
    1738:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    173c:	88 23       	and	r24, r24
    173e:	2c f4       	brge	.+10     	; 0x174a <Lcd_vidinit+0x302>
		__ticks = 1;
    1740:	81 e0       	ldi	r24, 0x01	; 1
    1742:	90 e0       	ldi	r25, 0x00	; 0
    1744:	9f 83       	std	Y+7, r25	; 0x07
    1746:	8e 83       	std	Y+6, r24	; 0x06
    1748:	3f c0       	rjmp	.+126    	; 0x17c8 <Lcd_vidinit+0x380>
	else if (__tmp > 65535)
    174a:	68 85       	ldd	r22, Y+8	; 0x08
    174c:	79 85       	ldd	r23, Y+9	; 0x09
    174e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1750:	9b 85       	ldd	r25, Y+11	; 0x0b
    1752:	20 e0       	ldi	r18, 0x00	; 0
    1754:	3f ef       	ldi	r19, 0xFF	; 255
    1756:	4f e7       	ldi	r20, 0x7F	; 127
    1758:	57 e4       	ldi	r21, 0x47	; 71
    175a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    175e:	18 16       	cp	r1, r24
    1760:	4c f5       	brge	.+82     	; 0x17b4 <Lcd_vidinit+0x36c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1762:	6c 85       	ldd	r22, Y+12	; 0x0c
    1764:	7d 85       	ldd	r23, Y+13	; 0x0d
    1766:	8e 85       	ldd	r24, Y+14	; 0x0e
    1768:	9f 85       	ldd	r25, Y+15	; 0x0f
    176a:	20 e0       	ldi	r18, 0x00	; 0
    176c:	30 e0       	ldi	r19, 0x00	; 0
    176e:	40 e2       	ldi	r20, 0x20	; 32
    1770:	51 e4       	ldi	r21, 0x41	; 65
    1772:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1776:	dc 01       	movw	r26, r24
    1778:	cb 01       	movw	r24, r22
    177a:	bc 01       	movw	r22, r24
    177c:	cd 01       	movw	r24, r26
    177e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1782:	dc 01       	movw	r26, r24
    1784:	cb 01       	movw	r24, r22
    1786:	9f 83       	std	Y+7, r25	; 0x07
    1788:	8e 83       	std	Y+6, r24	; 0x06
    178a:	0f c0       	rjmp	.+30     	; 0x17aa <Lcd_vidinit+0x362>
    178c:	80 e9       	ldi	r24, 0x90	; 144
    178e:	91 e0       	ldi	r25, 0x01	; 1
    1790:	9d 83       	std	Y+5, r25	; 0x05
    1792:	8c 83       	std	Y+4, r24	; 0x04
    1794:	8c 81       	ldd	r24, Y+4	; 0x04
    1796:	9d 81       	ldd	r25, Y+5	; 0x05
    1798:	01 97       	sbiw	r24, 0x01	; 1
    179a:	f1 f7       	brne	.-4      	; 0x1798 <Lcd_vidinit+0x350>
    179c:	9d 83       	std	Y+5, r25	; 0x05
    179e:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17a0:	8e 81       	ldd	r24, Y+6	; 0x06
    17a2:	9f 81       	ldd	r25, Y+7	; 0x07
    17a4:	01 97       	sbiw	r24, 0x01	; 1
    17a6:	9f 83       	std	Y+7, r25	; 0x07
    17a8:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17aa:	8e 81       	ldd	r24, Y+6	; 0x06
    17ac:	9f 81       	ldd	r25, Y+7	; 0x07
    17ae:	00 97       	sbiw	r24, 0x00	; 0
    17b0:	69 f7       	brne	.-38     	; 0x178c <Lcd_vidinit+0x344>
    17b2:	24 c0       	rjmp	.+72     	; 0x17fc <Lcd_vidinit+0x3b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17b4:	68 85       	ldd	r22, Y+8	; 0x08
    17b6:	79 85       	ldd	r23, Y+9	; 0x09
    17b8:	8a 85       	ldd	r24, Y+10	; 0x0a
    17ba:	9b 85       	ldd	r25, Y+11	; 0x0b
    17bc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17c0:	dc 01       	movw	r26, r24
    17c2:	cb 01       	movw	r24, r22
    17c4:	9f 83       	std	Y+7, r25	; 0x07
    17c6:	8e 83       	std	Y+6, r24	; 0x06
    17c8:	8e 81       	ldd	r24, Y+6	; 0x06
    17ca:	9f 81       	ldd	r25, Y+7	; 0x07
    17cc:	9b 83       	std	Y+3, r25	; 0x03
    17ce:	8a 83       	std	Y+2, r24	; 0x02
    17d0:	8a 81       	ldd	r24, Y+2	; 0x02
    17d2:	9b 81       	ldd	r25, Y+3	; 0x03
    17d4:	01 97       	sbiw	r24, 0x01	; 1
    17d6:	f1 f7       	brne	.-4      	; 0x17d4 <Lcd_vidinit+0x38c>
    17d8:	9b 83       	std	Y+3, r25	; 0x03
    17da:	8a 83       	std	Y+2, r24	; 0x02
    17dc:	0f c0       	rjmp	.+30     	; 0x17fc <Lcd_vidinit+0x3b4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    17de:	69 89       	ldd	r22, Y+17	; 0x11
    17e0:	7a 89       	ldd	r23, Y+18	; 0x12
    17e2:	8b 89       	ldd	r24, Y+19	; 0x13
    17e4:	9c 89       	ldd	r25, Y+20	; 0x14
    17e6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17ea:	dc 01       	movw	r26, r24
    17ec:	cb 01       	movw	r24, r22
    17ee:	88 8b       	std	Y+16, r24	; 0x10
    17f0:	88 89       	ldd	r24, Y+16	; 0x10
    17f2:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    17f4:	89 81       	ldd	r24, Y+1	; 0x01
    17f6:	8a 95       	dec	r24
    17f8:	f1 f7       	brne	.-4      	; 0x17f6 <Lcd_vidinit+0x3ae>
    17fa:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(100);
	Lcd_vidCmd(0x03);
    17fc:	83 e0       	ldi	r24, 0x03	; 3
    17fe:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <Lcd_vidCmd>
	Lcd_vidCmd(0x02);
    1802:	82 e0       	ldi	r24, 0x02	; 2
    1804:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <Lcd_vidCmd>
	Lcd_vidCmd(_LCD_4BIT_MODE);
    1808:	88 e2       	ldi	r24, 0x28	; 40
    180a:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <Lcd_vidCmd>
}
    180e:	e4 96       	adiw	r28, 0x34	; 52
    1810:	0f b6       	in	r0, 0x3f	; 63
    1812:	f8 94       	cli
    1814:	de bf       	out	0x3e, r29	; 62
    1816:	0f be       	out	0x3f, r0	; 63
    1818:	cd bf       	out	0x3d, r28	; 61
    181a:	cf 91       	pop	r28
    181c:	df 91       	pop	r29
    181e:	08 95       	ret

00001820 <Lcd_videnablePulse>:

static void Lcd_videnablePulse(void)
{
    1820:	df 93       	push	r29
    1822:	cf 93       	push	r28
    1824:	cd b7       	in	r28, 0x3d	; 61
    1826:	de b7       	in	r29, 0x3e	; 62
    1828:	a6 97       	sbiw	r28, 0x26	; 38
    182a:	0f b6       	in	r0, 0x3f	; 63
    182c:	f8 94       	cli
    182e:	de bf       	out	0x3e, r29	; 62
    1830:	0f be       	out	0x3f, r0	; 63
    1832:	cd bf       	out	0x3d, r28	; 61
	//send Enable pulse
	Dio_vidwriteChanel(DIO_PORTB, DIO_PIN3, DIO_HIGH);
    1834:	81 e0       	ldi	r24, 0x01	; 1
    1836:	63 e0       	ldi	r22, 0x03	; 3
    1838:	41 e0       	ldi	r20, 0x01	; 1
    183a:	0e 94 c6 13 	call	0x278c	; 0x278c <Dio_vidwriteChanel>
    183e:	80 e0       	ldi	r24, 0x00	; 0
    1840:	90 e0       	ldi	r25, 0x00	; 0
    1842:	a0 e8       	ldi	r26, 0x80	; 128
    1844:	bf e3       	ldi	r27, 0x3F	; 63
    1846:	8b a3       	std	Y+35, r24	; 0x23
    1848:	9c a3       	std	Y+36, r25	; 0x24
    184a:	ad a3       	std	Y+37, r26	; 0x25
    184c:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    184e:	6b a1       	ldd	r22, Y+35	; 0x23
    1850:	7c a1       	ldd	r23, Y+36	; 0x24
    1852:	8d a1       	ldd	r24, Y+37	; 0x25
    1854:	9e a1       	ldd	r25, Y+38	; 0x26
    1856:	2b ea       	ldi	r18, 0xAB	; 171
    1858:	3a ea       	ldi	r19, 0xAA	; 170
    185a:	4a ea       	ldi	r20, 0xAA	; 170
    185c:	50 e4       	ldi	r21, 0x40	; 64
    185e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1862:	dc 01       	movw	r26, r24
    1864:	cb 01       	movw	r24, r22
    1866:	8f 8f       	std	Y+31, r24	; 0x1f
    1868:	98 a3       	std	Y+32, r25	; 0x20
    186a:	a9 a3       	std	Y+33, r26	; 0x21
    186c:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    186e:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1870:	78 a1       	ldd	r23, Y+32	; 0x20
    1872:	89 a1       	ldd	r24, Y+33	; 0x21
    1874:	9a a1       	ldd	r25, Y+34	; 0x22
    1876:	20 e0       	ldi	r18, 0x00	; 0
    1878:	30 e0       	ldi	r19, 0x00	; 0
    187a:	40 e8       	ldi	r20, 0x80	; 128
    187c:	5f e3       	ldi	r21, 0x3F	; 63
    187e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1882:	88 23       	and	r24, r24
    1884:	1c f4       	brge	.+6      	; 0x188c <Lcd_videnablePulse+0x6c>
		__ticks = 1;
    1886:	81 e0       	ldi	r24, 0x01	; 1
    1888:	8e 8f       	std	Y+30, r24	; 0x1e
    188a:	91 c0       	rjmp	.+290    	; 0x19ae <Lcd_videnablePulse+0x18e>
	else if (__tmp > 255)
    188c:	6f 8d       	ldd	r22, Y+31	; 0x1f
    188e:	78 a1       	ldd	r23, Y+32	; 0x20
    1890:	89 a1       	ldd	r24, Y+33	; 0x21
    1892:	9a a1       	ldd	r25, Y+34	; 0x22
    1894:	20 e0       	ldi	r18, 0x00	; 0
    1896:	30 e0       	ldi	r19, 0x00	; 0
    1898:	4f e7       	ldi	r20, 0x7F	; 127
    189a:	53 e4       	ldi	r21, 0x43	; 67
    189c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    18a0:	18 16       	cp	r1, r24
    18a2:	0c f0       	brlt	.+2      	; 0x18a6 <Lcd_videnablePulse+0x86>
    18a4:	7b c0       	rjmp	.+246    	; 0x199c <Lcd_videnablePulse+0x17c>
	{
		_delay_ms(__us / 1000.0);
    18a6:	6b a1       	ldd	r22, Y+35	; 0x23
    18a8:	7c a1       	ldd	r23, Y+36	; 0x24
    18aa:	8d a1       	ldd	r24, Y+37	; 0x25
    18ac:	9e a1       	ldd	r25, Y+38	; 0x26
    18ae:	20 e0       	ldi	r18, 0x00	; 0
    18b0:	30 e0       	ldi	r19, 0x00	; 0
    18b2:	4a e7       	ldi	r20, 0x7A	; 122
    18b4:	54 e4       	ldi	r21, 0x44	; 68
    18b6:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    18ba:	dc 01       	movw	r26, r24
    18bc:	cb 01       	movw	r24, r22
    18be:	8a 8f       	std	Y+26, r24	; 0x1a
    18c0:	9b 8f       	std	Y+27, r25	; 0x1b
    18c2:	ac 8f       	std	Y+28, r26	; 0x1c
    18c4:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18c6:	6a 8d       	ldd	r22, Y+26	; 0x1a
    18c8:	7b 8d       	ldd	r23, Y+27	; 0x1b
    18ca:	8c 8d       	ldd	r24, Y+28	; 0x1c
    18cc:	9d 8d       	ldd	r25, Y+29	; 0x1d
    18ce:	20 e0       	ldi	r18, 0x00	; 0
    18d0:	30 e0       	ldi	r19, 0x00	; 0
    18d2:	4a e7       	ldi	r20, 0x7A	; 122
    18d4:	55 e4       	ldi	r21, 0x45	; 69
    18d6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18da:	dc 01       	movw	r26, r24
    18dc:	cb 01       	movw	r24, r22
    18de:	8e 8b       	std	Y+22, r24	; 0x16
    18e0:	9f 8b       	std	Y+23, r25	; 0x17
    18e2:	a8 8f       	std	Y+24, r26	; 0x18
    18e4:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    18e6:	6e 89       	ldd	r22, Y+22	; 0x16
    18e8:	7f 89       	ldd	r23, Y+23	; 0x17
    18ea:	88 8d       	ldd	r24, Y+24	; 0x18
    18ec:	99 8d       	ldd	r25, Y+25	; 0x19
    18ee:	20 e0       	ldi	r18, 0x00	; 0
    18f0:	30 e0       	ldi	r19, 0x00	; 0
    18f2:	40 e8       	ldi	r20, 0x80	; 128
    18f4:	5f e3       	ldi	r21, 0x3F	; 63
    18f6:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    18fa:	88 23       	and	r24, r24
    18fc:	2c f4       	brge	.+10     	; 0x1908 <Lcd_videnablePulse+0xe8>
		__ticks = 1;
    18fe:	81 e0       	ldi	r24, 0x01	; 1
    1900:	90 e0       	ldi	r25, 0x00	; 0
    1902:	9d 8b       	std	Y+21, r25	; 0x15
    1904:	8c 8b       	std	Y+20, r24	; 0x14
    1906:	3f c0       	rjmp	.+126    	; 0x1986 <Lcd_videnablePulse+0x166>
	else if (__tmp > 65535)
    1908:	6e 89       	ldd	r22, Y+22	; 0x16
    190a:	7f 89       	ldd	r23, Y+23	; 0x17
    190c:	88 8d       	ldd	r24, Y+24	; 0x18
    190e:	99 8d       	ldd	r25, Y+25	; 0x19
    1910:	20 e0       	ldi	r18, 0x00	; 0
    1912:	3f ef       	ldi	r19, 0xFF	; 255
    1914:	4f e7       	ldi	r20, 0x7F	; 127
    1916:	57 e4       	ldi	r21, 0x47	; 71
    1918:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    191c:	18 16       	cp	r1, r24
    191e:	4c f5       	brge	.+82     	; 0x1972 <Lcd_videnablePulse+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1920:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1922:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1924:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1926:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1928:	20 e0       	ldi	r18, 0x00	; 0
    192a:	30 e0       	ldi	r19, 0x00	; 0
    192c:	40 e2       	ldi	r20, 0x20	; 32
    192e:	51 e4       	ldi	r21, 0x41	; 65
    1930:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1934:	dc 01       	movw	r26, r24
    1936:	cb 01       	movw	r24, r22
    1938:	bc 01       	movw	r22, r24
    193a:	cd 01       	movw	r24, r26
    193c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1940:	dc 01       	movw	r26, r24
    1942:	cb 01       	movw	r24, r22
    1944:	9d 8b       	std	Y+21, r25	; 0x15
    1946:	8c 8b       	std	Y+20, r24	; 0x14
    1948:	0f c0       	rjmp	.+30     	; 0x1968 <Lcd_videnablePulse+0x148>
    194a:	80 e9       	ldi	r24, 0x90	; 144
    194c:	91 e0       	ldi	r25, 0x01	; 1
    194e:	9b 8b       	std	Y+19, r25	; 0x13
    1950:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1952:	8a 89       	ldd	r24, Y+18	; 0x12
    1954:	9b 89       	ldd	r25, Y+19	; 0x13
    1956:	01 97       	sbiw	r24, 0x01	; 1
    1958:	f1 f7       	brne	.-4      	; 0x1956 <Lcd_videnablePulse+0x136>
    195a:	9b 8b       	std	Y+19, r25	; 0x13
    195c:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    195e:	8c 89       	ldd	r24, Y+20	; 0x14
    1960:	9d 89       	ldd	r25, Y+21	; 0x15
    1962:	01 97       	sbiw	r24, 0x01	; 1
    1964:	9d 8b       	std	Y+21, r25	; 0x15
    1966:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1968:	8c 89       	ldd	r24, Y+20	; 0x14
    196a:	9d 89       	ldd	r25, Y+21	; 0x15
    196c:	00 97       	sbiw	r24, 0x00	; 0
    196e:	69 f7       	brne	.-38     	; 0x194a <Lcd_videnablePulse+0x12a>
    1970:	24 c0       	rjmp	.+72     	; 0x19ba <Lcd_videnablePulse+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1972:	6e 89       	ldd	r22, Y+22	; 0x16
    1974:	7f 89       	ldd	r23, Y+23	; 0x17
    1976:	88 8d       	ldd	r24, Y+24	; 0x18
    1978:	99 8d       	ldd	r25, Y+25	; 0x19
    197a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    197e:	dc 01       	movw	r26, r24
    1980:	cb 01       	movw	r24, r22
    1982:	9d 8b       	std	Y+21, r25	; 0x15
    1984:	8c 8b       	std	Y+20, r24	; 0x14
    1986:	8c 89       	ldd	r24, Y+20	; 0x14
    1988:	9d 89       	ldd	r25, Y+21	; 0x15
    198a:	99 8b       	std	Y+17, r25	; 0x11
    198c:	88 8b       	std	Y+16, r24	; 0x10
    198e:	88 89       	ldd	r24, Y+16	; 0x10
    1990:	99 89       	ldd	r25, Y+17	; 0x11
    1992:	01 97       	sbiw	r24, 0x01	; 1
    1994:	f1 f7       	brne	.-4      	; 0x1992 <Lcd_videnablePulse+0x172>
    1996:	99 8b       	std	Y+17, r25	; 0x11
    1998:	88 8b       	std	Y+16, r24	; 0x10
    199a:	0f c0       	rjmp	.+30     	; 0x19ba <Lcd_videnablePulse+0x19a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    199c:	6f 8d       	ldd	r22, Y+31	; 0x1f
    199e:	78 a1       	ldd	r23, Y+32	; 0x20
    19a0:	89 a1       	ldd	r24, Y+33	; 0x21
    19a2:	9a a1       	ldd	r25, Y+34	; 0x22
    19a4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19a8:	dc 01       	movw	r26, r24
    19aa:	cb 01       	movw	r24, r22
    19ac:	8e 8f       	std	Y+30, r24	; 0x1e
    19ae:	8e 8d       	ldd	r24, Y+30	; 0x1e
    19b0:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    19b2:	8f 85       	ldd	r24, Y+15	; 0x0f
    19b4:	8a 95       	dec	r24
    19b6:	f1 f7       	brne	.-4      	; 0x19b4 <Lcd_videnablePulse+0x194>
    19b8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(1);
	Dio_vidwriteChanel(DIO_PORTB, DIO_PIN3, DIO_LOW);
    19ba:	81 e0       	ldi	r24, 0x01	; 1
    19bc:	63 e0       	ldi	r22, 0x03	; 3
    19be:	40 e0       	ldi	r20, 0x00	; 0
    19c0:	0e 94 c6 13 	call	0x278c	; 0x278c <Dio_vidwriteChanel>
    19c4:	80 e0       	ldi	r24, 0x00	; 0
    19c6:	90 e0       	ldi	r25, 0x00	; 0
    19c8:	a0 e0       	ldi	r26, 0x00	; 0
    19ca:	b0 e4       	ldi	r27, 0x40	; 64
    19cc:	8b 87       	std	Y+11, r24	; 0x0b
    19ce:	9c 87       	std	Y+12, r25	; 0x0c
    19d0:	ad 87       	std	Y+13, r26	; 0x0d
    19d2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    19d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    19d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    19da:	9e 85       	ldd	r25, Y+14	; 0x0e
    19dc:	20 e0       	ldi	r18, 0x00	; 0
    19de:	30 e0       	ldi	r19, 0x00	; 0
    19e0:	4a e7       	ldi	r20, 0x7A	; 122
    19e2:	55 e4       	ldi	r21, 0x45	; 69
    19e4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19e8:	dc 01       	movw	r26, r24
    19ea:	cb 01       	movw	r24, r22
    19ec:	8f 83       	std	Y+7, r24	; 0x07
    19ee:	98 87       	std	Y+8, r25	; 0x08
    19f0:	a9 87       	std	Y+9, r26	; 0x09
    19f2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    19f4:	6f 81       	ldd	r22, Y+7	; 0x07
    19f6:	78 85       	ldd	r23, Y+8	; 0x08
    19f8:	89 85       	ldd	r24, Y+9	; 0x09
    19fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    19fc:	20 e0       	ldi	r18, 0x00	; 0
    19fe:	30 e0       	ldi	r19, 0x00	; 0
    1a00:	40 e8       	ldi	r20, 0x80	; 128
    1a02:	5f e3       	ldi	r21, 0x3F	; 63
    1a04:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1a08:	88 23       	and	r24, r24
    1a0a:	2c f4       	brge	.+10     	; 0x1a16 <Lcd_videnablePulse+0x1f6>
		__ticks = 1;
    1a0c:	81 e0       	ldi	r24, 0x01	; 1
    1a0e:	90 e0       	ldi	r25, 0x00	; 0
    1a10:	9e 83       	std	Y+6, r25	; 0x06
    1a12:	8d 83       	std	Y+5, r24	; 0x05
    1a14:	3f c0       	rjmp	.+126    	; 0x1a94 <Lcd_videnablePulse+0x274>
	else if (__tmp > 65535)
    1a16:	6f 81       	ldd	r22, Y+7	; 0x07
    1a18:	78 85       	ldd	r23, Y+8	; 0x08
    1a1a:	89 85       	ldd	r24, Y+9	; 0x09
    1a1c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a1e:	20 e0       	ldi	r18, 0x00	; 0
    1a20:	3f ef       	ldi	r19, 0xFF	; 255
    1a22:	4f e7       	ldi	r20, 0x7F	; 127
    1a24:	57 e4       	ldi	r21, 0x47	; 71
    1a26:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1a2a:	18 16       	cp	r1, r24
    1a2c:	4c f5       	brge	.+82     	; 0x1a80 <Lcd_videnablePulse+0x260>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a2e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a30:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a32:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a34:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a36:	20 e0       	ldi	r18, 0x00	; 0
    1a38:	30 e0       	ldi	r19, 0x00	; 0
    1a3a:	40 e2       	ldi	r20, 0x20	; 32
    1a3c:	51 e4       	ldi	r21, 0x41	; 65
    1a3e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a42:	dc 01       	movw	r26, r24
    1a44:	cb 01       	movw	r24, r22
    1a46:	bc 01       	movw	r22, r24
    1a48:	cd 01       	movw	r24, r26
    1a4a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a4e:	dc 01       	movw	r26, r24
    1a50:	cb 01       	movw	r24, r22
    1a52:	9e 83       	std	Y+6, r25	; 0x06
    1a54:	8d 83       	std	Y+5, r24	; 0x05
    1a56:	0f c0       	rjmp	.+30     	; 0x1a76 <Lcd_videnablePulse+0x256>
    1a58:	80 e9       	ldi	r24, 0x90	; 144
    1a5a:	91 e0       	ldi	r25, 0x01	; 1
    1a5c:	9c 83       	std	Y+4, r25	; 0x04
    1a5e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1a60:	8b 81       	ldd	r24, Y+3	; 0x03
    1a62:	9c 81       	ldd	r25, Y+4	; 0x04
    1a64:	01 97       	sbiw	r24, 0x01	; 1
    1a66:	f1 f7       	brne	.-4      	; 0x1a64 <Lcd_videnablePulse+0x244>
    1a68:	9c 83       	std	Y+4, r25	; 0x04
    1a6a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a6c:	8d 81       	ldd	r24, Y+5	; 0x05
    1a6e:	9e 81       	ldd	r25, Y+6	; 0x06
    1a70:	01 97       	sbiw	r24, 0x01	; 1
    1a72:	9e 83       	std	Y+6, r25	; 0x06
    1a74:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a76:	8d 81       	ldd	r24, Y+5	; 0x05
    1a78:	9e 81       	ldd	r25, Y+6	; 0x06
    1a7a:	00 97       	sbiw	r24, 0x00	; 0
    1a7c:	69 f7       	brne	.-38     	; 0x1a58 <Lcd_videnablePulse+0x238>
    1a7e:	14 c0       	rjmp	.+40     	; 0x1aa8 <Lcd_videnablePulse+0x288>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a80:	6f 81       	ldd	r22, Y+7	; 0x07
    1a82:	78 85       	ldd	r23, Y+8	; 0x08
    1a84:	89 85       	ldd	r24, Y+9	; 0x09
    1a86:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a88:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a8c:	dc 01       	movw	r26, r24
    1a8e:	cb 01       	movw	r24, r22
    1a90:	9e 83       	std	Y+6, r25	; 0x06
    1a92:	8d 83       	std	Y+5, r24	; 0x05
    1a94:	8d 81       	ldd	r24, Y+5	; 0x05
    1a96:	9e 81       	ldd	r25, Y+6	; 0x06
    1a98:	9a 83       	std	Y+2, r25	; 0x02
    1a9a:	89 83       	std	Y+1, r24	; 0x01
    1a9c:	89 81       	ldd	r24, Y+1	; 0x01
    1a9e:	9a 81       	ldd	r25, Y+2	; 0x02
    1aa0:	01 97       	sbiw	r24, 0x01	; 1
    1aa2:	f1 f7       	brne	.-4      	; 0x1aa0 <Lcd_videnablePulse+0x280>
    1aa4:	9a 83       	std	Y+2, r25	; 0x02
    1aa6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    1aa8:	a6 96       	adiw	r28, 0x26	; 38
    1aaa:	0f b6       	in	r0, 0x3f	; 63
    1aac:	f8 94       	cli
    1aae:	de bf       	out	0x3e, r29	; 62
    1ab0:	0f be       	out	0x3f, r0	; 63
    1ab2:	cd bf       	out	0x3d, r28	; 61
    1ab4:	cf 91       	pop	r28
    1ab6:	df 91       	pop	r29
    1ab8:	08 95       	ret

00001aba <Lcd_vidDisplayChar>:
void Lcd_vidDisplayChar(u8 chr)
{
    1aba:	df 93       	push	r29
    1abc:	cf 93       	push	r28
    1abe:	00 d0       	rcall	.+0      	; 0x1ac0 <Lcd_vidDisplayChar+0x6>
    1ac0:	0f 92       	push	r0
    1ac2:	cd b7       	in	r28, 0x3d	; 61
    1ac4:	de b7       	in	r29, 0x3e	; 62
    1ac6:	8b 83       	std	Y+3, r24	; 0x03
	0b1101  1001

	1101   0000
	1001   0000
*/
	u8 loc_MSB = (chr & ~LCD_MASK);
    1ac8:	8b 81       	ldd	r24, Y+3	; 0x03
    1aca:	80 7f       	andi	r24, 0xF0	; 240
    1acc:	8a 83       	std	Y+2, r24	; 0x02
	u8 loc_LSB = (chr<<4);
    1ace:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad0:	82 95       	swap	r24
    1ad2:	80 7f       	andi	r24, 0xF0	; 240
    1ad4:	89 83       	std	Y+1, r24	; 0x01
	//RS->1
	Dio_vidwriteChanel(DIO_PORTB, DIO_PIN1, DIO_HIGH);
    1ad6:	81 e0       	ldi	r24, 0x01	; 1
    1ad8:	61 e0       	ldi	r22, 0x01	; 1
    1ada:	41 e0       	ldi	r20, 0x01	; 1
    1adc:	0e 94 c6 13 	call	0x278c	; 0x278c <Dio_vidwriteChanel>

	//write data MSB to LCD
	Dio_vidWriteChanelGroup(DIO_PORTA, loc_MSB, LCD_MASK);
    1ae0:	80 e0       	ldi	r24, 0x00	; 0
    1ae2:	6a 81       	ldd	r22, Y+2	; 0x02
    1ae4:	4f e0       	ldi	r20, 0x0F	; 15
    1ae6:	0e 94 a9 14 	call	0x2952	; 0x2952 <Dio_vidWriteChanelGroup>
	//send Enable pulse
	Lcd_videnablePulse();
    1aea:	0e 94 10 0c 	call	0x1820	; 0x1820 <Lcd_videnablePulse>

	//write data LSB to LCD
	Dio_vidWriteChanelGroup(DIO_PORTA, loc_LSB, LCD_MASK);
    1aee:	80 e0       	ldi	r24, 0x00	; 0
    1af0:	69 81       	ldd	r22, Y+1	; 0x01
    1af2:	4f e0       	ldi	r20, 0x0F	; 15
    1af4:	0e 94 a9 14 	call	0x2952	; 0x2952 <Dio_vidWriteChanelGroup>
	//send Enable pulse
	Lcd_videnablePulse();
    1af8:	0e 94 10 0c 	call	0x1820	; 0x1820 <Lcd_videnablePulse>
}
    1afc:	0f 90       	pop	r0
    1afe:	0f 90       	pop	r0
    1b00:	0f 90       	pop	r0
    1b02:	cf 91       	pop	r28
    1b04:	df 91       	pop	r29
    1b06:	08 95       	ret

00001b08 <Lcd_vidCmd>:
void Lcd_vidCmd(lcd_Cmd_t cmd)
{
    1b08:	df 93       	push	r29
    1b0a:	cf 93       	push	r28
    1b0c:	00 d0       	rcall	.+0      	; 0x1b0e <Lcd_vidCmd+0x6>
    1b0e:	0f 92       	push	r0
    1b10:	cd b7       	in	r28, 0x3d	; 61
    1b12:	de b7       	in	r29, 0x3e	; 62
    1b14:	8b 83       	std	Y+3, r24	; 0x03
	u8 loc_MSB = cmd & ~LCD_MASK;
    1b16:	8b 81       	ldd	r24, Y+3	; 0x03
    1b18:	80 7f       	andi	r24, 0xF0	; 240
    1b1a:	8a 83       	std	Y+2, r24	; 0x02
	u8 loc_LSB = cmd<<4;
    1b1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b1e:	82 95       	swap	r24
    1b20:	80 7f       	andi	r24, 0xF0	; 240
    1b22:	89 83       	std	Y+1, r24	; 0x01
	//RS->0
	Dio_vidwriteChanel(DIO_PORTB, DIO_PIN1, DIO_LOW);
    1b24:	81 e0       	ldi	r24, 0x01	; 1
    1b26:	61 e0       	ldi	r22, 0x01	; 1
    1b28:	40 e0       	ldi	r20, 0x00	; 0
    1b2a:	0e 94 c6 13 	call	0x278c	; 0x278c <Dio_vidwriteChanel>

	//write data MSB to LCD
	Dio_vidWriteChanelGroup(DIO_PORTA, loc_MSB, LCD_MASK);
    1b2e:	80 e0       	ldi	r24, 0x00	; 0
    1b30:	6a 81       	ldd	r22, Y+2	; 0x02
    1b32:	4f e0       	ldi	r20, 0x0F	; 15
    1b34:	0e 94 a9 14 	call	0x2952	; 0x2952 <Dio_vidWriteChanelGroup>
	//send Enable pulse
	Lcd_videnablePulse();
    1b38:	0e 94 10 0c 	call	0x1820	; 0x1820 <Lcd_videnablePulse>

	//write data LSB to LCD
	Dio_vidWriteChanelGroup(DIO_PORTA, loc_LSB, LCD_MASK);
    1b3c:	80 e0       	ldi	r24, 0x00	; 0
    1b3e:	69 81       	ldd	r22, Y+1	; 0x01
    1b40:	4f e0       	ldi	r20, 0x0F	; 15
    1b42:	0e 94 a9 14 	call	0x2952	; 0x2952 <Dio_vidWriteChanelGroup>
	//send Enable pulse
	Lcd_videnablePulse();
    1b46:	0e 94 10 0c 	call	0x1820	; 0x1820 <Lcd_videnablePulse>
}
    1b4a:	0f 90       	pop	r0
    1b4c:	0f 90       	pop	r0
    1b4e:	0f 90       	pop	r0
    1b50:	cf 91       	pop	r28
    1b52:	df 91       	pop	r29
    1b54:	08 95       	ret

00001b56 <Lcd_vidRowColumn>:

void Lcd_vidRowColumn(u8 row, u8 col)
{
    1b56:	df 93       	push	r29
    1b58:	cf 93       	push	r28
    1b5a:	00 d0       	rcall	.+0      	; 0x1b5c <Lcd_vidRowColumn+0x6>
    1b5c:	00 d0       	rcall	.+0      	; 0x1b5e <Lcd_vidRowColumn+0x8>
    1b5e:	cd b7       	in	r28, 0x3d	; 61
    1b60:	de b7       	in	r29, 0x3e	; 62
    1b62:	89 83       	std	Y+1, r24	; 0x01
    1b64:	6a 83       	std	Y+2, r22	; 0x02
	switch (row)
    1b66:	89 81       	ldd	r24, Y+1	; 0x01
    1b68:	28 2f       	mov	r18, r24
    1b6a:	30 e0       	ldi	r19, 0x00	; 0
    1b6c:	3c 83       	std	Y+4, r19	; 0x04
    1b6e:	2b 83       	std	Y+3, r18	; 0x03
    1b70:	8b 81       	ldd	r24, Y+3	; 0x03
    1b72:	9c 81       	ldd	r25, Y+4	; 0x04
    1b74:	00 97       	sbiw	r24, 0x00	; 0
    1b76:	31 f0       	breq	.+12     	; 0x1b84 <Lcd_vidRowColumn+0x2e>
    1b78:	2b 81       	ldd	r18, Y+3	; 0x03
    1b7a:	3c 81       	ldd	r19, Y+4	; 0x04
    1b7c:	21 30       	cpi	r18, 0x01	; 1
    1b7e:	31 05       	cpc	r19, r1
    1b80:	31 f0       	breq	.+12     	; 0x1b8e <Lcd_vidRowColumn+0x38>
    1b82:	09 c0       	rjmp	.+18     	; 0x1b96 <Lcd_vidRowColumn+0x40>
	{
	case 0:
		Lcd_vidCmd(0x80 + col);
    1b84:	8a 81       	ldd	r24, Y+2	; 0x02
    1b86:	80 58       	subi	r24, 0x80	; 128
    1b88:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <Lcd_vidCmd>
    1b8c:	04 c0       	rjmp	.+8      	; 0x1b96 <Lcd_vidRowColumn+0x40>
		break;

	case 1:
		Lcd_vidCmd(0xC0 + col);
    1b8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b90:	80 54       	subi	r24, 0x40	; 64
    1b92:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <Lcd_vidCmd>
		break;
	}
}
    1b96:	0f 90       	pop	r0
    1b98:	0f 90       	pop	r0
    1b9a:	0f 90       	pop	r0
    1b9c:	0f 90       	pop	r0
    1b9e:	cf 91       	pop	r28
    1ba0:	df 91       	pop	r29
    1ba2:	08 95       	ret

00001ba4 <Lcd_vidDisplyStr>:
void Lcd_vidDisplyStr(u8* str)
{
    1ba4:	df 93       	push	r29
    1ba6:	cf 93       	push	r28
    1ba8:	00 d0       	rcall	.+0      	; 0x1baa <Lcd_vidDisplyStr+0x6>
    1baa:	cd b7       	in	r28, 0x3d	; 61
    1bac:	de b7       	in	r29, 0x3e	; 62
    1bae:	9a 83       	std	Y+2, r25	; 0x02
    1bb0:	89 83       	std	Y+1, r24	; 0x01
    1bb2:	0a c0       	rjmp	.+20     	; 0x1bc8 <Lcd_vidDisplyStr+0x24>
	while (*str != '\0')
	{
		Lcd_vidDisplayChar(*str);
    1bb4:	e9 81       	ldd	r30, Y+1	; 0x01
    1bb6:	fa 81       	ldd	r31, Y+2	; 0x02
    1bb8:	80 81       	ld	r24, Z
    1bba:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <Lcd_vidDisplayChar>
		str++;
    1bbe:	89 81       	ldd	r24, Y+1	; 0x01
    1bc0:	9a 81       	ldd	r25, Y+2	; 0x02
    1bc2:	01 96       	adiw	r24, 0x01	; 1
    1bc4:	9a 83       	std	Y+2, r25	; 0x02
    1bc6:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
}
void Lcd_vidDisplyStr(u8* str)
{
	while (*str != '\0')
    1bc8:	e9 81       	ldd	r30, Y+1	; 0x01
    1bca:	fa 81       	ldd	r31, Y+2	; 0x02
    1bcc:	80 81       	ld	r24, Z
    1bce:	88 23       	and	r24, r24
    1bd0:	89 f7       	brne	.-30     	; 0x1bb4 <Lcd_vidDisplyStr+0x10>
	{
		Lcd_vidDisplayChar(*str);
		str++;
	}
}
    1bd2:	0f 90       	pop	r0
    1bd4:	0f 90       	pop	r0
    1bd6:	cf 91       	pop	r28
    1bd8:	df 91       	pop	r29
    1bda:	08 95       	ret

00001bdc <Lcd_vidDisplyInt>:

void Lcd_vidDisplyInt(u32 num)
{
    1bdc:	df 93       	push	r29
    1bde:	cf 93       	push	r28
    1be0:	cd b7       	in	r28, 0x3d	; 61
    1be2:	de b7       	in	r29, 0x3e	; 62
    1be4:	29 97       	sbiw	r28, 0x09	; 9
    1be6:	0f b6       	in	r0, 0x3f	; 63
    1be8:	f8 94       	cli
    1bea:	de bf       	out	0x3e, r29	; 62
    1bec:	0f be       	out	0x3f, r0	; 63
    1bee:	cd bf       	out	0x3d, r28	; 61
    1bf0:	6e 83       	std	Y+6, r22	; 0x06
    1bf2:	7f 83       	std	Y+7, r23	; 0x07
    1bf4:	88 87       	std	Y+8, r24	; 0x08
    1bf6:	99 87       	std	Y+9, r25	; 0x09
	u8 buffer[5];
	sprintf(buffer,"%d",num);
    1bf8:	8d b7       	in	r24, 0x3d	; 61
    1bfa:	9e b7       	in	r25, 0x3e	; 62
    1bfc:	08 97       	sbiw	r24, 0x08	; 8
    1bfe:	0f b6       	in	r0, 0x3f	; 63
    1c00:	f8 94       	cli
    1c02:	9e bf       	out	0x3e, r25	; 62
    1c04:	0f be       	out	0x3f, r0	; 63
    1c06:	8d bf       	out	0x3d, r24	; 61
    1c08:	ed b7       	in	r30, 0x3d	; 61
    1c0a:	fe b7       	in	r31, 0x3e	; 62
    1c0c:	31 96       	adiw	r30, 0x01	; 1
    1c0e:	ce 01       	movw	r24, r28
    1c10:	01 96       	adiw	r24, 0x01	; 1
    1c12:	91 83       	std	Z+1, r25	; 0x01
    1c14:	80 83       	st	Z, r24
    1c16:	8e e6       	ldi	r24, 0x6E	; 110
    1c18:	90 e0       	ldi	r25, 0x00	; 0
    1c1a:	93 83       	std	Z+3, r25	; 0x03
    1c1c:	82 83       	std	Z+2, r24	; 0x02
    1c1e:	8e 81       	ldd	r24, Y+6	; 0x06
    1c20:	9f 81       	ldd	r25, Y+7	; 0x07
    1c22:	a8 85       	ldd	r26, Y+8	; 0x08
    1c24:	b9 85       	ldd	r27, Y+9	; 0x09
    1c26:	84 83       	std	Z+4, r24	; 0x04
    1c28:	95 83       	std	Z+5, r25	; 0x05
    1c2a:	a6 83       	std	Z+6, r26	; 0x06
    1c2c:	b7 83       	std	Z+7, r27	; 0x07
    1c2e:	0e 94 83 17 	call	0x2f06	; 0x2f06 <sprintf>
    1c32:	8d b7       	in	r24, 0x3d	; 61
    1c34:	9e b7       	in	r25, 0x3e	; 62
    1c36:	08 96       	adiw	r24, 0x08	; 8
    1c38:	0f b6       	in	r0, 0x3f	; 63
    1c3a:	f8 94       	cli
    1c3c:	9e bf       	out	0x3e, r25	; 62
    1c3e:	0f be       	out	0x3f, r0	; 63
    1c40:	8d bf       	out	0x3d, r24	; 61
	Lcd_vidDisplyStr(buffer);
    1c42:	ce 01       	movw	r24, r28
    1c44:	01 96       	adiw	r24, 0x01	; 1
    1c46:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <Lcd_vidDisplyStr>
}
    1c4a:	29 96       	adiw	r28, 0x09	; 9
    1c4c:	0f b6       	in	r0, 0x3f	; 63
    1c4e:	f8 94       	cli
    1c50:	de bf       	out	0x3e, r29	; 62
    1c52:	0f be       	out	0x3f, r0	; 63
    1c54:	cd bf       	out	0x3d, r28	; 61
    1c56:	cf 91       	pop	r28
    1c58:	df 91       	pop	r29
    1c5a:	08 95       	ret

00001c5c <Lcd_vidDisplyFlot>:
void Lcd_vidDisplyFlot(f64 num)
{
    1c5c:	df 93       	push	r29
    1c5e:	cf 93       	push	r28
    1c60:	cd b7       	in	r28, 0x3d	; 61
    1c62:	de b7       	in	r29, 0x3e	; 62
    1c64:	68 97       	sbiw	r28, 0x18	; 24
    1c66:	0f b6       	in	r0, 0x3f	; 63
    1c68:	f8 94       	cli
    1c6a:	de bf       	out	0x3e, r29	; 62
    1c6c:	0f be       	out	0x3f, r0	; 63
    1c6e:	cd bf       	out	0x3d, r28	; 61
    1c70:	6d 8b       	std	Y+21, r22	; 0x15
    1c72:	7e 8b       	std	Y+22, r23	; 0x16
    1c74:	8f 8b       	std	Y+23, r24	; 0x17
    1c76:	98 8f       	std	Y+24, r25	; 0x18
	u8 buffer[20];
	sprintf(buffer,"%f",num);
    1c78:	8d b7       	in	r24, 0x3d	; 61
    1c7a:	9e b7       	in	r25, 0x3e	; 62
    1c7c:	08 97       	sbiw	r24, 0x08	; 8
    1c7e:	0f b6       	in	r0, 0x3f	; 63
    1c80:	f8 94       	cli
    1c82:	9e bf       	out	0x3e, r25	; 62
    1c84:	0f be       	out	0x3f, r0	; 63
    1c86:	8d bf       	out	0x3d, r24	; 61
    1c88:	ed b7       	in	r30, 0x3d	; 61
    1c8a:	fe b7       	in	r31, 0x3e	; 62
    1c8c:	31 96       	adiw	r30, 0x01	; 1
    1c8e:	ce 01       	movw	r24, r28
    1c90:	01 96       	adiw	r24, 0x01	; 1
    1c92:	91 83       	std	Z+1, r25	; 0x01
    1c94:	80 83       	st	Z, r24
    1c96:	81 e7       	ldi	r24, 0x71	; 113
    1c98:	90 e0       	ldi	r25, 0x00	; 0
    1c9a:	93 83       	std	Z+3, r25	; 0x03
    1c9c:	82 83       	std	Z+2, r24	; 0x02
    1c9e:	8d 89       	ldd	r24, Y+21	; 0x15
    1ca0:	9e 89       	ldd	r25, Y+22	; 0x16
    1ca2:	af 89       	ldd	r26, Y+23	; 0x17
    1ca4:	b8 8d       	ldd	r27, Y+24	; 0x18
    1ca6:	84 83       	std	Z+4, r24	; 0x04
    1ca8:	95 83       	std	Z+5, r25	; 0x05
    1caa:	a6 83       	std	Z+6, r26	; 0x06
    1cac:	b7 83       	std	Z+7, r27	; 0x07
    1cae:	0e 94 83 17 	call	0x2f06	; 0x2f06 <sprintf>
    1cb2:	8d b7       	in	r24, 0x3d	; 61
    1cb4:	9e b7       	in	r25, 0x3e	; 62
    1cb6:	08 96       	adiw	r24, 0x08	; 8
    1cb8:	0f b6       	in	r0, 0x3f	; 63
    1cba:	f8 94       	cli
    1cbc:	9e bf       	out	0x3e, r25	; 62
    1cbe:	0f be       	out	0x3f, r0	; 63
    1cc0:	8d bf       	out	0x3d, r24	; 61
	Lcd_vidDisplyStr(buffer);
    1cc2:	ce 01       	movw	r24, r28
    1cc4:	01 96       	adiw	r24, 0x01	; 1
    1cc6:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <Lcd_vidDisplyStr>
}
    1cca:	68 96       	adiw	r28, 0x18	; 24
    1ccc:	0f b6       	in	r0, 0x3f	; 63
    1cce:	f8 94       	cli
    1cd0:	de bf       	out	0x3e, r29	; 62
    1cd2:	0f be       	out	0x3f, r0	; 63
    1cd4:	cd bf       	out	0x3d, r28	; 61
    1cd6:	cf 91       	pop	r28
    1cd8:	df 91       	pop	r29
    1cda:	08 95       	ret

00001cdc <Keypad_vidInit>:
		{'7','8','9','C'},
		{'*','0','#','D'}
};

void Keypad_vidInit(void)
{
    1cdc:	df 93       	push	r29
    1cde:	cf 93       	push	r28
    1ce0:	cd b7       	in	r28, 0x3d	; 61
    1ce2:	de b7       	in	r29, 0x3e	; 62
	/*	Configure Rows Pins as input	*/
	Dio_vidconfigChanel(DIO_PORTC, DIO_PIN0, DIO_INPUT);/* ROW0	*/
    1ce4:	82 e0       	ldi	r24, 0x02	; 2
    1ce6:	60 e0       	ldi	r22, 0x00	; 0
    1ce8:	40 e0       	ldi	r20, 0x00	; 0
    1cea:	0e 94 e3 12 	call	0x25c6	; 0x25c6 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTC, DIO_PIN1, DIO_INPUT);/* ROW1	*/
    1cee:	82 e0       	ldi	r24, 0x02	; 2
    1cf0:	61 e0       	ldi	r22, 0x01	; 1
    1cf2:	40 e0       	ldi	r20, 0x00	; 0
    1cf4:	0e 94 e3 12 	call	0x25c6	; 0x25c6 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTC, DIO_PIN2, DIO_INPUT);/* ROW2	*/
    1cf8:	82 e0       	ldi	r24, 0x02	; 2
    1cfa:	62 e0       	ldi	r22, 0x02	; 2
    1cfc:	40 e0       	ldi	r20, 0x00	; 0
    1cfe:	0e 94 e3 12 	call	0x25c6	; 0x25c6 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTC, DIO_PIN3, DIO_INPUT);/* ROW3 */
    1d02:	82 e0       	ldi	r24, 0x02	; 2
    1d04:	63 e0       	ldi	r22, 0x03	; 3
    1d06:	40 e0       	ldi	r20, 0x00	; 0
    1d08:	0e 94 e3 12 	call	0x25c6	; 0x25c6 <Dio_vidconfigChanel>

	/*	Configure Columns Pins as output	*/
	Dio_vidconfigChanel(DIO_PORTC, DIO_PIN4, DIO_OUTPUT);/*	COL0 */
    1d0c:	82 e0       	ldi	r24, 0x02	; 2
    1d0e:	64 e0       	ldi	r22, 0x04	; 4
    1d10:	41 e0       	ldi	r20, 0x01	; 1
    1d12:	0e 94 e3 12 	call	0x25c6	; 0x25c6 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTC, DIO_PIN5, DIO_OUTPUT);/* COL1 */
    1d16:	82 e0       	ldi	r24, 0x02	; 2
    1d18:	65 e0       	ldi	r22, 0x05	; 5
    1d1a:	41 e0       	ldi	r20, 0x01	; 1
    1d1c:	0e 94 e3 12 	call	0x25c6	; 0x25c6 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTC, DIO_PIN6, DIO_OUTPUT);/* COL2 */
    1d20:	82 e0       	ldi	r24, 0x02	; 2
    1d22:	66 e0       	ldi	r22, 0x06	; 6
    1d24:	41 e0       	ldi	r20, 0x01	; 1
    1d26:	0e 94 e3 12 	call	0x25c6	; 0x25c6 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTC, DIO_PIN7, DIO_OUTPUT);/* COL3 */
    1d2a:	82 e0       	ldi	r24, 0x02	; 2
    1d2c:	67 e0       	ldi	r22, 0x07	; 7
    1d2e:	41 e0       	ldi	r20, 0x01	; 1
    1d30:	0e 94 e3 12 	call	0x25c6	; 0x25c6 <Dio_vidconfigChanel>

	Dio_vidPullUpEn(DIO_PORTC, DIO_PIN0);
    1d34:	82 e0       	ldi	r24, 0x02	; 2
    1d36:	60 e0       	ldi	r22, 0x00	; 0
    1d38:	0e 94 15 16 	call	0x2c2a	; 0x2c2a <Dio_vidPullUpEn>
	Dio_vidPullUpEn(DIO_PORTC, DIO_PIN1);
    1d3c:	82 e0       	ldi	r24, 0x02	; 2
    1d3e:	61 e0       	ldi	r22, 0x01	; 1
    1d40:	0e 94 15 16 	call	0x2c2a	; 0x2c2a <Dio_vidPullUpEn>
	Dio_vidPullUpEn(DIO_PORTC, DIO_PIN2);
    1d44:	82 e0       	ldi	r24, 0x02	; 2
    1d46:	62 e0       	ldi	r22, 0x02	; 2
    1d48:	0e 94 15 16 	call	0x2c2a	; 0x2c2a <Dio_vidPullUpEn>
	Dio_vidPullUpEn(DIO_PORTC, DIO_PIN3);
    1d4c:	82 e0       	ldi	r24, 0x02	; 2
    1d4e:	63 e0       	ldi	r22, 0x03	; 3
    1d50:	0e 94 15 16 	call	0x2c2a	; 0x2c2a <Dio_vidPullUpEn>


	Dio_vidwriteChanel(DIO_PORTC, DIO_PIN4, DIO_LOW);
    1d54:	82 e0       	ldi	r24, 0x02	; 2
    1d56:	64 e0       	ldi	r22, 0x04	; 4
    1d58:	40 e0       	ldi	r20, 0x00	; 0
    1d5a:	0e 94 c6 13 	call	0x278c	; 0x278c <Dio_vidwriteChanel>
	Dio_vidwriteChanel(DIO_PORTC, DIO_PIN5, DIO_LOW);
    1d5e:	82 e0       	ldi	r24, 0x02	; 2
    1d60:	65 e0       	ldi	r22, 0x05	; 5
    1d62:	40 e0       	ldi	r20, 0x00	; 0
    1d64:	0e 94 c6 13 	call	0x278c	; 0x278c <Dio_vidwriteChanel>
	Dio_vidwriteChanel(DIO_PORTC, DIO_PIN6, DIO_LOW);
    1d68:	82 e0       	ldi	r24, 0x02	; 2
    1d6a:	66 e0       	ldi	r22, 0x06	; 6
    1d6c:	40 e0       	ldi	r20, 0x00	; 0
    1d6e:	0e 94 c6 13 	call	0x278c	; 0x278c <Dio_vidwriteChanel>
	Dio_vidwriteChanel(DIO_PORTC, DIO_PIN7, DIO_LOW);
    1d72:	82 e0       	ldi	r24, 0x02	; 2
    1d74:	67 e0       	ldi	r22, 0x07	; 7
    1d76:	40 e0       	ldi	r20, 0x00	; 0
    1d78:	0e 94 c6 13 	call	0x278c	; 0x278c <Dio_vidwriteChanel>
}
    1d7c:	cf 91       	pop	r28
    1d7e:	df 91       	pop	r29
    1d80:	08 95       	ret

00001d82 <Keypad_IsPressed>:

static boolean Keypad_IsPressed(void)
{
    1d82:	df 93       	push	r29
    1d84:	cf 93       	push	r28
    1d86:	0f 92       	push	r0
    1d88:	cd b7       	in	r28, 0x3d	; 61
    1d8a:	de b7       	in	r29, 0x3e	; 62
	if (
    1d8c:	82 e0       	ldi	r24, 0x02	; 2
    1d8e:	60 e0       	ldi	r22, 0x00	; 0
    1d90:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <Dio_udtreadChanel>
    1d94:	88 23       	and	r24, r24
    1d96:	91 f0       	breq	.+36     	; 0x1dbc <Keypad_IsPressed+0x3a>
    1d98:	82 e0       	ldi	r24, 0x02	; 2
    1d9a:	61 e0       	ldi	r22, 0x01	; 1
    1d9c:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <Dio_udtreadChanel>
    1da0:	88 23       	and	r24, r24
    1da2:	61 f0       	breq	.+24     	; 0x1dbc <Keypad_IsPressed+0x3a>
    1da4:	82 e0       	ldi	r24, 0x02	; 2
    1da6:	62 e0       	ldi	r22, 0x02	; 2
    1da8:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <Dio_udtreadChanel>
    1dac:	88 23       	and	r24, r24
    1dae:	31 f0       	breq	.+12     	; 0x1dbc <Keypad_IsPressed+0x3a>
    1db0:	82 e0       	ldi	r24, 0x02	; 2
    1db2:	63 e0       	ldi	r22, 0x03	; 3
    1db4:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <Dio_udtreadChanel>
    1db8:	88 23       	and	r24, r24
    1dba:	19 f4       	brne	.+6      	; 0x1dc2 <Keypad_IsPressed+0x40>
			Dio_udtreadChanel(DIO_PORTC, DIO_PIN1) == DIO_LOW ||
			Dio_udtreadChanel(DIO_PORTC, DIO_PIN2) == DIO_LOW ||
			Dio_udtreadChanel(DIO_PORTC, DIO_PIN3) == DIO_LOW
	)
	{
		return TRUE;
    1dbc:	81 e0       	ldi	r24, 0x01	; 1
    1dbe:	89 83       	std	Y+1, r24	; 0x01
    1dc0:	01 c0       	rjmp	.+2      	; 0x1dc4 <Keypad_IsPressed+0x42>
	}
	else
	{
		return FALSE;
    1dc2:	19 82       	std	Y+1, r1	; 0x01
    1dc4:	89 81       	ldd	r24, Y+1	; 0x01
	}
}
    1dc6:	0f 90       	pop	r0
    1dc8:	cf 91       	pop	r28
    1dca:	df 91       	pop	r29
    1dcc:	08 95       	ret

00001dce <Keypad_GetRow>:


static kp_row_t Keypad_GetRow(void)
{
    1dce:	df 93       	push	r29
    1dd0:	cf 93       	push	r28
    1dd2:	0f 92       	push	r0
    1dd4:	cd b7       	in	r28, 0x3d	; 61
    1dd6:	de b7       	in	r29, 0x3e	; 62
	kp_row_t loc_ButtonRow = KP_NOROW;
    1dd8:	8f ef       	ldi	r24, 0xFF	; 255
    1dda:	89 83       	std	Y+1, r24	; 0x01
	if (Dio_udtreadChanel(DIO_PORTC, DIO_PIN0) == DIO_LOW)
    1ddc:	82 e0       	ldi	r24, 0x02	; 2
    1dde:	60 e0       	ldi	r22, 0x00	; 0
    1de0:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <Dio_udtreadChanel>
    1de4:	88 23       	and	r24, r24
    1de6:	11 f4       	brne	.+4      	; 0x1dec <Keypad_GetRow+0x1e>
	{
		loc_ButtonRow = KP_ROW0;
    1de8:	19 82       	std	Y+1, r1	; 0x01
    1dea:	1d c0       	rjmp	.+58     	; 0x1e26 <Keypad_GetRow+0x58>
	}
	else if (Dio_udtreadChanel(DIO_PORTC, DIO_PIN1) == DIO_LOW)
    1dec:	82 e0       	ldi	r24, 0x02	; 2
    1dee:	61 e0       	ldi	r22, 0x01	; 1
    1df0:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <Dio_udtreadChanel>
    1df4:	88 23       	and	r24, r24
    1df6:	19 f4       	brne	.+6      	; 0x1dfe <Keypad_GetRow+0x30>
	{
		loc_ButtonRow = KP_ROW1;
    1df8:	81 e0       	ldi	r24, 0x01	; 1
    1dfa:	89 83       	std	Y+1, r24	; 0x01
    1dfc:	14 c0       	rjmp	.+40     	; 0x1e26 <Keypad_GetRow+0x58>
	}
	else if (Dio_udtreadChanel(DIO_PORTC, DIO_PIN2) == DIO_LOW)
    1dfe:	82 e0       	ldi	r24, 0x02	; 2
    1e00:	62 e0       	ldi	r22, 0x02	; 2
    1e02:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <Dio_udtreadChanel>
    1e06:	88 23       	and	r24, r24
    1e08:	19 f4       	brne	.+6      	; 0x1e10 <Keypad_GetRow+0x42>
	{
		loc_ButtonRow = KP_ROW2;
    1e0a:	82 e0       	ldi	r24, 0x02	; 2
    1e0c:	89 83       	std	Y+1, r24	; 0x01
    1e0e:	0b c0       	rjmp	.+22     	; 0x1e26 <Keypad_GetRow+0x58>
	}
	else if (Dio_udtreadChanel(DIO_PORTC, DIO_PIN3) == DIO_LOW)
    1e10:	82 e0       	ldi	r24, 0x02	; 2
    1e12:	63 e0       	ldi	r22, 0x03	; 3
    1e14:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <Dio_udtreadChanel>
    1e18:	88 23       	and	r24, r24
    1e1a:	19 f4       	brne	.+6      	; 0x1e22 <Keypad_GetRow+0x54>
	{
		loc_ButtonRow = KP_ROW3;
    1e1c:	83 e0       	ldi	r24, 0x03	; 3
    1e1e:	89 83       	std	Y+1, r24	; 0x01
    1e20:	02 c0       	rjmp	.+4      	; 0x1e26 <Keypad_GetRow+0x58>
	}
	else
	{
		loc_ButtonRow = KP_NOROW;
    1e22:	8f ef       	ldi	r24, 0xFF	; 255
    1e24:	89 83       	std	Y+1, r24	; 0x01
	}
	return loc_ButtonRow;
    1e26:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e28:	0f 90       	pop	r0
    1e2a:	cf 91       	pop	r28
    1e2c:	df 91       	pop	r29
    1e2e:	08 95       	ret

00001e30 <Keypad_GetCol>:

static kp_col_t Keypad_GetCol(kp_row_t current_row)
{
    1e30:	df 93       	push	r29
    1e32:	cf 93       	push	r28
    1e34:	00 d0       	rcall	.+0      	; 0x1e36 <Keypad_GetCol+0x6>
    1e36:	cd b7       	in	r28, 0x3d	; 61
    1e38:	de b7       	in	r29, 0x3e	; 62
    1e3a:	8a 83       	std	Y+2, r24	; 0x02
	kp_col_t loc_ButtonCol = KP_NOCOL;
    1e3c:	8f ef       	ldi	r24, 0xFF	; 255
    1e3e:	89 83       	std	Y+1, r24	; 0x01

	Dio_vidwriteChanel(DIO_PORTC, DIO_PIN4, DIO_LOW);
    1e40:	82 e0       	ldi	r24, 0x02	; 2
    1e42:	64 e0       	ldi	r22, 0x04	; 4
    1e44:	40 e0       	ldi	r20, 0x00	; 0
    1e46:	0e 94 c6 13 	call	0x278c	; 0x278c <Dio_vidwriteChanel>
	Dio_vidwriteChanel(DIO_PORTC, DIO_PIN5, DIO_HIGH);
    1e4a:	82 e0       	ldi	r24, 0x02	; 2
    1e4c:	65 e0       	ldi	r22, 0x05	; 5
    1e4e:	41 e0       	ldi	r20, 0x01	; 1
    1e50:	0e 94 c6 13 	call	0x278c	; 0x278c <Dio_vidwriteChanel>
	Dio_vidwriteChanel(DIO_PORTC, DIO_PIN6, DIO_HIGH);
    1e54:	82 e0       	ldi	r24, 0x02	; 2
    1e56:	66 e0       	ldi	r22, 0x06	; 6
    1e58:	41 e0       	ldi	r20, 0x01	; 1
    1e5a:	0e 94 c6 13 	call	0x278c	; 0x278c <Dio_vidwriteChanel>
	Dio_vidwriteChanel(DIO_PORTC, DIO_PIN7, DIO_HIGH);
    1e5e:	82 e0       	ldi	r24, 0x02	; 2
    1e60:	67 e0       	ldi	r22, 0x07	; 7
    1e62:	41 e0       	ldi	r20, 0x01	; 1
    1e64:	0e 94 c6 13 	call	0x278c	; 0x278c <Dio_vidwriteChanel>

	if (Keypad_GetRow() == current_row)
    1e68:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <Keypad_GetRow>
    1e6c:	98 2f       	mov	r25, r24
    1e6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e70:	98 17       	cp	r25, r24
    1e72:	11 f4       	brne	.+4      	; 0x1e78 <Keypad_GetCol+0x48>
	{
		loc_ButtonCol = KP_COL0;
    1e74:	19 82       	std	Y+1, r1	; 0x01
    1e76:	59 c0       	rjmp	.+178    	; 0x1f2a <Keypad_GetCol+0xfa>
	}
	else
	{
		Dio_vidwriteChanel(DIO_PORTC, DIO_PIN4, DIO_HIGH);
    1e78:	82 e0       	ldi	r24, 0x02	; 2
    1e7a:	64 e0       	ldi	r22, 0x04	; 4
    1e7c:	41 e0       	ldi	r20, 0x01	; 1
    1e7e:	0e 94 c6 13 	call	0x278c	; 0x278c <Dio_vidwriteChanel>
		Dio_vidwriteChanel(DIO_PORTC, DIO_PIN5, DIO_LOW);
    1e82:	82 e0       	ldi	r24, 0x02	; 2
    1e84:	65 e0       	ldi	r22, 0x05	; 5
    1e86:	40 e0       	ldi	r20, 0x00	; 0
    1e88:	0e 94 c6 13 	call	0x278c	; 0x278c <Dio_vidwriteChanel>
		Dio_vidwriteChanel(DIO_PORTC, DIO_PIN6, DIO_HIGH);
    1e8c:	82 e0       	ldi	r24, 0x02	; 2
    1e8e:	66 e0       	ldi	r22, 0x06	; 6
    1e90:	41 e0       	ldi	r20, 0x01	; 1
    1e92:	0e 94 c6 13 	call	0x278c	; 0x278c <Dio_vidwriteChanel>
		Dio_vidwriteChanel(DIO_PORTC, DIO_PIN7, DIO_HIGH);
    1e96:	82 e0       	ldi	r24, 0x02	; 2
    1e98:	67 e0       	ldi	r22, 0x07	; 7
    1e9a:	41 e0       	ldi	r20, 0x01	; 1
    1e9c:	0e 94 c6 13 	call	0x278c	; 0x278c <Dio_vidwriteChanel>

		if (Keypad_GetRow() == current_row)
    1ea0:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <Keypad_GetRow>
    1ea4:	98 2f       	mov	r25, r24
    1ea6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ea8:	98 17       	cp	r25, r24
    1eaa:	19 f4       	brne	.+6      	; 0x1eb2 <Keypad_GetCol+0x82>
		{
			loc_ButtonCol = KP_COL1;
    1eac:	81 e0       	ldi	r24, 0x01	; 1
    1eae:	89 83       	std	Y+1, r24	; 0x01
    1eb0:	3c c0       	rjmp	.+120    	; 0x1f2a <Keypad_GetCol+0xfa>
		}
		else
		{
			Dio_vidwriteChanel(DIO_PORTC, DIO_PIN4, DIO_HIGH);
    1eb2:	82 e0       	ldi	r24, 0x02	; 2
    1eb4:	64 e0       	ldi	r22, 0x04	; 4
    1eb6:	41 e0       	ldi	r20, 0x01	; 1
    1eb8:	0e 94 c6 13 	call	0x278c	; 0x278c <Dio_vidwriteChanel>
			Dio_vidwriteChanel(DIO_PORTC, DIO_PIN5, DIO_HIGH);
    1ebc:	82 e0       	ldi	r24, 0x02	; 2
    1ebe:	65 e0       	ldi	r22, 0x05	; 5
    1ec0:	41 e0       	ldi	r20, 0x01	; 1
    1ec2:	0e 94 c6 13 	call	0x278c	; 0x278c <Dio_vidwriteChanel>
			Dio_vidwriteChanel(DIO_PORTC, DIO_PIN6, DIO_LOW);
    1ec6:	82 e0       	ldi	r24, 0x02	; 2
    1ec8:	66 e0       	ldi	r22, 0x06	; 6
    1eca:	40 e0       	ldi	r20, 0x00	; 0
    1ecc:	0e 94 c6 13 	call	0x278c	; 0x278c <Dio_vidwriteChanel>
			Dio_vidwriteChanel(DIO_PORTC, DIO_PIN7, DIO_HIGH);
    1ed0:	82 e0       	ldi	r24, 0x02	; 2
    1ed2:	67 e0       	ldi	r22, 0x07	; 7
    1ed4:	41 e0       	ldi	r20, 0x01	; 1
    1ed6:	0e 94 c6 13 	call	0x278c	; 0x278c <Dio_vidwriteChanel>

			if (Keypad_GetRow() == current_row)
    1eda:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <Keypad_GetRow>
    1ede:	98 2f       	mov	r25, r24
    1ee0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ee2:	98 17       	cp	r25, r24
    1ee4:	19 f4       	brne	.+6      	; 0x1eec <Keypad_GetCol+0xbc>
			{
				loc_ButtonCol = KP_COL2;
    1ee6:	82 e0       	ldi	r24, 0x02	; 2
    1ee8:	89 83       	std	Y+1, r24	; 0x01
    1eea:	1f c0       	rjmp	.+62     	; 0x1f2a <Keypad_GetCol+0xfa>
			}
			else
			{
				Dio_vidwriteChanel(DIO_PORTC, DIO_PIN4, DIO_HIGH);
    1eec:	82 e0       	ldi	r24, 0x02	; 2
    1eee:	64 e0       	ldi	r22, 0x04	; 4
    1ef0:	41 e0       	ldi	r20, 0x01	; 1
    1ef2:	0e 94 c6 13 	call	0x278c	; 0x278c <Dio_vidwriteChanel>
				Dio_vidwriteChanel(DIO_PORTC, DIO_PIN5, DIO_HIGH);
    1ef6:	82 e0       	ldi	r24, 0x02	; 2
    1ef8:	65 e0       	ldi	r22, 0x05	; 5
    1efa:	41 e0       	ldi	r20, 0x01	; 1
    1efc:	0e 94 c6 13 	call	0x278c	; 0x278c <Dio_vidwriteChanel>
				Dio_vidwriteChanel(DIO_PORTC, DIO_PIN6, DIO_HIGH);
    1f00:	82 e0       	ldi	r24, 0x02	; 2
    1f02:	66 e0       	ldi	r22, 0x06	; 6
    1f04:	41 e0       	ldi	r20, 0x01	; 1
    1f06:	0e 94 c6 13 	call	0x278c	; 0x278c <Dio_vidwriteChanel>
				Dio_vidwriteChanel(DIO_PORTC, DIO_PIN7, DIO_LOW);
    1f0a:	82 e0       	ldi	r24, 0x02	; 2
    1f0c:	67 e0       	ldi	r22, 0x07	; 7
    1f0e:	40 e0       	ldi	r20, 0x00	; 0
    1f10:	0e 94 c6 13 	call	0x278c	; 0x278c <Dio_vidwriteChanel>

				if (Keypad_GetRow() == current_row)
    1f14:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <Keypad_GetRow>
    1f18:	98 2f       	mov	r25, r24
    1f1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f1c:	98 17       	cp	r25, r24
    1f1e:	19 f4       	brne	.+6      	; 0x1f26 <Keypad_GetCol+0xf6>
				{
					loc_ButtonCol = KP_COL3;
    1f20:	83 e0       	ldi	r24, 0x03	; 3
    1f22:	89 83       	std	Y+1, r24	; 0x01
    1f24:	02 c0       	rjmp	.+4      	; 0x1f2a <Keypad_GetCol+0xfa>
				}
				else
				{
					loc_ButtonCol = KP_NOCOL;
    1f26:	8f ef       	ldi	r24, 0xFF	; 255
    1f28:	89 83       	std	Y+1, r24	; 0x01
				}
			}
		}
	}
	return loc_ButtonCol;
    1f2a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f2c:	0f 90       	pop	r0
    1f2e:	0f 90       	pop	r0
    1f30:	cf 91       	pop	r28
    1f32:	df 91       	pop	r29
    1f34:	08 95       	ret

00001f36 <Keypad_u8GetKey>:

u8 Keypad_u8GetKey(void)
{
    1f36:	df 93       	push	r29
    1f38:	cf 93       	push	r28
    1f3a:	00 d0       	rcall	.+0      	; 0x1f3c <Keypad_u8GetKey+0x6>
    1f3c:	0f 92       	push	r0
    1f3e:	cd b7       	in	r28, 0x3d	; 61
    1f40:	de b7       	in	r29, 0x3e	; 62
	u8 loc_key = 0xFF;
    1f42:	8f ef       	ldi	r24, 0xFF	; 255
    1f44:	8b 83       	std	Y+3, r24	; 0x03
	kp_row_t loc_Row = KP_NOROW;
    1f46:	8f ef       	ldi	r24, 0xFF	; 255
    1f48:	8a 83       	std	Y+2, r24	; 0x02
	kp_row_t loc_Col = KP_NOCOL;
    1f4a:	8f ef       	ldi	r24, 0xFF	; 255
    1f4c:	89 83       	std	Y+1, r24	; 0x01

	Keypad_vidInit();
    1f4e:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <Keypad_vidInit>
	/*	Check If Keypad Pressed*/
	if (Keypad_IsPressed() == TRUE)
    1f52:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <Keypad_IsPressed>
    1f56:	81 30       	cpi	r24, 0x01	; 1
    1f58:	f1 f4       	brne	.+60     	; 0x1f96 <Keypad_u8GetKey+0x60>
	{
		/*	Get pressed key ROW*/
		loc_Row = Keypad_GetRow();
    1f5a:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <Keypad_GetRow>
    1f5e:	8a 83       	std	Y+2, r24	; 0x02
		/*	Get pressed key COLUMN	*/
		loc_Col = Keypad_GetCol(loc_Row);
    1f60:	8a 81       	ldd	r24, Y+2	; 0x02
    1f62:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <Keypad_GetCol>
    1f66:	89 83       	std	Y+1, r24	; 0x01
		/* loc_key = Keypad_layout[ROW][COLUMN]	*/
		loc_key = Keypad_layout[loc_Row][loc_Col];
    1f68:	8a 81       	ldd	r24, Y+2	; 0x02
    1f6a:	48 2f       	mov	r20, r24
    1f6c:	55 27       	eor	r21, r21
    1f6e:	47 fd       	sbrc	r20, 7
    1f70:	50 95       	com	r21
    1f72:	89 81       	ldd	r24, Y+1	; 0x01
    1f74:	28 2f       	mov	r18, r24
    1f76:	33 27       	eor	r19, r19
    1f78:	27 fd       	sbrc	r18, 7
    1f7a:	30 95       	com	r19
    1f7c:	ca 01       	movw	r24, r20
    1f7e:	88 0f       	add	r24, r24
    1f80:	99 1f       	adc	r25, r25
    1f82:	88 0f       	add	r24, r24
    1f84:	99 1f       	adc	r25, r25
    1f86:	82 0f       	add	r24, r18
    1f88:	93 1f       	adc	r25, r19
    1f8a:	fc 01       	movw	r30, r24
    1f8c:	e3 58       	subi	r30, 0x83	; 131
    1f8e:	fe 4f       	sbci	r31, 0xFE	; 254
    1f90:	80 81       	ld	r24, Z
    1f92:	8b 83       	std	Y+3, r24	; 0x03
    1f94:	02 c0       	rjmp	.+4      	; 0x1f9a <Keypad_u8GetKey+0x64>
	}
	else
	{
		/*	Do Nothing	*/
		loc_key = 0xFF;
    1f96:	8f ef       	ldi	r24, 0xFF	; 255
    1f98:	8b 83       	std	Y+3, r24	; 0x03
	}
	return loc_key;
    1f9a:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1f9c:	0f 90       	pop	r0
    1f9e:	0f 90       	pop	r0
    1fa0:	0f 90       	pop	r0
    1fa2:	cf 91       	pop	r28
    1fa4:	df 91       	pop	r29
    1fa6:	08 95       	ret

00001fa8 <Dc_Motor_vidInit>:

#include "Dc_Motor.h"
#include "util/delay.h"

void Dc_Motor_vidInit(void)
{
    1fa8:	df 93       	push	r29
    1faa:	cf 93       	push	r28
    1fac:	cd b7       	in	r28, 0x3d	; 61
    1fae:	de b7       	in	r29, 0x3e	; 62
	/*	Configure Motor Control Pins as Outputs	*/

	/*	Make Sure Motor is Stop	*/

}
    1fb0:	cf 91       	pop	r28
    1fb2:	df 91       	pop	r29
    1fb4:	08 95       	ret

00001fb6 <Dc_Motor_vidStart>:
void Dc_Motor_vidStart(motor_dir_t dir)
{
    1fb6:	df 93       	push	r29
    1fb8:	cf 93       	push	r28
    1fba:	0f 92       	push	r0
    1fbc:	cd b7       	in	r28, 0x3d	; 61
    1fbe:	de b7       	in	r29, 0x3e	; 62
    1fc0:	89 83       	std	Y+1, r24	; 0x01

	}

	/*	Set EN1 Pin	*/

}
    1fc2:	0f 90       	pop	r0
    1fc4:	cf 91       	pop	r28
    1fc6:	df 91       	pop	r29
    1fc8:	08 95       	ret

00001fca <Dc_Motor_vidStop>:
void Dc_Motor_vidStop(void)
{
    1fca:	df 93       	push	r29
    1fcc:	cf 93       	push	r28
    1fce:	cd b7       	in	r28, 0x3d	; 61
    1fd0:	de b7       	in	r29, 0x3e	; 62
    1fd2:	2e 97       	sbiw	r28, 0x0e	; 14
    1fd4:	0f b6       	in	r0, 0x3f	; 63
    1fd6:	f8 94       	cli
    1fd8:	de bf       	out	0x3e, r29	; 62
    1fda:	0f be       	out	0x3f, r0	; 63
    1fdc:	cd bf       	out	0x3d, r28	; 61
    1fde:	80 e0       	ldi	r24, 0x00	; 0
    1fe0:	90 e8       	ldi	r25, 0x80	; 128
    1fe2:	ab e3       	ldi	r26, 0x3B	; 59
    1fe4:	b5 e4       	ldi	r27, 0x45	; 69
    1fe6:	8b 87       	std	Y+11, r24	; 0x0b
    1fe8:	9c 87       	std	Y+12, r25	; 0x0c
    1fea:	ad 87       	std	Y+13, r26	; 0x0d
    1fec:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fee:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ff0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ff2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ff4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ff6:	20 e0       	ldi	r18, 0x00	; 0
    1ff8:	30 e0       	ldi	r19, 0x00	; 0
    1ffa:	4a e7       	ldi	r20, 0x7A	; 122
    1ffc:	55 e4       	ldi	r21, 0x45	; 69
    1ffe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2002:	dc 01       	movw	r26, r24
    2004:	cb 01       	movw	r24, r22
    2006:	8f 83       	std	Y+7, r24	; 0x07
    2008:	98 87       	std	Y+8, r25	; 0x08
    200a:	a9 87       	std	Y+9, r26	; 0x09
    200c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    200e:	6f 81       	ldd	r22, Y+7	; 0x07
    2010:	78 85       	ldd	r23, Y+8	; 0x08
    2012:	89 85       	ldd	r24, Y+9	; 0x09
    2014:	9a 85       	ldd	r25, Y+10	; 0x0a
    2016:	20 e0       	ldi	r18, 0x00	; 0
    2018:	30 e0       	ldi	r19, 0x00	; 0
    201a:	40 e8       	ldi	r20, 0x80	; 128
    201c:	5f e3       	ldi	r21, 0x3F	; 63
    201e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2022:	88 23       	and	r24, r24
    2024:	2c f4       	brge	.+10     	; 0x2030 <Dc_Motor_vidStop+0x66>
		__ticks = 1;
    2026:	81 e0       	ldi	r24, 0x01	; 1
    2028:	90 e0       	ldi	r25, 0x00	; 0
    202a:	9e 83       	std	Y+6, r25	; 0x06
    202c:	8d 83       	std	Y+5, r24	; 0x05
    202e:	3f c0       	rjmp	.+126    	; 0x20ae <Dc_Motor_vidStop+0xe4>
	else if (__tmp > 65535)
    2030:	6f 81       	ldd	r22, Y+7	; 0x07
    2032:	78 85       	ldd	r23, Y+8	; 0x08
    2034:	89 85       	ldd	r24, Y+9	; 0x09
    2036:	9a 85       	ldd	r25, Y+10	; 0x0a
    2038:	20 e0       	ldi	r18, 0x00	; 0
    203a:	3f ef       	ldi	r19, 0xFF	; 255
    203c:	4f e7       	ldi	r20, 0x7F	; 127
    203e:	57 e4       	ldi	r21, 0x47	; 71
    2040:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2044:	18 16       	cp	r1, r24
    2046:	4c f5       	brge	.+82     	; 0x209a <Dc_Motor_vidStop+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2048:	6b 85       	ldd	r22, Y+11	; 0x0b
    204a:	7c 85       	ldd	r23, Y+12	; 0x0c
    204c:	8d 85       	ldd	r24, Y+13	; 0x0d
    204e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2050:	20 e0       	ldi	r18, 0x00	; 0
    2052:	30 e0       	ldi	r19, 0x00	; 0
    2054:	40 e2       	ldi	r20, 0x20	; 32
    2056:	51 e4       	ldi	r21, 0x41	; 65
    2058:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    205c:	dc 01       	movw	r26, r24
    205e:	cb 01       	movw	r24, r22
    2060:	bc 01       	movw	r22, r24
    2062:	cd 01       	movw	r24, r26
    2064:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2068:	dc 01       	movw	r26, r24
    206a:	cb 01       	movw	r24, r22
    206c:	9e 83       	std	Y+6, r25	; 0x06
    206e:	8d 83       	std	Y+5, r24	; 0x05
    2070:	0f c0       	rjmp	.+30     	; 0x2090 <Dc_Motor_vidStop+0xc6>
    2072:	80 e9       	ldi	r24, 0x90	; 144
    2074:	91 e0       	ldi	r25, 0x01	; 1
    2076:	9c 83       	std	Y+4, r25	; 0x04
    2078:	8b 83       	std	Y+3, r24	; 0x03
    207a:	8b 81       	ldd	r24, Y+3	; 0x03
    207c:	9c 81       	ldd	r25, Y+4	; 0x04
    207e:	01 97       	sbiw	r24, 0x01	; 1
    2080:	f1 f7       	brne	.-4      	; 0x207e <Dc_Motor_vidStop+0xb4>
    2082:	9c 83       	std	Y+4, r25	; 0x04
    2084:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2086:	8d 81       	ldd	r24, Y+5	; 0x05
    2088:	9e 81       	ldd	r25, Y+6	; 0x06
    208a:	01 97       	sbiw	r24, 0x01	; 1
    208c:	9e 83       	std	Y+6, r25	; 0x06
    208e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2090:	8d 81       	ldd	r24, Y+5	; 0x05
    2092:	9e 81       	ldd	r25, Y+6	; 0x06
    2094:	00 97       	sbiw	r24, 0x00	; 0
    2096:	69 f7       	brne	.-38     	; 0x2072 <Dc_Motor_vidStop+0xa8>
    2098:	14 c0       	rjmp	.+40     	; 0x20c2 <Dc_Motor_vidStop+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    209a:	6f 81       	ldd	r22, Y+7	; 0x07
    209c:	78 85       	ldd	r23, Y+8	; 0x08
    209e:	89 85       	ldd	r24, Y+9	; 0x09
    20a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    20a2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20a6:	dc 01       	movw	r26, r24
    20a8:	cb 01       	movw	r24, r22
    20aa:	9e 83       	std	Y+6, r25	; 0x06
    20ac:	8d 83       	std	Y+5, r24	; 0x05
    20ae:	8d 81       	ldd	r24, Y+5	; 0x05
    20b0:	9e 81       	ldd	r25, Y+6	; 0x06
    20b2:	9a 83       	std	Y+2, r25	; 0x02
    20b4:	89 83       	std	Y+1, r24	; 0x01
    20b6:	89 81       	ldd	r24, Y+1	; 0x01
    20b8:	9a 81       	ldd	r25, Y+2	; 0x02
    20ba:	01 97       	sbiw	r24, 0x01	; 1
    20bc:	f1 f7       	brne	.-4      	; 0x20ba <Dc_Motor_vidStop+0xf0>
    20be:	9a 83       	std	Y+2, r25	; 0x02
    20c0:	89 83       	std	Y+1, r24	; 0x01
	/*	Clear EN1 Pin	*/

	/*	Wait Till Motor Stop	*/
	_delay_ms(3000);
}
    20c2:	2e 96       	adiw	r28, 0x0e	; 14
    20c4:	0f b6       	in	r0, 0x3f	; 63
    20c6:	f8 94       	cli
    20c8:	de bf       	out	0x3e, r29	; 62
    20ca:	0f be       	out	0x3f, r0	; 63
    20cc:	cd bf       	out	0x3d, r28	; 61
    20ce:	cf 91       	pop	r28
    20d0:	df 91       	pop	r29
    20d2:	08 95       	ret

000020d4 <Buzzer_vidinit>:
 *      Author: Eng_Fawzi
 */
#include "Dio.h"

void Buzzer_vidinit(void)
{
    20d4:	df 93       	push	r29
    20d6:	cf 93       	push	r28
    20d8:	cd b7       	in	r28, 0x3d	; 61
    20da:	de b7       	in	r29, 0x3e	; 62
	Dio_vidconfigChanel(DIO_PORTA,DIO_PIN3,DIO_OUTPUT);
    20dc:	80 e0       	ldi	r24, 0x00	; 0
    20de:	63 e0       	ldi	r22, 0x03	; 3
    20e0:	41 e0       	ldi	r20, 0x01	; 1
    20e2:	0e 94 e3 12 	call	0x25c6	; 0x25c6 <Dio_vidconfigChanel>
}
    20e6:	cf 91       	pop	r28
    20e8:	df 91       	pop	r29
    20ea:	08 95       	ret

000020ec <Buzzer_vidbuzzerOn>:
void Buzzer_vidbuzzerOn(void)
{
    20ec:	df 93       	push	r29
    20ee:	cf 93       	push	r28
    20f0:	cd b7       	in	r28, 0x3d	; 61
    20f2:	de b7       	in	r29, 0x3e	; 62
	Dio_vidwriteChanel(DIO_PORTA, DIO_PIN3, DIO_HIGH);
    20f4:	80 e0       	ldi	r24, 0x00	; 0
    20f6:	63 e0       	ldi	r22, 0x03	; 3
    20f8:	41 e0       	ldi	r20, 0x01	; 1
    20fa:	0e 94 c6 13 	call	0x278c	; 0x278c <Dio_vidwriteChanel>
}
    20fe:	cf 91       	pop	r28
    2100:	df 91       	pop	r29
    2102:	08 95       	ret

00002104 <Buzzer_vidbuzzerOff>:
void Buzzer_vidbuzzerOff(void)
{
    2104:	df 93       	push	r29
    2106:	cf 93       	push	r28
    2108:	cd b7       	in	r28, 0x3d	; 61
    210a:	de b7       	in	r29, 0x3e	; 62
	Dio_vidwriteChanel(DIO_PORTA, DIO_PIN3, DIO_LOW);
    210c:	80 e0       	ldi	r24, 0x00	; 0
    210e:	63 e0       	ldi	r22, 0x03	; 3
    2110:	40 e0       	ldi	r20, 0x00	; 0
    2112:	0e 94 c6 13 	call	0x278c	; 0x278c <Dio_vidwriteChanel>
}
    2116:	cf 91       	pop	r28
    2118:	df 91       	pop	r29
    211a:	08 95       	ret

0000211c <Button_vidbuttonInit>:
 */
#include "Button.h"
#include "Dio.h"

void Button_vidbuttonInit(void)
{
    211c:	df 93       	push	r29
    211e:	cf 93       	push	r28
    2120:	cd b7       	in	r28, 0x3d	; 61
    2122:	de b7       	in	r29, 0x3e	; 62
	Dio_vidconfigChanel(DIO_PORTB, DIO_PIN0, DIO_INPUT);
    2124:	81 e0       	ldi	r24, 0x01	; 1
    2126:	60 e0       	ldi	r22, 0x00	; 0
    2128:	40 e0       	ldi	r20, 0x00	; 0
    212a:	0e 94 e3 12 	call	0x25c6	; 0x25c6 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTD, DIO_PIN6, DIO_INPUT);
    212e:	83 e0       	ldi	r24, 0x03	; 3
    2130:	66 e0       	ldi	r22, 0x06	; 6
    2132:	40 e0       	ldi	r20, 0x00	; 0
    2134:	0e 94 e3 12 	call	0x25c6	; 0x25c6 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTD, DIO_PIN2, DIO_INPUT);
    2138:	83 e0       	ldi	r24, 0x03	; 3
    213a:	62 e0       	ldi	r22, 0x02	; 2
    213c:	40 e0       	ldi	r20, 0x00	; 0
    213e:	0e 94 e3 12 	call	0x25c6	; 0x25c6 <Dio_vidconfigChanel>
}
    2142:	cf 91       	pop	r28
    2144:	df 91       	pop	r29
    2146:	08 95       	ret

00002148 <Button_udtbuttonStatus>:


button_butStatus_t Button_udtbuttonStatus(button_buttonId_t butnId)
{
    2148:	df 93       	push	r29
    214a:	cf 93       	push	r28
    214c:	00 d0       	rcall	.+0      	; 0x214e <Button_udtbuttonStatus+0x6>
    214e:	00 d0       	rcall	.+0      	; 0x2150 <Button_udtbuttonStatus+0x8>
    2150:	cd b7       	in	r28, 0x3d	; 61
    2152:	de b7       	in	r29, 0x3e	; 62
    2154:	8a 83       	std	Y+2, r24	; 0x02
	button_butStatus_t locBtnStatus = RELAEASED;
    2156:	19 82       	std	Y+1, r1	; 0x01
	switch (butnId)
    2158:	8a 81       	ldd	r24, Y+2	; 0x02
    215a:	28 2f       	mov	r18, r24
    215c:	30 e0       	ldi	r19, 0x00	; 0
    215e:	3c 83       	std	Y+4, r19	; 0x04
    2160:	2b 83       	std	Y+3, r18	; 0x03
    2162:	8b 81       	ldd	r24, Y+3	; 0x03
    2164:	9c 81       	ldd	r25, Y+4	; 0x04
    2166:	81 30       	cpi	r24, 0x01	; 1
    2168:	91 05       	cpc	r25, r1
    216a:	a1 f0       	breq	.+40     	; 0x2194 <Button_udtbuttonStatus+0x4c>
    216c:	2b 81       	ldd	r18, Y+3	; 0x03
    216e:	3c 81       	ldd	r19, Y+4	; 0x04
    2170:	22 30       	cpi	r18, 0x02	; 2
    2172:	31 05       	cpc	r19, r1
    2174:	d1 f0       	breq	.+52     	; 0x21aa <Button_udtbuttonStatus+0x62>
    2176:	8b 81       	ldd	r24, Y+3	; 0x03
    2178:	9c 81       	ldd	r25, Y+4	; 0x04
    217a:	00 97       	sbiw	r24, 0x00	; 0
    217c:	01 f5       	brne	.+64     	; 0x21be <Button_udtbuttonStatus+0x76>
	{
		case BUTTON0:
			if (Dio_udtreadChanel(DIO_PORTB, DIO_PIN0) == DIO_HIGH)
    217e:	81 e0       	ldi	r24, 0x01	; 1
    2180:	60 e0       	ldi	r22, 0x00	; 0
    2182:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <Dio_udtreadChanel>
    2186:	81 30       	cpi	r24, 0x01	; 1
    2188:	19 f4       	brne	.+6      	; 0x2190 <Button_udtbuttonStatus+0x48>
			{
				locBtnStatus = PRESSED;
    218a:	81 e0       	ldi	r24, 0x01	; 1
    218c:	89 83       	std	Y+1, r24	; 0x01
    218e:	17 c0       	rjmp	.+46     	; 0x21be <Button_udtbuttonStatus+0x76>
			}
			else
			{
				locBtnStatus = RELAEASED;
    2190:	19 82       	std	Y+1, r1	; 0x01
    2192:	15 c0       	rjmp	.+42     	; 0x21be <Button_udtbuttonStatus+0x76>
			}
			break;

		case BUTTON1:
			if (Dio_udtreadChanel(DIO_PORTD, DIO_PIN6) == DIO_HIGH)
    2194:	83 e0       	ldi	r24, 0x03	; 3
    2196:	66 e0       	ldi	r22, 0x06	; 6
    2198:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <Dio_udtreadChanel>
    219c:	81 30       	cpi	r24, 0x01	; 1
    219e:	19 f4       	brne	.+6      	; 0x21a6 <Button_udtbuttonStatus+0x5e>
			{
				locBtnStatus = PRESSED;
    21a0:	81 e0       	ldi	r24, 0x01	; 1
    21a2:	89 83       	std	Y+1, r24	; 0x01
    21a4:	0c c0       	rjmp	.+24     	; 0x21be <Button_udtbuttonStatus+0x76>
			}
			else
			{
				locBtnStatus = RELAEASED;
    21a6:	19 82       	std	Y+1, r1	; 0x01
    21a8:	0a c0       	rjmp	.+20     	; 0x21be <Button_udtbuttonStatus+0x76>
			}
			break;

		case BUTTON2:
			if (Dio_udtreadChanel(DIO_PORTD, DIO_PIN2) == DIO_HIGH)
    21aa:	83 e0       	ldi	r24, 0x03	; 3
    21ac:	62 e0       	ldi	r22, 0x02	; 2
    21ae:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <Dio_udtreadChanel>
    21b2:	81 30       	cpi	r24, 0x01	; 1
    21b4:	19 f4       	brne	.+6      	; 0x21bc <Button_udtbuttonStatus+0x74>
			{
				locBtnStatus = PRESSED;
    21b6:	81 e0       	ldi	r24, 0x01	; 1
    21b8:	89 83       	std	Y+1, r24	; 0x01
    21ba:	01 c0       	rjmp	.+2      	; 0x21be <Button_udtbuttonStatus+0x76>
			}
			else
			{
				locBtnStatus = RELAEASED;
    21bc:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
	}
	return locBtnStatus;
    21be:	89 81       	ldd	r24, Y+1	; 0x01
}
    21c0:	0f 90       	pop	r0
    21c2:	0f 90       	pop	r0
    21c4:	0f 90       	pop	r0
    21c6:	0f 90       	pop	r0
    21c8:	cf 91       	pop	r28
    21ca:	df 91       	pop	r29
    21cc:	08 95       	ret

000021ce <USART_Init>:
#include "Uart.h"
#include "Std_Types.h"
#include "Bit_Math.h"

void USART_Init(u32 baud)
{
    21ce:	df 93       	push	r29
    21d0:	cf 93       	push	r28
    21d2:	cd b7       	in	r28, 0x3d	; 61
    21d4:	de b7       	in	r29, 0x3e	; 62
    21d6:	28 97       	sbiw	r28, 0x08	; 8
    21d8:	0f b6       	in	r0, 0x3f	; 63
    21da:	f8 94       	cli
    21dc:	de bf       	out	0x3e, r29	; 62
    21de:	0f be       	out	0x3f, r0	; 63
    21e0:	cd bf       	out	0x3d, r28	; 61
    21e2:	6d 83       	std	Y+5, r22	; 0x05
    21e4:	7e 83       	std	Y+6, r23	; 0x06
    21e6:	8f 83       	std	Y+7, r24	; 0x07
    21e8:	98 87       	std	Y+8, r25	; 0x08
	u32 loc_UBBR_val = ((F_OSC/(16*baud))-1);
    21ea:	8d 81       	ldd	r24, Y+5	; 0x05
    21ec:	9e 81       	ldd	r25, Y+6	; 0x06
    21ee:	af 81       	ldd	r26, Y+7	; 0x07
    21f0:	b8 85       	ldd	r27, Y+8	; 0x08
    21f2:	88 0f       	add	r24, r24
    21f4:	99 1f       	adc	r25, r25
    21f6:	aa 1f       	adc	r26, r26
    21f8:	bb 1f       	adc	r27, r27
    21fa:	88 0f       	add	r24, r24
    21fc:	99 1f       	adc	r25, r25
    21fe:	aa 1f       	adc	r26, r26
    2200:	bb 1f       	adc	r27, r27
    2202:	88 0f       	add	r24, r24
    2204:	99 1f       	adc	r25, r25
    2206:	aa 1f       	adc	r26, r26
    2208:	bb 1f       	adc	r27, r27
    220a:	88 0f       	add	r24, r24
    220c:	99 1f       	adc	r25, r25
    220e:	aa 1f       	adc	r26, r26
    2210:	bb 1f       	adc	r27, r27
    2212:	9c 01       	movw	r18, r24
    2214:	ad 01       	movw	r20, r26
    2216:	80 e0       	ldi	r24, 0x00	; 0
    2218:	94 e2       	ldi	r25, 0x24	; 36
    221a:	a4 ef       	ldi	r26, 0xF4	; 244
    221c:	b0 e0       	ldi	r27, 0x00	; 0
    221e:	bc 01       	movw	r22, r24
    2220:	cd 01       	movw	r24, r26
    2222:	0e 94 2a 17 	call	0x2e54	; 0x2e54 <__udivmodsi4>
    2226:	da 01       	movw	r26, r20
    2228:	c9 01       	movw	r24, r18
    222a:	01 97       	sbiw	r24, 0x01	; 1
    222c:	a1 09       	sbc	r26, r1
    222e:	b1 09       	sbc	r27, r1
    2230:	89 83       	std	Y+1, r24	; 0x01
    2232:	9a 83       	std	Y+2, r25	; 0x02
    2234:	ab 83       	std	Y+3, r26	; 0x03
    2236:	bc 83       	std	Y+4, r27	; 0x04
	/* Set baud rate */
	UART_UBRRH_REG = loc_UBBR_val>>8;
    2238:	e0 e4       	ldi	r30, 0x40	; 64
    223a:	f0 e0       	ldi	r31, 0x00	; 0
    223c:	89 81       	ldd	r24, Y+1	; 0x01
    223e:	9a 81       	ldd	r25, Y+2	; 0x02
    2240:	ab 81       	ldd	r26, Y+3	; 0x03
    2242:	bc 81       	ldd	r27, Y+4	; 0x04
    2244:	89 2f       	mov	r24, r25
    2246:	9a 2f       	mov	r25, r26
    2248:	ab 2f       	mov	r26, r27
    224a:	bb 27       	eor	r27, r27
    224c:	80 83       	st	Z, r24
	UART_UBRRL_REG = loc_UBBR_val;
    224e:	e9 e2       	ldi	r30, 0x29	; 41
    2250:	f0 e0       	ldi	r31, 0x00	; 0
    2252:	89 81       	ldd	r24, Y+1	; 0x01
    2254:	80 83       	st	Z, r24
	/* Enable receiver and transmitter */
	UART_UCSRB_REG = (1<<UART_RXEN_BIT)|(1<<UART_TXEN_BIT);
    2256:	ea e2       	ldi	r30, 0x2A	; 42
    2258:	f0 e0       	ldi	r31, 0x00	; 0
    225a:	88 e1       	ldi	r24, 0x18	; 24
    225c:	80 83       	st	Z, r24
	/* Set frame format: 8data, 2stop bit */
	UART_UCSRC_REG = (1<<UART_URSEL_BIT)|(1<<UART_USBS_BIT)|(3<<UART_UCSZ0_BIT);
    225e:	e0 e4       	ldi	r30, 0x40	; 64
    2260:	f0 e0       	ldi	r31, 0x00	; 0
    2262:	8e e8       	ldi	r24, 0x8E	; 142
    2264:	80 83       	st	Z, r24
}
    2266:	28 96       	adiw	r28, 0x08	; 8
    2268:	0f b6       	in	r0, 0x3f	; 63
    226a:	f8 94       	cli
    226c:	de bf       	out	0x3e, r29	; 62
    226e:	0f be       	out	0x3f, r0	; 63
    2270:	cd bf       	out	0x3d, r28	; 61
    2272:	cf 91       	pop	r28
    2274:	df 91       	pop	r29
    2276:	08 95       	ret

00002278 <USART_TransmitChar>:

void USART_TransmitChar(u8 data)
{
    2278:	df 93       	push	r29
    227a:	cf 93       	push	r28
    227c:	0f 92       	push	r0
    227e:	cd b7       	in	r28, 0x3d	; 61
    2280:	de b7       	in	r29, 0x3e	; 62
    2282:	89 83       	std	Y+1, r24	; 0x01
	/* Wait for empty transmit buffer */
	while (CHECK_BIT(UART_UCSRA_REG,UART_UDRE_BIT) == 0)
    2284:	eb e2       	ldi	r30, 0x2B	; 43
    2286:	f0 e0       	ldi	r31, 0x00	; 0
    2288:	80 81       	ld	r24, Z
    228a:	82 95       	swap	r24
    228c:	86 95       	lsr	r24
    228e:	87 70       	andi	r24, 0x07	; 7
    2290:	88 2f       	mov	r24, r24
    2292:	90 e0       	ldi	r25, 0x00	; 0
    2294:	81 70       	andi	r24, 0x01	; 1
    2296:	90 70       	andi	r25, 0x00	; 0
    2298:	00 97       	sbiw	r24, 0x00	; 0
    229a:	a1 f3       	breq	.-24     	; 0x2284 <USART_TransmitChar+0xc>
	{
		;
	}
		/* Put data into buffer, sends the data */
	UART_UDR_REG = data;
    229c:	ec e2       	ldi	r30, 0x2C	; 44
    229e:	f0 e0       	ldi	r31, 0x00	; 0
    22a0:	89 81       	ldd	r24, Y+1	; 0x01
    22a2:	80 83       	st	Z, r24
}
    22a4:	0f 90       	pop	r0
    22a6:	cf 91       	pop	r28
    22a8:	df 91       	pop	r29
    22aa:	08 95       	ret

000022ac <USART_Receive>:

u8 USART_Receive(void)
{
    22ac:	df 93       	push	r29
    22ae:	cf 93       	push	r28
    22b0:	cd b7       	in	r28, 0x3d	; 61
    22b2:	de b7       	in	r29, 0x3e	; 62
	/* Wait for data to be received */
	while (CHECK_BIT(UART_UCSRA_REG,UART_RXC_BIT) == 0)
    22b4:	eb e2       	ldi	r30, 0x2B	; 43
    22b6:	f0 e0       	ldi	r31, 0x00	; 0
    22b8:	80 81       	ld	r24, Z
    22ba:	88 23       	and	r24, r24
    22bc:	dc f7       	brge	.-10     	; 0x22b4 <USART_Receive+0x8>
	{
		;
	}
	/* Get and return received data from buffer */
	return UART_UDR_REG;
    22be:	ec e2       	ldi	r30, 0x2C	; 44
    22c0:	f0 e0       	ldi	r31, 0x00	; 0
    22c2:	80 81       	ld	r24, Z
}
    22c4:	cf 91       	pop	r28
    22c6:	df 91       	pop	r29
    22c8:	08 95       	ret

000022ca <USART_TransmitStr>:

void USART_TransmitStr(u8 *str)
{
    22ca:	df 93       	push	r29
    22cc:	cf 93       	push	r28
    22ce:	00 d0       	rcall	.+0      	; 0x22d0 <USART_TransmitStr+0x6>
    22d0:	cd b7       	in	r28, 0x3d	; 61
    22d2:	de b7       	in	r29, 0x3e	; 62
    22d4:	9a 83       	std	Y+2, r25	; 0x02
    22d6:	89 83       	std	Y+1, r24	; 0x01
    22d8:	0a c0       	rjmp	.+20     	; 0x22ee <USART_TransmitStr+0x24>
	while (*str != '\0')
	{
		USART_TransmitChar(*str);
    22da:	e9 81       	ldd	r30, Y+1	; 0x01
    22dc:	fa 81       	ldd	r31, Y+2	; 0x02
    22de:	80 81       	ld	r24, Z
    22e0:	0e 94 3c 11 	call	0x2278	; 0x2278 <USART_TransmitChar>
		str++;
    22e4:	89 81       	ldd	r24, Y+1	; 0x01
    22e6:	9a 81       	ldd	r25, Y+2	; 0x02
    22e8:	01 96       	adiw	r24, 0x01	; 1
    22ea:	9a 83       	std	Y+2, r25	; 0x02
    22ec:	89 83       	std	Y+1, r24	; 0x01
	return UART_UDR_REG;
}

void USART_TransmitStr(u8 *str)
{
	while (*str != '\0')
    22ee:	e9 81       	ldd	r30, Y+1	; 0x01
    22f0:	fa 81       	ldd	r31, Y+2	; 0x02
    22f2:	80 81       	ld	r24, Z
    22f4:	88 23       	and	r24, r24
    22f6:	89 f7       	brne	.-30     	; 0x22da <USART_TransmitStr+0x10>
	{
		USART_TransmitChar(*str);
		str++;
	}
}
    22f8:	0f 90       	pop	r0
    22fa:	0f 90       	pop	r0
    22fc:	cf 91       	pop	r28
    22fe:	df 91       	pop	r29
    2300:	08 95       	ret

00002302 <Timer0_vidInit>:

#include "Timer0.h"

void Timer0_vidInit(void)
{
    2302:	df 93       	push	r29
    2304:	cf 93       	push	r28
    2306:	cd b7       	in	r28, 0x3d	; 61
    2308:	de b7       	in	r29, 0x3e	; 62

}
    230a:	cf 91       	pop	r28
    230c:	df 91       	pop	r29
    230e:	08 95       	ret

00002310 <Timer0_vidSetPreload>:

void Timer0_vidSetPreload(u8 preload)
{
    2310:	df 93       	push	r29
    2312:	cf 93       	push	r28
    2314:	0f 92       	push	r0
    2316:	cd b7       	in	r28, 0x3d	; 61
    2318:	de b7       	in	r29, 0x3e	; 62
    231a:	89 83       	std	Y+1, r24	; 0x01

}
    231c:	0f 90       	pop	r0
    231e:	cf 91       	pop	r28
    2320:	df 91       	pop	r29
    2322:	08 95       	ret

00002324 <Timer0_vidTimerStart>:

void Timer0_vidTimerStart(timer0_clk_t clk)
{
    2324:	df 93       	push	r29
    2326:	cf 93       	push	r28
    2328:	0f 92       	push	r0
    232a:	cd b7       	in	r28, 0x3d	; 61
    232c:	de b7       	in	r29, 0x3e	; 62
    232e:	89 83       	std	Y+1, r24	; 0x01

}
    2330:	0f 90       	pop	r0
    2332:	cf 91       	pop	r28
    2334:	df 91       	pop	r29
    2336:	08 95       	ret

00002338 <Timer0_vidTimerStop>:

void Timer0_vidTimerStop(void)
{
    2338:	df 93       	push	r29
    233a:	cf 93       	push	r28
    233c:	cd b7       	in	r28, 0x3d	; 61
    233e:	de b7       	in	r29, 0x3e	; 62

}
    2340:	cf 91       	pop	r28
    2342:	df 91       	pop	r29
    2344:	08 95       	ret

00002346 <Timer0_vidEnableOVInterrupt>:

void Timer0_vidEnableOVInterrupt(void)
{
    2346:	df 93       	push	r29
    2348:	cf 93       	push	r28
    234a:	cd b7       	in	r28, 0x3d	; 61
    234c:	de b7       	in	r29, 0x3e	; 62

}
    234e:	cf 91       	pop	r28
    2350:	df 91       	pop	r29
    2352:	08 95       	ret

00002354 <Timer0_vidDisableOVInterrupt>:
void Timer0_vidDisableOVInterrupt(void)
{
    2354:	df 93       	push	r29
    2356:	cf 93       	push	r28
    2358:	cd b7       	in	r28, 0x3d	; 61
    235a:	de b7       	in	r29, 0x3e	; 62

}
    235c:	cf 91       	pop	r28
    235e:	df 91       	pop	r29
    2360:	08 95       	ret

00002362 <GINT_vidEnableAllInterrupts>:

#include "GINT_Reg.h"
#include "Bit_Math.h"

void GINT_vidEnableAllInterrupts(void)
{
    2362:	df 93       	push	r29
    2364:	cf 93       	push	r28
    2366:	cd b7       	in	r28, 0x3d	; 61
    2368:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GINT_SREG_REG,7);
    236a:	af e5       	ldi	r26, 0x5F	; 95
    236c:	b0 e0       	ldi	r27, 0x00	; 0
    236e:	ef e5       	ldi	r30, 0x5F	; 95
    2370:	f0 e0       	ldi	r31, 0x00	; 0
    2372:	80 81       	ld	r24, Z
    2374:	80 68       	ori	r24, 0x80	; 128
    2376:	8c 93       	st	X, r24
}
    2378:	cf 91       	pop	r28
    237a:	df 91       	pop	r29
    237c:	08 95       	ret

0000237e <GINT_vidDisableAllInterrupts>:

void GINT_vidDisableAllInterrupts(void)
{
    237e:	df 93       	push	r29
    2380:	cf 93       	push	r28
    2382:	cd b7       	in	r28, 0x3d	; 61
    2384:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(GINT_SREG_REG,7);
    2386:	af e5       	ldi	r26, 0x5F	; 95
    2388:	b0 e0       	ldi	r27, 0x00	; 0
    238a:	ef e5       	ldi	r30, 0x5F	; 95
    238c:	f0 e0       	ldi	r31, 0x00	; 0
    238e:	80 81       	ld	r24, Z
    2390:	8f 77       	andi	r24, 0x7F	; 127
    2392:	8c 93       	st	X, r24
}
    2394:	cf 91       	pop	r28
    2396:	df 91       	pop	r29
    2398:	08 95       	ret

0000239a <ExtInt_vidConfigExtInt>:
#include "ExtInt_Reg.h"
#include "ExtInt.h"
#include "Std_Types.h"

void ExtInt_vidConfigExtInt(extint_id_t intId, extint_sensectrl_t sensCtrl)
{
    239a:	df 93       	push	r29
    239c:	cf 93       	push	r28
    239e:	00 d0       	rcall	.+0      	; 0x23a0 <ExtInt_vidConfigExtInt+0x6>
    23a0:	00 d0       	rcall	.+0      	; 0x23a2 <ExtInt_vidConfigExtInt+0x8>
    23a2:	cd b7       	in	r28, 0x3d	; 61
    23a4:	de b7       	in	r29, 0x3e	; 62
    23a6:	89 83       	std	Y+1, r24	; 0x01
    23a8:	6a 83       	std	Y+2, r22	; 0x02
	switch(intId)
    23aa:	89 81       	ldd	r24, Y+1	; 0x01
    23ac:	28 2f       	mov	r18, r24
    23ae:	30 e0       	ldi	r19, 0x00	; 0
    23b0:	3c 83       	std	Y+4, r19	; 0x04
    23b2:	2b 83       	std	Y+3, r18	; 0x03
    23b4:	8b 81       	ldd	r24, Y+3	; 0x03
    23b6:	9c 81       	ldd	r25, Y+4	; 0x04
    23b8:	81 30       	cpi	r24, 0x01	; 1
    23ba:	91 05       	cpc	r25, r1
    23bc:	09 f4       	brne	.+2      	; 0x23c0 <ExtInt_vidConfigExtInt+0x26>
    23be:	5a c0       	rjmp	.+180    	; 0x2474 <ExtInt_vidConfigExtInt+0xda>
    23c0:	2b 81       	ldd	r18, Y+3	; 0x03
    23c2:	3c 81       	ldd	r19, Y+4	; 0x04
    23c4:	22 30       	cpi	r18, 0x02	; 2
    23c6:	31 05       	cpc	r19, r1
    23c8:	09 f4       	brne	.+2      	; 0x23cc <ExtInt_vidConfigExtInt+0x32>
    23ca:	a3 c0       	rjmp	.+326    	; 0x2512 <ExtInt_vidConfigExtInt+0x178>
    23cc:	8b 81       	ldd	r24, Y+3	; 0x03
    23ce:	9c 81       	ldd	r25, Y+4	; 0x04
    23d0:	00 97       	sbiw	r24, 0x00	; 0
    23d2:	09 f0       	breq	.+2      	; 0x23d6 <ExtInt_vidConfigExtInt+0x3c>
    23d4:	ba c0       	rjmp	.+372    	; 0x254a <ExtInt_vidConfigExtInt+0x1b0>
	{
	case EXT_INT0:
		/*	configure sense control	*/
		if (sensCtrl == EXT_RISING_EDGE)
    23d6:	8a 81       	ldd	r24, Y+2	; 0x02
    23d8:	81 30       	cpi	r24, 0x01	; 1
    23da:	79 f4       	brne	.+30     	; 0x23fa <ExtInt_vidConfigExtInt+0x60>
		{
			SET_BIT(EXTINT_MCUCR_REG,0);
    23dc:	a5 e5       	ldi	r26, 0x55	; 85
    23de:	b0 e0       	ldi	r27, 0x00	; 0
    23e0:	e5 e5       	ldi	r30, 0x55	; 85
    23e2:	f0 e0       	ldi	r31, 0x00	; 0
    23e4:	80 81       	ld	r24, Z
    23e6:	81 60       	ori	r24, 0x01	; 1
    23e8:	8c 93       	st	X, r24
			SET_BIT(EXTINT_MCUCR_REG,1);
    23ea:	a5 e5       	ldi	r26, 0x55	; 85
    23ec:	b0 e0       	ldi	r27, 0x00	; 0
    23ee:	e5 e5       	ldi	r30, 0x55	; 85
    23f0:	f0 e0       	ldi	r31, 0x00	; 0
    23f2:	80 81       	ld	r24, Z
    23f4:	82 60       	ori	r24, 0x02	; 2
    23f6:	8c 93       	st	X, r24
    23f8:	35 c0       	rjmp	.+106    	; 0x2464 <ExtInt_vidConfigExtInt+0xca>
		}
		else if (sensCtrl == EXT_FAILING_EDGE)
    23fa:	8a 81       	ldd	r24, Y+2	; 0x02
    23fc:	88 23       	and	r24, r24
    23fe:	79 f4       	brne	.+30     	; 0x241e <ExtInt_vidConfigExtInt+0x84>
		{
			CLEAR_BIT(EXTINT_MCUCR_REG,0);
    2400:	a5 e5       	ldi	r26, 0x55	; 85
    2402:	b0 e0       	ldi	r27, 0x00	; 0
    2404:	e5 e5       	ldi	r30, 0x55	; 85
    2406:	f0 e0       	ldi	r31, 0x00	; 0
    2408:	80 81       	ld	r24, Z
    240a:	8e 7f       	andi	r24, 0xFE	; 254
    240c:	8c 93       	st	X, r24
			SET_BIT(EXTINT_MCUCR_REG,1);
    240e:	a5 e5       	ldi	r26, 0x55	; 85
    2410:	b0 e0       	ldi	r27, 0x00	; 0
    2412:	e5 e5       	ldi	r30, 0x55	; 85
    2414:	f0 e0       	ldi	r31, 0x00	; 0
    2416:	80 81       	ld	r24, Z
    2418:	82 60       	ori	r24, 0x02	; 2
    241a:	8c 93       	st	X, r24
    241c:	23 c0       	rjmp	.+70     	; 0x2464 <ExtInt_vidConfigExtInt+0xca>
		}
		else if (sensCtrl == EXT_BOTH_EDGE)
    241e:	8a 81       	ldd	r24, Y+2	; 0x02
    2420:	82 30       	cpi	r24, 0x02	; 2
    2422:	79 f4       	brne	.+30     	; 0x2442 <ExtInt_vidConfigExtInt+0xa8>
		{
			SET_BIT(EXTINT_MCUCR_REG,0);
    2424:	a5 e5       	ldi	r26, 0x55	; 85
    2426:	b0 e0       	ldi	r27, 0x00	; 0
    2428:	e5 e5       	ldi	r30, 0x55	; 85
    242a:	f0 e0       	ldi	r31, 0x00	; 0
    242c:	80 81       	ld	r24, Z
    242e:	81 60       	ori	r24, 0x01	; 1
    2430:	8c 93       	st	X, r24
			CLEAR_BIT(EXTINT_MCUCR_REG,1);
    2432:	a5 e5       	ldi	r26, 0x55	; 85
    2434:	b0 e0       	ldi	r27, 0x00	; 0
    2436:	e5 e5       	ldi	r30, 0x55	; 85
    2438:	f0 e0       	ldi	r31, 0x00	; 0
    243a:	80 81       	ld	r24, Z
    243c:	8d 7f       	andi	r24, 0xFD	; 253
    243e:	8c 93       	st	X, r24
    2440:	11 c0       	rjmp	.+34     	; 0x2464 <ExtInt_vidConfigExtInt+0xca>
		}
		else if (sensCtrl == EXT_LOW_LEVEL)
    2442:	8a 81       	ldd	r24, Y+2	; 0x02
    2444:	83 30       	cpi	r24, 0x03	; 3
    2446:	71 f4       	brne	.+28     	; 0x2464 <ExtInt_vidConfigExtInt+0xca>
		{
			CLEAR_BIT(EXTINT_MCUCR_REG,0);
    2448:	a5 e5       	ldi	r26, 0x55	; 85
    244a:	b0 e0       	ldi	r27, 0x00	; 0
    244c:	e5 e5       	ldi	r30, 0x55	; 85
    244e:	f0 e0       	ldi	r31, 0x00	; 0
    2450:	80 81       	ld	r24, Z
    2452:	8e 7f       	andi	r24, 0xFE	; 254
    2454:	8c 93       	st	X, r24
			CLEAR_BIT(EXTINT_MCUCR_REG,1);
    2456:	a5 e5       	ldi	r26, 0x55	; 85
    2458:	b0 e0       	ldi	r27, 0x00	; 0
    245a:	e5 e5       	ldi	r30, 0x55	; 85
    245c:	f0 e0       	ldi	r31, 0x00	; 0
    245e:	80 81       	ld	r24, Z
    2460:	8d 7f       	andi	r24, 0xFD	; 253
    2462:	8c 93       	st	X, r24
		else
		{
			/*	Do Nothing	*/
		}
		/*	Enable Int0 Interrupt	*/
		SET_BIT(EXTINT_GICR_REG,INT0_EN_BIT);
    2464:	ab e5       	ldi	r26, 0x5B	; 91
    2466:	b0 e0       	ldi	r27, 0x00	; 0
    2468:	eb e5       	ldi	r30, 0x5B	; 91
    246a:	f0 e0       	ldi	r31, 0x00	; 0
    246c:	80 81       	ld	r24, Z
    246e:	80 64       	ori	r24, 0x40	; 64
    2470:	8c 93       	st	X, r24
    2472:	6b c0       	rjmp	.+214    	; 0x254a <ExtInt_vidConfigExtInt+0x1b0>
		break;

	case EXT_INT1:

		/*	configure sense control	*/
				if (sensCtrl == EXT_RISING_EDGE)
    2474:	8a 81       	ldd	r24, Y+2	; 0x02
    2476:	81 30       	cpi	r24, 0x01	; 1
    2478:	79 f4       	brne	.+30     	; 0x2498 <ExtInt_vidConfigExtInt+0xfe>
				{
					SET_BIT(EXTINT_MCUCR_REG,2);
    247a:	a5 e5       	ldi	r26, 0x55	; 85
    247c:	b0 e0       	ldi	r27, 0x00	; 0
    247e:	e5 e5       	ldi	r30, 0x55	; 85
    2480:	f0 e0       	ldi	r31, 0x00	; 0
    2482:	80 81       	ld	r24, Z
    2484:	84 60       	ori	r24, 0x04	; 4
    2486:	8c 93       	st	X, r24
					SET_BIT(EXTINT_MCUCR_REG,3);
    2488:	a5 e5       	ldi	r26, 0x55	; 85
    248a:	b0 e0       	ldi	r27, 0x00	; 0
    248c:	e5 e5       	ldi	r30, 0x55	; 85
    248e:	f0 e0       	ldi	r31, 0x00	; 0
    2490:	80 81       	ld	r24, Z
    2492:	88 60       	ori	r24, 0x08	; 8
    2494:	8c 93       	st	X, r24
    2496:	35 c0       	rjmp	.+106    	; 0x2502 <ExtInt_vidConfigExtInt+0x168>
				}
				else if (sensCtrl == EXT_FAILING_EDGE)
    2498:	8a 81       	ldd	r24, Y+2	; 0x02
    249a:	88 23       	and	r24, r24
    249c:	79 f4       	brne	.+30     	; 0x24bc <ExtInt_vidConfigExtInt+0x122>
				{
					CLEAR_BIT(EXTINT_MCUCR_REG,2);
    249e:	a5 e5       	ldi	r26, 0x55	; 85
    24a0:	b0 e0       	ldi	r27, 0x00	; 0
    24a2:	e5 e5       	ldi	r30, 0x55	; 85
    24a4:	f0 e0       	ldi	r31, 0x00	; 0
    24a6:	80 81       	ld	r24, Z
    24a8:	8b 7f       	andi	r24, 0xFB	; 251
    24aa:	8c 93       	st	X, r24
					SET_BIT(EXTINT_MCUCR_REG,3);
    24ac:	a5 e5       	ldi	r26, 0x55	; 85
    24ae:	b0 e0       	ldi	r27, 0x00	; 0
    24b0:	e5 e5       	ldi	r30, 0x55	; 85
    24b2:	f0 e0       	ldi	r31, 0x00	; 0
    24b4:	80 81       	ld	r24, Z
    24b6:	88 60       	ori	r24, 0x08	; 8
    24b8:	8c 93       	st	X, r24
    24ba:	23 c0       	rjmp	.+70     	; 0x2502 <ExtInt_vidConfigExtInt+0x168>
				}
				else if (sensCtrl == EXT_BOTH_EDGE)
    24bc:	8a 81       	ldd	r24, Y+2	; 0x02
    24be:	82 30       	cpi	r24, 0x02	; 2
    24c0:	79 f4       	brne	.+30     	; 0x24e0 <ExtInt_vidConfigExtInt+0x146>
				{
					SET_BIT(EXTINT_MCUCR_REG,2);
    24c2:	a5 e5       	ldi	r26, 0x55	; 85
    24c4:	b0 e0       	ldi	r27, 0x00	; 0
    24c6:	e5 e5       	ldi	r30, 0x55	; 85
    24c8:	f0 e0       	ldi	r31, 0x00	; 0
    24ca:	80 81       	ld	r24, Z
    24cc:	84 60       	ori	r24, 0x04	; 4
    24ce:	8c 93       	st	X, r24
					CLEAR_BIT(EXTINT_MCUCR_REG,3);
    24d0:	a5 e5       	ldi	r26, 0x55	; 85
    24d2:	b0 e0       	ldi	r27, 0x00	; 0
    24d4:	e5 e5       	ldi	r30, 0x55	; 85
    24d6:	f0 e0       	ldi	r31, 0x00	; 0
    24d8:	80 81       	ld	r24, Z
    24da:	87 7f       	andi	r24, 0xF7	; 247
    24dc:	8c 93       	st	X, r24
    24de:	11 c0       	rjmp	.+34     	; 0x2502 <ExtInt_vidConfigExtInt+0x168>
				}
				else if (sensCtrl == EXT_LOW_LEVEL)
    24e0:	8a 81       	ldd	r24, Y+2	; 0x02
    24e2:	83 30       	cpi	r24, 0x03	; 3
    24e4:	71 f4       	brne	.+28     	; 0x2502 <ExtInt_vidConfigExtInt+0x168>
				{
					CLEAR_BIT(EXTINT_MCUCR_REG,2);
    24e6:	a5 e5       	ldi	r26, 0x55	; 85
    24e8:	b0 e0       	ldi	r27, 0x00	; 0
    24ea:	e5 e5       	ldi	r30, 0x55	; 85
    24ec:	f0 e0       	ldi	r31, 0x00	; 0
    24ee:	80 81       	ld	r24, Z
    24f0:	8b 7f       	andi	r24, 0xFB	; 251
    24f2:	8c 93       	st	X, r24
					CLEAR_BIT(EXTINT_MCUCR_REG,3);
    24f4:	a5 e5       	ldi	r26, 0x55	; 85
    24f6:	b0 e0       	ldi	r27, 0x00	; 0
    24f8:	e5 e5       	ldi	r30, 0x55	; 85
    24fa:	f0 e0       	ldi	r31, 0x00	; 0
    24fc:	80 81       	ld	r24, Z
    24fe:	87 7f       	andi	r24, 0xF7	; 247
    2500:	8c 93       	st	X, r24
				else
				{
					/*	Do Nothing	*/
				}

		SET_BIT(EXTINT_GICR_REG,INT1_EN_BIT);
    2502:	ab e5       	ldi	r26, 0x5B	; 91
    2504:	b0 e0       	ldi	r27, 0x00	; 0
    2506:	eb e5       	ldi	r30, 0x5B	; 91
    2508:	f0 e0       	ldi	r31, 0x00	; 0
    250a:	80 81       	ld	r24, Z
    250c:	80 68       	ori	r24, 0x80	; 128
    250e:	8c 93       	st	X, r24
    2510:	1c c0       	rjmp	.+56     	; 0x254a <ExtInt_vidConfigExtInt+0x1b0>
		break;

	case EXT_INT2:

		if (sensCtrl == EXT_FAILING_EDGE)
    2512:	8a 81       	ldd	r24, Y+2	; 0x02
    2514:	88 23       	and	r24, r24
    2516:	41 f4       	brne	.+16     	; 0x2528 <ExtInt_vidConfigExtInt+0x18e>
		{
			CLEAR_BIT(EXTINT_MCUCSR_REG,6);
    2518:	a4 e5       	ldi	r26, 0x54	; 84
    251a:	b0 e0       	ldi	r27, 0x00	; 0
    251c:	e4 e5       	ldi	r30, 0x54	; 84
    251e:	f0 e0       	ldi	r31, 0x00	; 0
    2520:	80 81       	ld	r24, Z
    2522:	8f 7b       	andi	r24, 0xBF	; 191
    2524:	8c 93       	st	X, r24
    2526:	0a c0       	rjmp	.+20     	; 0x253c <ExtInt_vidConfigExtInt+0x1a2>
		}
		else if (sensCtrl == EXT_RISING_EDGE)
    2528:	8a 81       	ldd	r24, Y+2	; 0x02
    252a:	81 30       	cpi	r24, 0x01	; 1
    252c:	39 f4       	brne	.+14     	; 0x253c <ExtInt_vidConfigExtInt+0x1a2>
		{
			SET_BIT(EXTINT_MCUCSR_REG,6);
    252e:	a4 e5       	ldi	r26, 0x54	; 84
    2530:	b0 e0       	ldi	r27, 0x00	; 0
    2532:	e4 e5       	ldi	r30, 0x54	; 84
    2534:	f0 e0       	ldi	r31, 0x00	; 0
    2536:	80 81       	ld	r24, Z
    2538:	80 64       	ori	r24, 0x40	; 64
    253a:	8c 93       	st	X, r24
		}
		else
		{
			/*	Do Nothing	*/
		}
		SET_BIT(EXTINT_GICR_REG,INT2_EN_BIT);
    253c:	ab e5       	ldi	r26, 0x5B	; 91
    253e:	b0 e0       	ldi	r27, 0x00	; 0
    2540:	eb e5       	ldi	r30, 0x5B	; 91
    2542:	f0 e0       	ldi	r31, 0x00	; 0
    2544:	80 81       	ld	r24, Z
    2546:	80 62       	ori	r24, 0x20	; 32
    2548:	8c 93       	st	X, r24
		break;
	}
}
    254a:	0f 90       	pop	r0
    254c:	0f 90       	pop	r0
    254e:	0f 90       	pop	r0
    2550:	0f 90       	pop	r0
    2552:	cf 91       	pop	r28
    2554:	df 91       	pop	r29
    2556:	08 95       	ret

00002558 <ExtInt_vidDisableExtInt>:

void ExtInt_vidDisableExtInt(extint_id_t intId)
{
    2558:	df 93       	push	r29
    255a:	cf 93       	push	r28
    255c:	00 d0       	rcall	.+0      	; 0x255e <ExtInt_vidDisableExtInt+0x6>
    255e:	0f 92       	push	r0
    2560:	cd b7       	in	r28, 0x3d	; 61
    2562:	de b7       	in	r29, 0x3e	; 62
    2564:	89 83       	std	Y+1, r24	; 0x01
	switch (intId)
    2566:	89 81       	ldd	r24, Y+1	; 0x01
    2568:	28 2f       	mov	r18, r24
    256a:	30 e0       	ldi	r19, 0x00	; 0
    256c:	3b 83       	std	Y+3, r19	; 0x03
    256e:	2a 83       	std	Y+2, r18	; 0x02
    2570:	8a 81       	ldd	r24, Y+2	; 0x02
    2572:	9b 81       	ldd	r25, Y+3	; 0x03
    2574:	81 30       	cpi	r24, 0x01	; 1
    2576:	91 05       	cpc	r25, r1
    2578:	89 f0       	breq	.+34     	; 0x259c <ExtInt_vidDisableExtInt+0x44>
    257a:	2a 81       	ldd	r18, Y+2	; 0x02
    257c:	3b 81       	ldd	r19, Y+3	; 0x03
    257e:	22 30       	cpi	r18, 0x02	; 2
    2580:	31 05       	cpc	r19, r1
    2582:	a1 f0       	breq	.+40     	; 0x25ac <ExtInt_vidDisableExtInt+0x54>
    2584:	8a 81       	ldd	r24, Y+2	; 0x02
    2586:	9b 81       	ldd	r25, Y+3	; 0x03
    2588:	00 97       	sbiw	r24, 0x00	; 0
    258a:	b9 f4       	brne	.+46     	; 0x25ba <ExtInt_vidDisableExtInt+0x62>
	{
	case EXT_INT0:
		SET_BIT(EXTINT_GICR_REG,INT0_EN_BIT);
    258c:	ab e5       	ldi	r26, 0x5B	; 91
    258e:	b0 e0       	ldi	r27, 0x00	; 0
    2590:	eb e5       	ldi	r30, 0x5B	; 91
    2592:	f0 e0       	ldi	r31, 0x00	; 0
    2594:	80 81       	ld	r24, Z
    2596:	80 64       	ori	r24, 0x40	; 64
    2598:	8c 93       	st	X, r24
    259a:	0f c0       	rjmp	.+30     	; 0x25ba <ExtInt_vidDisableExtInt+0x62>
		break;

	case EXT_INT1:
		SET_BIT(EXTINT_GICR_REG,INT1_EN_BIT);
    259c:	ab e5       	ldi	r26, 0x5B	; 91
    259e:	b0 e0       	ldi	r27, 0x00	; 0
    25a0:	eb e5       	ldi	r30, 0x5B	; 91
    25a2:	f0 e0       	ldi	r31, 0x00	; 0
    25a4:	80 81       	ld	r24, Z
    25a6:	80 68       	ori	r24, 0x80	; 128
    25a8:	8c 93       	st	X, r24
    25aa:	07 c0       	rjmp	.+14     	; 0x25ba <ExtInt_vidDisableExtInt+0x62>
		break;

	case EXT_INT2:
		SET_BIT(EXTINT_GICR_REG,INT2_EN_BIT);
    25ac:	ab e5       	ldi	r26, 0x5B	; 91
    25ae:	b0 e0       	ldi	r27, 0x00	; 0
    25b0:	eb e5       	ldi	r30, 0x5B	; 91
    25b2:	f0 e0       	ldi	r31, 0x00	; 0
    25b4:	80 81       	ld	r24, Z
    25b6:	80 62       	ori	r24, 0x20	; 32
    25b8:	8c 93       	st	X, r24
		break;
	}
}
    25ba:	0f 90       	pop	r0
    25bc:	0f 90       	pop	r0
    25be:	0f 90       	pop	r0
    25c0:	cf 91       	pop	r28
    25c2:	df 91       	pop	r29
    25c4:	08 95       	ret

000025c6 <Dio_vidconfigChanel>:
 */
#include "Dio.h"
#include "Bit_Math.h"

void Dio_vidconfigChanel(dio_port_t port, dio_pin_t pin,dio_dir_t dir)
{
    25c6:	df 93       	push	r29
    25c8:	cf 93       	push	r28
    25ca:	00 d0       	rcall	.+0      	; 0x25cc <Dio_vidconfigChanel+0x6>
    25cc:	00 d0       	rcall	.+0      	; 0x25ce <Dio_vidconfigChanel+0x8>
    25ce:	0f 92       	push	r0
    25d0:	cd b7       	in	r28, 0x3d	; 61
    25d2:	de b7       	in	r29, 0x3e	; 62
    25d4:	89 83       	std	Y+1, r24	; 0x01
    25d6:	6a 83       	std	Y+2, r22	; 0x02
    25d8:	4b 83       	std	Y+3, r20	; 0x03
	switch(port)
    25da:	89 81       	ldd	r24, Y+1	; 0x01
    25dc:	28 2f       	mov	r18, r24
    25de:	30 e0       	ldi	r19, 0x00	; 0
    25e0:	3d 83       	std	Y+5, r19	; 0x05
    25e2:	2c 83       	std	Y+4, r18	; 0x04
    25e4:	8c 81       	ldd	r24, Y+4	; 0x04
    25e6:	9d 81       	ldd	r25, Y+5	; 0x05
    25e8:	81 30       	cpi	r24, 0x01	; 1
    25ea:	91 05       	cpc	r25, r1
    25ec:	09 f4       	brne	.+2      	; 0x25f0 <Dio_vidconfigChanel+0x2a>
    25ee:	43 c0       	rjmp	.+134    	; 0x2676 <Dio_vidconfigChanel+0xb0>
    25f0:	2c 81       	ldd	r18, Y+4	; 0x04
    25f2:	3d 81       	ldd	r19, Y+5	; 0x05
    25f4:	22 30       	cpi	r18, 0x02	; 2
    25f6:	31 05       	cpc	r19, r1
    25f8:	2c f4       	brge	.+10     	; 0x2604 <Dio_vidconfigChanel+0x3e>
    25fa:	8c 81       	ldd	r24, Y+4	; 0x04
    25fc:	9d 81       	ldd	r25, Y+5	; 0x05
    25fe:	00 97       	sbiw	r24, 0x00	; 0
    2600:	71 f0       	breq	.+28     	; 0x261e <Dio_vidconfigChanel+0x58>
    2602:	bc c0       	rjmp	.+376    	; 0x277c <Dio_vidconfigChanel+0x1b6>
    2604:	2c 81       	ldd	r18, Y+4	; 0x04
    2606:	3d 81       	ldd	r19, Y+5	; 0x05
    2608:	22 30       	cpi	r18, 0x02	; 2
    260a:	31 05       	cpc	r19, r1
    260c:	09 f4       	brne	.+2      	; 0x2610 <Dio_vidconfigChanel+0x4a>
    260e:	5f c0       	rjmp	.+190    	; 0x26ce <Dio_vidconfigChanel+0x108>
    2610:	8c 81       	ldd	r24, Y+4	; 0x04
    2612:	9d 81       	ldd	r25, Y+5	; 0x05
    2614:	83 30       	cpi	r24, 0x03	; 3
    2616:	91 05       	cpc	r25, r1
    2618:	09 f4       	brne	.+2      	; 0x261c <Dio_vidconfigChanel+0x56>
    261a:	85 c0       	rjmp	.+266    	; 0x2726 <Dio_vidconfigChanel+0x160>
    261c:	af c0       	rjmp	.+350    	; 0x277c <Dio_vidconfigChanel+0x1b6>
	{
	case DIO_PORTA:
		if (dir == DIO_INPUT)
    261e:	8b 81       	ldd	r24, Y+3	; 0x03
    2620:	88 23       	and	r24, r24
    2622:	a9 f4       	brne	.+42     	; 0x264e <Dio_vidconfigChanel+0x88>
		{
			CLEAR_BIT(DIO_DDRA_REG,pin);
    2624:	aa e3       	ldi	r26, 0x3A	; 58
    2626:	b0 e0       	ldi	r27, 0x00	; 0
    2628:	ea e3       	ldi	r30, 0x3A	; 58
    262a:	f0 e0       	ldi	r31, 0x00	; 0
    262c:	80 81       	ld	r24, Z
    262e:	48 2f       	mov	r20, r24
    2630:	8a 81       	ldd	r24, Y+2	; 0x02
    2632:	28 2f       	mov	r18, r24
    2634:	30 e0       	ldi	r19, 0x00	; 0
    2636:	81 e0       	ldi	r24, 0x01	; 1
    2638:	90 e0       	ldi	r25, 0x00	; 0
    263a:	02 2e       	mov	r0, r18
    263c:	02 c0       	rjmp	.+4      	; 0x2642 <Dio_vidconfigChanel+0x7c>
    263e:	88 0f       	add	r24, r24
    2640:	99 1f       	adc	r25, r25
    2642:	0a 94       	dec	r0
    2644:	e2 f7       	brpl	.-8      	; 0x263e <Dio_vidconfigChanel+0x78>
    2646:	80 95       	com	r24
    2648:	84 23       	and	r24, r20
    264a:	8c 93       	st	X, r24
    264c:	97 c0       	rjmp	.+302    	; 0x277c <Dio_vidconfigChanel+0x1b6>
		}
		else
		{
			SET_BIT(DIO_DDRA_REG,pin);
    264e:	aa e3       	ldi	r26, 0x3A	; 58
    2650:	b0 e0       	ldi	r27, 0x00	; 0
    2652:	ea e3       	ldi	r30, 0x3A	; 58
    2654:	f0 e0       	ldi	r31, 0x00	; 0
    2656:	80 81       	ld	r24, Z
    2658:	48 2f       	mov	r20, r24
    265a:	8a 81       	ldd	r24, Y+2	; 0x02
    265c:	28 2f       	mov	r18, r24
    265e:	30 e0       	ldi	r19, 0x00	; 0
    2660:	81 e0       	ldi	r24, 0x01	; 1
    2662:	90 e0       	ldi	r25, 0x00	; 0
    2664:	02 2e       	mov	r0, r18
    2666:	02 c0       	rjmp	.+4      	; 0x266c <Dio_vidconfigChanel+0xa6>
    2668:	88 0f       	add	r24, r24
    266a:	99 1f       	adc	r25, r25
    266c:	0a 94       	dec	r0
    266e:	e2 f7       	brpl	.-8      	; 0x2668 <Dio_vidconfigChanel+0xa2>
    2670:	84 2b       	or	r24, r20
    2672:	8c 93       	st	X, r24
    2674:	83 c0       	rjmp	.+262    	; 0x277c <Dio_vidconfigChanel+0x1b6>
		}
		break;

	case DIO_PORTB:
		if (dir == DIO_INPUT)
    2676:	8b 81       	ldd	r24, Y+3	; 0x03
    2678:	88 23       	and	r24, r24
    267a:	a9 f4       	brne	.+42     	; 0x26a6 <Dio_vidconfigChanel+0xe0>
		{
			CLEAR_BIT(DIO_DDRB_REG,pin);
    267c:	a7 e3       	ldi	r26, 0x37	; 55
    267e:	b0 e0       	ldi	r27, 0x00	; 0
    2680:	e7 e3       	ldi	r30, 0x37	; 55
    2682:	f0 e0       	ldi	r31, 0x00	; 0
    2684:	80 81       	ld	r24, Z
    2686:	48 2f       	mov	r20, r24
    2688:	8a 81       	ldd	r24, Y+2	; 0x02
    268a:	28 2f       	mov	r18, r24
    268c:	30 e0       	ldi	r19, 0x00	; 0
    268e:	81 e0       	ldi	r24, 0x01	; 1
    2690:	90 e0       	ldi	r25, 0x00	; 0
    2692:	02 2e       	mov	r0, r18
    2694:	02 c0       	rjmp	.+4      	; 0x269a <Dio_vidconfigChanel+0xd4>
    2696:	88 0f       	add	r24, r24
    2698:	99 1f       	adc	r25, r25
    269a:	0a 94       	dec	r0
    269c:	e2 f7       	brpl	.-8      	; 0x2696 <Dio_vidconfigChanel+0xd0>
    269e:	80 95       	com	r24
    26a0:	84 23       	and	r24, r20
    26a2:	8c 93       	st	X, r24
    26a4:	6b c0       	rjmp	.+214    	; 0x277c <Dio_vidconfigChanel+0x1b6>
		}
		else
		{
			SET_BIT(DIO_DDRB_REG,pin);
    26a6:	a7 e3       	ldi	r26, 0x37	; 55
    26a8:	b0 e0       	ldi	r27, 0x00	; 0
    26aa:	e7 e3       	ldi	r30, 0x37	; 55
    26ac:	f0 e0       	ldi	r31, 0x00	; 0
    26ae:	80 81       	ld	r24, Z
    26b0:	48 2f       	mov	r20, r24
    26b2:	8a 81       	ldd	r24, Y+2	; 0x02
    26b4:	28 2f       	mov	r18, r24
    26b6:	30 e0       	ldi	r19, 0x00	; 0
    26b8:	81 e0       	ldi	r24, 0x01	; 1
    26ba:	90 e0       	ldi	r25, 0x00	; 0
    26bc:	02 2e       	mov	r0, r18
    26be:	02 c0       	rjmp	.+4      	; 0x26c4 <Dio_vidconfigChanel+0xfe>
    26c0:	88 0f       	add	r24, r24
    26c2:	99 1f       	adc	r25, r25
    26c4:	0a 94       	dec	r0
    26c6:	e2 f7       	brpl	.-8      	; 0x26c0 <Dio_vidconfigChanel+0xfa>
    26c8:	84 2b       	or	r24, r20
    26ca:	8c 93       	st	X, r24
    26cc:	57 c0       	rjmp	.+174    	; 0x277c <Dio_vidconfigChanel+0x1b6>
		}
		break;

	case DIO_PORTC:
		if (dir == DIO_INPUT)
    26ce:	8b 81       	ldd	r24, Y+3	; 0x03
    26d0:	88 23       	and	r24, r24
    26d2:	a9 f4       	brne	.+42     	; 0x26fe <Dio_vidconfigChanel+0x138>
		{
			CLEAR_BIT(DIO_DDRC_REG,pin);
    26d4:	a4 e3       	ldi	r26, 0x34	; 52
    26d6:	b0 e0       	ldi	r27, 0x00	; 0
    26d8:	e4 e3       	ldi	r30, 0x34	; 52
    26da:	f0 e0       	ldi	r31, 0x00	; 0
    26dc:	80 81       	ld	r24, Z
    26de:	48 2f       	mov	r20, r24
    26e0:	8a 81       	ldd	r24, Y+2	; 0x02
    26e2:	28 2f       	mov	r18, r24
    26e4:	30 e0       	ldi	r19, 0x00	; 0
    26e6:	81 e0       	ldi	r24, 0x01	; 1
    26e8:	90 e0       	ldi	r25, 0x00	; 0
    26ea:	02 2e       	mov	r0, r18
    26ec:	02 c0       	rjmp	.+4      	; 0x26f2 <Dio_vidconfigChanel+0x12c>
    26ee:	88 0f       	add	r24, r24
    26f0:	99 1f       	adc	r25, r25
    26f2:	0a 94       	dec	r0
    26f4:	e2 f7       	brpl	.-8      	; 0x26ee <Dio_vidconfigChanel+0x128>
    26f6:	80 95       	com	r24
    26f8:	84 23       	and	r24, r20
    26fa:	8c 93       	st	X, r24
    26fc:	3f c0       	rjmp	.+126    	; 0x277c <Dio_vidconfigChanel+0x1b6>
		}
		else
		{
			SET_BIT(DIO_DDRC_REG,pin);
    26fe:	a4 e3       	ldi	r26, 0x34	; 52
    2700:	b0 e0       	ldi	r27, 0x00	; 0
    2702:	e4 e3       	ldi	r30, 0x34	; 52
    2704:	f0 e0       	ldi	r31, 0x00	; 0
    2706:	80 81       	ld	r24, Z
    2708:	48 2f       	mov	r20, r24
    270a:	8a 81       	ldd	r24, Y+2	; 0x02
    270c:	28 2f       	mov	r18, r24
    270e:	30 e0       	ldi	r19, 0x00	; 0
    2710:	81 e0       	ldi	r24, 0x01	; 1
    2712:	90 e0       	ldi	r25, 0x00	; 0
    2714:	02 2e       	mov	r0, r18
    2716:	02 c0       	rjmp	.+4      	; 0x271c <Dio_vidconfigChanel+0x156>
    2718:	88 0f       	add	r24, r24
    271a:	99 1f       	adc	r25, r25
    271c:	0a 94       	dec	r0
    271e:	e2 f7       	brpl	.-8      	; 0x2718 <Dio_vidconfigChanel+0x152>
    2720:	84 2b       	or	r24, r20
    2722:	8c 93       	st	X, r24
    2724:	2b c0       	rjmp	.+86     	; 0x277c <Dio_vidconfigChanel+0x1b6>
		}
		break;

	case DIO_PORTD:
		if (dir == DIO_INPUT)
    2726:	8b 81       	ldd	r24, Y+3	; 0x03
    2728:	88 23       	and	r24, r24
    272a:	a9 f4       	brne	.+42     	; 0x2756 <Dio_vidconfigChanel+0x190>
		{
			CLEAR_BIT(DIO_DDRD_REG,pin);
    272c:	a1 e3       	ldi	r26, 0x31	; 49
    272e:	b0 e0       	ldi	r27, 0x00	; 0
    2730:	e1 e3       	ldi	r30, 0x31	; 49
    2732:	f0 e0       	ldi	r31, 0x00	; 0
    2734:	80 81       	ld	r24, Z
    2736:	48 2f       	mov	r20, r24
    2738:	8a 81       	ldd	r24, Y+2	; 0x02
    273a:	28 2f       	mov	r18, r24
    273c:	30 e0       	ldi	r19, 0x00	; 0
    273e:	81 e0       	ldi	r24, 0x01	; 1
    2740:	90 e0       	ldi	r25, 0x00	; 0
    2742:	02 2e       	mov	r0, r18
    2744:	02 c0       	rjmp	.+4      	; 0x274a <Dio_vidconfigChanel+0x184>
    2746:	88 0f       	add	r24, r24
    2748:	99 1f       	adc	r25, r25
    274a:	0a 94       	dec	r0
    274c:	e2 f7       	brpl	.-8      	; 0x2746 <Dio_vidconfigChanel+0x180>
    274e:	80 95       	com	r24
    2750:	84 23       	and	r24, r20
    2752:	8c 93       	st	X, r24
    2754:	13 c0       	rjmp	.+38     	; 0x277c <Dio_vidconfigChanel+0x1b6>
		}
		else
		{
			SET_BIT(DIO_DDRD_REG,pin);
    2756:	a1 e3       	ldi	r26, 0x31	; 49
    2758:	b0 e0       	ldi	r27, 0x00	; 0
    275a:	e1 e3       	ldi	r30, 0x31	; 49
    275c:	f0 e0       	ldi	r31, 0x00	; 0
    275e:	80 81       	ld	r24, Z
    2760:	48 2f       	mov	r20, r24
    2762:	8a 81       	ldd	r24, Y+2	; 0x02
    2764:	28 2f       	mov	r18, r24
    2766:	30 e0       	ldi	r19, 0x00	; 0
    2768:	81 e0       	ldi	r24, 0x01	; 1
    276a:	90 e0       	ldi	r25, 0x00	; 0
    276c:	02 2e       	mov	r0, r18
    276e:	02 c0       	rjmp	.+4      	; 0x2774 <Dio_vidconfigChanel+0x1ae>
    2770:	88 0f       	add	r24, r24
    2772:	99 1f       	adc	r25, r25
    2774:	0a 94       	dec	r0
    2776:	e2 f7       	brpl	.-8      	; 0x2770 <Dio_vidconfigChanel+0x1aa>
    2778:	84 2b       	or	r24, r20
    277a:	8c 93       	st	X, r24
		}
		break;
	}
}
    277c:	0f 90       	pop	r0
    277e:	0f 90       	pop	r0
    2780:	0f 90       	pop	r0
    2782:	0f 90       	pop	r0
    2784:	0f 90       	pop	r0
    2786:	cf 91       	pop	r28
    2788:	df 91       	pop	r29
    278a:	08 95       	ret

0000278c <Dio_vidwriteChanel>:

void Dio_vidwriteChanel(dio_port_t port, dio_pin_t pin,dio_level_t level)
{
    278c:	df 93       	push	r29
    278e:	cf 93       	push	r28
    2790:	00 d0       	rcall	.+0      	; 0x2792 <Dio_vidwriteChanel+0x6>
    2792:	00 d0       	rcall	.+0      	; 0x2794 <Dio_vidwriteChanel+0x8>
    2794:	0f 92       	push	r0
    2796:	cd b7       	in	r28, 0x3d	; 61
    2798:	de b7       	in	r29, 0x3e	; 62
    279a:	89 83       	std	Y+1, r24	; 0x01
    279c:	6a 83       	std	Y+2, r22	; 0x02
    279e:	4b 83       	std	Y+3, r20	; 0x03
	switch (port)
    27a0:	89 81       	ldd	r24, Y+1	; 0x01
    27a2:	28 2f       	mov	r18, r24
    27a4:	30 e0       	ldi	r19, 0x00	; 0
    27a6:	3d 83       	std	Y+5, r19	; 0x05
    27a8:	2c 83       	std	Y+4, r18	; 0x04
    27aa:	8c 81       	ldd	r24, Y+4	; 0x04
    27ac:	9d 81       	ldd	r25, Y+5	; 0x05
    27ae:	81 30       	cpi	r24, 0x01	; 1
    27b0:	91 05       	cpc	r25, r1
    27b2:	09 f4       	brne	.+2      	; 0x27b6 <Dio_vidwriteChanel+0x2a>
    27b4:	43 c0       	rjmp	.+134    	; 0x283c <Dio_vidwriteChanel+0xb0>
    27b6:	2c 81       	ldd	r18, Y+4	; 0x04
    27b8:	3d 81       	ldd	r19, Y+5	; 0x05
    27ba:	22 30       	cpi	r18, 0x02	; 2
    27bc:	31 05       	cpc	r19, r1
    27be:	2c f4       	brge	.+10     	; 0x27ca <Dio_vidwriteChanel+0x3e>
    27c0:	8c 81       	ldd	r24, Y+4	; 0x04
    27c2:	9d 81       	ldd	r25, Y+5	; 0x05
    27c4:	00 97       	sbiw	r24, 0x00	; 0
    27c6:	71 f0       	breq	.+28     	; 0x27e4 <Dio_vidwriteChanel+0x58>
    27c8:	bc c0       	rjmp	.+376    	; 0x2942 <Dio_vidwriteChanel+0x1b6>
    27ca:	2c 81       	ldd	r18, Y+4	; 0x04
    27cc:	3d 81       	ldd	r19, Y+5	; 0x05
    27ce:	22 30       	cpi	r18, 0x02	; 2
    27d0:	31 05       	cpc	r19, r1
    27d2:	09 f4       	brne	.+2      	; 0x27d6 <Dio_vidwriteChanel+0x4a>
    27d4:	5f c0       	rjmp	.+190    	; 0x2894 <Dio_vidwriteChanel+0x108>
    27d6:	8c 81       	ldd	r24, Y+4	; 0x04
    27d8:	9d 81       	ldd	r25, Y+5	; 0x05
    27da:	83 30       	cpi	r24, 0x03	; 3
    27dc:	91 05       	cpc	r25, r1
    27de:	09 f4       	brne	.+2      	; 0x27e2 <Dio_vidwriteChanel+0x56>
    27e0:	85 c0       	rjmp	.+266    	; 0x28ec <Dio_vidwriteChanel+0x160>
    27e2:	af c0       	rjmp	.+350    	; 0x2942 <Dio_vidwriteChanel+0x1b6>
	{
	case DIO_PORTA:
		if (level == DIO_HIGH)
    27e4:	8b 81       	ldd	r24, Y+3	; 0x03
    27e6:	81 30       	cpi	r24, 0x01	; 1
    27e8:	a1 f4       	brne	.+40     	; 0x2812 <Dio_vidwriteChanel+0x86>
		{
			SET_BIT(DIO_PORTA_REG,pin);
    27ea:	ab e3       	ldi	r26, 0x3B	; 59
    27ec:	b0 e0       	ldi	r27, 0x00	; 0
    27ee:	eb e3       	ldi	r30, 0x3B	; 59
    27f0:	f0 e0       	ldi	r31, 0x00	; 0
    27f2:	80 81       	ld	r24, Z
    27f4:	48 2f       	mov	r20, r24
    27f6:	8a 81       	ldd	r24, Y+2	; 0x02
    27f8:	28 2f       	mov	r18, r24
    27fa:	30 e0       	ldi	r19, 0x00	; 0
    27fc:	81 e0       	ldi	r24, 0x01	; 1
    27fe:	90 e0       	ldi	r25, 0x00	; 0
    2800:	02 2e       	mov	r0, r18
    2802:	02 c0       	rjmp	.+4      	; 0x2808 <Dio_vidwriteChanel+0x7c>
    2804:	88 0f       	add	r24, r24
    2806:	99 1f       	adc	r25, r25
    2808:	0a 94       	dec	r0
    280a:	e2 f7       	brpl	.-8      	; 0x2804 <Dio_vidwriteChanel+0x78>
    280c:	84 2b       	or	r24, r20
    280e:	8c 93       	st	X, r24
    2810:	98 c0       	rjmp	.+304    	; 0x2942 <Dio_vidwriteChanel+0x1b6>
		}
		else
		{
			CLEAR_BIT(DIO_PORTA_REG,pin);
    2812:	ab e3       	ldi	r26, 0x3B	; 59
    2814:	b0 e0       	ldi	r27, 0x00	; 0
    2816:	eb e3       	ldi	r30, 0x3B	; 59
    2818:	f0 e0       	ldi	r31, 0x00	; 0
    281a:	80 81       	ld	r24, Z
    281c:	48 2f       	mov	r20, r24
    281e:	8a 81       	ldd	r24, Y+2	; 0x02
    2820:	28 2f       	mov	r18, r24
    2822:	30 e0       	ldi	r19, 0x00	; 0
    2824:	81 e0       	ldi	r24, 0x01	; 1
    2826:	90 e0       	ldi	r25, 0x00	; 0
    2828:	02 2e       	mov	r0, r18
    282a:	02 c0       	rjmp	.+4      	; 0x2830 <Dio_vidwriteChanel+0xa4>
    282c:	88 0f       	add	r24, r24
    282e:	99 1f       	adc	r25, r25
    2830:	0a 94       	dec	r0
    2832:	e2 f7       	brpl	.-8      	; 0x282c <Dio_vidwriteChanel+0xa0>
    2834:	80 95       	com	r24
    2836:	84 23       	and	r24, r20
    2838:	8c 93       	st	X, r24
    283a:	83 c0       	rjmp	.+262    	; 0x2942 <Dio_vidwriteChanel+0x1b6>
		}
		break;

	case DIO_PORTB:
		if (level == DIO_HIGH)
    283c:	8b 81       	ldd	r24, Y+3	; 0x03
    283e:	81 30       	cpi	r24, 0x01	; 1
    2840:	a1 f4       	brne	.+40     	; 0x286a <Dio_vidwriteChanel+0xde>
		{
			SET_BIT(DIO_PORTB_REG,pin);
    2842:	a8 e3       	ldi	r26, 0x38	; 56
    2844:	b0 e0       	ldi	r27, 0x00	; 0
    2846:	e8 e3       	ldi	r30, 0x38	; 56
    2848:	f0 e0       	ldi	r31, 0x00	; 0
    284a:	80 81       	ld	r24, Z
    284c:	48 2f       	mov	r20, r24
    284e:	8a 81       	ldd	r24, Y+2	; 0x02
    2850:	28 2f       	mov	r18, r24
    2852:	30 e0       	ldi	r19, 0x00	; 0
    2854:	81 e0       	ldi	r24, 0x01	; 1
    2856:	90 e0       	ldi	r25, 0x00	; 0
    2858:	02 2e       	mov	r0, r18
    285a:	02 c0       	rjmp	.+4      	; 0x2860 <Dio_vidwriteChanel+0xd4>
    285c:	88 0f       	add	r24, r24
    285e:	99 1f       	adc	r25, r25
    2860:	0a 94       	dec	r0
    2862:	e2 f7       	brpl	.-8      	; 0x285c <Dio_vidwriteChanel+0xd0>
    2864:	84 2b       	or	r24, r20
    2866:	8c 93       	st	X, r24
    2868:	6c c0       	rjmp	.+216    	; 0x2942 <Dio_vidwriteChanel+0x1b6>
		}
		else
		{
			CLEAR_BIT(DIO_PORTB_REG,pin);
    286a:	a8 e3       	ldi	r26, 0x38	; 56
    286c:	b0 e0       	ldi	r27, 0x00	; 0
    286e:	e8 e3       	ldi	r30, 0x38	; 56
    2870:	f0 e0       	ldi	r31, 0x00	; 0
    2872:	80 81       	ld	r24, Z
    2874:	48 2f       	mov	r20, r24
    2876:	8a 81       	ldd	r24, Y+2	; 0x02
    2878:	28 2f       	mov	r18, r24
    287a:	30 e0       	ldi	r19, 0x00	; 0
    287c:	81 e0       	ldi	r24, 0x01	; 1
    287e:	90 e0       	ldi	r25, 0x00	; 0
    2880:	02 2e       	mov	r0, r18
    2882:	02 c0       	rjmp	.+4      	; 0x2888 <Dio_vidwriteChanel+0xfc>
    2884:	88 0f       	add	r24, r24
    2886:	99 1f       	adc	r25, r25
    2888:	0a 94       	dec	r0
    288a:	e2 f7       	brpl	.-8      	; 0x2884 <Dio_vidwriteChanel+0xf8>
    288c:	80 95       	com	r24
    288e:	84 23       	and	r24, r20
    2890:	8c 93       	st	X, r24
    2892:	57 c0       	rjmp	.+174    	; 0x2942 <Dio_vidwriteChanel+0x1b6>
		}
		break;

	case DIO_PORTC:
		if (level == DIO_HIGH)
    2894:	8b 81       	ldd	r24, Y+3	; 0x03
    2896:	81 30       	cpi	r24, 0x01	; 1
    2898:	a1 f4       	brne	.+40     	; 0x28c2 <Dio_vidwriteChanel+0x136>
		{
			SET_BIT(DIO_PORTC_REG,pin);
    289a:	a5 e3       	ldi	r26, 0x35	; 53
    289c:	b0 e0       	ldi	r27, 0x00	; 0
    289e:	e5 e3       	ldi	r30, 0x35	; 53
    28a0:	f0 e0       	ldi	r31, 0x00	; 0
    28a2:	80 81       	ld	r24, Z
    28a4:	48 2f       	mov	r20, r24
    28a6:	8a 81       	ldd	r24, Y+2	; 0x02
    28a8:	28 2f       	mov	r18, r24
    28aa:	30 e0       	ldi	r19, 0x00	; 0
    28ac:	81 e0       	ldi	r24, 0x01	; 1
    28ae:	90 e0       	ldi	r25, 0x00	; 0
    28b0:	02 2e       	mov	r0, r18
    28b2:	02 c0       	rjmp	.+4      	; 0x28b8 <Dio_vidwriteChanel+0x12c>
    28b4:	88 0f       	add	r24, r24
    28b6:	99 1f       	adc	r25, r25
    28b8:	0a 94       	dec	r0
    28ba:	e2 f7       	brpl	.-8      	; 0x28b4 <Dio_vidwriteChanel+0x128>
    28bc:	84 2b       	or	r24, r20
    28be:	8c 93       	st	X, r24
    28c0:	40 c0       	rjmp	.+128    	; 0x2942 <Dio_vidwriteChanel+0x1b6>
		}
		else
		{
			CLEAR_BIT(DIO_PORTC_REG,pin);
    28c2:	a5 e3       	ldi	r26, 0x35	; 53
    28c4:	b0 e0       	ldi	r27, 0x00	; 0
    28c6:	e5 e3       	ldi	r30, 0x35	; 53
    28c8:	f0 e0       	ldi	r31, 0x00	; 0
    28ca:	80 81       	ld	r24, Z
    28cc:	48 2f       	mov	r20, r24
    28ce:	8a 81       	ldd	r24, Y+2	; 0x02
    28d0:	28 2f       	mov	r18, r24
    28d2:	30 e0       	ldi	r19, 0x00	; 0
    28d4:	81 e0       	ldi	r24, 0x01	; 1
    28d6:	90 e0       	ldi	r25, 0x00	; 0
    28d8:	02 2e       	mov	r0, r18
    28da:	02 c0       	rjmp	.+4      	; 0x28e0 <Dio_vidwriteChanel+0x154>
    28dc:	88 0f       	add	r24, r24
    28de:	99 1f       	adc	r25, r25
    28e0:	0a 94       	dec	r0
    28e2:	e2 f7       	brpl	.-8      	; 0x28dc <Dio_vidwriteChanel+0x150>
    28e4:	80 95       	com	r24
    28e6:	84 23       	and	r24, r20
    28e8:	8c 93       	st	X, r24
    28ea:	2b c0       	rjmp	.+86     	; 0x2942 <Dio_vidwriteChanel+0x1b6>
		}
		break;

	case DIO_PORTD:
		if (level == DIO_HIGH)
    28ec:	8b 81       	ldd	r24, Y+3	; 0x03
    28ee:	81 30       	cpi	r24, 0x01	; 1
    28f0:	a1 f4       	brne	.+40     	; 0x291a <Dio_vidwriteChanel+0x18e>
		{
			SET_BIT(DIO_PORTD_REG,pin);
    28f2:	a2 e3       	ldi	r26, 0x32	; 50
    28f4:	b0 e0       	ldi	r27, 0x00	; 0
    28f6:	e2 e3       	ldi	r30, 0x32	; 50
    28f8:	f0 e0       	ldi	r31, 0x00	; 0
    28fa:	80 81       	ld	r24, Z
    28fc:	48 2f       	mov	r20, r24
    28fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2900:	28 2f       	mov	r18, r24
    2902:	30 e0       	ldi	r19, 0x00	; 0
    2904:	81 e0       	ldi	r24, 0x01	; 1
    2906:	90 e0       	ldi	r25, 0x00	; 0
    2908:	02 2e       	mov	r0, r18
    290a:	02 c0       	rjmp	.+4      	; 0x2910 <Dio_vidwriteChanel+0x184>
    290c:	88 0f       	add	r24, r24
    290e:	99 1f       	adc	r25, r25
    2910:	0a 94       	dec	r0
    2912:	e2 f7       	brpl	.-8      	; 0x290c <Dio_vidwriteChanel+0x180>
    2914:	84 2b       	or	r24, r20
    2916:	8c 93       	st	X, r24
    2918:	14 c0       	rjmp	.+40     	; 0x2942 <Dio_vidwriteChanel+0x1b6>
		}
		else
		{
			CLEAR_BIT(DIO_PORTD_REG,pin);
    291a:	a2 e3       	ldi	r26, 0x32	; 50
    291c:	b0 e0       	ldi	r27, 0x00	; 0
    291e:	e2 e3       	ldi	r30, 0x32	; 50
    2920:	f0 e0       	ldi	r31, 0x00	; 0
    2922:	80 81       	ld	r24, Z
    2924:	48 2f       	mov	r20, r24
    2926:	8a 81       	ldd	r24, Y+2	; 0x02
    2928:	28 2f       	mov	r18, r24
    292a:	30 e0       	ldi	r19, 0x00	; 0
    292c:	81 e0       	ldi	r24, 0x01	; 1
    292e:	90 e0       	ldi	r25, 0x00	; 0
    2930:	02 2e       	mov	r0, r18
    2932:	02 c0       	rjmp	.+4      	; 0x2938 <Dio_vidwriteChanel+0x1ac>
    2934:	88 0f       	add	r24, r24
    2936:	99 1f       	adc	r25, r25
    2938:	0a 94       	dec	r0
    293a:	e2 f7       	brpl	.-8      	; 0x2934 <Dio_vidwriteChanel+0x1a8>
    293c:	80 95       	com	r24
    293e:	84 23       	and	r24, r20
    2940:	8c 93       	st	X, r24
		}
		break;
	}
}
    2942:	0f 90       	pop	r0
    2944:	0f 90       	pop	r0
    2946:	0f 90       	pop	r0
    2948:	0f 90       	pop	r0
    294a:	0f 90       	pop	r0
    294c:	cf 91       	pop	r28
    294e:	df 91       	pop	r29
    2950:	08 95       	ret

00002952 <Dio_vidWriteChanelGroup>:

void Dio_vidWriteChanelGroup(dio_port_t port, u8 data, u8 mask)
{
    2952:	df 93       	push	r29
    2954:	cf 93       	push	r28
    2956:	00 d0       	rcall	.+0      	; 0x2958 <Dio_vidWriteChanelGroup+0x6>
    2958:	00 d0       	rcall	.+0      	; 0x295a <Dio_vidWriteChanelGroup+0x8>
    295a:	0f 92       	push	r0
    295c:	cd b7       	in	r28, 0x3d	; 61
    295e:	de b7       	in	r29, 0x3e	; 62
    2960:	89 83       	std	Y+1, r24	; 0x01
    2962:	6a 83       	std	Y+2, r22	; 0x02
    2964:	4b 83       	std	Y+3, r20	; 0x03
	switch(port)
    2966:	89 81       	ldd	r24, Y+1	; 0x01
    2968:	28 2f       	mov	r18, r24
    296a:	30 e0       	ldi	r19, 0x00	; 0
    296c:	3d 83       	std	Y+5, r19	; 0x05
    296e:	2c 83       	std	Y+4, r18	; 0x04
    2970:	8c 81       	ldd	r24, Y+4	; 0x04
    2972:	9d 81       	ldd	r25, Y+5	; 0x05
    2974:	81 30       	cpi	r24, 0x01	; 1
    2976:	91 05       	cpc	r25, r1
    2978:	01 f1       	breq	.+64     	; 0x29ba <Dio_vidWriteChanelGroup+0x68>
    297a:	2c 81       	ldd	r18, Y+4	; 0x04
    297c:	3d 81       	ldd	r19, Y+5	; 0x05
    297e:	22 30       	cpi	r18, 0x02	; 2
    2980:	31 05       	cpc	r19, r1
    2982:	2c f4       	brge	.+10     	; 0x298e <Dio_vidWriteChanelGroup+0x3c>
    2984:	8c 81       	ldd	r24, Y+4	; 0x04
    2986:	9d 81       	ldd	r25, Y+5	; 0x05
    2988:	00 97       	sbiw	r24, 0x00	; 0
    298a:	61 f0       	breq	.+24     	; 0x29a4 <Dio_vidWriteChanelGroup+0x52>
    298c:	36 c0       	rjmp	.+108    	; 0x29fa <Dio_vidWriteChanelGroup+0xa8>
    298e:	2c 81       	ldd	r18, Y+4	; 0x04
    2990:	3d 81       	ldd	r19, Y+5	; 0x05
    2992:	22 30       	cpi	r18, 0x02	; 2
    2994:	31 05       	cpc	r19, r1
    2996:	e1 f0       	breq	.+56     	; 0x29d0 <Dio_vidWriteChanelGroup+0x7e>
    2998:	8c 81       	ldd	r24, Y+4	; 0x04
    299a:	9d 81       	ldd	r25, Y+5	; 0x05
    299c:	83 30       	cpi	r24, 0x03	; 3
    299e:	91 05       	cpc	r25, r1
    29a0:	11 f1       	breq	.+68     	; 0x29e6 <Dio_vidWriteChanelGroup+0x94>
    29a2:	2b c0       	rjmp	.+86     	; 0x29fa <Dio_vidWriteChanelGroup+0xa8>
	{
	case DIO_PORTA:
		DIO_PORTA_REG = (DIO_PORTA_REG & mask)|(data);
    29a4:	ab e3       	ldi	r26, 0x3B	; 59
    29a6:	b0 e0       	ldi	r27, 0x00	; 0
    29a8:	eb e3       	ldi	r30, 0x3B	; 59
    29aa:	f0 e0       	ldi	r31, 0x00	; 0
    29ac:	90 81       	ld	r25, Z
    29ae:	8b 81       	ldd	r24, Y+3	; 0x03
    29b0:	98 23       	and	r25, r24
    29b2:	8a 81       	ldd	r24, Y+2	; 0x02
    29b4:	89 2b       	or	r24, r25
    29b6:	8c 93       	st	X, r24
    29b8:	20 c0       	rjmp	.+64     	; 0x29fa <Dio_vidWriteChanelGroup+0xa8>
		break;

	case DIO_PORTB:
		DIO_PORTB_REG = (DIO_PORTB_REG & mask)|(data);
    29ba:	a8 e3       	ldi	r26, 0x38	; 56
    29bc:	b0 e0       	ldi	r27, 0x00	; 0
    29be:	e8 e3       	ldi	r30, 0x38	; 56
    29c0:	f0 e0       	ldi	r31, 0x00	; 0
    29c2:	90 81       	ld	r25, Z
    29c4:	8b 81       	ldd	r24, Y+3	; 0x03
    29c6:	98 23       	and	r25, r24
    29c8:	8a 81       	ldd	r24, Y+2	; 0x02
    29ca:	89 2b       	or	r24, r25
    29cc:	8c 93       	st	X, r24
    29ce:	15 c0       	rjmp	.+42     	; 0x29fa <Dio_vidWriteChanelGroup+0xa8>
		break;

	case DIO_PORTC:
		DIO_PORTC_REG = (DIO_PORTC_REG & mask)|(data);
    29d0:	a5 e3       	ldi	r26, 0x35	; 53
    29d2:	b0 e0       	ldi	r27, 0x00	; 0
    29d4:	e5 e3       	ldi	r30, 0x35	; 53
    29d6:	f0 e0       	ldi	r31, 0x00	; 0
    29d8:	90 81       	ld	r25, Z
    29da:	8b 81       	ldd	r24, Y+3	; 0x03
    29dc:	98 23       	and	r25, r24
    29de:	8a 81       	ldd	r24, Y+2	; 0x02
    29e0:	89 2b       	or	r24, r25
    29e2:	8c 93       	st	X, r24
    29e4:	0a c0       	rjmp	.+20     	; 0x29fa <Dio_vidWriteChanelGroup+0xa8>
		break;

	case DIO_PORTD:
		DIO_PORTD_REG = (DIO_PORTD_REG & mask)|(data);
    29e6:	a2 e3       	ldi	r26, 0x32	; 50
    29e8:	b0 e0       	ldi	r27, 0x00	; 0
    29ea:	e2 e3       	ldi	r30, 0x32	; 50
    29ec:	f0 e0       	ldi	r31, 0x00	; 0
    29ee:	90 81       	ld	r25, Z
    29f0:	8b 81       	ldd	r24, Y+3	; 0x03
    29f2:	98 23       	and	r25, r24
    29f4:	8a 81       	ldd	r24, Y+2	; 0x02
    29f6:	89 2b       	or	r24, r25
    29f8:	8c 93       	st	X, r24
		break;
	}
}
    29fa:	0f 90       	pop	r0
    29fc:	0f 90       	pop	r0
    29fe:	0f 90       	pop	r0
    2a00:	0f 90       	pop	r0
    2a02:	0f 90       	pop	r0
    2a04:	cf 91       	pop	r28
    2a06:	df 91       	pop	r29
    2a08:	08 95       	ret

00002a0a <Dio_udtreadChanel>:

dio_level_t Dio_udtreadChanel(dio_port_t port, dio_pin_t pin)
{
    2a0a:	df 93       	push	r29
    2a0c:	cf 93       	push	r28
    2a0e:	00 d0       	rcall	.+0      	; 0x2a10 <Dio_udtreadChanel+0x6>
    2a10:	00 d0       	rcall	.+0      	; 0x2a12 <Dio_udtreadChanel+0x8>
    2a12:	0f 92       	push	r0
    2a14:	cd b7       	in	r28, 0x3d	; 61
    2a16:	de b7       	in	r29, 0x3e	; 62
    2a18:	8a 83       	std	Y+2, r24	; 0x02
    2a1a:	6b 83       	std	Y+3, r22	; 0x03
	dio_level_t loc_result = DIO_LOW;
    2a1c:	19 82       	std	Y+1, r1	; 0x01

	switch (port)
    2a1e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a20:	28 2f       	mov	r18, r24
    2a22:	30 e0       	ldi	r19, 0x00	; 0
    2a24:	3d 83       	std	Y+5, r19	; 0x05
    2a26:	2c 83       	std	Y+4, r18	; 0x04
    2a28:	4c 81       	ldd	r20, Y+4	; 0x04
    2a2a:	5d 81       	ldd	r21, Y+5	; 0x05
    2a2c:	41 30       	cpi	r20, 0x01	; 1
    2a2e:	51 05       	cpc	r21, r1
    2a30:	79 f1       	breq	.+94     	; 0x2a90 <Dio_udtreadChanel+0x86>
    2a32:	8c 81       	ldd	r24, Y+4	; 0x04
    2a34:	9d 81       	ldd	r25, Y+5	; 0x05
    2a36:	82 30       	cpi	r24, 0x02	; 2
    2a38:	91 05       	cpc	r25, r1
    2a3a:	34 f4       	brge	.+12     	; 0x2a48 <Dio_udtreadChanel+0x3e>
    2a3c:	2c 81       	ldd	r18, Y+4	; 0x04
    2a3e:	3d 81       	ldd	r19, Y+5	; 0x05
    2a40:	21 15       	cp	r18, r1
    2a42:	31 05       	cpc	r19, r1
    2a44:	69 f0       	breq	.+26     	; 0x2a60 <Dio_udtreadChanel+0x56>
    2a46:	6b c0       	rjmp	.+214    	; 0x2b1e <Dio_udtreadChanel+0x114>
    2a48:	4c 81       	ldd	r20, Y+4	; 0x04
    2a4a:	5d 81       	ldd	r21, Y+5	; 0x05
    2a4c:	42 30       	cpi	r20, 0x02	; 2
    2a4e:	51 05       	cpc	r21, r1
    2a50:	b9 f1       	breq	.+110    	; 0x2ac0 <Dio_udtreadChanel+0xb6>
    2a52:	8c 81       	ldd	r24, Y+4	; 0x04
    2a54:	9d 81       	ldd	r25, Y+5	; 0x05
    2a56:	83 30       	cpi	r24, 0x03	; 3
    2a58:	91 05       	cpc	r25, r1
    2a5a:	09 f4       	brne	.+2      	; 0x2a5e <Dio_udtreadChanel+0x54>
    2a5c:	49 c0       	rjmp	.+146    	; 0x2af0 <Dio_udtreadChanel+0xe6>
    2a5e:	5f c0       	rjmp	.+190    	; 0x2b1e <Dio_udtreadChanel+0x114>
	{
	case DIO_PORTA:
		if (CHECK_BIT(DIO_PINA_REG,pin) == 1)
    2a60:	e9 e3       	ldi	r30, 0x39	; 57
    2a62:	f0 e0       	ldi	r31, 0x00	; 0
    2a64:	80 81       	ld	r24, Z
    2a66:	28 2f       	mov	r18, r24
    2a68:	30 e0       	ldi	r19, 0x00	; 0
    2a6a:	8b 81       	ldd	r24, Y+3	; 0x03
    2a6c:	88 2f       	mov	r24, r24
    2a6e:	90 e0       	ldi	r25, 0x00	; 0
    2a70:	a9 01       	movw	r20, r18
    2a72:	02 c0       	rjmp	.+4      	; 0x2a78 <Dio_udtreadChanel+0x6e>
    2a74:	55 95       	asr	r21
    2a76:	47 95       	ror	r20
    2a78:	8a 95       	dec	r24
    2a7a:	e2 f7       	brpl	.-8      	; 0x2a74 <Dio_udtreadChanel+0x6a>
    2a7c:	ca 01       	movw	r24, r20
    2a7e:	81 70       	andi	r24, 0x01	; 1
    2a80:	90 70       	andi	r25, 0x00	; 0
    2a82:	88 23       	and	r24, r24
    2a84:	19 f0       	breq	.+6      	; 0x2a8c <Dio_udtreadChanel+0x82>
		{
			loc_result = DIO_HIGH;
    2a86:	81 e0       	ldi	r24, 0x01	; 1
    2a88:	89 83       	std	Y+1, r24	; 0x01
    2a8a:	49 c0       	rjmp	.+146    	; 0x2b1e <Dio_udtreadChanel+0x114>
		}
		else
		{
			loc_result = DIO_LOW;
    2a8c:	19 82       	std	Y+1, r1	; 0x01
    2a8e:	47 c0       	rjmp	.+142    	; 0x2b1e <Dio_udtreadChanel+0x114>
		}
		break;

	case DIO_PORTB:
		if (CHECK_BIT(DIO_PINB_REG,pin) == 1)
    2a90:	e6 e3       	ldi	r30, 0x36	; 54
    2a92:	f0 e0       	ldi	r31, 0x00	; 0
    2a94:	80 81       	ld	r24, Z
    2a96:	28 2f       	mov	r18, r24
    2a98:	30 e0       	ldi	r19, 0x00	; 0
    2a9a:	8b 81       	ldd	r24, Y+3	; 0x03
    2a9c:	88 2f       	mov	r24, r24
    2a9e:	90 e0       	ldi	r25, 0x00	; 0
    2aa0:	a9 01       	movw	r20, r18
    2aa2:	02 c0       	rjmp	.+4      	; 0x2aa8 <Dio_udtreadChanel+0x9e>
    2aa4:	55 95       	asr	r21
    2aa6:	47 95       	ror	r20
    2aa8:	8a 95       	dec	r24
    2aaa:	e2 f7       	brpl	.-8      	; 0x2aa4 <Dio_udtreadChanel+0x9a>
    2aac:	ca 01       	movw	r24, r20
    2aae:	81 70       	andi	r24, 0x01	; 1
    2ab0:	90 70       	andi	r25, 0x00	; 0
    2ab2:	88 23       	and	r24, r24
    2ab4:	19 f0       	breq	.+6      	; 0x2abc <Dio_udtreadChanel+0xb2>
		{
			loc_result = DIO_HIGH;
    2ab6:	81 e0       	ldi	r24, 0x01	; 1
    2ab8:	89 83       	std	Y+1, r24	; 0x01
    2aba:	31 c0       	rjmp	.+98     	; 0x2b1e <Dio_udtreadChanel+0x114>
		}
		else
		{
			loc_result = DIO_LOW;
    2abc:	19 82       	std	Y+1, r1	; 0x01
    2abe:	2f c0       	rjmp	.+94     	; 0x2b1e <Dio_udtreadChanel+0x114>
		}
		break;

	case DIO_PORTC:
		if (CHECK_BIT(DIO_PINC_REG,pin) == 1)
    2ac0:	e3 e3       	ldi	r30, 0x33	; 51
    2ac2:	f0 e0       	ldi	r31, 0x00	; 0
    2ac4:	80 81       	ld	r24, Z
    2ac6:	28 2f       	mov	r18, r24
    2ac8:	30 e0       	ldi	r19, 0x00	; 0
    2aca:	8b 81       	ldd	r24, Y+3	; 0x03
    2acc:	88 2f       	mov	r24, r24
    2ace:	90 e0       	ldi	r25, 0x00	; 0
    2ad0:	a9 01       	movw	r20, r18
    2ad2:	02 c0       	rjmp	.+4      	; 0x2ad8 <Dio_udtreadChanel+0xce>
    2ad4:	55 95       	asr	r21
    2ad6:	47 95       	ror	r20
    2ad8:	8a 95       	dec	r24
    2ada:	e2 f7       	brpl	.-8      	; 0x2ad4 <Dio_udtreadChanel+0xca>
    2adc:	ca 01       	movw	r24, r20
    2ade:	81 70       	andi	r24, 0x01	; 1
    2ae0:	90 70       	andi	r25, 0x00	; 0
    2ae2:	88 23       	and	r24, r24
    2ae4:	19 f0       	breq	.+6      	; 0x2aec <Dio_udtreadChanel+0xe2>
		{
			loc_result = DIO_HIGH;
    2ae6:	81 e0       	ldi	r24, 0x01	; 1
    2ae8:	89 83       	std	Y+1, r24	; 0x01
    2aea:	19 c0       	rjmp	.+50     	; 0x2b1e <Dio_udtreadChanel+0x114>
		}
		else
		{
			loc_result = DIO_LOW;
    2aec:	19 82       	std	Y+1, r1	; 0x01
    2aee:	17 c0       	rjmp	.+46     	; 0x2b1e <Dio_udtreadChanel+0x114>
		}
		break;

	case DIO_PORTD:
		if (CHECK_BIT(DIO_PIND_REG,pin) == 1)
    2af0:	e0 e3       	ldi	r30, 0x30	; 48
    2af2:	f0 e0       	ldi	r31, 0x00	; 0
    2af4:	80 81       	ld	r24, Z
    2af6:	28 2f       	mov	r18, r24
    2af8:	30 e0       	ldi	r19, 0x00	; 0
    2afa:	8b 81       	ldd	r24, Y+3	; 0x03
    2afc:	88 2f       	mov	r24, r24
    2afe:	90 e0       	ldi	r25, 0x00	; 0
    2b00:	a9 01       	movw	r20, r18
    2b02:	02 c0       	rjmp	.+4      	; 0x2b08 <Dio_udtreadChanel+0xfe>
    2b04:	55 95       	asr	r21
    2b06:	47 95       	ror	r20
    2b08:	8a 95       	dec	r24
    2b0a:	e2 f7       	brpl	.-8      	; 0x2b04 <Dio_udtreadChanel+0xfa>
    2b0c:	ca 01       	movw	r24, r20
    2b0e:	81 70       	andi	r24, 0x01	; 1
    2b10:	90 70       	andi	r25, 0x00	; 0
    2b12:	88 23       	and	r24, r24
    2b14:	19 f0       	breq	.+6      	; 0x2b1c <Dio_udtreadChanel+0x112>
		{
			loc_result = DIO_HIGH;
    2b16:	81 e0       	ldi	r24, 0x01	; 1
    2b18:	89 83       	std	Y+1, r24	; 0x01
    2b1a:	01 c0       	rjmp	.+2      	; 0x2b1e <Dio_udtreadChanel+0x114>
		}
		else
		{
			loc_result = DIO_LOW;
    2b1c:	19 82       	std	Y+1, r1	; 0x01
		}
		break;
	}
	return loc_result;
    2b1e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2b20:	0f 90       	pop	r0
    2b22:	0f 90       	pop	r0
    2b24:	0f 90       	pop	r0
    2b26:	0f 90       	pop	r0
    2b28:	0f 90       	pop	r0
    2b2a:	cf 91       	pop	r28
    2b2c:	df 91       	pop	r29
    2b2e:	08 95       	ret

00002b30 <Dio_vidflipChanel>:

void Dio_vidflipChanel(dio_port_t port, dio_pin_t pin)
{
    2b30:	df 93       	push	r29
    2b32:	cf 93       	push	r28
    2b34:	00 d0       	rcall	.+0      	; 0x2b36 <Dio_vidflipChanel+0x6>
    2b36:	00 d0       	rcall	.+0      	; 0x2b38 <Dio_vidflipChanel+0x8>
    2b38:	cd b7       	in	r28, 0x3d	; 61
    2b3a:	de b7       	in	r29, 0x3e	; 62
    2b3c:	89 83       	std	Y+1, r24	; 0x01
    2b3e:	6a 83       	std	Y+2, r22	; 0x02
	switch (port)
    2b40:	89 81       	ldd	r24, Y+1	; 0x01
    2b42:	28 2f       	mov	r18, r24
    2b44:	30 e0       	ldi	r19, 0x00	; 0
    2b46:	3c 83       	std	Y+4, r19	; 0x04
    2b48:	2b 83       	std	Y+3, r18	; 0x03
    2b4a:	8b 81       	ldd	r24, Y+3	; 0x03
    2b4c:	9c 81       	ldd	r25, Y+4	; 0x04
    2b4e:	81 30       	cpi	r24, 0x01	; 1
    2b50:	91 05       	cpc	r25, r1
    2b52:	49 f1       	breq	.+82     	; 0x2ba6 <Dio_vidflipChanel+0x76>
    2b54:	2b 81       	ldd	r18, Y+3	; 0x03
    2b56:	3c 81       	ldd	r19, Y+4	; 0x04
    2b58:	22 30       	cpi	r18, 0x02	; 2
    2b5a:	31 05       	cpc	r19, r1
    2b5c:	2c f4       	brge	.+10     	; 0x2b68 <Dio_vidflipChanel+0x38>
    2b5e:	8b 81       	ldd	r24, Y+3	; 0x03
    2b60:	9c 81       	ldd	r25, Y+4	; 0x04
    2b62:	00 97       	sbiw	r24, 0x00	; 0
    2b64:	61 f0       	breq	.+24     	; 0x2b7e <Dio_vidflipChanel+0x4e>
    2b66:	5a c0       	rjmp	.+180    	; 0x2c1c <Dio_vidflipChanel+0xec>
    2b68:	2b 81       	ldd	r18, Y+3	; 0x03
    2b6a:	3c 81       	ldd	r19, Y+4	; 0x04
    2b6c:	22 30       	cpi	r18, 0x02	; 2
    2b6e:	31 05       	cpc	r19, r1
    2b70:	71 f1       	breq	.+92     	; 0x2bce <Dio_vidflipChanel+0x9e>
    2b72:	8b 81       	ldd	r24, Y+3	; 0x03
    2b74:	9c 81       	ldd	r25, Y+4	; 0x04
    2b76:	83 30       	cpi	r24, 0x03	; 3
    2b78:	91 05       	cpc	r25, r1
    2b7a:	e9 f1       	breq	.+122    	; 0x2bf6 <Dio_vidflipChanel+0xc6>
    2b7c:	4f c0       	rjmp	.+158    	; 0x2c1c <Dio_vidflipChanel+0xec>
	{
	case DIO_PORTA:
		FLIP_BIT(DIO_PORTA_REG,pin);
    2b7e:	ab e3       	ldi	r26, 0x3B	; 59
    2b80:	b0 e0       	ldi	r27, 0x00	; 0
    2b82:	eb e3       	ldi	r30, 0x3B	; 59
    2b84:	f0 e0       	ldi	r31, 0x00	; 0
    2b86:	80 81       	ld	r24, Z
    2b88:	48 2f       	mov	r20, r24
    2b8a:	8a 81       	ldd	r24, Y+2	; 0x02
    2b8c:	28 2f       	mov	r18, r24
    2b8e:	30 e0       	ldi	r19, 0x00	; 0
    2b90:	81 e0       	ldi	r24, 0x01	; 1
    2b92:	90 e0       	ldi	r25, 0x00	; 0
    2b94:	02 2e       	mov	r0, r18
    2b96:	02 c0       	rjmp	.+4      	; 0x2b9c <Dio_vidflipChanel+0x6c>
    2b98:	88 0f       	add	r24, r24
    2b9a:	99 1f       	adc	r25, r25
    2b9c:	0a 94       	dec	r0
    2b9e:	e2 f7       	brpl	.-8      	; 0x2b98 <Dio_vidflipChanel+0x68>
    2ba0:	84 27       	eor	r24, r20
    2ba2:	8c 93       	st	X, r24
    2ba4:	3b c0       	rjmp	.+118    	; 0x2c1c <Dio_vidflipChanel+0xec>
		break;

	case DIO_PORTB:
		FLIP_BIT(DIO_PORTB_REG,pin);
    2ba6:	a8 e3       	ldi	r26, 0x38	; 56
    2ba8:	b0 e0       	ldi	r27, 0x00	; 0
    2baa:	e8 e3       	ldi	r30, 0x38	; 56
    2bac:	f0 e0       	ldi	r31, 0x00	; 0
    2bae:	80 81       	ld	r24, Z
    2bb0:	48 2f       	mov	r20, r24
    2bb2:	8a 81       	ldd	r24, Y+2	; 0x02
    2bb4:	28 2f       	mov	r18, r24
    2bb6:	30 e0       	ldi	r19, 0x00	; 0
    2bb8:	81 e0       	ldi	r24, 0x01	; 1
    2bba:	90 e0       	ldi	r25, 0x00	; 0
    2bbc:	02 2e       	mov	r0, r18
    2bbe:	02 c0       	rjmp	.+4      	; 0x2bc4 <Dio_vidflipChanel+0x94>
    2bc0:	88 0f       	add	r24, r24
    2bc2:	99 1f       	adc	r25, r25
    2bc4:	0a 94       	dec	r0
    2bc6:	e2 f7       	brpl	.-8      	; 0x2bc0 <Dio_vidflipChanel+0x90>
    2bc8:	84 27       	eor	r24, r20
    2bca:	8c 93       	st	X, r24
    2bcc:	27 c0       	rjmp	.+78     	; 0x2c1c <Dio_vidflipChanel+0xec>
		break;

	case DIO_PORTC:
		FLIP_BIT(DIO_PORTC_REG,pin);
    2bce:	a5 e3       	ldi	r26, 0x35	; 53
    2bd0:	b0 e0       	ldi	r27, 0x00	; 0
    2bd2:	e5 e3       	ldi	r30, 0x35	; 53
    2bd4:	f0 e0       	ldi	r31, 0x00	; 0
    2bd6:	80 81       	ld	r24, Z
    2bd8:	48 2f       	mov	r20, r24
    2bda:	8a 81       	ldd	r24, Y+2	; 0x02
    2bdc:	28 2f       	mov	r18, r24
    2bde:	30 e0       	ldi	r19, 0x00	; 0
    2be0:	81 e0       	ldi	r24, 0x01	; 1
    2be2:	90 e0       	ldi	r25, 0x00	; 0
    2be4:	02 2e       	mov	r0, r18
    2be6:	02 c0       	rjmp	.+4      	; 0x2bec <Dio_vidflipChanel+0xbc>
    2be8:	88 0f       	add	r24, r24
    2bea:	99 1f       	adc	r25, r25
    2bec:	0a 94       	dec	r0
    2bee:	e2 f7       	brpl	.-8      	; 0x2be8 <Dio_vidflipChanel+0xb8>
    2bf0:	84 27       	eor	r24, r20
    2bf2:	8c 93       	st	X, r24
    2bf4:	13 c0       	rjmp	.+38     	; 0x2c1c <Dio_vidflipChanel+0xec>
		break;

	case DIO_PORTD:
		FLIP_BIT(DIO_PORTD_REG,pin);
    2bf6:	a2 e3       	ldi	r26, 0x32	; 50
    2bf8:	b0 e0       	ldi	r27, 0x00	; 0
    2bfa:	e2 e3       	ldi	r30, 0x32	; 50
    2bfc:	f0 e0       	ldi	r31, 0x00	; 0
    2bfe:	80 81       	ld	r24, Z
    2c00:	48 2f       	mov	r20, r24
    2c02:	8a 81       	ldd	r24, Y+2	; 0x02
    2c04:	28 2f       	mov	r18, r24
    2c06:	30 e0       	ldi	r19, 0x00	; 0
    2c08:	81 e0       	ldi	r24, 0x01	; 1
    2c0a:	90 e0       	ldi	r25, 0x00	; 0
    2c0c:	02 2e       	mov	r0, r18
    2c0e:	02 c0       	rjmp	.+4      	; 0x2c14 <Dio_vidflipChanel+0xe4>
    2c10:	88 0f       	add	r24, r24
    2c12:	99 1f       	adc	r25, r25
    2c14:	0a 94       	dec	r0
    2c16:	e2 f7       	brpl	.-8      	; 0x2c10 <Dio_vidflipChanel+0xe0>
    2c18:	84 27       	eor	r24, r20
    2c1a:	8c 93       	st	X, r24
		break;
	}
}
    2c1c:	0f 90       	pop	r0
    2c1e:	0f 90       	pop	r0
    2c20:	0f 90       	pop	r0
    2c22:	0f 90       	pop	r0
    2c24:	cf 91       	pop	r28
    2c26:	df 91       	pop	r29
    2c28:	08 95       	ret

00002c2a <Dio_vidPullUpEn>:
void Dio_vidPullUpEn(dio_port_t port, dio_pin_t pin)
{
    2c2a:	df 93       	push	r29
    2c2c:	cf 93       	push	r28
    2c2e:	00 d0       	rcall	.+0      	; 0x2c30 <Dio_vidPullUpEn+0x6>
    2c30:	00 d0       	rcall	.+0      	; 0x2c32 <Dio_vidPullUpEn+0x8>
    2c32:	cd b7       	in	r28, 0x3d	; 61
    2c34:	de b7       	in	r29, 0x3e	; 62
    2c36:	89 83       	std	Y+1, r24	; 0x01
    2c38:	6a 83       	std	Y+2, r22	; 0x02
	switch (port)
    2c3a:	89 81       	ldd	r24, Y+1	; 0x01
    2c3c:	28 2f       	mov	r18, r24
    2c3e:	30 e0       	ldi	r19, 0x00	; 0
    2c40:	3c 83       	std	Y+4, r19	; 0x04
    2c42:	2b 83       	std	Y+3, r18	; 0x03
    2c44:	8b 81       	ldd	r24, Y+3	; 0x03
    2c46:	9c 81       	ldd	r25, Y+4	; 0x04
    2c48:	81 30       	cpi	r24, 0x01	; 1
    2c4a:	91 05       	cpc	r25, r1
    2c4c:	49 f1       	breq	.+82     	; 0x2ca0 <Dio_vidPullUpEn+0x76>
    2c4e:	2b 81       	ldd	r18, Y+3	; 0x03
    2c50:	3c 81       	ldd	r19, Y+4	; 0x04
    2c52:	22 30       	cpi	r18, 0x02	; 2
    2c54:	31 05       	cpc	r19, r1
    2c56:	2c f4       	brge	.+10     	; 0x2c62 <Dio_vidPullUpEn+0x38>
    2c58:	8b 81       	ldd	r24, Y+3	; 0x03
    2c5a:	9c 81       	ldd	r25, Y+4	; 0x04
    2c5c:	00 97       	sbiw	r24, 0x00	; 0
    2c5e:	61 f0       	breq	.+24     	; 0x2c78 <Dio_vidPullUpEn+0x4e>
    2c60:	5a c0       	rjmp	.+180    	; 0x2d16 <Dio_vidPullUpEn+0xec>
    2c62:	2b 81       	ldd	r18, Y+3	; 0x03
    2c64:	3c 81       	ldd	r19, Y+4	; 0x04
    2c66:	22 30       	cpi	r18, 0x02	; 2
    2c68:	31 05       	cpc	r19, r1
    2c6a:	71 f1       	breq	.+92     	; 0x2cc8 <Dio_vidPullUpEn+0x9e>
    2c6c:	8b 81       	ldd	r24, Y+3	; 0x03
    2c6e:	9c 81       	ldd	r25, Y+4	; 0x04
    2c70:	83 30       	cpi	r24, 0x03	; 3
    2c72:	91 05       	cpc	r25, r1
    2c74:	e9 f1       	breq	.+122    	; 0x2cf0 <Dio_vidPullUpEn+0xc6>
    2c76:	4f c0       	rjmp	.+158    	; 0x2d16 <Dio_vidPullUpEn+0xec>
	{
	case DIO_PORTA:
		SET_BIT(DIO_PORTA_REG,pin);
    2c78:	ab e3       	ldi	r26, 0x3B	; 59
    2c7a:	b0 e0       	ldi	r27, 0x00	; 0
    2c7c:	eb e3       	ldi	r30, 0x3B	; 59
    2c7e:	f0 e0       	ldi	r31, 0x00	; 0
    2c80:	80 81       	ld	r24, Z
    2c82:	48 2f       	mov	r20, r24
    2c84:	8a 81       	ldd	r24, Y+2	; 0x02
    2c86:	28 2f       	mov	r18, r24
    2c88:	30 e0       	ldi	r19, 0x00	; 0
    2c8a:	81 e0       	ldi	r24, 0x01	; 1
    2c8c:	90 e0       	ldi	r25, 0x00	; 0
    2c8e:	02 2e       	mov	r0, r18
    2c90:	02 c0       	rjmp	.+4      	; 0x2c96 <Dio_vidPullUpEn+0x6c>
    2c92:	88 0f       	add	r24, r24
    2c94:	99 1f       	adc	r25, r25
    2c96:	0a 94       	dec	r0
    2c98:	e2 f7       	brpl	.-8      	; 0x2c92 <Dio_vidPullUpEn+0x68>
    2c9a:	84 2b       	or	r24, r20
    2c9c:	8c 93       	st	X, r24
    2c9e:	3b c0       	rjmp	.+118    	; 0x2d16 <Dio_vidPullUpEn+0xec>
		break;

	case DIO_PORTB:
		SET_BIT(DIO_PORTB_REG,pin);
    2ca0:	a8 e3       	ldi	r26, 0x38	; 56
    2ca2:	b0 e0       	ldi	r27, 0x00	; 0
    2ca4:	e8 e3       	ldi	r30, 0x38	; 56
    2ca6:	f0 e0       	ldi	r31, 0x00	; 0
    2ca8:	80 81       	ld	r24, Z
    2caa:	48 2f       	mov	r20, r24
    2cac:	8a 81       	ldd	r24, Y+2	; 0x02
    2cae:	28 2f       	mov	r18, r24
    2cb0:	30 e0       	ldi	r19, 0x00	; 0
    2cb2:	81 e0       	ldi	r24, 0x01	; 1
    2cb4:	90 e0       	ldi	r25, 0x00	; 0
    2cb6:	02 2e       	mov	r0, r18
    2cb8:	02 c0       	rjmp	.+4      	; 0x2cbe <Dio_vidPullUpEn+0x94>
    2cba:	88 0f       	add	r24, r24
    2cbc:	99 1f       	adc	r25, r25
    2cbe:	0a 94       	dec	r0
    2cc0:	e2 f7       	brpl	.-8      	; 0x2cba <Dio_vidPullUpEn+0x90>
    2cc2:	84 2b       	or	r24, r20
    2cc4:	8c 93       	st	X, r24
    2cc6:	27 c0       	rjmp	.+78     	; 0x2d16 <Dio_vidPullUpEn+0xec>
		break;

	case DIO_PORTC:
		SET_BIT(DIO_PORTC_REG,pin);
    2cc8:	a5 e3       	ldi	r26, 0x35	; 53
    2cca:	b0 e0       	ldi	r27, 0x00	; 0
    2ccc:	e5 e3       	ldi	r30, 0x35	; 53
    2cce:	f0 e0       	ldi	r31, 0x00	; 0
    2cd0:	80 81       	ld	r24, Z
    2cd2:	48 2f       	mov	r20, r24
    2cd4:	8a 81       	ldd	r24, Y+2	; 0x02
    2cd6:	28 2f       	mov	r18, r24
    2cd8:	30 e0       	ldi	r19, 0x00	; 0
    2cda:	81 e0       	ldi	r24, 0x01	; 1
    2cdc:	90 e0       	ldi	r25, 0x00	; 0
    2cde:	02 2e       	mov	r0, r18
    2ce0:	02 c0       	rjmp	.+4      	; 0x2ce6 <Dio_vidPullUpEn+0xbc>
    2ce2:	88 0f       	add	r24, r24
    2ce4:	99 1f       	adc	r25, r25
    2ce6:	0a 94       	dec	r0
    2ce8:	e2 f7       	brpl	.-8      	; 0x2ce2 <Dio_vidPullUpEn+0xb8>
    2cea:	84 2b       	or	r24, r20
    2cec:	8c 93       	st	X, r24
    2cee:	13 c0       	rjmp	.+38     	; 0x2d16 <Dio_vidPullUpEn+0xec>
		break;

	case DIO_PORTD:
		SET_BIT(DIO_PORTD_REG,pin);
    2cf0:	a2 e3       	ldi	r26, 0x32	; 50
    2cf2:	b0 e0       	ldi	r27, 0x00	; 0
    2cf4:	e2 e3       	ldi	r30, 0x32	; 50
    2cf6:	f0 e0       	ldi	r31, 0x00	; 0
    2cf8:	80 81       	ld	r24, Z
    2cfa:	48 2f       	mov	r20, r24
    2cfc:	8a 81       	ldd	r24, Y+2	; 0x02
    2cfe:	28 2f       	mov	r18, r24
    2d00:	30 e0       	ldi	r19, 0x00	; 0
    2d02:	81 e0       	ldi	r24, 0x01	; 1
    2d04:	90 e0       	ldi	r25, 0x00	; 0
    2d06:	02 2e       	mov	r0, r18
    2d08:	02 c0       	rjmp	.+4      	; 0x2d0e <Dio_vidPullUpEn+0xe4>
    2d0a:	88 0f       	add	r24, r24
    2d0c:	99 1f       	adc	r25, r25
    2d0e:	0a 94       	dec	r0
    2d10:	e2 f7       	brpl	.-8      	; 0x2d0a <Dio_vidPullUpEn+0xe0>
    2d12:	84 2b       	or	r24, r20
    2d14:	8c 93       	st	X, r24
		break;
	}
}
    2d16:	0f 90       	pop	r0
    2d18:	0f 90       	pop	r0
    2d1a:	0f 90       	pop	r0
    2d1c:	0f 90       	pop	r0
    2d1e:	cf 91       	pop	r28
    2d20:	df 91       	pop	r29
    2d22:	08 95       	ret

00002d24 <Adc_vidInit>:
#include "Adc_Reg.h"
#include "Adc_Types.h"
#include "Bit_Math.h"

void Adc_vidInit(void)
{
    2d24:	df 93       	push	r29
    2d26:	cf 93       	push	r28
    2d28:	cd b7       	in	r28, 0x3d	; 61
    2d2a:	de b7       	in	r29, 0x3e	; 62

	/*	Enable ADC	*/
	SET_BIT(ADC_ADCSRA_REG, 7);
    2d2c:	a6 e2       	ldi	r26, 0x26	; 38
    2d2e:	b0 e0       	ldi	r27, 0x00	; 0
    2d30:	e6 e2       	ldi	r30, 0x26	; 38
    2d32:	f0 e0       	ldi	r31, 0x00	; 0
    2d34:	80 81       	ld	r24, Z
    2d36:	80 68       	ori	r24, 0x80	; 128
    2d38:	8c 93       	st	X, r24
	/*	Configure ADC prescaler	 /128	*/
	ADC_ADCSRA_REG |= 7 /*0000 0111*/;
    2d3a:	a6 e2       	ldi	r26, 0x26	; 38
    2d3c:	b0 e0       	ldi	r27, 0x00	; 0
    2d3e:	e6 e2       	ldi	r30, 0x26	; 38
    2d40:	f0 e0       	ldi	r31, 0x00	; 0
    2d42:	80 81       	ld	r24, Z
    2d44:	87 60       	ori	r24, 0x07	; 7
    2d46:	8c 93       	st	X, r24
	/*	Select Vref +	AVCC	*/
	SET_BIT(ADC_ADMUX_REG,6);
    2d48:	a7 e2       	ldi	r26, 0x27	; 39
    2d4a:	b0 e0       	ldi	r27, 0x00	; 0
    2d4c:	e7 e2       	ldi	r30, 0x27	; 39
    2d4e:	f0 e0       	ldi	r31, 0x00	; 0
    2d50:	80 81       	ld	r24, Z
    2d52:	80 64       	ori	r24, 0x40	; 64
    2d54:	8c 93       	st	X, r24
}
    2d56:	cf 91       	pop	r28
    2d58:	df 91       	pop	r29
    2d5a:	08 95       	ret

00002d5c <Adc_u16AdcRead>:

f64 Adc_u16AdcRead(adc_channlId_t channel)
{
    2d5c:	df 93       	push	r29
    2d5e:	cf 93       	push	r28
    2d60:	cd b7       	in	r28, 0x3d	; 61
    2d62:	de b7       	in	r29, 0x3e	; 62
    2d64:	27 97       	sbiw	r28, 0x07	; 7
    2d66:	0f b6       	in	r0, 0x3f	; 63
    2d68:	f8 94       	cli
    2d6a:	de bf       	out	0x3e, r29	; 62
    2d6c:	0f be       	out	0x3f, r0	; 63
    2d6e:	cd bf       	out	0x3d, r28	; 61
    2d70:	8f 83       	std	Y+7, r24	; 0x07
	u16 loc_adcResult = 0;
    2d72:	1e 82       	std	Y+6, r1	; 0x06
    2d74:	1d 82       	std	Y+5, r1	; 0x05
	f64 loc_volt =0;
    2d76:	80 e0       	ldi	r24, 0x00	; 0
    2d78:	90 e0       	ldi	r25, 0x00	; 0
    2d7a:	a0 e0       	ldi	r26, 0x00	; 0
    2d7c:	b0 e0       	ldi	r27, 0x00	; 0
    2d7e:	89 83       	std	Y+1, r24	; 0x01
    2d80:	9a 83       	std	Y+2, r25	; 0x02
    2d82:	ab 83       	std	Y+3, r26	; 0x03
    2d84:	bc 83       	std	Y+4, r27	; 0x04
	/*	select ADC channel	*/
	ADC_ADMUX_REG =  (ADC_ADMUX_REG & 0xF8)| channel;
    2d86:	a7 e2       	ldi	r26, 0x27	; 39
    2d88:	b0 e0       	ldi	r27, 0x00	; 0
    2d8a:	e7 e2       	ldi	r30, 0x27	; 39
    2d8c:	f0 e0       	ldi	r31, 0x00	; 0
    2d8e:	80 81       	ld	r24, Z
    2d90:	98 2f       	mov	r25, r24
    2d92:	98 7f       	andi	r25, 0xF8	; 248
    2d94:	8f 81       	ldd	r24, Y+7	; 0x07
    2d96:	89 2b       	or	r24, r25
    2d98:	8c 93       	st	X, r24
	/*	Start ADC conversion	*/
	SET_BIT(ADC_ADCSRA_REG,6);
    2d9a:	a6 e2       	ldi	r26, 0x26	; 38
    2d9c:	b0 e0       	ldi	r27, 0x00	; 0
    2d9e:	e6 e2       	ldi	r30, 0x26	; 38
    2da0:	f0 e0       	ldi	r31, 0x00	; 0
    2da2:	80 81       	ld	r24, Z
    2da4:	80 64       	ori	r24, 0x40	; 64
    2da6:	8c 93       	st	X, r24

	/*	wait until ADIF flag become 1 */
	while(CHECK_BIT(ADC_ADCSRA_REG,4) !=1)
    2da8:	e6 e2       	ldi	r30, 0x26	; 38
    2daa:	f0 e0       	ldi	r31, 0x00	; 0
    2dac:	80 81       	ld	r24, Z
    2dae:	82 95       	swap	r24
    2db0:	8f 70       	andi	r24, 0x0F	; 15
    2db2:	88 2f       	mov	r24, r24
    2db4:	90 e0       	ldi	r25, 0x00	; 0
    2db6:	81 70       	andi	r24, 0x01	; 1
    2db8:	90 70       	andi	r25, 0x00	; 0
    2dba:	00 97       	sbiw	r24, 0x00	; 0
    2dbc:	a9 f3       	breq	.-22     	; 0x2da8 <Adc_u16AdcRead+0x4c>
	{
		/*	Do Nothing	*/
	}

	/*	clear ADIF by writing 1 	*/
	SET_BIT(ADC_ADCSRA_REG,4);
    2dbe:	a6 e2       	ldi	r26, 0x26	; 38
    2dc0:	b0 e0       	ldi	r27, 0x00	; 0
    2dc2:	e6 e2       	ldi	r30, 0x26	; 38
    2dc4:	f0 e0       	ldi	r31, 0x00	; 0
    2dc6:	80 81       	ld	r24, Z
    2dc8:	80 61       	ori	r24, 0x10	; 16
    2dca:	8c 93       	st	X, r24

	/*	read ADC result form ADCL, ADCH	*/
	loc_adcResult=(ADC_ADCL_REG|(ADC_ADCH_REG<<8));
    2dcc:	e4 e2       	ldi	r30, 0x24	; 36
    2dce:	f0 e0       	ldi	r31, 0x00	; 0
    2dd0:	80 81       	ld	r24, Z
    2dd2:	28 2f       	mov	r18, r24
    2dd4:	30 e0       	ldi	r19, 0x00	; 0
    2dd6:	e5 e2       	ldi	r30, 0x25	; 37
    2dd8:	f0 e0       	ldi	r31, 0x00	; 0
    2dda:	80 81       	ld	r24, Z
    2ddc:	88 2f       	mov	r24, r24
    2dde:	90 e0       	ldi	r25, 0x00	; 0
    2de0:	98 2f       	mov	r25, r24
    2de2:	88 27       	eor	r24, r24
    2de4:	82 2b       	or	r24, r18
    2de6:	93 2b       	or	r25, r19
    2de8:	9e 83       	std	Y+6, r25	; 0x06
    2dea:	8d 83       	std	Y+5, r24	; 0x05

	loc_volt = loc_adcResult * ADC_STEP;
    2dec:	8d 81       	ldd	r24, Y+5	; 0x05
    2dee:	9e 81       	ldd	r25, Y+6	; 0x06
    2df0:	cc 01       	movw	r24, r24
    2df2:	a0 e0       	ldi	r26, 0x00	; 0
    2df4:	b0 e0       	ldi	r27, 0x00	; 0
    2df6:	bc 01       	movw	r22, r24
    2df8:	cd 01       	movw	r24, r26
    2dfa:	0e 94 a1 04 	call	0x942	; 0x942 <__floatunsisf>
    2dfe:	dc 01       	movw	r26, r24
    2e00:	cb 01       	movw	r24, r22
    2e02:	bc 01       	movw	r22, r24
    2e04:	cd 01       	movw	r24, r26
    2e06:	2a e9       	ldi	r18, 0x9A	; 154
    2e08:	39 e9       	ldi	r19, 0x99	; 153
    2e0a:	49 e9       	ldi	r20, 0x99	; 153
    2e0c:	50 e4       	ldi	r21, 0x40	; 64
    2e0e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2e12:	dc 01       	movw	r26, r24
    2e14:	cb 01       	movw	r24, r22
    2e16:	89 83       	std	Y+1, r24	; 0x01
    2e18:	9a 83       	std	Y+2, r25	; 0x02
    2e1a:	ab 83       	std	Y+3, r26	; 0x03
    2e1c:	bc 83       	std	Y+4, r27	; 0x04
	return loc_volt;
    2e1e:	89 81       	ldd	r24, Y+1	; 0x01
    2e20:	9a 81       	ldd	r25, Y+2	; 0x02
    2e22:	ab 81       	ldd	r26, Y+3	; 0x03
    2e24:	bc 81       	ldd	r27, Y+4	; 0x04
}
    2e26:	bc 01       	movw	r22, r24
    2e28:	cd 01       	movw	r24, r26
    2e2a:	27 96       	adiw	r28, 0x07	; 7
    2e2c:	0f b6       	in	r0, 0x3f	; 63
    2e2e:	f8 94       	cli
    2e30:	de bf       	out	0x3e, r29	; 62
    2e32:	0f be       	out	0x3f, r0	; 63
    2e34:	cd bf       	out	0x3d, r28	; 61
    2e36:	cf 91       	pop	r28
    2e38:	df 91       	pop	r29
    2e3a:	08 95       	ret

00002e3c <__udivmodqi4>:
    2e3c:	99 1b       	sub	r25, r25
    2e3e:	79 e0       	ldi	r23, 0x09	; 9
    2e40:	04 c0       	rjmp	.+8      	; 0x2e4a <__udivmodqi4_ep>

00002e42 <__udivmodqi4_loop>:
    2e42:	99 1f       	adc	r25, r25
    2e44:	96 17       	cp	r25, r22
    2e46:	08 f0       	brcs	.+2      	; 0x2e4a <__udivmodqi4_ep>
    2e48:	96 1b       	sub	r25, r22

00002e4a <__udivmodqi4_ep>:
    2e4a:	88 1f       	adc	r24, r24
    2e4c:	7a 95       	dec	r23
    2e4e:	c9 f7       	brne	.-14     	; 0x2e42 <__udivmodqi4_loop>
    2e50:	80 95       	com	r24
    2e52:	08 95       	ret

00002e54 <__udivmodsi4>:
    2e54:	a1 e2       	ldi	r26, 0x21	; 33
    2e56:	1a 2e       	mov	r1, r26
    2e58:	aa 1b       	sub	r26, r26
    2e5a:	bb 1b       	sub	r27, r27
    2e5c:	fd 01       	movw	r30, r26
    2e5e:	0d c0       	rjmp	.+26     	; 0x2e7a <__udivmodsi4_ep>

00002e60 <__udivmodsi4_loop>:
    2e60:	aa 1f       	adc	r26, r26
    2e62:	bb 1f       	adc	r27, r27
    2e64:	ee 1f       	adc	r30, r30
    2e66:	ff 1f       	adc	r31, r31
    2e68:	a2 17       	cp	r26, r18
    2e6a:	b3 07       	cpc	r27, r19
    2e6c:	e4 07       	cpc	r30, r20
    2e6e:	f5 07       	cpc	r31, r21
    2e70:	20 f0       	brcs	.+8      	; 0x2e7a <__udivmodsi4_ep>
    2e72:	a2 1b       	sub	r26, r18
    2e74:	b3 0b       	sbc	r27, r19
    2e76:	e4 0b       	sbc	r30, r20
    2e78:	f5 0b       	sbc	r31, r21

00002e7a <__udivmodsi4_ep>:
    2e7a:	66 1f       	adc	r22, r22
    2e7c:	77 1f       	adc	r23, r23
    2e7e:	88 1f       	adc	r24, r24
    2e80:	99 1f       	adc	r25, r25
    2e82:	1a 94       	dec	r1
    2e84:	69 f7       	brne	.-38     	; 0x2e60 <__udivmodsi4_loop>
    2e86:	60 95       	com	r22
    2e88:	70 95       	com	r23
    2e8a:	80 95       	com	r24
    2e8c:	90 95       	com	r25
    2e8e:	9b 01       	movw	r18, r22
    2e90:	ac 01       	movw	r20, r24
    2e92:	bd 01       	movw	r22, r26
    2e94:	cf 01       	movw	r24, r30
    2e96:	08 95       	ret

00002e98 <__prologue_saves__>:
    2e98:	2f 92       	push	r2
    2e9a:	3f 92       	push	r3
    2e9c:	4f 92       	push	r4
    2e9e:	5f 92       	push	r5
    2ea0:	6f 92       	push	r6
    2ea2:	7f 92       	push	r7
    2ea4:	8f 92       	push	r8
    2ea6:	9f 92       	push	r9
    2ea8:	af 92       	push	r10
    2eaa:	bf 92       	push	r11
    2eac:	cf 92       	push	r12
    2eae:	df 92       	push	r13
    2eb0:	ef 92       	push	r14
    2eb2:	ff 92       	push	r15
    2eb4:	0f 93       	push	r16
    2eb6:	1f 93       	push	r17
    2eb8:	cf 93       	push	r28
    2eba:	df 93       	push	r29
    2ebc:	cd b7       	in	r28, 0x3d	; 61
    2ebe:	de b7       	in	r29, 0x3e	; 62
    2ec0:	ca 1b       	sub	r28, r26
    2ec2:	db 0b       	sbc	r29, r27
    2ec4:	0f b6       	in	r0, 0x3f	; 63
    2ec6:	f8 94       	cli
    2ec8:	de bf       	out	0x3e, r29	; 62
    2eca:	0f be       	out	0x3f, r0	; 63
    2ecc:	cd bf       	out	0x3d, r28	; 61
    2ece:	09 94       	ijmp

00002ed0 <__epilogue_restores__>:
    2ed0:	2a 88       	ldd	r2, Y+18	; 0x12
    2ed2:	39 88       	ldd	r3, Y+17	; 0x11
    2ed4:	48 88       	ldd	r4, Y+16	; 0x10
    2ed6:	5f 84       	ldd	r5, Y+15	; 0x0f
    2ed8:	6e 84       	ldd	r6, Y+14	; 0x0e
    2eda:	7d 84       	ldd	r7, Y+13	; 0x0d
    2edc:	8c 84       	ldd	r8, Y+12	; 0x0c
    2ede:	9b 84       	ldd	r9, Y+11	; 0x0b
    2ee0:	aa 84       	ldd	r10, Y+10	; 0x0a
    2ee2:	b9 84       	ldd	r11, Y+9	; 0x09
    2ee4:	c8 84       	ldd	r12, Y+8	; 0x08
    2ee6:	df 80       	ldd	r13, Y+7	; 0x07
    2ee8:	ee 80       	ldd	r14, Y+6	; 0x06
    2eea:	fd 80       	ldd	r15, Y+5	; 0x05
    2eec:	0c 81       	ldd	r16, Y+4	; 0x04
    2eee:	1b 81       	ldd	r17, Y+3	; 0x03
    2ef0:	aa 81       	ldd	r26, Y+2	; 0x02
    2ef2:	b9 81       	ldd	r27, Y+1	; 0x01
    2ef4:	ce 0f       	add	r28, r30
    2ef6:	d1 1d       	adc	r29, r1
    2ef8:	0f b6       	in	r0, 0x3f	; 63
    2efa:	f8 94       	cli
    2efc:	de bf       	out	0x3e, r29	; 62
    2efe:	0f be       	out	0x3f, r0	; 63
    2f00:	cd bf       	out	0x3d, r28	; 61
    2f02:	ed 01       	movw	r28, r26
    2f04:	08 95       	ret

00002f06 <sprintf>:
    2f06:	ae e0       	ldi	r26, 0x0E	; 14
    2f08:	b0 e0       	ldi	r27, 0x00	; 0
    2f0a:	e9 e8       	ldi	r30, 0x89	; 137
    2f0c:	f7 e1       	ldi	r31, 0x17	; 23
    2f0e:	0c 94 5a 17 	jmp	0x2eb4	; 0x2eb4 <__prologue_saves__+0x1c>
    2f12:	0d 89       	ldd	r16, Y+21	; 0x15
    2f14:	1e 89       	ldd	r17, Y+22	; 0x16
    2f16:	86 e0       	ldi	r24, 0x06	; 6
    2f18:	8c 83       	std	Y+4, r24	; 0x04
    2f1a:	1a 83       	std	Y+2, r17	; 0x02
    2f1c:	09 83       	std	Y+1, r16	; 0x01
    2f1e:	8f ef       	ldi	r24, 0xFF	; 255
    2f20:	9f e7       	ldi	r25, 0x7F	; 127
    2f22:	9e 83       	std	Y+6, r25	; 0x06
    2f24:	8d 83       	std	Y+5, r24	; 0x05
    2f26:	9e 01       	movw	r18, r28
    2f28:	27 5e       	subi	r18, 0xE7	; 231
    2f2a:	3f 4f       	sbci	r19, 0xFF	; 255
    2f2c:	ce 01       	movw	r24, r28
    2f2e:	01 96       	adiw	r24, 0x01	; 1
    2f30:	6f 89       	ldd	r22, Y+23	; 0x17
    2f32:	78 8d       	ldd	r23, Y+24	; 0x18
    2f34:	a9 01       	movw	r20, r18
    2f36:	0e 94 a7 17 	call	0x2f4e	; 0x2f4e <vfprintf>
    2f3a:	2f 81       	ldd	r18, Y+7	; 0x07
    2f3c:	38 85       	ldd	r19, Y+8	; 0x08
    2f3e:	02 0f       	add	r16, r18
    2f40:	13 1f       	adc	r17, r19
    2f42:	f8 01       	movw	r30, r16
    2f44:	10 82       	st	Z, r1
    2f46:	2e 96       	adiw	r28, 0x0e	; 14
    2f48:	e4 e0       	ldi	r30, 0x04	; 4
    2f4a:	0c 94 76 17 	jmp	0x2eec	; 0x2eec <__epilogue_restores__+0x1c>

00002f4e <vfprintf>:
    2f4e:	ab e0       	ldi	r26, 0x0B	; 11
    2f50:	b0 e0       	ldi	r27, 0x00	; 0
    2f52:	ed ea       	ldi	r30, 0xAD	; 173
    2f54:	f7 e1       	ldi	r31, 0x17	; 23
    2f56:	0c 94 4c 17 	jmp	0x2e98	; 0x2e98 <__prologue_saves__>
    2f5a:	3c 01       	movw	r6, r24
    2f5c:	2b 01       	movw	r4, r22
    2f5e:	5a 01       	movw	r10, r20
    2f60:	fc 01       	movw	r30, r24
    2f62:	17 82       	std	Z+7, r1	; 0x07
    2f64:	16 82       	std	Z+6, r1	; 0x06
    2f66:	83 81       	ldd	r24, Z+3	; 0x03
    2f68:	81 fd       	sbrc	r24, 1
    2f6a:	03 c0       	rjmp	.+6      	; 0x2f72 <vfprintf+0x24>
    2f6c:	6f ef       	ldi	r22, 0xFF	; 255
    2f6e:	7f ef       	ldi	r23, 0xFF	; 255
    2f70:	c6 c1       	rjmp	.+908    	; 0x32fe <vfprintf+0x3b0>
    2f72:	9a e0       	ldi	r25, 0x0A	; 10
    2f74:	89 2e       	mov	r8, r25
    2f76:	1e 01       	movw	r2, r28
    2f78:	08 94       	sec
    2f7a:	21 1c       	adc	r2, r1
    2f7c:	31 1c       	adc	r3, r1
    2f7e:	f3 01       	movw	r30, r6
    2f80:	23 81       	ldd	r18, Z+3	; 0x03
    2f82:	f2 01       	movw	r30, r4
    2f84:	23 fd       	sbrc	r18, 3
    2f86:	85 91       	lpm	r24, Z+
    2f88:	23 ff       	sbrs	r18, 3
    2f8a:	81 91       	ld	r24, Z+
    2f8c:	2f 01       	movw	r4, r30
    2f8e:	88 23       	and	r24, r24
    2f90:	09 f4       	brne	.+2      	; 0x2f94 <vfprintf+0x46>
    2f92:	b2 c1       	rjmp	.+868    	; 0x32f8 <vfprintf+0x3aa>
    2f94:	85 32       	cpi	r24, 0x25	; 37
    2f96:	39 f4       	brne	.+14     	; 0x2fa6 <vfprintf+0x58>
    2f98:	23 fd       	sbrc	r18, 3
    2f9a:	85 91       	lpm	r24, Z+
    2f9c:	23 ff       	sbrs	r18, 3
    2f9e:	81 91       	ld	r24, Z+
    2fa0:	2f 01       	movw	r4, r30
    2fa2:	85 32       	cpi	r24, 0x25	; 37
    2fa4:	29 f4       	brne	.+10     	; 0x2fb0 <vfprintf+0x62>
    2fa6:	90 e0       	ldi	r25, 0x00	; 0
    2fa8:	b3 01       	movw	r22, r6
    2faa:	0e 94 9a 19 	call	0x3334	; 0x3334 <fputc>
    2fae:	e7 cf       	rjmp	.-50     	; 0x2f7e <vfprintf+0x30>
    2fb0:	98 2f       	mov	r25, r24
    2fb2:	ff 24       	eor	r15, r15
    2fb4:	ee 24       	eor	r14, r14
    2fb6:	99 24       	eor	r9, r9
    2fb8:	ff e1       	ldi	r31, 0x1F	; 31
    2fba:	ff 15       	cp	r31, r15
    2fbc:	d0 f0       	brcs	.+52     	; 0x2ff2 <vfprintf+0xa4>
    2fbe:	9b 32       	cpi	r25, 0x2B	; 43
    2fc0:	69 f0       	breq	.+26     	; 0x2fdc <vfprintf+0x8e>
    2fc2:	9c 32       	cpi	r25, 0x2C	; 44
    2fc4:	28 f4       	brcc	.+10     	; 0x2fd0 <vfprintf+0x82>
    2fc6:	90 32       	cpi	r25, 0x20	; 32
    2fc8:	59 f0       	breq	.+22     	; 0x2fe0 <vfprintf+0x92>
    2fca:	93 32       	cpi	r25, 0x23	; 35
    2fcc:	91 f4       	brne	.+36     	; 0x2ff2 <vfprintf+0xa4>
    2fce:	0e c0       	rjmp	.+28     	; 0x2fec <vfprintf+0x9e>
    2fd0:	9d 32       	cpi	r25, 0x2D	; 45
    2fd2:	49 f0       	breq	.+18     	; 0x2fe6 <vfprintf+0x98>
    2fd4:	90 33       	cpi	r25, 0x30	; 48
    2fd6:	69 f4       	brne	.+26     	; 0x2ff2 <vfprintf+0xa4>
    2fd8:	41 e0       	ldi	r20, 0x01	; 1
    2fda:	24 c0       	rjmp	.+72     	; 0x3024 <vfprintf+0xd6>
    2fdc:	52 e0       	ldi	r21, 0x02	; 2
    2fde:	f5 2a       	or	r15, r21
    2fe0:	84 e0       	ldi	r24, 0x04	; 4
    2fe2:	f8 2a       	or	r15, r24
    2fe4:	28 c0       	rjmp	.+80     	; 0x3036 <vfprintf+0xe8>
    2fe6:	98 e0       	ldi	r25, 0x08	; 8
    2fe8:	f9 2a       	or	r15, r25
    2fea:	25 c0       	rjmp	.+74     	; 0x3036 <vfprintf+0xe8>
    2fec:	e0 e1       	ldi	r30, 0x10	; 16
    2fee:	fe 2a       	or	r15, r30
    2ff0:	22 c0       	rjmp	.+68     	; 0x3036 <vfprintf+0xe8>
    2ff2:	f7 fc       	sbrc	r15, 7
    2ff4:	29 c0       	rjmp	.+82     	; 0x3048 <vfprintf+0xfa>
    2ff6:	89 2f       	mov	r24, r25
    2ff8:	80 53       	subi	r24, 0x30	; 48
    2ffa:	8a 30       	cpi	r24, 0x0A	; 10
    2ffc:	70 f4       	brcc	.+28     	; 0x301a <vfprintf+0xcc>
    2ffe:	f6 fe       	sbrs	r15, 6
    3000:	05 c0       	rjmp	.+10     	; 0x300c <vfprintf+0xbe>
    3002:	98 9c       	mul	r9, r8
    3004:	90 2c       	mov	r9, r0
    3006:	11 24       	eor	r1, r1
    3008:	98 0e       	add	r9, r24
    300a:	15 c0       	rjmp	.+42     	; 0x3036 <vfprintf+0xe8>
    300c:	e8 9c       	mul	r14, r8
    300e:	e0 2c       	mov	r14, r0
    3010:	11 24       	eor	r1, r1
    3012:	e8 0e       	add	r14, r24
    3014:	f0 e2       	ldi	r31, 0x20	; 32
    3016:	ff 2a       	or	r15, r31
    3018:	0e c0       	rjmp	.+28     	; 0x3036 <vfprintf+0xe8>
    301a:	9e 32       	cpi	r25, 0x2E	; 46
    301c:	29 f4       	brne	.+10     	; 0x3028 <vfprintf+0xda>
    301e:	f6 fc       	sbrc	r15, 6
    3020:	6b c1       	rjmp	.+726    	; 0x32f8 <vfprintf+0x3aa>
    3022:	40 e4       	ldi	r20, 0x40	; 64
    3024:	f4 2a       	or	r15, r20
    3026:	07 c0       	rjmp	.+14     	; 0x3036 <vfprintf+0xe8>
    3028:	9c 36       	cpi	r25, 0x6C	; 108
    302a:	19 f4       	brne	.+6      	; 0x3032 <vfprintf+0xe4>
    302c:	50 e8       	ldi	r21, 0x80	; 128
    302e:	f5 2a       	or	r15, r21
    3030:	02 c0       	rjmp	.+4      	; 0x3036 <vfprintf+0xe8>
    3032:	98 36       	cpi	r25, 0x68	; 104
    3034:	49 f4       	brne	.+18     	; 0x3048 <vfprintf+0xfa>
    3036:	f2 01       	movw	r30, r4
    3038:	23 fd       	sbrc	r18, 3
    303a:	95 91       	lpm	r25, Z+
    303c:	23 ff       	sbrs	r18, 3
    303e:	91 91       	ld	r25, Z+
    3040:	2f 01       	movw	r4, r30
    3042:	99 23       	and	r25, r25
    3044:	09 f0       	breq	.+2      	; 0x3048 <vfprintf+0xfa>
    3046:	b8 cf       	rjmp	.-144    	; 0x2fb8 <vfprintf+0x6a>
    3048:	89 2f       	mov	r24, r25
    304a:	85 54       	subi	r24, 0x45	; 69
    304c:	83 30       	cpi	r24, 0x03	; 3
    304e:	18 f0       	brcs	.+6      	; 0x3056 <vfprintf+0x108>
    3050:	80 52       	subi	r24, 0x20	; 32
    3052:	83 30       	cpi	r24, 0x03	; 3
    3054:	38 f4       	brcc	.+14     	; 0x3064 <vfprintf+0x116>
    3056:	44 e0       	ldi	r20, 0x04	; 4
    3058:	50 e0       	ldi	r21, 0x00	; 0
    305a:	a4 0e       	add	r10, r20
    305c:	b5 1e       	adc	r11, r21
    305e:	5f e3       	ldi	r21, 0x3F	; 63
    3060:	59 83       	std	Y+1, r21	; 0x01
    3062:	0f c0       	rjmp	.+30     	; 0x3082 <vfprintf+0x134>
    3064:	93 36       	cpi	r25, 0x63	; 99
    3066:	31 f0       	breq	.+12     	; 0x3074 <vfprintf+0x126>
    3068:	93 37       	cpi	r25, 0x73	; 115
    306a:	79 f0       	breq	.+30     	; 0x308a <vfprintf+0x13c>
    306c:	93 35       	cpi	r25, 0x53	; 83
    306e:	09 f0       	breq	.+2      	; 0x3072 <vfprintf+0x124>
    3070:	56 c0       	rjmp	.+172    	; 0x311e <vfprintf+0x1d0>
    3072:	20 c0       	rjmp	.+64     	; 0x30b4 <vfprintf+0x166>
    3074:	f5 01       	movw	r30, r10
    3076:	80 81       	ld	r24, Z
    3078:	89 83       	std	Y+1, r24	; 0x01
    307a:	42 e0       	ldi	r20, 0x02	; 2
    307c:	50 e0       	ldi	r21, 0x00	; 0
    307e:	a4 0e       	add	r10, r20
    3080:	b5 1e       	adc	r11, r21
    3082:	61 01       	movw	r12, r2
    3084:	01 e0       	ldi	r16, 0x01	; 1
    3086:	10 e0       	ldi	r17, 0x00	; 0
    3088:	12 c0       	rjmp	.+36     	; 0x30ae <vfprintf+0x160>
    308a:	f5 01       	movw	r30, r10
    308c:	c0 80       	ld	r12, Z
    308e:	d1 80       	ldd	r13, Z+1	; 0x01
    3090:	f6 fc       	sbrc	r15, 6
    3092:	03 c0       	rjmp	.+6      	; 0x309a <vfprintf+0x14c>
    3094:	6f ef       	ldi	r22, 0xFF	; 255
    3096:	7f ef       	ldi	r23, 0xFF	; 255
    3098:	02 c0       	rjmp	.+4      	; 0x309e <vfprintf+0x150>
    309a:	69 2d       	mov	r22, r9
    309c:	70 e0       	ldi	r23, 0x00	; 0
    309e:	42 e0       	ldi	r20, 0x02	; 2
    30a0:	50 e0       	ldi	r21, 0x00	; 0
    30a2:	a4 0e       	add	r10, r20
    30a4:	b5 1e       	adc	r11, r21
    30a6:	c6 01       	movw	r24, r12
    30a8:	0e 94 8f 19 	call	0x331e	; 0x331e <strnlen>
    30ac:	8c 01       	movw	r16, r24
    30ae:	5f e7       	ldi	r21, 0x7F	; 127
    30b0:	f5 22       	and	r15, r21
    30b2:	14 c0       	rjmp	.+40     	; 0x30dc <vfprintf+0x18e>
    30b4:	f5 01       	movw	r30, r10
    30b6:	c0 80       	ld	r12, Z
    30b8:	d1 80       	ldd	r13, Z+1	; 0x01
    30ba:	f6 fc       	sbrc	r15, 6
    30bc:	03 c0       	rjmp	.+6      	; 0x30c4 <vfprintf+0x176>
    30be:	6f ef       	ldi	r22, 0xFF	; 255
    30c0:	7f ef       	ldi	r23, 0xFF	; 255
    30c2:	02 c0       	rjmp	.+4      	; 0x30c8 <vfprintf+0x17a>
    30c4:	69 2d       	mov	r22, r9
    30c6:	70 e0       	ldi	r23, 0x00	; 0
    30c8:	42 e0       	ldi	r20, 0x02	; 2
    30ca:	50 e0       	ldi	r21, 0x00	; 0
    30cc:	a4 0e       	add	r10, r20
    30ce:	b5 1e       	adc	r11, r21
    30d0:	c6 01       	movw	r24, r12
    30d2:	0e 94 84 19 	call	0x3308	; 0x3308 <strnlen_P>
    30d6:	8c 01       	movw	r16, r24
    30d8:	50 e8       	ldi	r21, 0x80	; 128
    30da:	f5 2a       	or	r15, r21
    30dc:	f3 fe       	sbrs	r15, 3
    30de:	07 c0       	rjmp	.+14     	; 0x30ee <vfprintf+0x1a0>
    30e0:	1a c0       	rjmp	.+52     	; 0x3116 <vfprintf+0x1c8>
    30e2:	80 e2       	ldi	r24, 0x20	; 32
    30e4:	90 e0       	ldi	r25, 0x00	; 0
    30e6:	b3 01       	movw	r22, r6
    30e8:	0e 94 9a 19 	call	0x3334	; 0x3334 <fputc>
    30ec:	ea 94       	dec	r14
    30ee:	8e 2d       	mov	r24, r14
    30f0:	90 e0       	ldi	r25, 0x00	; 0
    30f2:	08 17       	cp	r16, r24
    30f4:	19 07       	cpc	r17, r25
    30f6:	a8 f3       	brcs	.-22     	; 0x30e2 <vfprintf+0x194>
    30f8:	0e c0       	rjmp	.+28     	; 0x3116 <vfprintf+0x1c8>
    30fa:	f6 01       	movw	r30, r12
    30fc:	f7 fc       	sbrc	r15, 7
    30fe:	85 91       	lpm	r24, Z+
    3100:	f7 fe       	sbrs	r15, 7
    3102:	81 91       	ld	r24, Z+
    3104:	6f 01       	movw	r12, r30
    3106:	90 e0       	ldi	r25, 0x00	; 0
    3108:	b3 01       	movw	r22, r6
    310a:	0e 94 9a 19 	call	0x3334	; 0x3334 <fputc>
    310e:	e1 10       	cpse	r14, r1
    3110:	ea 94       	dec	r14
    3112:	01 50       	subi	r16, 0x01	; 1
    3114:	10 40       	sbci	r17, 0x00	; 0
    3116:	01 15       	cp	r16, r1
    3118:	11 05       	cpc	r17, r1
    311a:	79 f7       	brne	.-34     	; 0x30fa <vfprintf+0x1ac>
    311c:	ea c0       	rjmp	.+468    	; 0x32f2 <vfprintf+0x3a4>
    311e:	94 36       	cpi	r25, 0x64	; 100
    3120:	11 f0       	breq	.+4      	; 0x3126 <vfprintf+0x1d8>
    3122:	99 36       	cpi	r25, 0x69	; 105
    3124:	69 f5       	brne	.+90     	; 0x3180 <vfprintf+0x232>
    3126:	f7 fe       	sbrs	r15, 7
    3128:	08 c0       	rjmp	.+16     	; 0x313a <vfprintf+0x1ec>
    312a:	f5 01       	movw	r30, r10
    312c:	20 81       	ld	r18, Z
    312e:	31 81       	ldd	r19, Z+1	; 0x01
    3130:	42 81       	ldd	r20, Z+2	; 0x02
    3132:	53 81       	ldd	r21, Z+3	; 0x03
    3134:	84 e0       	ldi	r24, 0x04	; 4
    3136:	90 e0       	ldi	r25, 0x00	; 0
    3138:	0a c0       	rjmp	.+20     	; 0x314e <vfprintf+0x200>
    313a:	f5 01       	movw	r30, r10
    313c:	80 81       	ld	r24, Z
    313e:	91 81       	ldd	r25, Z+1	; 0x01
    3140:	9c 01       	movw	r18, r24
    3142:	44 27       	eor	r20, r20
    3144:	37 fd       	sbrc	r19, 7
    3146:	40 95       	com	r20
    3148:	54 2f       	mov	r21, r20
    314a:	82 e0       	ldi	r24, 0x02	; 2
    314c:	90 e0       	ldi	r25, 0x00	; 0
    314e:	a8 0e       	add	r10, r24
    3150:	b9 1e       	adc	r11, r25
    3152:	9f e6       	ldi	r25, 0x6F	; 111
    3154:	f9 22       	and	r15, r25
    3156:	57 ff       	sbrs	r21, 7
    3158:	09 c0       	rjmp	.+18     	; 0x316c <vfprintf+0x21e>
    315a:	50 95       	com	r21
    315c:	40 95       	com	r20
    315e:	30 95       	com	r19
    3160:	21 95       	neg	r18
    3162:	3f 4f       	sbci	r19, 0xFF	; 255
    3164:	4f 4f       	sbci	r20, 0xFF	; 255
    3166:	5f 4f       	sbci	r21, 0xFF	; 255
    3168:	e0 e8       	ldi	r30, 0x80	; 128
    316a:	fe 2a       	or	r15, r30
    316c:	ca 01       	movw	r24, r20
    316e:	b9 01       	movw	r22, r18
    3170:	a1 01       	movw	r20, r2
    3172:	2a e0       	ldi	r18, 0x0A	; 10
    3174:	30 e0       	ldi	r19, 0x00	; 0
    3176:	0e 94 c6 19 	call	0x338c	; 0x338c <__ultoa_invert>
    317a:	d8 2e       	mov	r13, r24
    317c:	d2 18       	sub	r13, r2
    317e:	40 c0       	rjmp	.+128    	; 0x3200 <vfprintf+0x2b2>
    3180:	95 37       	cpi	r25, 0x75	; 117
    3182:	29 f4       	brne	.+10     	; 0x318e <vfprintf+0x240>
    3184:	1f 2d       	mov	r17, r15
    3186:	1f 7e       	andi	r17, 0xEF	; 239
    3188:	2a e0       	ldi	r18, 0x0A	; 10
    318a:	30 e0       	ldi	r19, 0x00	; 0
    318c:	1d c0       	rjmp	.+58     	; 0x31c8 <vfprintf+0x27a>
    318e:	1f 2d       	mov	r17, r15
    3190:	19 7f       	andi	r17, 0xF9	; 249
    3192:	9f 36       	cpi	r25, 0x6F	; 111
    3194:	61 f0       	breq	.+24     	; 0x31ae <vfprintf+0x260>
    3196:	90 37       	cpi	r25, 0x70	; 112
    3198:	20 f4       	brcc	.+8      	; 0x31a2 <vfprintf+0x254>
    319a:	98 35       	cpi	r25, 0x58	; 88
    319c:	09 f0       	breq	.+2      	; 0x31a0 <vfprintf+0x252>
    319e:	ac c0       	rjmp	.+344    	; 0x32f8 <vfprintf+0x3aa>
    31a0:	0f c0       	rjmp	.+30     	; 0x31c0 <vfprintf+0x272>
    31a2:	90 37       	cpi	r25, 0x70	; 112
    31a4:	39 f0       	breq	.+14     	; 0x31b4 <vfprintf+0x266>
    31a6:	98 37       	cpi	r25, 0x78	; 120
    31a8:	09 f0       	breq	.+2      	; 0x31ac <vfprintf+0x25e>
    31aa:	a6 c0       	rjmp	.+332    	; 0x32f8 <vfprintf+0x3aa>
    31ac:	04 c0       	rjmp	.+8      	; 0x31b6 <vfprintf+0x268>
    31ae:	28 e0       	ldi	r18, 0x08	; 8
    31b0:	30 e0       	ldi	r19, 0x00	; 0
    31b2:	0a c0       	rjmp	.+20     	; 0x31c8 <vfprintf+0x27a>
    31b4:	10 61       	ori	r17, 0x10	; 16
    31b6:	14 fd       	sbrc	r17, 4
    31b8:	14 60       	ori	r17, 0x04	; 4
    31ba:	20 e1       	ldi	r18, 0x10	; 16
    31bc:	30 e0       	ldi	r19, 0x00	; 0
    31be:	04 c0       	rjmp	.+8      	; 0x31c8 <vfprintf+0x27a>
    31c0:	14 fd       	sbrc	r17, 4
    31c2:	16 60       	ori	r17, 0x06	; 6
    31c4:	20 e1       	ldi	r18, 0x10	; 16
    31c6:	32 e0       	ldi	r19, 0x02	; 2
    31c8:	17 ff       	sbrs	r17, 7
    31ca:	08 c0       	rjmp	.+16     	; 0x31dc <vfprintf+0x28e>
    31cc:	f5 01       	movw	r30, r10
    31ce:	60 81       	ld	r22, Z
    31d0:	71 81       	ldd	r23, Z+1	; 0x01
    31d2:	82 81       	ldd	r24, Z+2	; 0x02
    31d4:	93 81       	ldd	r25, Z+3	; 0x03
    31d6:	44 e0       	ldi	r20, 0x04	; 4
    31d8:	50 e0       	ldi	r21, 0x00	; 0
    31da:	08 c0       	rjmp	.+16     	; 0x31ec <vfprintf+0x29e>
    31dc:	f5 01       	movw	r30, r10
    31de:	80 81       	ld	r24, Z
    31e0:	91 81       	ldd	r25, Z+1	; 0x01
    31e2:	bc 01       	movw	r22, r24
    31e4:	80 e0       	ldi	r24, 0x00	; 0
    31e6:	90 e0       	ldi	r25, 0x00	; 0
    31e8:	42 e0       	ldi	r20, 0x02	; 2
    31ea:	50 e0       	ldi	r21, 0x00	; 0
    31ec:	a4 0e       	add	r10, r20
    31ee:	b5 1e       	adc	r11, r21
    31f0:	a1 01       	movw	r20, r2
    31f2:	0e 94 c6 19 	call	0x338c	; 0x338c <__ultoa_invert>
    31f6:	d8 2e       	mov	r13, r24
    31f8:	d2 18       	sub	r13, r2
    31fa:	8f e7       	ldi	r24, 0x7F	; 127
    31fc:	f8 2e       	mov	r15, r24
    31fe:	f1 22       	and	r15, r17
    3200:	f6 fe       	sbrs	r15, 6
    3202:	0b c0       	rjmp	.+22     	; 0x321a <vfprintf+0x2cc>
    3204:	5e ef       	ldi	r21, 0xFE	; 254
    3206:	f5 22       	and	r15, r21
    3208:	d9 14       	cp	r13, r9
    320a:	38 f4       	brcc	.+14     	; 0x321a <vfprintf+0x2cc>
    320c:	f4 fe       	sbrs	r15, 4
    320e:	07 c0       	rjmp	.+14     	; 0x321e <vfprintf+0x2d0>
    3210:	f2 fc       	sbrc	r15, 2
    3212:	05 c0       	rjmp	.+10     	; 0x321e <vfprintf+0x2d0>
    3214:	8f ee       	ldi	r24, 0xEF	; 239
    3216:	f8 22       	and	r15, r24
    3218:	02 c0       	rjmp	.+4      	; 0x321e <vfprintf+0x2d0>
    321a:	1d 2d       	mov	r17, r13
    321c:	01 c0       	rjmp	.+2      	; 0x3220 <vfprintf+0x2d2>
    321e:	19 2d       	mov	r17, r9
    3220:	f4 fe       	sbrs	r15, 4
    3222:	0d c0       	rjmp	.+26     	; 0x323e <vfprintf+0x2f0>
    3224:	fe 01       	movw	r30, r28
    3226:	ed 0d       	add	r30, r13
    3228:	f1 1d       	adc	r31, r1
    322a:	80 81       	ld	r24, Z
    322c:	80 33       	cpi	r24, 0x30	; 48
    322e:	19 f4       	brne	.+6      	; 0x3236 <vfprintf+0x2e8>
    3230:	99 ee       	ldi	r25, 0xE9	; 233
    3232:	f9 22       	and	r15, r25
    3234:	08 c0       	rjmp	.+16     	; 0x3246 <vfprintf+0x2f8>
    3236:	1f 5f       	subi	r17, 0xFF	; 255
    3238:	f2 fe       	sbrs	r15, 2
    323a:	05 c0       	rjmp	.+10     	; 0x3246 <vfprintf+0x2f8>
    323c:	03 c0       	rjmp	.+6      	; 0x3244 <vfprintf+0x2f6>
    323e:	8f 2d       	mov	r24, r15
    3240:	86 78       	andi	r24, 0x86	; 134
    3242:	09 f0       	breq	.+2      	; 0x3246 <vfprintf+0x2f8>
    3244:	1f 5f       	subi	r17, 0xFF	; 255
    3246:	0f 2d       	mov	r16, r15
    3248:	f3 fc       	sbrc	r15, 3
    324a:	14 c0       	rjmp	.+40     	; 0x3274 <vfprintf+0x326>
    324c:	f0 fe       	sbrs	r15, 0
    324e:	0f c0       	rjmp	.+30     	; 0x326e <vfprintf+0x320>
    3250:	1e 15       	cp	r17, r14
    3252:	10 f0       	brcs	.+4      	; 0x3258 <vfprintf+0x30a>
    3254:	9d 2c       	mov	r9, r13
    3256:	0b c0       	rjmp	.+22     	; 0x326e <vfprintf+0x320>
    3258:	9d 2c       	mov	r9, r13
    325a:	9e 0c       	add	r9, r14
    325c:	91 1a       	sub	r9, r17
    325e:	1e 2d       	mov	r17, r14
    3260:	06 c0       	rjmp	.+12     	; 0x326e <vfprintf+0x320>
    3262:	80 e2       	ldi	r24, 0x20	; 32
    3264:	90 e0       	ldi	r25, 0x00	; 0
    3266:	b3 01       	movw	r22, r6
    3268:	0e 94 9a 19 	call	0x3334	; 0x3334 <fputc>
    326c:	1f 5f       	subi	r17, 0xFF	; 255
    326e:	1e 15       	cp	r17, r14
    3270:	c0 f3       	brcs	.-16     	; 0x3262 <vfprintf+0x314>
    3272:	04 c0       	rjmp	.+8      	; 0x327c <vfprintf+0x32e>
    3274:	1e 15       	cp	r17, r14
    3276:	10 f4       	brcc	.+4      	; 0x327c <vfprintf+0x32e>
    3278:	e1 1a       	sub	r14, r17
    327a:	01 c0       	rjmp	.+2      	; 0x327e <vfprintf+0x330>
    327c:	ee 24       	eor	r14, r14
    327e:	04 ff       	sbrs	r16, 4
    3280:	0f c0       	rjmp	.+30     	; 0x32a0 <vfprintf+0x352>
    3282:	80 e3       	ldi	r24, 0x30	; 48
    3284:	90 e0       	ldi	r25, 0x00	; 0
    3286:	b3 01       	movw	r22, r6
    3288:	0e 94 9a 19 	call	0x3334	; 0x3334 <fputc>
    328c:	02 ff       	sbrs	r16, 2
    328e:	1d c0       	rjmp	.+58     	; 0x32ca <vfprintf+0x37c>
    3290:	01 fd       	sbrc	r16, 1
    3292:	03 c0       	rjmp	.+6      	; 0x329a <vfprintf+0x34c>
    3294:	88 e7       	ldi	r24, 0x78	; 120
    3296:	90 e0       	ldi	r25, 0x00	; 0
    3298:	0e c0       	rjmp	.+28     	; 0x32b6 <vfprintf+0x368>
    329a:	88 e5       	ldi	r24, 0x58	; 88
    329c:	90 e0       	ldi	r25, 0x00	; 0
    329e:	0b c0       	rjmp	.+22     	; 0x32b6 <vfprintf+0x368>
    32a0:	80 2f       	mov	r24, r16
    32a2:	86 78       	andi	r24, 0x86	; 134
    32a4:	91 f0       	breq	.+36     	; 0x32ca <vfprintf+0x37c>
    32a6:	01 ff       	sbrs	r16, 1
    32a8:	02 c0       	rjmp	.+4      	; 0x32ae <vfprintf+0x360>
    32aa:	8b e2       	ldi	r24, 0x2B	; 43
    32ac:	01 c0       	rjmp	.+2      	; 0x32b0 <vfprintf+0x362>
    32ae:	80 e2       	ldi	r24, 0x20	; 32
    32b0:	f7 fc       	sbrc	r15, 7
    32b2:	8d e2       	ldi	r24, 0x2D	; 45
    32b4:	90 e0       	ldi	r25, 0x00	; 0
    32b6:	b3 01       	movw	r22, r6
    32b8:	0e 94 9a 19 	call	0x3334	; 0x3334 <fputc>
    32bc:	06 c0       	rjmp	.+12     	; 0x32ca <vfprintf+0x37c>
    32be:	80 e3       	ldi	r24, 0x30	; 48
    32c0:	90 e0       	ldi	r25, 0x00	; 0
    32c2:	b3 01       	movw	r22, r6
    32c4:	0e 94 9a 19 	call	0x3334	; 0x3334 <fputc>
    32c8:	9a 94       	dec	r9
    32ca:	d9 14       	cp	r13, r9
    32cc:	c0 f3       	brcs	.-16     	; 0x32be <vfprintf+0x370>
    32ce:	da 94       	dec	r13
    32d0:	f1 01       	movw	r30, r2
    32d2:	ed 0d       	add	r30, r13
    32d4:	f1 1d       	adc	r31, r1
    32d6:	80 81       	ld	r24, Z
    32d8:	90 e0       	ldi	r25, 0x00	; 0
    32da:	b3 01       	movw	r22, r6
    32dc:	0e 94 9a 19 	call	0x3334	; 0x3334 <fputc>
    32e0:	dd 20       	and	r13, r13
    32e2:	a9 f7       	brne	.-22     	; 0x32ce <vfprintf+0x380>
    32e4:	06 c0       	rjmp	.+12     	; 0x32f2 <vfprintf+0x3a4>
    32e6:	80 e2       	ldi	r24, 0x20	; 32
    32e8:	90 e0       	ldi	r25, 0x00	; 0
    32ea:	b3 01       	movw	r22, r6
    32ec:	0e 94 9a 19 	call	0x3334	; 0x3334 <fputc>
    32f0:	ea 94       	dec	r14
    32f2:	ee 20       	and	r14, r14
    32f4:	c1 f7       	brne	.-16     	; 0x32e6 <vfprintf+0x398>
    32f6:	43 ce       	rjmp	.-890    	; 0x2f7e <vfprintf+0x30>
    32f8:	f3 01       	movw	r30, r6
    32fa:	66 81       	ldd	r22, Z+6	; 0x06
    32fc:	77 81       	ldd	r23, Z+7	; 0x07
    32fe:	cb 01       	movw	r24, r22
    3300:	2b 96       	adiw	r28, 0x0b	; 11
    3302:	e2 e1       	ldi	r30, 0x12	; 18
    3304:	0c 94 68 17 	jmp	0x2ed0	; 0x2ed0 <__epilogue_restores__>

00003308 <strnlen_P>:
    3308:	fc 01       	movw	r30, r24
    330a:	05 90       	lpm	r0, Z+
    330c:	61 50       	subi	r22, 0x01	; 1
    330e:	70 40       	sbci	r23, 0x00	; 0
    3310:	01 10       	cpse	r0, r1
    3312:	d8 f7       	brcc	.-10     	; 0x330a <strnlen_P+0x2>
    3314:	80 95       	com	r24
    3316:	90 95       	com	r25
    3318:	8e 0f       	add	r24, r30
    331a:	9f 1f       	adc	r25, r31
    331c:	08 95       	ret

0000331e <strnlen>:
    331e:	fc 01       	movw	r30, r24
    3320:	61 50       	subi	r22, 0x01	; 1
    3322:	70 40       	sbci	r23, 0x00	; 0
    3324:	01 90       	ld	r0, Z+
    3326:	01 10       	cpse	r0, r1
    3328:	d8 f7       	brcc	.-10     	; 0x3320 <strnlen+0x2>
    332a:	80 95       	com	r24
    332c:	90 95       	com	r25
    332e:	8e 0f       	add	r24, r30
    3330:	9f 1f       	adc	r25, r31
    3332:	08 95       	ret

00003334 <fputc>:
    3334:	0f 93       	push	r16
    3336:	1f 93       	push	r17
    3338:	cf 93       	push	r28
    333a:	df 93       	push	r29
    333c:	8c 01       	movw	r16, r24
    333e:	eb 01       	movw	r28, r22
    3340:	8b 81       	ldd	r24, Y+3	; 0x03
    3342:	81 ff       	sbrs	r24, 1
    3344:	1b c0       	rjmp	.+54     	; 0x337c <fputc+0x48>
    3346:	82 ff       	sbrs	r24, 2
    3348:	0d c0       	rjmp	.+26     	; 0x3364 <fputc+0x30>
    334a:	2e 81       	ldd	r18, Y+6	; 0x06
    334c:	3f 81       	ldd	r19, Y+7	; 0x07
    334e:	8c 81       	ldd	r24, Y+4	; 0x04
    3350:	9d 81       	ldd	r25, Y+5	; 0x05
    3352:	28 17       	cp	r18, r24
    3354:	39 07       	cpc	r19, r25
    3356:	64 f4       	brge	.+24     	; 0x3370 <fputc+0x3c>
    3358:	e8 81       	ld	r30, Y
    335a:	f9 81       	ldd	r31, Y+1	; 0x01
    335c:	01 93       	st	Z+, r16
    335e:	f9 83       	std	Y+1, r31	; 0x01
    3360:	e8 83       	st	Y, r30
    3362:	06 c0       	rjmp	.+12     	; 0x3370 <fputc+0x3c>
    3364:	e8 85       	ldd	r30, Y+8	; 0x08
    3366:	f9 85       	ldd	r31, Y+9	; 0x09
    3368:	80 2f       	mov	r24, r16
    336a:	09 95       	icall
    336c:	89 2b       	or	r24, r25
    336e:	31 f4       	brne	.+12     	; 0x337c <fputc+0x48>
    3370:	8e 81       	ldd	r24, Y+6	; 0x06
    3372:	9f 81       	ldd	r25, Y+7	; 0x07
    3374:	01 96       	adiw	r24, 0x01	; 1
    3376:	9f 83       	std	Y+7, r25	; 0x07
    3378:	8e 83       	std	Y+6, r24	; 0x06
    337a:	02 c0       	rjmp	.+4      	; 0x3380 <fputc+0x4c>
    337c:	0f ef       	ldi	r16, 0xFF	; 255
    337e:	1f ef       	ldi	r17, 0xFF	; 255
    3380:	c8 01       	movw	r24, r16
    3382:	df 91       	pop	r29
    3384:	cf 91       	pop	r28
    3386:	1f 91       	pop	r17
    3388:	0f 91       	pop	r16
    338a:	08 95       	ret

0000338c <__ultoa_invert>:
    338c:	fa 01       	movw	r30, r20
    338e:	aa 27       	eor	r26, r26
    3390:	28 30       	cpi	r18, 0x08	; 8
    3392:	51 f1       	breq	.+84     	; 0x33e8 <__ultoa_invert+0x5c>
    3394:	20 31       	cpi	r18, 0x10	; 16
    3396:	81 f1       	breq	.+96     	; 0x33f8 <__ultoa_invert+0x6c>
    3398:	e8 94       	clt
    339a:	6f 93       	push	r22
    339c:	6e 7f       	andi	r22, 0xFE	; 254
    339e:	6e 5f       	subi	r22, 0xFE	; 254
    33a0:	7f 4f       	sbci	r23, 0xFF	; 255
    33a2:	8f 4f       	sbci	r24, 0xFF	; 255
    33a4:	9f 4f       	sbci	r25, 0xFF	; 255
    33a6:	af 4f       	sbci	r26, 0xFF	; 255
    33a8:	b1 e0       	ldi	r27, 0x01	; 1
    33aa:	3e d0       	rcall	.+124    	; 0x3428 <__ultoa_invert+0x9c>
    33ac:	b4 e0       	ldi	r27, 0x04	; 4
    33ae:	3c d0       	rcall	.+120    	; 0x3428 <__ultoa_invert+0x9c>
    33b0:	67 0f       	add	r22, r23
    33b2:	78 1f       	adc	r23, r24
    33b4:	89 1f       	adc	r24, r25
    33b6:	9a 1f       	adc	r25, r26
    33b8:	a1 1d       	adc	r26, r1
    33ba:	68 0f       	add	r22, r24
    33bc:	79 1f       	adc	r23, r25
    33be:	8a 1f       	adc	r24, r26
    33c0:	91 1d       	adc	r25, r1
    33c2:	a1 1d       	adc	r26, r1
    33c4:	6a 0f       	add	r22, r26
    33c6:	71 1d       	adc	r23, r1
    33c8:	81 1d       	adc	r24, r1
    33ca:	91 1d       	adc	r25, r1
    33cc:	a1 1d       	adc	r26, r1
    33ce:	20 d0       	rcall	.+64     	; 0x3410 <__ultoa_invert+0x84>
    33d0:	09 f4       	brne	.+2      	; 0x33d4 <__ultoa_invert+0x48>
    33d2:	68 94       	set
    33d4:	3f 91       	pop	r19
    33d6:	2a e0       	ldi	r18, 0x0A	; 10
    33d8:	26 9f       	mul	r18, r22
    33da:	11 24       	eor	r1, r1
    33dc:	30 19       	sub	r19, r0
    33de:	30 5d       	subi	r19, 0xD0	; 208
    33e0:	31 93       	st	Z+, r19
    33e2:	de f6       	brtc	.-74     	; 0x339a <__ultoa_invert+0xe>
    33e4:	cf 01       	movw	r24, r30
    33e6:	08 95       	ret
    33e8:	46 2f       	mov	r20, r22
    33ea:	47 70       	andi	r20, 0x07	; 7
    33ec:	40 5d       	subi	r20, 0xD0	; 208
    33ee:	41 93       	st	Z+, r20
    33f0:	b3 e0       	ldi	r27, 0x03	; 3
    33f2:	0f d0       	rcall	.+30     	; 0x3412 <__ultoa_invert+0x86>
    33f4:	c9 f7       	brne	.-14     	; 0x33e8 <__ultoa_invert+0x5c>
    33f6:	f6 cf       	rjmp	.-20     	; 0x33e4 <__ultoa_invert+0x58>
    33f8:	46 2f       	mov	r20, r22
    33fa:	4f 70       	andi	r20, 0x0F	; 15
    33fc:	40 5d       	subi	r20, 0xD0	; 208
    33fe:	4a 33       	cpi	r20, 0x3A	; 58
    3400:	18 f0       	brcs	.+6      	; 0x3408 <__ultoa_invert+0x7c>
    3402:	49 5d       	subi	r20, 0xD9	; 217
    3404:	31 fd       	sbrc	r19, 1
    3406:	40 52       	subi	r20, 0x20	; 32
    3408:	41 93       	st	Z+, r20
    340a:	02 d0       	rcall	.+4      	; 0x3410 <__ultoa_invert+0x84>
    340c:	a9 f7       	brne	.-22     	; 0x33f8 <__ultoa_invert+0x6c>
    340e:	ea cf       	rjmp	.-44     	; 0x33e4 <__ultoa_invert+0x58>
    3410:	b4 e0       	ldi	r27, 0x04	; 4
    3412:	a6 95       	lsr	r26
    3414:	97 95       	ror	r25
    3416:	87 95       	ror	r24
    3418:	77 95       	ror	r23
    341a:	67 95       	ror	r22
    341c:	ba 95       	dec	r27
    341e:	c9 f7       	brne	.-14     	; 0x3412 <__ultoa_invert+0x86>
    3420:	00 97       	sbiw	r24, 0x00	; 0
    3422:	61 05       	cpc	r22, r1
    3424:	71 05       	cpc	r23, r1
    3426:	08 95       	ret
    3428:	9b 01       	movw	r18, r22
    342a:	ac 01       	movw	r20, r24
    342c:	0a 2e       	mov	r0, r26
    342e:	06 94       	lsr	r0
    3430:	57 95       	ror	r21
    3432:	47 95       	ror	r20
    3434:	37 95       	ror	r19
    3436:	27 95       	ror	r18
    3438:	ba 95       	dec	r27
    343a:	c9 f7       	brne	.-14     	; 0x342e <__ultoa_invert+0xa2>
    343c:	62 0f       	add	r22, r18
    343e:	73 1f       	adc	r23, r19
    3440:	84 1f       	adc	r24, r20
    3442:	95 1f       	adc	r25, r21
    3444:	a0 1d       	adc	r26, r0
    3446:	08 95       	ret

00003448 <_exit>:
    3448:	f8 94       	cli

0000344a <__stop_program>:
    344a:	ff cf       	rjmp	.-2      	; 0x344a <__stop_program>
