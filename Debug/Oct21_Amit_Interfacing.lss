
Oct21_Amit_Interfacing.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002ee8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00800060  00002ee8  00002f5c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002afc  00000000  00000000  00002f78  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000017d0  00000000  00000000  00005a74  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000160  00000000  00000000  00007244  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000018f  00000000  00000000  000073a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002045  00000000  00000000  00007533  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001101  00000000  00000000  00009578  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f82  00000000  00000000  0000a679  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  0000b5fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002c2  00000000  00000000  0000b77c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000088e  00000000  00000000  0000ba3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000c2cc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 06 	jmp	0xc8e	; 0xc8e <__vector_1>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ee       	ldi	r30, 0xE8	; 232
      68:	fe e2       	ldi	r31, 0x2E	; 46
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 37       	cpi	r26, 0x7C	; 124
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 72 06 	call	0xce4	; 0xce4 <main>
      7a:	0c 94 72 17 	jmp	0x2ee4	; 0x2ee4 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 9a 14 	jmp	0x2934	; 0x2934 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a3 e6       	ldi	r26, 0x63	; 99
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 b6 14 	jmp	0x296c	; 0x296c <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 a6 14 	jmp	0x294c	; 0x294c <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 c2 14 	jmp	0x2984	; 0x2984 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 a6 14 	jmp	0x294c	; 0x294c <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 c2 14 	jmp	0x2984	; 0x2984 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 9a 14 	jmp	0x2934	; 0x2934 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	83 e6       	ldi	r24, 0x63	; 99
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 b6 14 	jmp	0x296c	; 0x296c <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 a2 14 	jmp	0x2944	; 0x2944 <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	63 e6       	ldi	r22, 0x63	; 99
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 be 14 	jmp	0x297c	; 0x297c <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 a6 14 	jmp	0x294c	; 0x294c <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 c2 14 	jmp	0x2984	; 0x2984 <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 a6 14 	jmp	0x294c	; 0x294c <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 c2 14 	jmp	0x2984	; 0x2984 <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 a6 14 	jmp	0x294c	; 0x294c <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 c2 14 	jmp	0x2984	; 0x2984 <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 aa 14 	jmp	0x2954	; 0x2954 <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 c6 14 	jmp	0x298c	; 0x298c <__epilogue_restores__+0x20>

00000942 <__pack_f>:
     942:	df 92       	push	r13
     944:	ef 92       	push	r14
     946:	ff 92       	push	r15
     948:	0f 93       	push	r16
     94a:	1f 93       	push	r17
     94c:	fc 01       	movw	r30, r24
     94e:	e4 80       	ldd	r14, Z+4	; 0x04
     950:	f5 80       	ldd	r15, Z+5	; 0x05
     952:	06 81       	ldd	r16, Z+6	; 0x06
     954:	17 81       	ldd	r17, Z+7	; 0x07
     956:	d1 80       	ldd	r13, Z+1	; 0x01
     958:	80 81       	ld	r24, Z
     95a:	82 30       	cpi	r24, 0x02	; 2
     95c:	48 f4       	brcc	.+18     	; 0x970 <__pack_f+0x2e>
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	a0 e1       	ldi	r26, 0x10	; 16
     964:	b0 e0       	ldi	r27, 0x00	; 0
     966:	e8 2a       	or	r14, r24
     968:	f9 2a       	or	r15, r25
     96a:	0a 2b       	or	r16, r26
     96c:	1b 2b       	or	r17, r27
     96e:	a5 c0       	rjmp	.+330    	; 0xaba <__pack_f+0x178>
     970:	84 30       	cpi	r24, 0x04	; 4
     972:	09 f4       	brne	.+2      	; 0x976 <__pack_f+0x34>
     974:	9f c0       	rjmp	.+318    	; 0xab4 <__pack_f+0x172>
     976:	82 30       	cpi	r24, 0x02	; 2
     978:	21 f4       	brne	.+8      	; 0x982 <__pack_f+0x40>
     97a:	ee 24       	eor	r14, r14
     97c:	ff 24       	eor	r15, r15
     97e:	87 01       	movw	r16, r14
     980:	05 c0       	rjmp	.+10     	; 0x98c <__pack_f+0x4a>
     982:	e1 14       	cp	r14, r1
     984:	f1 04       	cpc	r15, r1
     986:	01 05       	cpc	r16, r1
     988:	11 05       	cpc	r17, r1
     98a:	19 f4       	brne	.+6      	; 0x992 <__pack_f+0x50>
     98c:	e0 e0       	ldi	r30, 0x00	; 0
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	96 c0       	rjmp	.+300    	; 0xabe <__pack_f+0x17c>
     992:	62 81       	ldd	r22, Z+2	; 0x02
     994:	73 81       	ldd	r23, Z+3	; 0x03
     996:	9f ef       	ldi	r25, 0xFF	; 255
     998:	62 38       	cpi	r22, 0x82	; 130
     99a:	79 07       	cpc	r23, r25
     99c:	0c f0       	brlt	.+2      	; 0x9a0 <__pack_f+0x5e>
     99e:	5b c0       	rjmp	.+182    	; 0xa56 <__pack_f+0x114>
     9a0:	22 e8       	ldi	r18, 0x82	; 130
     9a2:	3f ef       	ldi	r19, 0xFF	; 255
     9a4:	26 1b       	sub	r18, r22
     9a6:	37 0b       	sbc	r19, r23
     9a8:	2a 31       	cpi	r18, 0x1A	; 26
     9aa:	31 05       	cpc	r19, r1
     9ac:	2c f0       	brlt	.+10     	; 0x9b8 <__pack_f+0x76>
     9ae:	20 e0       	ldi	r18, 0x00	; 0
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	40 e0       	ldi	r20, 0x00	; 0
     9b4:	50 e0       	ldi	r21, 0x00	; 0
     9b6:	2a c0       	rjmp	.+84     	; 0xa0c <__pack_f+0xca>
     9b8:	b8 01       	movw	r22, r16
     9ba:	a7 01       	movw	r20, r14
     9bc:	02 2e       	mov	r0, r18
     9be:	04 c0       	rjmp	.+8      	; 0x9c8 <__pack_f+0x86>
     9c0:	76 95       	lsr	r23
     9c2:	67 95       	ror	r22
     9c4:	57 95       	ror	r21
     9c6:	47 95       	ror	r20
     9c8:	0a 94       	dec	r0
     9ca:	d2 f7       	brpl	.-12     	; 0x9c0 <__pack_f+0x7e>
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	a0 e0       	ldi	r26, 0x00	; 0
     9d2:	b0 e0       	ldi	r27, 0x00	; 0
     9d4:	04 c0       	rjmp	.+8      	; 0x9de <__pack_f+0x9c>
     9d6:	88 0f       	add	r24, r24
     9d8:	99 1f       	adc	r25, r25
     9da:	aa 1f       	adc	r26, r26
     9dc:	bb 1f       	adc	r27, r27
     9de:	2a 95       	dec	r18
     9e0:	d2 f7       	brpl	.-12     	; 0x9d6 <__pack_f+0x94>
     9e2:	01 97       	sbiw	r24, 0x01	; 1
     9e4:	a1 09       	sbc	r26, r1
     9e6:	b1 09       	sbc	r27, r1
     9e8:	8e 21       	and	r24, r14
     9ea:	9f 21       	and	r25, r15
     9ec:	a0 23       	and	r26, r16
     9ee:	b1 23       	and	r27, r17
     9f0:	00 97       	sbiw	r24, 0x00	; 0
     9f2:	a1 05       	cpc	r26, r1
     9f4:	b1 05       	cpc	r27, r1
     9f6:	21 f0       	breq	.+8      	; 0xa00 <__pack_f+0xbe>
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	a0 e0       	ldi	r26, 0x00	; 0
     9fe:	b0 e0       	ldi	r27, 0x00	; 0
     a00:	9a 01       	movw	r18, r20
     a02:	ab 01       	movw	r20, r22
     a04:	28 2b       	or	r18, r24
     a06:	39 2b       	or	r19, r25
     a08:	4a 2b       	or	r20, r26
     a0a:	5b 2b       	or	r21, r27
     a0c:	da 01       	movw	r26, r20
     a0e:	c9 01       	movw	r24, r18
     a10:	8f 77       	andi	r24, 0x7F	; 127
     a12:	90 70       	andi	r25, 0x00	; 0
     a14:	a0 70       	andi	r26, 0x00	; 0
     a16:	b0 70       	andi	r27, 0x00	; 0
     a18:	80 34       	cpi	r24, 0x40	; 64
     a1a:	91 05       	cpc	r25, r1
     a1c:	a1 05       	cpc	r26, r1
     a1e:	b1 05       	cpc	r27, r1
     a20:	39 f4       	brne	.+14     	; 0xa30 <__pack_f+0xee>
     a22:	27 ff       	sbrs	r18, 7
     a24:	09 c0       	rjmp	.+18     	; 0xa38 <__pack_f+0xf6>
     a26:	20 5c       	subi	r18, 0xC0	; 192
     a28:	3f 4f       	sbci	r19, 0xFF	; 255
     a2a:	4f 4f       	sbci	r20, 0xFF	; 255
     a2c:	5f 4f       	sbci	r21, 0xFF	; 255
     a2e:	04 c0       	rjmp	.+8      	; 0xa38 <__pack_f+0xf6>
     a30:	21 5c       	subi	r18, 0xC1	; 193
     a32:	3f 4f       	sbci	r19, 0xFF	; 255
     a34:	4f 4f       	sbci	r20, 0xFF	; 255
     a36:	5f 4f       	sbci	r21, 0xFF	; 255
     a38:	e0 e0       	ldi	r30, 0x00	; 0
     a3a:	f0 e0       	ldi	r31, 0x00	; 0
     a3c:	20 30       	cpi	r18, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	3a 07       	cpc	r19, r26
     a42:	a0 e0       	ldi	r26, 0x00	; 0
     a44:	4a 07       	cpc	r20, r26
     a46:	a0 e4       	ldi	r26, 0x40	; 64
     a48:	5a 07       	cpc	r21, r26
     a4a:	10 f0       	brcs	.+4      	; 0xa50 <__pack_f+0x10e>
     a4c:	e1 e0       	ldi	r30, 0x01	; 1
     a4e:	f0 e0       	ldi	r31, 0x00	; 0
     a50:	79 01       	movw	r14, r18
     a52:	8a 01       	movw	r16, r20
     a54:	27 c0       	rjmp	.+78     	; 0xaa4 <__pack_f+0x162>
     a56:	60 38       	cpi	r22, 0x80	; 128
     a58:	71 05       	cpc	r23, r1
     a5a:	64 f5       	brge	.+88     	; 0xab4 <__pack_f+0x172>
     a5c:	fb 01       	movw	r30, r22
     a5e:	e1 58       	subi	r30, 0x81	; 129
     a60:	ff 4f       	sbci	r31, 0xFF	; 255
     a62:	d8 01       	movw	r26, r16
     a64:	c7 01       	movw	r24, r14
     a66:	8f 77       	andi	r24, 0x7F	; 127
     a68:	90 70       	andi	r25, 0x00	; 0
     a6a:	a0 70       	andi	r26, 0x00	; 0
     a6c:	b0 70       	andi	r27, 0x00	; 0
     a6e:	80 34       	cpi	r24, 0x40	; 64
     a70:	91 05       	cpc	r25, r1
     a72:	a1 05       	cpc	r26, r1
     a74:	b1 05       	cpc	r27, r1
     a76:	39 f4       	brne	.+14     	; 0xa86 <__pack_f+0x144>
     a78:	e7 fe       	sbrs	r14, 7
     a7a:	0d c0       	rjmp	.+26     	; 0xa96 <__pack_f+0x154>
     a7c:	80 e4       	ldi	r24, 0x40	; 64
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	a0 e0       	ldi	r26, 0x00	; 0
     a82:	b0 e0       	ldi	r27, 0x00	; 0
     a84:	04 c0       	rjmp	.+8      	; 0xa8e <__pack_f+0x14c>
     a86:	8f e3       	ldi	r24, 0x3F	; 63
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	e8 0e       	add	r14, r24
     a90:	f9 1e       	adc	r15, r25
     a92:	0a 1f       	adc	r16, r26
     a94:	1b 1f       	adc	r17, r27
     a96:	17 ff       	sbrs	r17, 7
     a98:	05 c0       	rjmp	.+10     	; 0xaa4 <__pack_f+0x162>
     a9a:	16 95       	lsr	r17
     a9c:	07 95       	ror	r16
     a9e:	f7 94       	ror	r15
     aa0:	e7 94       	ror	r14
     aa2:	31 96       	adiw	r30, 0x01	; 1
     aa4:	87 e0       	ldi	r24, 0x07	; 7
     aa6:	16 95       	lsr	r17
     aa8:	07 95       	ror	r16
     aaa:	f7 94       	ror	r15
     aac:	e7 94       	ror	r14
     aae:	8a 95       	dec	r24
     ab0:	d1 f7       	brne	.-12     	; 0xaa6 <__pack_f+0x164>
     ab2:	05 c0       	rjmp	.+10     	; 0xabe <__pack_f+0x17c>
     ab4:	ee 24       	eor	r14, r14
     ab6:	ff 24       	eor	r15, r15
     ab8:	87 01       	movw	r16, r14
     aba:	ef ef       	ldi	r30, 0xFF	; 255
     abc:	f0 e0       	ldi	r31, 0x00	; 0
     abe:	6e 2f       	mov	r22, r30
     ac0:	67 95       	ror	r22
     ac2:	66 27       	eor	r22, r22
     ac4:	67 95       	ror	r22
     ac6:	90 2f       	mov	r25, r16
     ac8:	9f 77       	andi	r25, 0x7F	; 127
     aca:	d7 94       	ror	r13
     acc:	dd 24       	eor	r13, r13
     ace:	d7 94       	ror	r13
     ad0:	8e 2f       	mov	r24, r30
     ad2:	86 95       	lsr	r24
     ad4:	49 2f       	mov	r20, r25
     ad6:	46 2b       	or	r20, r22
     ad8:	58 2f       	mov	r21, r24
     ada:	5d 29       	or	r21, r13
     adc:	b7 01       	movw	r22, r14
     ade:	ca 01       	movw	r24, r20
     ae0:	1f 91       	pop	r17
     ae2:	0f 91       	pop	r16
     ae4:	ff 90       	pop	r15
     ae6:	ef 90       	pop	r14
     ae8:	df 90       	pop	r13
     aea:	08 95       	ret

00000aec <__unpack_f>:
     aec:	fc 01       	movw	r30, r24
     aee:	db 01       	movw	r26, r22
     af0:	40 81       	ld	r20, Z
     af2:	51 81       	ldd	r21, Z+1	; 0x01
     af4:	22 81       	ldd	r18, Z+2	; 0x02
     af6:	62 2f       	mov	r22, r18
     af8:	6f 77       	andi	r22, 0x7F	; 127
     afa:	70 e0       	ldi	r23, 0x00	; 0
     afc:	22 1f       	adc	r18, r18
     afe:	22 27       	eor	r18, r18
     b00:	22 1f       	adc	r18, r18
     b02:	93 81       	ldd	r25, Z+3	; 0x03
     b04:	89 2f       	mov	r24, r25
     b06:	88 0f       	add	r24, r24
     b08:	82 2b       	or	r24, r18
     b0a:	28 2f       	mov	r18, r24
     b0c:	30 e0       	ldi	r19, 0x00	; 0
     b0e:	99 1f       	adc	r25, r25
     b10:	99 27       	eor	r25, r25
     b12:	99 1f       	adc	r25, r25
     b14:	11 96       	adiw	r26, 0x01	; 1
     b16:	9c 93       	st	X, r25
     b18:	11 97       	sbiw	r26, 0x01	; 1
     b1a:	21 15       	cp	r18, r1
     b1c:	31 05       	cpc	r19, r1
     b1e:	a9 f5       	brne	.+106    	; 0xb8a <__unpack_f+0x9e>
     b20:	41 15       	cp	r20, r1
     b22:	51 05       	cpc	r21, r1
     b24:	61 05       	cpc	r22, r1
     b26:	71 05       	cpc	r23, r1
     b28:	11 f4       	brne	.+4      	; 0xb2e <__unpack_f+0x42>
     b2a:	82 e0       	ldi	r24, 0x02	; 2
     b2c:	37 c0       	rjmp	.+110    	; 0xb9c <__unpack_f+0xb0>
     b2e:	82 e8       	ldi	r24, 0x82	; 130
     b30:	9f ef       	ldi	r25, 0xFF	; 255
     b32:	13 96       	adiw	r26, 0x03	; 3
     b34:	9c 93       	st	X, r25
     b36:	8e 93       	st	-X, r24
     b38:	12 97       	sbiw	r26, 0x02	; 2
     b3a:	9a 01       	movw	r18, r20
     b3c:	ab 01       	movw	r20, r22
     b3e:	67 e0       	ldi	r22, 0x07	; 7
     b40:	22 0f       	add	r18, r18
     b42:	33 1f       	adc	r19, r19
     b44:	44 1f       	adc	r20, r20
     b46:	55 1f       	adc	r21, r21
     b48:	6a 95       	dec	r22
     b4a:	d1 f7       	brne	.-12     	; 0xb40 <__unpack_f+0x54>
     b4c:	83 e0       	ldi	r24, 0x03	; 3
     b4e:	8c 93       	st	X, r24
     b50:	0d c0       	rjmp	.+26     	; 0xb6c <__unpack_f+0x80>
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	44 1f       	adc	r20, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	12 96       	adiw	r26, 0x02	; 2
     b5c:	8d 91       	ld	r24, X+
     b5e:	9c 91       	ld	r25, X
     b60:	13 97       	sbiw	r26, 0x03	; 3
     b62:	01 97       	sbiw	r24, 0x01	; 1
     b64:	13 96       	adiw	r26, 0x03	; 3
     b66:	9c 93       	st	X, r25
     b68:	8e 93       	st	-X, r24
     b6a:	12 97       	sbiw	r26, 0x02	; 2
     b6c:	20 30       	cpi	r18, 0x00	; 0
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	38 07       	cpc	r19, r24
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	48 07       	cpc	r20, r24
     b76:	80 e4       	ldi	r24, 0x40	; 64
     b78:	58 07       	cpc	r21, r24
     b7a:	58 f3       	brcs	.-42     	; 0xb52 <__unpack_f+0x66>
     b7c:	14 96       	adiw	r26, 0x04	; 4
     b7e:	2d 93       	st	X+, r18
     b80:	3d 93       	st	X+, r19
     b82:	4d 93       	st	X+, r20
     b84:	5c 93       	st	X, r21
     b86:	17 97       	sbiw	r26, 0x07	; 7
     b88:	08 95       	ret
     b8a:	2f 3f       	cpi	r18, 0xFF	; 255
     b8c:	31 05       	cpc	r19, r1
     b8e:	79 f4       	brne	.+30     	; 0xbae <__unpack_f+0xc2>
     b90:	41 15       	cp	r20, r1
     b92:	51 05       	cpc	r21, r1
     b94:	61 05       	cpc	r22, r1
     b96:	71 05       	cpc	r23, r1
     b98:	19 f4       	brne	.+6      	; 0xba0 <__unpack_f+0xb4>
     b9a:	84 e0       	ldi	r24, 0x04	; 4
     b9c:	8c 93       	st	X, r24
     b9e:	08 95       	ret
     ba0:	64 ff       	sbrs	r22, 4
     ba2:	03 c0       	rjmp	.+6      	; 0xbaa <__unpack_f+0xbe>
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	8c 93       	st	X, r24
     ba8:	12 c0       	rjmp	.+36     	; 0xbce <__unpack_f+0xe2>
     baa:	1c 92       	st	X, r1
     bac:	10 c0       	rjmp	.+32     	; 0xbce <__unpack_f+0xe2>
     bae:	2f 57       	subi	r18, 0x7F	; 127
     bb0:	30 40       	sbci	r19, 0x00	; 0
     bb2:	13 96       	adiw	r26, 0x03	; 3
     bb4:	3c 93       	st	X, r19
     bb6:	2e 93       	st	-X, r18
     bb8:	12 97       	sbiw	r26, 0x02	; 2
     bba:	83 e0       	ldi	r24, 0x03	; 3
     bbc:	8c 93       	st	X, r24
     bbe:	87 e0       	ldi	r24, 0x07	; 7
     bc0:	44 0f       	add	r20, r20
     bc2:	55 1f       	adc	r21, r21
     bc4:	66 1f       	adc	r22, r22
     bc6:	77 1f       	adc	r23, r23
     bc8:	8a 95       	dec	r24
     bca:	d1 f7       	brne	.-12     	; 0xbc0 <__unpack_f+0xd4>
     bcc:	70 64       	ori	r23, 0x40	; 64
     bce:	14 96       	adiw	r26, 0x04	; 4
     bd0:	4d 93       	st	X+, r20
     bd2:	5d 93       	st	X+, r21
     bd4:	6d 93       	st	X+, r22
     bd6:	7c 93       	st	X, r23
     bd8:	17 97       	sbiw	r26, 0x07	; 7
     bda:	08 95       	ret

00000bdc <__fpcmp_parts_f>:
     bdc:	1f 93       	push	r17
     bde:	dc 01       	movw	r26, r24
     be0:	fb 01       	movw	r30, r22
     be2:	9c 91       	ld	r25, X
     be4:	92 30       	cpi	r25, 0x02	; 2
     be6:	08 f4       	brcc	.+2      	; 0xbea <__fpcmp_parts_f+0xe>
     be8:	47 c0       	rjmp	.+142    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bea:	80 81       	ld	r24, Z
     bec:	82 30       	cpi	r24, 0x02	; 2
     bee:	08 f4       	brcc	.+2      	; 0xbf2 <__fpcmp_parts_f+0x16>
     bf0:	43 c0       	rjmp	.+134    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bf2:	94 30       	cpi	r25, 0x04	; 4
     bf4:	51 f4       	brne	.+20     	; 0xc0a <__fpcmp_parts_f+0x2e>
     bf6:	11 96       	adiw	r26, 0x01	; 1
     bf8:	1c 91       	ld	r17, X
     bfa:	84 30       	cpi	r24, 0x04	; 4
     bfc:	99 f5       	brne	.+102    	; 0xc64 <__fpcmp_parts_f+0x88>
     bfe:	81 81       	ldd	r24, Z+1	; 0x01
     c00:	68 2f       	mov	r22, r24
     c02:	70 e0       	ldi	r23, 0x00	; 0
     c04:	61 1b       	sub	r22, r17
     c06:	71 09       	sbc	r23, r1
     c08:	3f c0       	rjmp	.+126    	; 0xc88 <__fpcmp_parts_f+0xac>
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	21 f0       	breq	.+8      	; 0xc16 <__fpcmp_parts_f+0x3a>
     c0e:	92 30       	cpi	r25, 0x02	; 2
     c10:	31 f4       	brne	.+12     	; 0xc1e <__fpcmp_parts_f+0x42>
     c12:	82 30       	cpi	r24, 0x02	; 2
     c14:	b9 f1       	breq	.+110    	; 0xc84 <__fpcmp_parts_f+0xa8>
     c16:	81 81       	ldd	r24, Z+1	; 0x01
     c18:	88 23       	and	r24, r24
     c1a:	89 f1       	breq	.+98     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c1c:	2d c0       	rjmp	.+90     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c1e:	11 96       	adiw	r26, 0x01	; 1
     c20:	1c 91       	ld	r17, X
     c22:	11 97       	sbiw	r26, 0x01	; 1
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	f1 f0       	breq	.+60     	; 0xc64 <__fpcmp_parts_f+0x88>
     c28:	81 81       	ldd	r24, Z+1	; 0x01
     c2a:	18 17       	cp	r17, r24
     c2c:	d9 f4       	brne	.+54     	; 0xc64 <__fpcmp_parts_f+0x88>
     c2e:	12 96       	adiw	r26, 0x02	; 2
     c30:	2d 91       	ld	r18, X+
     c32:	3c 91       	ld	r19, X
     c34:	13 97       	sbiw	r26, 0x03	; 3
     c36:	82 81       	ldd	r24, Z+2	; 0x02
     c38:	93 81       	ldd	r25, Z+3	; 0x03
     c3a:	82 17       	cp	r24, r18
     c3c:	93 07       	cpc	r25, r19
     c3e:	94 f0       	brlt	.+36     	; 0xc64 <__fpcmp_parts_f+0x88>
     c40:	28 17       	cp	r18, r24
     c42:	39 07       	cpc	r19, r25
     c44:	bc f0       	brlt	.+46     	; 0xc74 <__fpcmp_parts_f+0x98>
     c46:	14 96       	adiw	r26, 0x04	; 4
     c48:	8d 91       	ld	r24, X+
     c4a:	9d 91       	ld	r25, X+
     c4c:	0d 90       	ld	r0, X+
     c4e:	bc 91       	ld	r27, X
     c50:	a0 2d       	mov	r26, r0
     c52:	24 81       	ldd	r18, Z+4	; 0x04
     c54:	35 81       	ldd	r19, Z+5	; 0x05
     c56:	46 81       	ldd	r20, Z+6	; 0x06
     c58:	57 81       	ldd	r21, Z+7	; 0x07
     c5a:	28 17       	cp	r18, r24
     c5c:	39 07       	cpc	r19, r25
     c5e:	4a 07       	cpc	r20, r26
     c60:	5b 07       	cpc	r21, r27
     c62:	18 f4       	brcc	.+6      	; 0xc6a <__fpcmp_parts_f+0x8e>
     c64:	11 23       	and	r17, r17
     c66:	41 f0       	breq	.+16     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c68:	0a c0       	rjmp	.+20     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c6a:	82 17       	cp	r24, r18
     c6c:	93 07       	cpc	r25, r19
     c6e:	a4 07       	cpc	r26, r20
     c70:	b5 07       	cpc	r27, r21
     c72:	40 f4       	brcc	.+16     	; 0xc84 <__fpcmp_parts_f+0xa8>
     c74:	11 23       	and	r17, r17
     c76:	19 f0       	breq	.+6      	; 0xc7e <__fpcmp_parts_f+0xa2>
     c78:	61 e0       	ldi	r22, 0x01	; 1
     c7a:	70 e0       	ldi	r23, 0x00	; 0
     c7c:	05 c0       	rjmp	.+10     	; 0xc88 <__fpcmp_parts_f+0xac>
     c7e:	6f ef       	ldi	r22, 0xFF	; 255
     c80:	7f ef       	ldi	r23, 0xFF	; 255
     c82:	02 c0       	rjmp	.+4      	; 0xc88 <__fpcmp_parts_f+0xac>
     c84:	60 e0       	ldi	r22, 0x00	; 0
     c86:	70 e0       	ldi	r23, 0x00	; 0
     c88:	cb 01       	movw	r24, r22
     c8a:	1f 91       	pop	r17
     c8c:	08 95       	ret

00000c8e <__vector_1>:
#include <avr/interrupt.h>
#include "ExtInt.h"


ISR(INT0_vect)
{
     c8e:	1f 92       	push	r1
     c90:	0f 92       	push	r0
     c92:	0f b6       	in	r0, 0x3f	; 63
     c94:	0f 92       	push	r0
     c96:	11 24       	eor	r1, r1
     c98:	2f 93       	push	r18
     c9a:	3f 93       	push	r19
     c9c:	4f 93       	push	r20
     c9e:	5f 93       	push	r21
     ca0:	6f 93       	push	r22
     ca2:	7f 93       	push	r23
     ca4:	8f 93       	push	r24
     ca6:	9f 93       	push	r25
     ca8:	af 93       	push	r26
     caa:	bf 93       	push	r27
     cac:	ef 93       	push	r30
     cae:	ff 93       	push	r31
     cb0:	df 93       	push	r29
     cb2:	cf 93       	push	r28
     cb4:	cd b7       	in	r28, 0x3d	; 61
     cb6:	de b7       	in	r29, 0x3e	; 62
	Led_vidledToggle(LED1);
     cb8:	81 e0       	ldi	r24, 0x01	; 1
     cba:	0e 94 92 09 	call	0x1324	; 0x1324 <Led_vidledToggle>
}
     cbe:	cf 91       	pop	r28
     cc0:	df 91       	pop	r29
     cc2:	ff 91       	pop	r31
     cc4:	ef 91       	pop	r30
     cc6:	bf 91       	pop	r27
     cc8:	af 91       	pop	r26
     cca:	9f 91       	pop	r25
     ccc:	8f 91       	pop	r24
     cce:	7f 91       	pop	r23
     cd0:	6f 91       	pop	r22
     cd2:	5f 91       	pop	r21
     cd4:	4f 91       	pop	r20
     cd6:	3f 91       	pop	r19
     cd8:	2f 91       	pop	r18
     cda:	0f 90       	pop	r0
     cdc:	0f be       	out	0x3f, r0	; 63
     cde:	0f 90       	pop	r0
     ce0:	1f 90       	pop	r1
     ce2:	18 95       	reti

00000ce4 <main>:

int main()
{
     ce4:	df 93       	push	r29
     ce6:	cf 93       	push	r28
     ce8:	cd b7       	in	r28, 0x3d	; 61
     cea:	de b7       	in	r29, 0x3e	; 62
     cec:	2e 97       	sbiw	r28, 0x0e	; 14
     cee:	0f b6       	in	r0, 0x3f	; 63
     cf0:	f8 94       	cli
     cf2:	de bf       	out	0x3e, r29	; 62
     cf4:	0f be       	out	0x3f, r0	; 63
     cf6:	cd bf       	out	0x3d, r28	; 61
	Led_vidinit();
     cf8:	0e 94 1a 09 	call	0x1234	; 0x1234 <Led_vidinit>
	GINT_vidEnableAllInterrupts();
     cfc:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <GINT_vidEnableAllInterrupts>
	ExtInt_vidConfigExtInt(EXT_INT0, EXT_RISING_EDGE);
     d00:	80 e0       	ldi	r24, 0x00	; 0
     d02:	61 e0       	ldi	r22, 0x01	; 1
     d04:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <ExtInt_vidConfigExtInt>
	while (1)
	{
		Led_vidledToggle(LED0);
     d08:	80 e0       	ldi	r24, 0x00	; 0
     d0a:	0e 94 92 09 	call	0x1324	; 0x1324 <Led_vidledToggle>
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	90 e0       	ldi	r25, 0x00	; 0
     d12:	aa ef       	ldi	r26, 0xFA	; 250
     d14:	b3 e4       	ldi	r27, 0x43	; 67
     d16:	8b 87       	std	Y+11, r24	; 0x0b
     d18:	9c 87       	std	Y+12, r25	; 0x0c
     d1a:	ad 87       	std	Y+13, r26	; 0x0d
     d1c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d1e:	6b 85       	ldd	r22, Y+11	; 0x0b
     d20:	7c 85       	ldd	r23, Y+12	; 0x0c
     d22:	8d 85       	ldd	r24, Y+13	; 0x0d
     d24:	9e 85       	ldd	r25, Y+14	; 0x0e
     d26:	20 e0       	ldi	r18, 0x00	; 0
     d28:	30 e0       	ldi	r19, 0x00	; 0
     d2a:	4a e7       	ldi	r20, 0x7A	; 122
     d2c:	55 e4       	ldi	r21, 0x45	; 69
     d2e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     d32:	dc 01       	movw	r26, r24
     d34:	cb 01       	movw	r24, r22
     d36:	8f 83       	std	Y+7, r24	; 0x07
     d38:	98 87       	std	Y+8, r25	; 0x08
     d3a:	a9 87       	std	Y+9, r26	; 0x09
     d3c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     d3e:	6f 81       	ldd	r22, Y+7	; 0x07
     d40:	78 85       	ldd	r23, Y+8	; 0x08
     d42:	89 85       	ldd	r24, Y+9	; 0x09
     d44:	9a 85       	ldd	r25, Y+10	; 0x0a
     d46:	20 e0       	ldi	r18, 0x00	; 0
     d48:	30 e0       	ldi	r19, 0x00	; 0
     d4a:	40 e8       	ldi	r20, 0x80	; 128
     d4c:	5f e3       	ldi	r21, 0x3F	; 63
     d4e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
     d52:	88 23       	and	r24, r24
     d54:	2c f4       	brge	.+10     	; 0xd60 <main+0x7c>
		__ticks = 1;
     d56:	81 e0       	ldi	r24, 0x01	; 1
     d58:	90 e0       	ldi	r25, 0x00	; 0
     d5a:	9e 83       	std	Y+6, r25	; 0x06
     d5c:	8d 83       	std	Y+5, r24	; 0x05
     d5e:	3f c0       	rjmp	.+126    	; 0xdde <main+0xfa>
	else if (__tmp > 65535)
     d60:	6f 81       	ldd	r22, Y+7	; 0x07
     d62:	78 85       	ldd	r23, Y+8	; 0x08
     d64:	89 85       	ldd	r24, Y+9	; 0x09
     d66:	9a 85       	ldd	r25, Y+10	; 0x0a
     d68:	20 e0       	ldi	r18, 0x00	; 0
     d6a:	3f ef       	ldi	r19, 0xFF	; 255
     d6c:	4f e7       	ldi	r20, 0x7F	; 127
     d6e:	57 e4       	ldi	r21, 0x47	; 71
     d70:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
     d74:	18 16       	cp	r1, r24
     d76:	4c f5       	brge	.+82     	; 0xdca <main+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d78:	6b 85       	ldd	r22, Y+11	; 0x0b
     d7a:	7c 85       	ldd	r23, Y+12	; 0x0c
     d7c:	8d 85       	ldd	r24, Y+13	; 0x0d
     d7e:	9e 85       	ldd	r25, Y+14	; 0x0e
     d80:	20 e0       	ldi	r18, 0x00	; 0
     d82:	30 e0       	ldi	r19, 0x00	; 0
     d84:	40 e2       	ldi	r20, 0x20	; 32
     d86:	51 e4       	ldi	r21, 0x41	; 65
     d88:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     d8c:	dc 01       	movw	r26, r24
     d8e:	cb 01       	movw	r24, r22
     d90:	bc 01       	movw	r22, r24
     d92:	cd 01       	movw	r24, r26
     d94:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     d98:	dc 01       	movw	r26, r24
     d9a:	cb 01       	movw	r24, r22
     d9c:	9e 83       	std	Y+6, r25	; 0x06
     d9e:	8d 83       	std	Y+5, r24	; 0x05
     da0:	0f c0       	rjmp	.+30     	; 0xdc0 <main+0xdc>
     da2:	80 e9       	ldi	r24, 0x90	; 144
     da4:	91 e0       	ldi	r25, 0x01	; 1
     da6:	9c 83       	std	Y+4, r25	; 0x04
     da8:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     daa:	8b 81       	ldd	r24, Y+3	; 0x03
     dac:	9c 81       	ldd	r25, Y+4	; 0x04
     dae:	01 97       	sbiw	r24, 0x01	; 1
     db0:	f1 f7       	brne	.-4      	; 0xdae <main+0xca>
     db2:	9c 83       	std	Y+4, r25	; 0x04
     db4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     db6:	8d 81       	ldd	r24, Y+5	; 0x05
     db8:	9e 81       	ldd	r25, Y+6	; 0x06
     dba:	01 97       	sbiw	r24, 0x01	; 1
     dbc:	9e 83       	std	Y+6, r25	; 0x06
     dbe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     dc0:	8d 81       	ldd	r24, Y+5	; 0x05
     dc2:	9e 81       	ldd	r25, Y+6	; 0x06
     dc4:	00 97       	sbiw	r24, 0x00	; 0
     dc6:	69 f7       	brne	.-38     	; 0xda2 <main+0xbe>
     dc8:	9f cf       	rjmp	.-194    	; 0xd08 <main+0x24>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     dca:	6f 81       	ldd	r22, Y+7	; 0x07
     dcc:	78 85       	ldd	r23, Y+8	; 0x08
     dce:	89 85       	ldd	r24, Y+9	; 0x09
     dd0:	9a 85       	ldd	r25, Y+10	; 0x0a
     dd2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     dd6:	dc 01       	movw	r26, r24
     dd8:	cb 01       	movw	r24, r22
     dda:	9e 83       	std	Y+6, r25	; 0x06
     ddc:	8d 83       	std	Y+5, r24	; 0x05
     dde:	8d 81       	ldd	r24, Y+5	; 0x05
     de0:	9e 81       	ldd	r25, Y+6	; 0x06
     de2:	9a 83       	std	Y+2, r25	; 0x02
     de4:	89 83       	std	Y+1, r24	; 0x01
     de6:	89 81       	ldd	r24, Y+1	; 0x01
     de8:	9a 81       	ldd	r25, Y+2	; 0x02
     dea:	01 97       	sbiw	r24, 0x01	; 1
     dec:	f1 f7       	brne	.-4      	; 0xdea <main+0x106>
     dee:	9a 83       	std	Y+2, r25	; 0x02
     df0:	89 83       	std	Y+1, r24	; 0x01
     df2:	8a cf       	rjmp	.-236    	; 0xd08 <main+0x24>

00000df4 <SSD_vidinit>:
#include "SSD.h"
#include "Dio.h"
#include <util/delay.h>

void SSD_vidinit(void)
{
     df4:	df 93       	push	r29
     df6:	cf 93       	push	r28
     df8:	cd b7       	in	r28, 0x3d	; 61
     dfa:	de b7       	in	r29, 0x3e	; 62
	Dio_vidconfigChanel(DIO_PORTB, DIO_PIN1, DIO_OUTPUT);
     dfc:	81 e0       	ldi	r24, 0x01	; 1
     dfe:	61 e0       	ldi	r22, 0x01	; 1
     e00:	41 e0       	ldi	r20, 0x01	; 1
     e02:	0e 94 df 10 	call	0x21be	; 0x21be <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTB, DIO_PIN2, DIO_OUTPUT);
     e06:	81 e0       	ldi	r24, 0x01	; 1
     e08:	62 e0       	ldi	r22, 0x02	; 2
     e0a:	41 e0       	ldi	r20, 0x01	; 1
     e0c:	0e 94 df 10 	call	0x21be	; 0x21be <Dio_vidconfigChanel>

	Dio_vidconfigChanel(DIO_PORTA, DIO_PIN4, DIO_OUTPUT);
     e10:	80 e0       	ldi	r24, 0x00	; 0
     e12:	64 e0       	ldi	r22, 0x04	; 4
     e14:	41 e0       	ldi	r20, 0x01	; 1
     e16:	0e 94 df 10 	call	0x21be	; 0x21be <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTA, DIO_PIN5, DIO_OUTPUT);
     e1a:	80 e0       	ldi	r24, 0x00	; 0
     e1c:	65 e0       	ldi	r22, 0x05	; 5
     e1e:	41 e0       	ldi	r20, 0x01	; 1
     e20:	0e 94 df 10 	call	0x21be	; 0x21be <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTA, DIO_PIN6, DIO_OUTPUT);
     e24:	80 e0       	ldi	r24, 0x00	; 0
     e26:	66 e0       	ldi	r22, 0x06	; 6
     e28:	41 e0       	ldi	r20, 0x01	; 1
     e2a:	0e 94 df 10 	call	0x21be	; 0x21be <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTA, DIO_PIN7, DIO_OUTPUT);
     e2e:	80 e0       	ldi	r24, 0x00	; 0
     e30:	67 e0       	ldi	r22, 0x07	; 7
     e32:	41 e0       	ldi	r20, 0x01	; 1
     e34:	0e 94 df 10 	call	0x21be	; 0x21be <Dio_vidconfigChanel>
}
     e38:	cf 91       	pop	r28
     e3a:	df 91       	pop	r29
     e3c:	08 95       	ret

00000e3e <SSD_viddisplyNum>:

void SSD_viddisplyNum(u8 num)
{
     e3e:	df 93       	push	r29
     e40:	cf 93       	push	r28
     e42:	cd b7       	in	r28, 0x3d	; 61
     e44:	de b7       	in	r29, 0x3e	; 62
     e46:	e3 97       	sbiw	r28, 0x33	; 51
     e48:	0f b6       	in	r0, 0x3f	; 63
     e4a:	f8 94       	cli
     e4c:	de bf       	out	0x3e, r29	; 62
     e4e:	0f be       	out	0x3f, r0	; 63
     e50:	cd bf       	out	0x3d, r28	; 61
     e52:	8b ab       	std	Y+51, r24	; 0x33
	u8 loc_secondDigit =  (num%10)<<4;
     e54:	8b a9       	ldd	r24, Y+51	; 0x33
     e56:	9a e0       	ldi	r25, 0x0A	; 10
     e58:	69 2f       	mov	r22, r25
     e5a:	0e 94 8e 14 	call	0x291c	; 0x291c <__udivmodqi4>
     e5e:	89 2f       	mov	r24, r25
     e60:	82 95       	swap	r24
     e62:	80 7f       	andi	r24, 0xF0	; 240
     e64:	8a ab       	std	Y+50, r24	; 0x32
	u8 loc_firstDigit = (num/10)<<4;
     e66:	8b a9       	ldd	r24, Y+51	; 0x33
     e68:	9a e0       	ldi	r25, 0x0A	; 10
     e6a:	69 2f       	mov	r22, r25
     e6c:	0e 94 8e 14 	call	0x291c	; 0x291c <__udivmodqi4>
     e70:	82 95       	swap	r24
     e72:	80 7f       	andi	r24, 0xF0	; 240
     e74:	89 ab       	std	Y+49, r24	; 0x31

	/* Enable SSD 1	-> EN1 = High	*/
	Dio_vidwriteChanel(DIO_PORTB, DIO_PIN2, DIO_HIGH);
     e76:	81 e0       	ldi	r24, 0x01	; 1
     e78:	62 e0       	ldi	r22, 0x02	; 2
     e7a:	41 e0       	ldi	r20, 0x01	; 1
     e7c:	0e 94 c2 11 	call	0x2384	; 0x2384 <Dio_vidwriteChanel>
	/* Disable SSD 2 -> EN2 =Low	*/
	Dio_vidwriteChanel(DIO_PORTB, DIO_PIN1, DIO_LOW);
     e80:	81 e0       	ldi	r24, 0x01	; 1
     e82:	61 e0       	ldi	r22, 0x01	; 1
     e84:	40 e0       	ldi	r20, 0x00	; 0
     e86:	0e 94 c2 11 	call	0x2384	; 0x2384 <Dio_vidwriteChanel>
	/* Write first digit */
	Dio_vidWriteChanelGroup(DIO_PORTA, loc_firstDigit, SSD_MASK);
     e8a:	80 e0       	ldi	r24, 0x00	; 0
     e8c:	69 a9       	ldd	r22, Y+49	; 0x31
     e8e:	4f e0       	ldi	r20, 0x0F	; 15
     e90:	0e 94 a5 12 	call	0x254a	; 0x254a <Dio_vidWriteChanelGroup>
     e94:	80 e0       	ldi	r24, 0x00	; 0
     e96:	90 e0       	ldi	r25, 0x00	; 0
     e98:	aa ef       	ldi	r26, 0xFA	; 250
     e9a:	b3 e4       	ldi	r27, 0x43	; 67
     e9c:	8d a7       	std	Y+45, r24	; 0x2d
     e9e:	9e a7       	std	Y+46, r25	; 0x2e
     ea0:	af a7       	std	Y+47, r26	; 0x2f
     ea2:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     ea4:	6d a5       	ldd	r22, Y+45	; 0x2d
     ea6:	7e a5       	ldd	r23, Y+46	; 0x2e
     ea8:	8f a5       	ldd	r24, Y+47	; 0x2f
     eaa:	98 a9       	ldd	r25, Y+48	; 0x30
     eac:	2b ea       	ldi	r18, 0xAB	; 171
     eae:	3a ea       	ldi	r19, 0xAA	; 170
     eb0:	4a ea       	ldi	r20, 0xAA	; 170
     eb2:	50 e4       	ldi	r21, 0x40	; 64
     eb4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     eb8:	dc 01       	movw	r26, r24
     eba:	cb 01       	movw	r24, r22
     ebc:	89 a7       	std	Y+41, r24	; 0x29
     ebe:	9a a7       	std	Y+42, r25	; 0x2a
     ec0:	ab a7       	std	Y+43, r26	; 0x2b
     ec2:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
     ec4:	69 a5       	ldd	r22, Y+41	; 0x29
     ec6:	7a a5       	ldd	r23, Y+42	; 0x2a
     ec8:	8b a5       	ldd	r24, Y+43	; 0x2b
     eca:	9c a5       	ldd	r25, Y+44	; 0x2c
     ecc:	20 e0       	ldi	r18, 0x00	; 0
     ece:	30 e0       	ldi	r19, 0x00	; 0
     ed0:	40 e8       	ldi	r20, 0x80	; 128
     ed2:	5f e3       	ldi	r21, 0x3F	; 63
     ed4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
     ed8:	88 23       	and	r24, r24
     eda:	1c f4       	brge	.+6      	; 0xee2 <SSD_viddisplyNum+0xa4>
		__ticks = 1;
     edc:	81 e0       	ldi	r24, 0x01	; 1
     ede:	88 a7       	std	Y+40, r24	; 0x28
     ee0:	91 c0       	rjmp	.+290    	; 0x1004 <SSD_viddisplyNum+0x1c6>
	else if (__tmp > 255)
     ee2:	69 a5       	ldd	r22, Y+41	; 0x29
     ee4:	7a a5       	ldd	r23, Y+42	; 0x2a
     ee6:	8b a5       	ldd	r24, Y+43	; 0x2b
     ee8:	9c a5       	ldd	r25, Y+44	; 0x2c
     eea:	20 e0       	ldi	r18, 0x00	; 0
     eec:	30 e0       	ldi	r19, 0x00	; 0
     eee:	4f e7       	ldi	r20, 0x7F	; 127
     ef0:	53 e4       	ldi	r21, 0x43	; 67
     ef2:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
     ef6:	18 16       	cp	r1, r24
     ef8:	0c f0       	brlt	.+2      	; 0xefc <SSD_viddisplyNum+0xbe>
     efa:	7b c0       	rjmp	.+246    	; 0xff2 <SSD_viddisplyNum+0x1b4>
	{
		_delay_ms(__us / 1000.0);
     efc:	6d a5       	ldd	r22, Y+45	; 0x2d
     efe:	7e a5       	ldd	r23, Y+46	; 0x2e
     f00:	8f a5       	ldd	r24, Y+47	; 0x2f
     f02:	98 a9       	ldd	r25, Y+48	; 0x30
     f04:	20 e0       	ldi	r18, 0x00	; 0
     f06:	30 e0       	ldi	r19, 0x00	; 0
     f08:	4a e7       	ldi	r20, 0x7A	; 122
     f0a:	54 e4       	ldi	r21, 0x44	; 68
     f0c:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
     f10:	dc 01       	movw	r26, r24
     f12:	cb 01       	movw	r24, r22
     f14:	8c a3       	std	Y+36, r24	; 0x24
     f16:	9d a3       	std	Y+37, r25	; 0x25
     f18:	ae a3       	std	Y+38, r26	; 0x26
     f1a:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f1c:	6c a1       	ldd	r22, Y+36	; 0x24
     f1e:	7d a1       	ldd	r23, Y+37	; 0x25
     f20:	8e a1       	ldd	r24, Y+38	; 0x26
     f22:	9f a1       	ldd	r25, Y+39	; 0x27
     f24:	20 e0       	ldi	r18, 0x00	; 0
     f26:	30 e0       	ldi	r19, 0x00	; 0
     f28:	4a e7       	ldi	r20, 0x7A	; 122
     f2a:	55 e4       	ldi	r21, 0x45	; 69
     f2c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f30:	dc 01       	movw	r26, r24
     f32:	cb 01       	movw	r24, r22
     f34:	88 a3       	std	Y+32, r24	; 0x20
     f36:	99 a3       	std	Y+33, r25	; 0x21
     f38:	aa a3       	std	Y+34, r26	; 0x22
     f3a:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
     f3c:	68 a1       	ldd	r22, Y+32	; 0x20
     f3e:	79 a1       	ldd	r23, Y+33	; 0x21
     f40:	8a a1       	ldd	r24, Y+34	; 0x22
     f42:	9b a1       	ldd	r25, Y+35	; 0x23
     f44:	20 e0       	ldi	r18, 0x00	; 0
     f46:	30 e0       	ldi	r19, 0x00	; 0
     f48:	40 e8       	ldi	r20, 0x80	; 128
     f4a:	5f e3       	ldi	r21, 0x3F	; 63
     f4c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
     f50:	88 23       	and	r24, r24
     f52:	2c f4       	brge	.+10     	; 0xf5e <SSD_viddisplyNum+0x120>
		__ticks = 1;
     f54:	81 e0       	ldi	r24, 0x01	; 1
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	9f 8f       	std	Y+31, r25	; 0x1f
     f5a:	8e 8f       	std	Y+30, r24	; 0x1e
     f5c:	3f c0       	rjmp	.+126    	; 0xfdc <SSD_viddisplyNum+0x19e>
	else if (__tmp > 65535)
     f5e:	68 a1       	ldd	r22, Y+32	; 0x20
     f60:	79 a1       	ldd	r23, Y+33	; 0x21
     f62:	8a a1       	ldd	r24, Y+34	; 0x22
     f64:	9b a1       	ldd	r25, Y+35	; 0x23
     f66:	20 e0       	ldi	r18, 0x00	; 0
     f68:	3f ef       	ldi	r19, 0xFF	; 255
     f6a:	4f e7       	ldi	r20, 0x7F	; 127
     f6c:	57 e4       	ldi	r21, 0x47	; 71
     f6e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
     f72:	18 16       	cp	r1, r24
     f74:	4c f5       	brge	.+82     	; 0xfc8 <SSD_viddisplyNum+0x18a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f76:	6c a1       	ldd	r22, Y+36	; 0x24
     f78:	7d a1       	ldd	r23, Y+37	; 0x25
     f7a:	8e a1       	ldd	r24, Y+38	; 0x26
     f7c:	9f a1       	ldd	r25, Y+39	; 0x27
     f7e:	20 e0       	ldi	r18, 0x00	; 0
     f80:	30 e0       	ldi	r19, 0x00	; 0
     f82:	40 e2       	ldi	r20, 0x20	; 32
     f84:	51 e4       	ldi	r21, 0x41	; 65
     f86:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f8a:	dc 01       	movw	r26, r24
     f8c:	cb 01       	movw	r24, r22
     f8e:	bc 01       	movw	r22, r24
     f90:	cd 01       	movw	r24, r26
     f92:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     f96:	dc 01       	movw	r26, r24
     f98:	cb 01       	movw	r24, r22
     f9a:	9f 8f       	std	Y+31, r25	; 0x1f
     f9c:	8e 8f       	std	Y+30, r24	; 0x1e
     f9e:	0f c0       	rjmp	.+30     	; 0xfbe <SSD_viddisplyNum+0x180>
     fa0:	80 e9       	ldi	r24, 0x90	; 144
     fa2:	91 e0       	ldi	r25, 0x01	; 1
     fa4:	9d 8f       	std	Y+29, r25	; 0x1d
     fa6:	8c 8f       	std	Y+28, r24	; 0x1c
     fa8:	8c 8d       	ldd	r24, Y+28	; 0x1c
     faa:	9d 8d       	ldd	r25, Y+29	; 0x1d
     fac:	01 97       	sbiw	r24, 0x01	; 1
     fae:	f1 f7       	brne	.-4      	; 0xfac <SSD_viddisplyNum+0x16e>
     fb0:	9d 8f       	std	Y+29, r25	; 0x1d
     fb2:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fb4:	8e 8d       	ldd	r24, Y+30	; 0x1e
     fb6:	9f 8d       	ldd	r25, Y+31	; 0x1f
     fb8:	01 97       	sbiw	r24, 0x01	; 1
     fba:	9f 8f       	std	Y+31, r25	; 0x1f
     fbc:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fbe:	8e 8d       	ldd	r24, Y+30	; 0x1e
     fc0:	9f 8d       	ldd	r25, Y+31	; 0x1f
     fc2:	00 97       	sbiw	r24, 0x00	; 0
     fc4:	69 f7       	brne	.-38     	; 0xfa0 <SSD_viddisplyNum+0x162>
     fc6:	24 c0       	rjmp	.+72     	; 0x1010 <SSD_viddisplyNum+0x1d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fc8:	68 a1       	ldd	r22, Y+32	; 0x20
     fca:	79 a1       	ldd	r23, Y+33	; 0x21
     fcc:	8a a1       	ldd	r24, Y+34	; 0x22
     fce:	9b a1       	ldd	r25, Y+35	; 0x23
     fd0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     fd4:	dc 01       	movw	r26, r24
     fd6:	cb 01       	movw	r24, r22
     fd8:	9f 8f       	std	Y+31, r25	; 0x1f
     fda:	8e 8f       	std	Y+30, r24	; 0x1e
     fdc:	8e 8d       	ldd	r24, Y+30	; 0x1e
     fde:	9f 8d       	ldd	r25, Y+31	; 0x1f
     fe0:	9b 8f       	std	Y+27, r25	; 0x1b
     fe2:	8a 8f       	std	Y+26, r24	; 0x1a
     fe4:	8a 8d       	ldd	r24, Y+26	; 0x1a
     fe6:	9b 8d       	ldd	r25, Y+27	; 0x1b
     fe8:	01 97       	sbiw	r24, 0x01	; 1
     fea:	f1 f7       	brne	.-4      	; 0xfe8 <SSD_viddisplyNum+0x1aa>
     fec:	9b 8f       	std	Y+27, r25	; 0x1b
     fee:	8a 8f       	std	Y+26, r24	; 0x1a
     ff0:	0f c0       	rjmp	.+30     	; 0x1010 <SSD_viddisplyNum+0x1d2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     ff2:	69 a5       	ldd	r22, Y+41	; 0x29
     ff4:	7a a5       	ldd	r23, Y+42	; 0x2a
     ff6:	8b a5       	ldd	r24, Y+43	; 0x2b
     ff8:	9c a5       	ldd	r25, Y+44	; 0x2c
     ffa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     ffe:	dc 01       	movw	r26, r24
    1000:	cb 01       	movw	r24, r22
    1002:	88 a7       	std	Y+40, r24	; 0x28
    1004:	88 a5       	ldd	r24, Y+40	; 0x28
    1006:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1008:	89 8d       	ldd	r24, Y+25	; 0x19
    100a:	8a 95       	dec	r24
    100c:	f1 f7       	brne	.-4      	; 0x100a <SSD_viddisplyNum+0x1cc>
    100e:	89 8f       	std	Y+25, r24	; 0x19

	_delay_us(500);

	/* Disable SSD 1	-> EN1 = Low	*/
	Dio_vidwriteChanel(DIO_PORTB, DIO_PIN2, DIO_LOW);
    1010:	81 e0       	ldi	r24, 0x01	; 1
    1012:	62 e0       	ldi	r22, 0x02	; 2
    1014:	40 e0       	ldi	r20, 0x00	; 0
    1016:	0e 94 c2 11 	call	0x2384	; 0x2384 <Dio_vidwriteChanel>
	/* Enable SSD 2 -> EN2 = High	*/
	Dio_vidwriteChanel(DIO_PORTB, DIO_PIN1, DIO_HIGH);
    101a:	81 e0       	ldi	r24, 0x01	; 1
    101c:	61 e0       	ldi	r22, 0x01	; 1
    101e:	41 e0       	ldi	r20, 0x01	; 1
    1020:	0e 94 c2 11 	call	0x2384	; 0x2384 <Dio_vidwriteChanel>
	/* Write second digit */
	Dio_vidWriteChanelGroup(DIO_PORTA, loc_secondDigit, SSD_MASK);
    1024:	80 e0       	ldi	r24, 0x00	; 0
    1026:	6a a9       	ldd	r22, Y+50	; 0x32
    1028:	4f e0       	ldi	r20, 0x0F	; 15
    102a:	0e 94 a5 12 	call	0x254a	; 0x254a <Dio_vidWriteChanelGroup>
    102e:	80 e0       	ldi	r24, 0x00	; 0
    1030:	90 e0       	ldi	r25, 0x00	; 0
    1032:	aa ef       	ldi	r26, 0xFA	; 250
    1034:	b3 e4       	ldi	r27, 0x43	; 67
    1036:	8d 8b       	std	Y+21, r24	; 0x15
    1038:	9e 8b       	std	Y+22, r25	; 0x16
    103a:	af 8b       	std	Y+23, r26	; 0x17
    103c:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    103e:	6d 89       	ldd	r22, Y+21	; 0x15
    1040:	7e 89       	ldd	r23, Y+22	; 0x16
    1042:	8f 89       	ldd	r24, Y+23	; 0x17
    1044:	98 8d       	ldd	r25, Y+24	; 0x18
    1046:	2b ea       	ldi	r18, 0xAB	; 171
    1048:	3a ea       	ldi	r19, 0xAA	; 170
    104a:	4a ea       	ldi	r20, 0xAA	; 170
    104c:	50 e4       	ldi	r21, 0x40	; 64
    104e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1052:	dc 01       	movw	r26, r24
    1054:	cb 01       	movw	r24, r22
    1056:	89 8b       	std	Y+17, r24	; 0x11
    1058:	9a 8b       	std	Y+18, r25	; 0x12
    105a:	ab 8b       	std	Y+19, r26	; 0x13
    105c:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    105e:	69 89       	ldd	r22, Y+17	; 0x11
    1060:	7a 89       	ldd	r23, Y+18	; 0x12
    1062:	8b 89       	ldd	r24, Y+19	; 0x13
    1064:	9c 89       	ldd	r25, Y+20	; 0x14
    1066:	20 e0       	ldi	r18, 0x00	; 0
    1068:	30 e0       	ldi	r19, 0x00	; 0
    106a:	40 e8       	ldi	r20, 0x80	; 128
    106c:	5f e3       	ldi	r21, 0x3F	; 63
    106e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1072:	88 23       	and	r24, r24
    1074:	1c f4       	brge	.+6      	; 0x107c <SSD_viddisplyNum+0x23e>
		__ticks = 1;
    1076:	81 e0       	ldi	r24, 0x01	; 1
    1078:	88 8b       	std	Y+16, r24	; 0x10
    107a:	91 c0       	rjmp	.+290    	; 0x119e <SSD_viddisplyNum+0x360>
	else if (__tmp > 255)
    107c:	69 89       	ldd	r22, Y+17	; 0x11
    107e:	7a 89       	ldd	r23, Y+18	; 0x12
    1080:	8b 89       	ldd	r24, Y+19	; 0x13
    1082:	9c 89       	ldd	r25, Y+20	; 0x14
    1084:	20 e0       	ldi	r18, 0x00	; 0
    1086:	30 e0       	ldi	r19, 0x00	; 0
    1088:	4f e7       	ldi	r20, 0x7F	; 127
    108a:	53 e4       	ldi	r21, 0x43	; 67
    108c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1090:	18 16       	cp	r1, r24
    1092:	0c f0       	brlt	.+2      	; 0x1096 <SSD_viddisplyNum+0x258>
    1094:	7b c0       	rjmp	.+246    	; 0x118c <SSD_viddisplyNum+0x34e>
	{
		_delay_ms(__us / 1000.0);
    1096:	6d 89       	ldd	r22, Y+21	; 0x15
    1098:	7e 89       	ldd	r23, Y+22	; 0x16
    109a:	8f 89       	ldd	r24, Y+23	; 0x17
    109c:	98 8d       	ldd	r25, Y+24	; 0x18
    109e:	20 e0       	ldi	r18, 0x00	; 0
    10a0:	30 e0       	ldi	r19, 0x00	; 0
    10a2:	4a e7       	ldi	r20, 0x7A	; 122
    10a4:	54 e4       	ldi	r21, 0x44	; 68
    10a6:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    10aa:	dc 01       	movw	r26, r24
    10ac:	cb 01       	movw	r24, r22
    10ae:	8c 87       	std	Y+12, r24	; 0x0c
    10b0:	9d 87       	std	Y+13, r25	; 0x0d
    10b2:	ae 87       	std	Y+14, r26	; 0x0e
    10b4:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10b6:	6c 85       	ldd	r22, Y+12	; 0x0c
    10b8:	7d 85       	ldd	r23, Y+13	; 0x0d
    10ba:	8e 85       	ldd	r24, Y+14	; 0x0e
    10bc:	9f 85       	ldd	r25, Y+15	; 0x0f
    10be:	20 e0       	ldi	r18, 0x00	; 0
    10c0:	30 e0       	ldi	r19, 0x00	; 0
    10c2:	4a e7       	ldi	r20, 0x7A	; 122
    10c4:	55 e4       	ldi	r21, 0x45	; 69
    10c6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    10ca:	dc 01       	movw	r26, r24
    10cc:	cb 01       	movw	r24, r22
    10ce:	88 87       	std	Y+8, r24	; 0x08
    10d0:	99 87       	std	Y+9, r25	; 0x09
    10d2:	aa 87       	std	Y+10, r26	; 0x0a
    10d4:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    10d6:	68 85       	ldd	r22, Y+8	; 0x08
    10d8:	79 85       	ldd	r23, Y+9	; 0x09
    10da:	8a 85       	ldd	r24, Y+10	; 0x0a
    10dc:	9b 85       	ldd	r25, Y+11	; 0x0b
    10de:	20 e0       	ldi	r18, 0x00	; 0
    10e0:	30 e0       	ldi	r19, 0x00	; 0
    10e2:	40 e8       	ldi	r20, 0x80	; 128
    10e4:	5f e3       	ldi	r21, 0x3F	; 63
    10e6:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    10ea:	88 23       	and	r24, r24
    10ec:	2c f4       	brge	.+10     	; 0x10f8 <SSD_viddisplyNum+0x2ba>
		__ticks = 1;
    10ee:	81 e0       	ldi	r24, 0x01	; 1
    10f0:	90 e0       	ldi	r25, 0x00	; 0
    10f2:	9f 83       	std	Y+7, r25	; 0x07
    10f4:	8e 83       	std	Y+6, r24	; 0x06
    10f6:	3f c0       	rjmp	.+126    	; 0x1176 <SSD_viddisplyNum+0x338>
	else if (__tmp > 65535)
    10f8:	68 85       	ldd	r22, Y+8	; 0x08
    10fa:	79 85       	ldd	r23, Y+9	; 0x09
    10fc:	8a 85       	ldd	r24, Y+10	; 0x0a
    10fe:	9b 85       	ldd	r25, Y+11	; 0x0b
    1100:	20 e0       	ldi	r18, 0x00	; 0
    1102:	3f ef       	ldi	r19, 0xFF	; 255
    1104:	4f e7       	ldi	r20, 0x7F	; 127
    1106:	57 e4       	ldi	r21, 0x47	; 71
    1108:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    110c:	18 16       	cp	r1, r24
    110e:	4c f5       	brge	.+82     	; 0x1162 <SSD_viddisplyNum+0x324>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1110:	6c 85       	ldd	r22, Y+12	; 0x0c
    1112:	7d 85       	ldd	r23, Y+13	; 0x0d
    1114:	8e 85       	ldd	r24, Y+14	; 0x0e
    1116:	9f 85       	ldd	r25, Y+15	; 0x0f
    1118:	20 e0       	ldi	r18, 0x00	; 0
    111a:	30 e0       	ldi	r19, 0x00	; 0
    111c:	40 e2       	ldi	r20, 0x20	; 32
    111e:	51 e4       	ldi	r21, 0x41	; 65
    1120:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1124:	dc 01       	movw	r26, r24
    1126:	cb 01       	movw	r24, r22
    1128:	bc 01       	movw	r22, r24
    112a:	cd 01       	movw	r24, r26
    112c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1130:	dc 01       	movw	r26, r24
    1132:	cb 01       	movw	r24, r22
    1134:	9f 83       	std	Y+7, r25	; 0x07
    1136:	8e 83       	std	Y+6, r24	; 0x06
    1138:	0f c0       	rjmp	.+30     	; 0x1158 <SSD_viddisplyNum+0x31a>
    113a:	80 e9       	ldi	r24, 0x90	; 144
    113c:	91 e0       	ldi	r25, 0x01	; 1
    113e:	9d 83       	std	Y+5, r25	; 0x05
    1140:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1142:	8c 81       	ldd	r24, Y+4	; 0x04
    1144:	9d 81       	ldd	r25, Y+5	; 0x05
    1146:	01 97       	sbiw	r24, 0x01	; 1
    1148:	f1 f7       	brne	.-4      	; 0x1146 <SSD_viddisplyNum+0x308>
    114a:	9d 83       	std	Y+5, r25	; 0x05
    114c:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    114e:	8e 81       	ldd	r24, Y+6	; 0x06
    1150:	9f 81       	ldd	r25, Y+7	; 0x07
    1152:	01 97       	sbiw	r24, 0x01	; 1
    1154:	9f 83       	std	Y+7, r25	; 0x07
    1156:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1158:	8e 81       	ldd	r24, Y+6	; 0x06
    115a:	9f 81       	ldd	r25, Y+7	; 0x07
    115c:	00 97       	sbiw	r24, 0x00	; 0
    115e:	69 f7       	brne	.-38     	; 0x113a <SSD_viddisplyNum+0x2fc>
    1160:	24 c0       	rjmp	.+72     	; 0x11aa <SSD_viddisplyNum+0x36c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1162:	68 85       	ldd	r22, Y+8	; 0x08
    1164:	79 85       	ldd	r23, Y+9	; 0x09
    1166:	8a 85       	ldd	r24, Y+10	; 0x0a
    1168:	9b 85       	ldd	r25, Y+11	; 0x0b
    116a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    116e:	dc 01       	movw	r26, r24
    1170:	cb 01       	movw	r24, r22
    1172:	9f 83       	std	Y+7, r25	; 0x07
    1174:	8e 83       	std	Y+6, r24	; 0x06
    1176:	8e 81       	ldd	r24, Y+6	; 0x06
    1178:	9f 81       	ldd	r25, Y+7	; 0x07
    117a:	9b 83       	std	Y+3, r25	; 0x03
    117c:	8a 83       	std	Y+2, r24	; 0x02
    117e:	8a 81       	ldd	r24, Y+2	; 0x02
    1180:	9b 81       	ldd	r25, Y+3	; 0x03
    1182:	01 97       	sbiw	r24, 0x01	; 1
    1184:	f1 f7       	brne	.-4      	; 0x1182 <SSD_viddisplyNum+0x344>
    1186:	9b 83       	std	Y+3, r25	; 0x03
    1188:	8a 83       	std	Y+2, r24	; 0x02
    118a:	0f c0       	rjmp	.+30     	; 0x11aa <SSD_viddisplyNum+0x36c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    118c:	69 89       	ldd	r22, Y+17	; 0x11
    118e:	7a 89       	ldd	r23, Y+18	; 0x12
    1190:	8b 89       	ldd	r24, Y+19	; 0x13
    1192:	9c 89       	ldd	r25, Y+20	; 0x14
    1194:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1198:	dc 01       	movw	r26, r24
    119a:	cb 01       	movw	r24, r22
    119c:	88 8b       	std	Y+16, r24	; 0x10
    119e:	88 89       	ldd	r24, Y+16	; 0x10
    11a0:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    11a2:	89 81       	ldd	r24, Y+1	; 0x01
    11a4:	8a 95       	dec	r24
    11a6:	f1 f7       	brne	.-4      	; 0x11a4 <SSD_viddisplyNum+0x366>
    11a8:	89 83       	std	Y+1, r24	; 0x01

	_delay_us(500);
}
    11aa:	e3 96       	adiw	r28, 0x33	; 51
    11ac:	0f b6       	in	r0, 0x3f	; 63
    11ae:	f8 94       	cli
    11b0:	de bf       	out	0x3e, r29	; 62
    11b2:	0f be       	out	0x3f, r0	; 63
    11b4:	cd bf       	out	0x3d, r28	; 61
    11b6:	cf 91       	pop	r28
    11b8:	df 91       	pop	r29
    11ba:	08 95       	ret

000011bc <SSD_viddelayWithDisplay_ms>:

void SSD_viddelayWithDisplay_ms(u8 num,u32 delay)
{
    11bc:	df 93       	push	r29
    11be:	cf 93       	push	r28
    11c0:	cd b7       	in	r28, 0x3d	; 61
    11c2:	de b7       	in	r29, 0x3e	; 62
    11c4:	29 97       	sbiw	r28, 0x09	; 9
    11c6:	0f b6       	in	r0, 0x3f	; 63
    11c8:	f8 94       	cli
    11ca:	de bf       	out	0x3e, r29	; 62
    11cc:	0f be       	out	0x3f, r0	; 63
    11ce:	cd bf       	out	0x3d, r28	; 61
    11d0:	8d 83       	std	Y+5, r24	; 0x05
    11d2:	4e 83       	std	Y+6, r20	; 0x06
    11d4:	5f 83       	std	Y+7, r21	; 0x07
    11d6:	68 87       	std	Y+8, r22	; 0x08
    11d8:	79 87       	std	Y+9, r23	; 0x09
	u32 loc_iter =0;
    11da:	19 82       	std	Y+1, r1	; 0x01
    11dc:	1a 82       	std	Y+2, r1	; 0x02
    11de:	1b 82       	std	Y+3, r1	; 0x03
    11e0:	1c 82       	std	Y+4, r1	; 0x04

	for(loc_iter=0; loc_iter<delay; loc_iter++)
    11e2:	19 82       	std	Y+1, r1	; 0x01
    11e4:	1a 82       	std	Y+2, r1	; 0x02
    11e6:	1b 82       	std	Y+3, r1	; 0x03
    11e8:	1c 82       	std	Y+4, r1	; 0x04
    11ea:	0e c0       	rjmp	.+28     	; 0x1208 <SSD_viddelayWithDisplay_ms+0x4c>
	{
		SSD_viddisplyNum(num);
    11ec:	8d 81       	ldd	r24, Y+5	; 0x05
    11ee:	0e 94 1f 07 	call	0xe3e	; 0xe3e <SSD_viddisplyNum>

void SSD_viddelayWithDisplay_ms(u8 num,u32 delay)
{
	u32 loc_iter =0;

	for(loc_iter=0; loc_iter<delay; loc_iter++)
    11f2:	89 81       	ldd	r24, Y+1	; 0x01
    11f4:	9a 81       	ldd	r25, Y+2	; 0x02
    11f6:	ab 81       	ldd	r26, Y+3	; 0x03
    11f8:	bc 81       	ldd	r27, Y+4	; 0x04
    11fa:	01 96       	adiw	r24, 0x01	; 1
    11fc:	a1 1d       	adc	r26, r1
    11fe:	b1 1d       	adc	r27, r1
    1200:	89 83       	std	Y+1, r24	; 0x01
    1202:	9a 83       	std	Y+2, r25	; 0x02
    1204:	ab 83       	std	Y+3, r26	; 0x03
    1206:	bc 83       	std	Y+4, r27	; 0x04
    1208:	29 81       	ldd	r18, Y+1	; 0x01
    120a:	3a 81       	ldd	r19, Y+2	; 0x02
    120c:	4b 81       	ldd	r20, Y+3	; 0x03
    120e:	5c 81       	ldd	r21, Y+4	; 0x04
    1210:	8e 81       	ldd	r24, Y+6	; 0x06
    1212:	9f 81       	ldd	r25, Y+7	; 0x07
    1214:	a8 85       	ldd	r26, Y+8	; 0x08
    1216:	b9 85       	ldd	r27, Y+9	; 0x09
    1218:	28 17       	cp	r18, r24
    121a:	39 07       	cpc	r19, r25
    121c:	4a 07       	cpc	r20, r26
    121e:	5b 07       	cpc	r21, r27
    1220:	28 f3       	brcs	.-54     	; 0x11ec <SSD_viddelayWithDisplay_ms+0x30>
	{
		SSD_viddisplyNum(num);
	}
}
    1222:	29 96       	adiw	r28, 0x09	; 9
    1224:	0f b6       	in	r0, 0x3f	; 63
    1226:	f8 94       	cli
    1228:	de bf       	out	0x3e, r29	; 62
    122a:	0f be       	out	0x3f, r0	; 63
    122c:	cd bf       	out	0x3d, r28	; 61
    122e:	cf 91       	pop	r28
    1230:	df 91       	pop	r29
    1232:	08 95       	ret

00001234 <Led_vidinit>:

#include "Dio.h"
#include "Led.h"

void Led_vidinit(void)
{
    1234:	df 93       	push	r29
    1236:	cf 93       	push	r28
    1238:	cd b7       	in	r28, 0x3d	; 61
    123a:	de b7       	in	r29, 0x3e	; 62
	Dio_vidconfigChanel(DIO_PORTC, DIO_PIN2,DIO_OUTPUT);
    123c:	82 e0       	ldi	r24, 0x02	; 2
    123e:	62 e0       	ldi	r22, 0x02	; 2
    1240:	41 e0       	ldi	r20, 0x01	; 1
    1242:	0e 94 df 10 	call	0x21be	; 0x21be <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTC, DIO_PIN7,DIO_OUTPUT);
    1246:	82 e0       	ldi	r24, 0x02	; 2
    1248:	67 e0       	ldi	r22, 0x07	; 7
    124a:	41 e0       	ldi	r20, 0x01	; 1
    124c:	0e 94 df 10 	call	0x21be	; 0x21be <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTD, DIO_PIN3,DIO_OUTPUT);
    1250:	83 e0       	ldi	r24, 0x03	; 3
    1252:	63 e0       	ldi	r22, 0x03	; 3
    1254:	41 e0       	ldi	r20, 0x01	; 1
    1256:	0e 94 df 10 	call	0x21be	; 0x21be <Dio_vidconfigChanel>
}
    125a:	cf 91       	pop	r28
    125c:	df 91       	pop	r29
    125e:	08 95       	ret

00001260 <Led_vidledOn>:

void Led_vidledOn(led_ledId_t ledId)
{
    1260:	df 93       	push	r29
    1262:	cf 93       	push	r28
    1264:	00 d0       	rcall	.+0      	; 0x1266 <Led_vidledOn+0x6>
    1266:	0f 92       	push	r0
    1268:	cd b7       	in	r28, 0x3d	; 61
    126a:	de b7       	in	r29, 0x3e	; 62
    126c:	89 83       	std	Y+1, r24	; 0x01
	switch (ledId)
    126e:	89 81       	ldd	r24, Y+1	; 0x01
    1270:	28 2f       	mov	r18, r24
    1272:	30 e0       	ldi	r19, 0x00	; 0
    1274:	3b 83       	std	Y+3, r19	; 0x03
    1276:	2a 83       	std	Y+2, r18	; 0x02
    1278:	8a 81       	ldd	r24, Y+2	; 0x02
    127a:	9b 81       	ldd	r25, Y+3	; 0x03
    127c:	81 30       	cpi	r24, 0x01	; 1
    127e:	91 05       	cpc	r25, r1
    1280:	79 f0       	breq	.+30     	; 0x12a0 <Led_vidledOn+0x40>
    1282:	2a 81       	ldd	r18, Y+2	; 0x02
    1284:	3b 81       	ldd	r19, Y+3	; 0x03
    1286:	22 30       	cpi	r18, 0x02	; 2
    1288:	31 05       	cpc	r19, r1
    128a:	81 f0       	breq	.+32     	; 0x12ac <Led_vidledOn+0x4c>
    128c:	8a 81       	ldd	r24, Y+2	; 0x02
    128e:	9b 81       	ldd	r25, Y+3	; 0x03
    1290:	00 97       	sbiw	r24, 0x00	; 0
    1292:	89 f4       	brne	.+34     	; 0x12b6 <Led_vidledOn+0x56>
	{
	case LED0:
		Dio_vidwriteChanel(DIO_PORTC, DIO_PIN2, DIO_HIGH);
    1294:	82 e0       	ldi	r24, 0x02	; 2
    1296:	62 e0       	ldi	r22, 0x02	; 2
    1298:	41 e0       	ldi	r20, 0x01	; 1
    129a:	0e 94 c2 11 	call	0x2384	; 0x2384 <Dio_vidwriteChanel>
    129e:	0b c0       	rjmp	.+22     	; 0x12b6 <Led_vidledOn+0x56>
		break;

	case LED1:
		Dio_vidwriteChanel(DIO_PORTC, DIO_PIN7, DIO_HIGH);
    12a0:	82 e0       	ldi	r24, 0x02	; 2
    12a2:	67 e0       	ldi	r22, 0x07	; 7
    12a4:	41 e0       	ldi	r20, 0x01	; 1
    12a6:	0e 94 c2 11 	call	0x2384	; 0x2384 <Dio_vidwriteChanel>
    12aa:	05 c0       	rjmp	.+10     	; 0x12b6 <Led_vidledOn+0x56>
		break;

	case LED2:
		Dio_vidwriteChanel(DIO_PORTD, DIO_PIN3, DIO_HIGH);
    12ac:	83 e0       	ldi	r24, 0x03	; 3
    12ae:	63 e0       	ldi	r22, 0x03	; 3
    12b0:	41 e0       	ldi	r20, 0x01	; 1
    12b2:	0e 94 c2 11 	call	0x2384	; 0x2384 <Dio_vidwriteChanel>
		break;
	}
}
    12b6:	0f 90       	pop	r0
    12b8:	0f 90       	pop	r0
    12ba:	0f 90       	pop	r0
    12bc:	cf 91       	pop	r28
    12be:	df 91       	pop	r29
    12c0:	08 95       	ret

000012c2 <Led_vidledOff>:

void Led_vidledOff(led_ledId_t ledId)
{
    12c2:	df 93       	push	r29
    12c4:	cf 93       	push	r28
    12c6:	00 d0       	rcall	.+0      	; 0x12c8 <Led_vidledOff+0x6>
    12c8:	0f 92       	push	r0
    12ca:	cd b7       	in	r28, 0x3d	; 61
    12cc:	de b7       	in	r29, 0x3e	; 62
    12ce:	89 83       	std	Y+1, r24	; 0x01
	switch (ledId)
    12d0:	89 81       	ldd	r24, Y+1	; 0x01
    12d2:	28 2f       	mov	r18, r24
    12d4:	30 e0       	ldi	r19, 0x00	; 0
    12d6:	3b 83       	std	Y+3, r19	; 0x03
    12d8:	2a 83       	std	Y+2, r18	; 0x02
    12da:	8a 81       	ldd	r24, Y+2	; 0x02
    12dc:	9b 81       	ldd	r25, Y+3	; 0x03
    12de:	81 30       	cpi	r24, 0x01	; 1
    12e0:	91 05       	cpc	r25, r1
    12e2:	79 f0       	breq	.+30     	; 0x1302 <Led_vidledOff+0x40>
    12e4:	2a 81       	ldd	r18, Y+2	; 0x02
    12e6:	3b 81       	ldd	r19, Y+3	; 0x03
    12e8:	22 30       	cpi	r18, 0x02	; 2
    12ea:	31 05       	cpc	r19, r1
    12ec:	81 f0       	breq	.+32     	; 0x130e <Led_vidledOff+0x4c>
    12ee:	8a 81       	ldd	r24, Y+2	; 0x02
    12f0:	9b 81       	ldd	r25, Y+3	; 0x03
    12f2:	00 97       	sbiw	r24, 0x00	; 0
    12f4:	89 f4       	brne	.+34     	; 0x1318 <Led_vidledOff+0x56>
	{
	case LED0:
		Dio_vidwriteChanel(DIO_PORTC, DIO_PIN2, DIO_LOW);
    12f6:	82 e0       	ldi	r24, 0x02	; 2
    12f8:	62 e0       	ldi	r22, 0x02	; 2
    12fa:	40 e0       	ldi	r20, 0x00	; 0
    12fc:	0e 94 c2 11 	call	0x2384	; 0x2384 <Dio_vidwriteChanel>
    1300:	0b c0       	rjmp	.+22     	; 0x1318 <Led_vidledOff+0x56>
		break;

	case LED1:
		Dio_vidwriteChanel(DIO_PORTC, DIO_PIN7, DIO_LOW);
    1302:	82 e0       	ldi	r24, 0x02	; 2
    1304:	67 e0       	ldi	r22, 0x07	; 7
    1306:	40 e0       	ldi	r20, 0x00	; 0
    1308:	0e 94 c2 11 	call	0x2384	; 0x2384 <Dio_vidwriteChanel>
    130c:	05 c0       	rjmp	.+10     	; 0x1318 <Led_vidledOff+0x56>
		break;

	case LED2:
		Dio_vidwriteChanel(DIO_PORTD, DIO_PIN3, DIO_LOW);
    130e:	83 e0       	ldi	r24, 0x03	; 3
    1310:	63 e0       	ldi	r22, 0x03	; 3
    1312:	40 e0       	ldi	r20, 0x00	; 0
    1314:	0e 94 c2 11 	call	0x2384	; 0x2384 <Dio_vidwriteChanel>
		break;
	}
}
    1318:	0f 90       	pop	r0
    131a:	0f 90       	pop	r0
    131c:	0f 90       	pop	r0
    131e:	cf 91       	pop	r28
    1320:	df 91       	pop	r29
    1322:	08 95       	ret

00001324 <Led_vidledToggle>:
void Led_vidledToggle(led_ledId_t ledId)
{
    1324:	df 93       	push	r29
    1326:	cf 93       	push	r28
    1328:	00 d0       	rcall	.+0      	; 0x132a <Led_vidledToggle+0x6>
    132a:	0f 92       	push	r0
    132c:	cd b7       	in	r28, 0x3d	; 61
    132e:	de b7       	in	r29, 0x3e	; 62
    1330:	89 83       	std	Y+1, r24	; 0x01
	switch (ledId)
    1332:	89 81       	ldd	r24, Y+1	; 0x01
    1334:	28 2f       	mov	r18, r24
    1336:	30 e0       	ldi	r19, 0x00	; 0
    1338:	3b 83       	std	Y+3, r19	; 0x03
    133a:	2a 83       	std	Y+2, r18	; 0x02
    133c:	8a 81       	ldd	r24, Y+2	; 0x02
    133e:	9b 81       	ldd	r25, Y+3	; 0x03
    1340:	81 30       	cpi	r24, 0x01	; 1
    1342:	91 05       	cpc	r25, r1
    1344:	71 f0       	breq	.+28     	; 0x1362 <Led_vidledToggle+0x3e>
    1346:	2a 81       	ldd	r18, Y+2	; 0x02
    1348:	3b 81       	ldd	r19, Y+3	; 0x03
    134a:	22 30       	cpi	r18, 0x02	; 2
    134c:	31 05       	cpc	r19, r1
    134e:	71 f0       	breq	.+28     	; 0x136c <Led_vidledToggle+0x48>
    1350:	8a 81       	ldd	r24, Y+2	; 0x02
    1352:	9b 81       	ldd	r25, Y+3	; 0x03
    1354:	00 97       	sbiw	r24, 0x00	; 0
    1356:	71 f4       	brne	.+28     	; 0x1374 <Led_vidledToggle+0x50>
	{
	case LED0:
		Dio_vidflipChanel(DIO_PORTC, DIO_PIN2);
    1358:	82 e0       	ldi	r24, 0x02	; 2
    135a:	62 e0       	ldi	r22, 0x02	; 2
    135c:	0e 94 94 13 	call	0x2728	; 0x2728 <Dio_vidflipChanel>
    1360:	09 c0       	rjmp	.+18     	; 0x1374 <Led_vidledToggle+0x50>
		break;

	case LED1:
		Dio_vidflipChanel(DIO_PORTC, DIO_PIN7);
    1362:	82 e0       	ldi	r24, 0x02	; 2
    1364:	67 e0       	ldi	r22, 0x07	; 7
    1366:	0e 94 94 13 	call	0x2728	; 0x2728 <Dio_vidflipChanel>
    136a:	04 c0       	rjmp	.+8      	; 0x1374 <Led_vidledToggle+0x50>
		break;

	case LED2:
		Dio_vidflipChanel(DIO_PORTD, DIO_PIN3);
    136c:	83 e0       	ldi	r24, 0x03	; 3
    136e:	63 e0       	ldi	r22, 0x03	; 3
    1370:	0e 94 94 13 	call	0x2728	; 0x2728 <Dio_vidflipChanel>
		break;
	}
}
    1374:	0f 90       	pop	r0
    1376:	0f 90       	pop	r0
    1378:	0f 90       	pop	r0
    137a:	cf 91       	pop	r28
    137c:	df 91       	pop	r29
    137e:	08 95       	ret

00001380 <Lcd_vidinit>:
#include "util/delay.h"
#include <stdio.h>


void Lcd_vidinit(void)
{
    1380:	df 93       	push	r29
    1382:	cf 93       	push	r28
    1384:	cd b7       	in	r28, 0x3d	; 61
    1386:	de b7       	in	r29, 0x3e	; 62
    1388:	e4 97       	sbiw	r28, 0x34	; 52
    138a:	0f b6       	in	r0, 0x3f	; 63
    138c:	f8 94       	cli
    138e:	de bf       	out	0x3e, r29	; 62
    1390:	0f be       	out	0x3f, r0	; 63
    1392:	cd bf       	out	0x3d, r28	; 61
	/*	configure control pins as output	*/
	Dio_vidconfigChanel(DIO_PORTB, DIO_PIN1, DIO_OUTPUT);
    1394:	81 e0       	ldi	r24, 0x01	; 1
    1396:	61 e0       	ldi	r22, 0x01	; 1
    1398:	41 e0       	ldi	r20, 0x01	; 1
    139a:	0e 94 df 10 	call	0x21be	; 0x21be <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTB, DIO_PIN2, DIO_OUTPUT);
    139e:	81 e0       	ldi	r24, 0x01	; 1
    13a0:	62 e0       	ldi	r22, 0x02	; 2
    13a2:	41 e0       	ldi	r20, 0x01	; 1
    13a4:	0e 94 df 10 	call	0x21be	; 0x21be <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTB, DIO_PIN3, DIO_OUTPUT);
    13a8:	81 e0       	ldi	r24, 0x01	; 1
    13aa:	63 e0       	ldi	r22, 0x03	; 3
    13ac:	41 e0       	ldi	r20, 0x01	; 1
    13ae:	0e 94 df 10 	call	0x21be	; 0x21be <Dio_vidconfigChanel>

	/*	configure data pins as output	*/
	Dio_vidconfigChanel(DIO_PORTA, DIO_PIN4, DIO_OUTPUT);
    13b2:	80 e0       	ldi	r24, 0x00	; 0
    13b4:	64 e0       	ldi	r22, 0x04	; 4
    13b6:	41 e0       	ldi	r20, 0x01	; 1
    13b8:	0e 94 df 10 	call	0x21be	; 0x21be <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTA, DIO_PIN5, DIO_OUTPUT);
    13bc:	80 e0       	ldi	r24, 0x00	; 0
    13be:	65 e0       	ldi	r22, 0x05	; 5
    13c0:	41 e0       	ldi	r20, 0x01	; 1
    13c2:	0e 94 df 10 	call	0x21be	; 0x21be <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTA, DIO_PIN6, DIO_OUTPUT);
    13c6:	80 e0       	ldi	r24, 0x00	; 0
    13c8:	66 e0       	ldi	r22, 0x06	; 6
    13ca:	41 e0       	ldi	r20, 0x01	; 1
    13cc:	0e 94 df 10 	call	0x21be	; 0x21be <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTA, DIO_PIN7, DIO_OUTPUT);
    13d0:	80 e0       	ldi	r24, 0x00	; 0
    13d2:	67 e0       	ldi	r22, 0x07	; 7
    13d4:	41 e0       	ldi	r20, 0x01	; 1
    13d6:	0e 94 df 10 	call	0x21be	; 0x21be <Dio_vidconfigChanel>

	Dio_vidwriteChanel(DIO_PORTB, DIO_PIN2, DIO_LOW);
    13da:	81 e0       	ldi	r24, 0x01	; 1
    13dc:	62 e0       	ldi	r22, 0x02	; 2
    13de:	40 e0       	ldi	r20, 0x00	; 0
    13e0:	0e 94 c2 11 	call	0x2384	; 0x2384 <Dio_vidwriteChanel>
    13e4:	80 e0       	ldi	r24, 0x00	; 0
    13e6:	90 e0       	ldi	r25, 0x00	; 0
    13e8:	a0 e7       	ldi	r26, 0x70	; 112
    13ea:	b1 e4       	ldi	r27, 0x41	; 65
    13ec:	89 ab       	std	Y+49, r24	; 0x31
    13ee:	9a ab       	std	Y+50, r25	; 0x32
    13f0:	ab ab       	std	Y+51, r26	; 0x33
    13f2:	bc ab       	std	Y+52, r27	; 0x34
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13f4:	69 a9       	ldd	r22, Y+49	; 0x31
    13f6:	7a a9       	ldd	r23, Y+50	; 0x32
    13f8:	8b a9       	ldd	r24, Y+51	; 0x33
    13fa:	9c a9       	ldd	r25, Y+52	; 0x34
    13fc:	20 e0       	ldi	r18, 0x00	; 0
    13fe:	30 e0       	ldi	r19, 0x00	; 0
    1400:	4a e7       	ldi	r20, 0x7A	; 122
    1402:	55 e4       	ldi	r21, 0x45	; 69
    1404:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1408:	dc 01       	movw	r26, r24
    140a:	cb 01       	movw	r24, r22
    140c:	8d a7       	std	Y+45, r24	; 0x2d
    140e:	9e a7       	std	Y+46, r25	; 0x2e
    1410:	af a7       	std	Y+47, r26	; 0x2f
    1412:	b8 ab       	std	Y+48, r27	; 0x30
	if (__tmp < 1.0)
    1414:	6d a5       	ldd	r22, Y+45	; 0x2d
    1416:	7e a5       	ldd	r23, Y+46	; 0x2e
    1418:	8f a5       	ldd	r24, Y+47	; 0x2f
    141a:	98 a9       	ldd	r25, Y+48	; 0x30
    141c:	20 e0       	ldi	r18, 0x00	; 0
    141e:	30 e0       	ldi	r19, 0x00	; 0
    1420:	40 e8       	ldi	r20, 0x80	; 128
    1422:	5f e3       	ldi	r21, 0x3F	; 63
    1424:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1428:	88 23       	and	r24, r24
    142a:	2c f4       	brge	.+10     	; 0x1436 <Lcd_vidinit+0xb6>
		__ticks = 1;
    142c:	81 e0       	ldi	r24, 0x01	; 1
    142e:	90 e0       	ldi	r25, 0x00	; 0
    1430:	9c a7       	std	Y+44, r25	; 0x2c
    1432:	8b a7       	std	Y+43, r24	; 0x2b
    1434:	3f c0       	rjmp	.+126    	; 0x14b4 <Lcd_vidinit+0x134>
	else if (__tmp > 65535)
    1436:	6d a5       	ldd	r22, Y+45	; 0x2d
    1438:	7e a5       	ldd	r23, Y+46	; 0x2e
    143a:	8f a5       	ldd	r24, Y+47	; 0x2f
    143c:	98 a9       	ldd	r25, Y+48	; 0x30
    143e:	20 e0       	ldi	r18, 0x00	; 0
    1440:	3f ef       	ldi	r19, 0xFF	; 255
    1442:	4f e7       	ldi	r20, 0x7F	; 127
    1444:	57 e4       	ldi	r21, 0x47	; 71
    1446:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    144a:	18 16       	cp	r1, r24
    144c:	4c f5       	brge	.+82     	; 0x14a0 <Lcd_vidinit+0x120>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    144e:	69 a9       	ldd	r22, Y+49	; 0x31
    1450:	7a a9       	ldd	r23, Y+50	; 0x32
    1452:	8b a9       	ldd	r24, Y+51	; 0x33
    1454:	9c a9       	ldd	r25, Y+52	; 0x34
    1456:	20 e0       	ldi	r18, 0x00	; 0
    1458:	30 e0       	ldi	r19, 0x00	; 0
    145a:	40 e2       	ldi	r20, 0x20	; 32
    145c:	51 e4       	ldi	r21, 0x41	; 65
    145e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1462:	dc 01       	movw	r26, r24
    1464:	cb 01       	movw	r24, r22
    1466:	bc 01       	movw	r22, r24
    1468:	cd 01       	movw	r24, r26
    146a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    146e:	dc 01       	movw	r26, r24
    1470:	cb 01       	movw	r24, r22
    1472:	9c a7       	std	Y+44, r25	; 0x2c
    1474:	8b a7       	std	Y+43, r24	; 0x2b
    1476:	0f c0       	rjmp	.+30     	; 0x1496 <Lcd_vidinit+0x116>
    1478:	80 e9       	ldi	r24, 0x90	; 144
    147a:	91 e0       	ldi	r25, 0x01	; 1
    147c:	9a a7       	std	Y+42, r25	; 0x2a
    147e:	89 a7       	std	Y+41, r24	; 0x29
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1480:	89 a5       	ldd	r24, Y+41	; 0x29
    1482:	9a a5       	ldd	r25, Y+42	; 0x2a
    1484:	01 97       	sbiw	r24, 0x01	; 1
    1486:	f1 f7       	brne	.-4      	; 0x1484 <Lcd_vidinit+0x104>
    1488:	9a a7       	std	Y+42, r25	; 0x2a
    148a:	89 a7       	std	Y+41, r24	; 0x29
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    148c:	8b a5       	ldd	r24, Y+43	; 0x2b
    148e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1490:	01 97       	sbiw	r24, 0x01	; 1
    1492:	9c a7       	std	Y+44, r25	; 0x2c
    1494:	8b a7       	std	Y+43, r24	; 0x2b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1496:	8b a5       	ldd	r24, Y+43	; 0x2b
    1498:	9c a5       	ldd	r25, Y+44	; 0x2c
    149a:	00 97       	sbiw	r24, 0x00	; 0
    149c:	69 f7       	brne	.-38     	; 0x1478 <Lcd_vidinit+0xf8>
    149e:	14 c0       	rjmp	.+40     	; 0x14c8 <Lcd_vidinit+0x148>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14a0:	6d a5       	ldd	r22, Y+45	; 0x2d
    14a2:	7e a5       	ldd	r23, Y+46	; 0x2e
    14a4:	8f a5       	ldd	r24, Y+47	; 0x2f
    14a6:	98 a9       	ldd	r25, Y+48	; 0x30
    14a8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    14ac:	dc 01       	movw	r26, r24
    14ae:	cb 01       	movw	r24, r22
    14b0:	9c a7       	std	Y+44, r25	; 0x2c
    14b2:	8b a7       	std	Y+43, r24	; 0x2b
    14b4:	8b a5       	ldd	r24, Y+43	; 0x2b
    14b6:	9c a5       	ldd	r25, Y+44	; 0x2c
    14b8:	98 a7       	std	Y+40, r25	; 0x28
    14ba:	8f a3       	std	Y+39, r24	; 0x27
    14bc:	8f a1       	ldd	r24, Y+39	; 0x27
    14be:	98 a5       	ldd	r25, Y+40	; 0x28
    14c0:	01 97       	sbiw	r24, 0x01	; 1
    14c2:	f1 f7       	brne	.-4      	; 0x14c0 <Lcd_vidinit+0x140>
    14c4:	98 a7       	std	Y+40, r25	; 0x28
    14c6:	8f a3       	std	Y+39, r24	; 0x27

	_delay_ms(15);

	Lcd_vidCmd(0x03);
    14c8:	83 e0       	ldi	r24, 0x03	; 3
    14ca:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <Lcd_vidCmd>
    14ce:	80 e0       	ldi	r24, 0x00	; 0
    14d0:	90 e0       	ldi	r25, 0x00	; 0
    14d2:	a0 ea       	ldi	r26, 0xA0	; 160
    14d4:	b0 e4       	ldi	r27, 0x40	; 64
    14d6:	8b a3       	std	Y+35, r24	; 0x23
    14d8:	9c a3       	std	Y+36, r25	; 0x24
    14da:	ad a3       	std	Y+37, r26	; 0x25
    14dc:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14de:	6b a1       	ldd	r22, Y+35	; 0x23
    14e0:	7c a1       	ldd	r23, Y+36	; 0x24
    14e2:	8d a1       	ldd	r24, Y+37	; 0x25
    14e4:	9e a1       	ldd	r25, Y+38	; 0x26
    14e6:	20 e0       	ldi	r18, 0x00	; 0
    14e8:	30 e0       	ldi	r19, 0x00	; 0
    14ea:	4a e7       	ldi	r20, 0x7A	; 122
    14ec:	55 e4       	ldi	r21, 0x45	; 69
    14ee:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    14f2:	dc 01       	movw	r26, r24
    14f4:	cb 01       	movw	r24, r22
    14f6:	8f 8f       	std	Y+31, r24	; 0x1f
    14f8:	98 a3       	std	Y+32, r25	; 0x20
    14fa:	a9 a3       	std	Y+33, r26	; 0x21
    14fc:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    14fe:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1500:	78 a1       	ldd	r23, Y+32	; 0x20
    1502:	89 a1       	ldd	r24, Y+33	; 0x21
    1504:	9a a1       	ldd	r25, Y+34	; 0x22
    1506:	20 e0       	ldi	r18, 0x00	; 0
    1508:	30 e0       	ldi	r19, 0x00	; 0
    150a:	40 e8       	ldi	r20, 0x80	; 128
    150c:	5f e3       	ldi	r21, 0x3F	; 63
    150e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1512:	88 23       	and	r24, r24
    1514:	2c f4       	brge	.+10     	; 0x1520 <Lcd_vidinit+0x1a0>
		__ticks = 1;
    1516:	81 e0       	ldi	r24, 0x01	; 1
    1518:	90 e0       	ldi	r25, 0x00	; 0
    151a:	9e 8f       	std	Y+30, r25	; 0x1e
    151c:	8d 8f       	std	Y+29, r24	; 0x1d
    151e:	3f c0       	rjmp	.+126    	; 0x159e <Lcd_vidinit+0x21e>
	else if (__tmp > 65535)
    1520:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1522:	78 a1       	ldd	r23, Y+32	; 0x20
    1524:	89 a1       	ldd	r24, Y+33	; 0x21
    1526:	9a a1       	ldd	r25, Y+34	; 0x22
    1528:	20 e0       	ldi	r18, 0x00	; 0
    152a:	3f ef       	ldi	r19, 0xFF	; 255
    152c:	4f e7       	ldi	r20, 0x7F	; 127
    152e:	57 e4       	ldi	r21, 0x47	; 71
    1530:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1534:	18 16       	cp	r1, r24
    1536:	4c f5       	brge	.+82     	; 0x158a <Lcd_vidinit+0x20a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1538:	6b a1       	ldd	r22, Y+35	; 0x23
    153a:	7c a1       	ldd	r23, Y+36	; 0x24
    153c:	8d a1       	ldd	r24, Y+37	; 0x25
    153e:	9e a1       	ldd	r25, Y+38	; 0x26
    1540:	20 e0       	ldi	r18, 0x00	; 0
    1542:	30 e0       	ldi	r19, 0x00	; 0
    1544:	40 e2       	ldi	r20, 0x20	; 32
    1546:	51 e4       	ldi	r21, 0x41	; 65
    1548:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    154c:	dc 01       	movw	r26, r24
    154e:	cb 01       	movw	r24, r22
    1550:	bc 01       	movw	r22, r24
    1552:	cd 01       	movw	r24, r26
    1554:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1558:	dc 01       	movw	r26, r24
    155a:	cb 01       	movw	r24, r22
    155c:	9e 8f       	std	Y+30, r25	; 0x1e
    155e:	8d 8f       	std	Y+29, r24	; 0x1d
    1560:	0f c0       	rjmp	.+30     	; 0x1580 <Lcd_vidinit+0x200>
    1562:	80 e9       	ldi	r24, 0x90	; 144
    1564:	91 e0       	ldi	r25, 0x01	; 1
    1566:	9c 8f       	std	Y+28, r25	; 0x1c
    1568:	8b 8f       	std	Y+27, r24	; 0x1b
    156a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    156c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    156e:	01 97       	sbiw	r24, 0x01	; 1
    1570:	f1 f7       	brne	.-4      	; 0x156e <Lcd_vidinit+0x1ee>
    1572:	9c 8f       	std	Y+28, r25	; 0x1c
    1574:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1576:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1578:	9e 8d       	ldd	r25, Y+30	; 0x1e
    157a:	01 97       	sbiw	r24, 0x01	; 1
    157c:	9e 8f       	std	Y+30, r25	; 0x1e
    157e:	8d 8f       	std	Y+29, r24	; 0x1d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1580:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1582:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1584:	00 97       	sbiw	r24, 0x00	; 0
    1586:	69 f7       	brne	.-38     	; 0x1562 <Lcd_vidinit+0x1e2>
    1588:	14 c0       	rjmp	.+40     	; 0x15b2 <Lcd_vidinit+0x232>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    158a:	6f 8d       	ldd	r22, Y+31	; 0x1f
    158c:	78 a1       	ldd	r23, Y+32	; 0x20
    158e:	89 a1       	ldd	r24, Y+33	; 0x21
    1590:	9a a1       	ldd	r25, Y+34	; 0x22
    1592:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1596:	dc 01       	movw	r26, r24
    1598:	cb 01       	movw	r24, r22
    159a:	9e 8f       	std	Y+30, r25	; 0x1e
    159c:	8d 8f       	std	Y+29, r24	; 0x1d
    159e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    15a0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    15a2:	9a 8f       	std	Y+26, r25	; 0x1a
    15a4:	89 8f       	std	Y+25, r24	; 0x19
    15a6:	89 8d       	ldd	r24, Y+25	; 0x19
    15a8:	9a 8d       	ldd	r25, Y+26	; 0x1a
    15aa:	01 97       	sbiw	r24, 0x01	; 1
    15ac:	f1 f7       	brne	.-4      	; 0x15aa <Lcd_vidinit+0x22a>
    15ae:	9a 8f       	std	Y+26, r25	; 0x1a
    15b0:	89 8f       	std	Y+25, r24	; 0x19
	_delay_ms(5);
	Lcd_vidCmd(0x03);
    15b2:	83 e0       	ldi	r24, 0x03	; 3
    15b4:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <Lcd_vidCmd>
    15b8:	80 e0       	ldi	r24, 0x00	; 0
    15ba:	90 e0       	ldi	r25, 0x00	; 0
    15bc:	a8 ec       	ldi	r26, 0xC8	; 200
    15be:	b2 e4       	ldi	r27, 0x42	; 66
    15c0:	8d 8b       	std	Y+21, r24	; 0x15
    15c2:	9e 8b       	std	Y+22, r25	; 0x16
    15c4:	af 8b       	std	Y+23, r26	; 0x17
    15c6:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    15c8:	6d 89       	ldd	r22, Y+21	; 0x15
    15ca:	7e 89       	ldd	r23, Y+22	; 0x16
    15cc:	8f 89       	ldd	r24, Y+23	; 0x17
    15ce:	98 8d       	ldd	r25, Y+24	; 0x18
    15d0:	2b ea       	ldi	r18, 0xAB	; 171
    15d2:	3a ea       	ldi	r19, 0xAA	; 170
    15d4:	4a ea       	ldi	r20, 0xAA	; 170
    15d6:	50 e4       	ldi	r21, 0x40	; 64
    15d8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15dc:	dc 01       	movw	r26, r24
    15de:	cb 01       	movw	r24, r22
    15e0:	89 8b       	std	Y+17, r24	; 0x11
    15e2:	9a 8b       	std	Y+18, r25	; 0x12
    15e4:	ab 8b       	std	Y+19, r26	; 0x13
    15e6:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    15e8:	69 89       	ldd	r22, Y+17	; 0x11
    15ea:	7a 89       	ldd	r23, Y+18	; 0x12
    15ec:	8b 89       	ldd	r24, Y+19	; 0x13
    15ee:	9c 89       	ldd	r25, Y+20	; 0x14
    15f0:	20 e0       	ldi	r18, 0x00	; 0
    15f2:	30 e0       	ldi	r19, 0x00	; 0
    15f4:	40 e8       	ldi	r20, 0x80	; 128
    15f6:	5f e3       	ldi	r21, 0x3F	; 63
    15f8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    15fc:	88 23       	and	r24, r24
    15fe:	1c f4       	brge	.+6      	; 0x1606 <Lcd_vidinit+0x286>
		__ticks = 1;
    1600:	81 e0       	ldi	r24, 0x01	; 1
    1602:	88 8b       	std	Y+16, r24	; 0x10
    1604:	91 c0       	rjmp	.+290    	; 0x1728 <Lcd_vidinit+0x3a8>
	else if (__tmp > 255)
    1606:	69 89       	ldd	r22, Y+17	; 0x11
    1608:	7a 89       	ldd	r23, Y+18	; 0x12
    160a:	8b 89       	ldd	r24, Y+19	; 0x13
    160c:	9c 89       	ldd	r25, Y+20	; 0x14
    160e:	20 e0       	ldi	r18, 0x00	; 0
    1610:	30 e0       	ldi	r19, 0x00	; 0
    1612:	4f e7       	ldi	r20, 0x7F	; 127
    1614:	53 e4       	ldi	r21, 0x43	; 67
    1616:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    161a:	18 16       	cp	r1, r24
    161c:	0c f0       	brlt	.+2      	; 0x1620 <Lcd_vidinit+0x2a0>
    161e:	7b c0       	rjmp	.+246    	; 0x1716 <Lcd_vidinit+0x396>
	{
		_delay_ms(__us / 1000.0);
    1620:	6d 89       	ldd	r22, Y+21	; 0x15
    1622:	7e 89       	ldd	r23, Y+22	; 0x16
    1624:	8f 89       	ldd	r24, Y+23	; 0x17
    1626:	98 8d       	ldd	r25, Y+24	; 0x18
    1628:	20 e0       	ldi	r18, 0x00	; 0
    162a:	30 e0       	ldi	r19, 0x00	; 0
    162c:	4a e7       	ldi	r20, 0x7A	; 122
    162e:	54 e4       	ldi	r21, 0x44	; 68
    1630:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1634:	dc 01       	movw	r26, r24
    1636:	cb 01       	movw	r24, r22
    1638:	8c 87       	std	Y+12, r24	; 0x0c
    163a:	9d 87       	std	Y+13, r25	; 0x0d
    163c:	ae 87       	std	Y+14, r26	; 0x0e
    163e:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1640:	6c 85       	ldd	r22, Y+12	; 0x0c
    1642:	7d 85       	ldd	r23, Y+13	; 0x0d
    1644:	8e 85       	ldd	r24, Y+14	; 0x0e
    1646:	9f 85       	ldd	r25, Y+15	; 0x0f
    1648:	20 e0       	ldi	r18, 0x00	; 0
    164a:	30 e0       	ldi	r19, 0x00	; 0
    164c:	4a e7       	ldi	r20, 0x7A	; 122
    164e:	55 e4       	ldi	r21, 0x45	; 69
    1650:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1654:	dc 01       	movw	r26, r24
    1656:	cb 01       	movw	r24, r22
    1658:	88 87       	std	Y+8, r24	; 0x08
    165a:	99 87       	std	Y+9, r25	; 0x09
    165c:	aa 87       	std	Y+10, r26	; 0x0a
    165e:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1660:	68 85       	ldd	r22, Y+8	; 0x08
    1662:	79 85       	ldd	r23, Y+9	; 0x09
    1664:	8a 85       	ldd	r24, Y+10	; 0x0a
    1666:	9b 85       	ldd	r25, Y+11	; 0x0b
    1668:	20 e0       	ldi	r18, 0x00	; 0
    166a:	30 e0       	ldi	r19, 0x00	; 0
    166c:	40 e8       	ldi	r20, 0x80	; 128
    166e:	5f e3       	ldi	r21, 0x3F	; 63
    1670:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1674:	88 23       	and	r24, r24
    1676:	2c f4       	brge	.+10     	; 0x1682 <Lcd_vidinit+0x302>
		__ticks = 1;
    1678:	81 e0       	ldi	r24, 0x01	; 1
    167a:	90 e0       	ldi	r25, 0x00	; 0
    167c:	9f 83       	std	Y+7, r25	; 0x07
    167e:	8e 83       	std	Y+6, r24	; 0x06
    1680:	3f c0       	rjmp	.+126    	; 0x1700 <Lcd_vidinit+0x380>
	else if (__tmp > 65535)
    1682:	68 85       	ldd	r22, Y+8	; 0x08
    1684:	79 85       	ldd	r23, Y+9	; 0x09
    1686:	8a 85       	ldd	r24, Y+10	; 0x0a
    1688:	9b 85       	ldd	r25, Y+11	; 0x0b
    168a:	20 e0       	ldi	r18, 0x00	; 0
    168c:	3f ef       	ldi	r19, 0xFF	; 255
    168e:	4f e7       	ldi	r20, 0x7F	; 127
    1690:	57 e4       	ldi	r21, 0x47	; 71
    1692:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1696:	18 16       	cp	r1, r24
    1698:	4c f5       	brge	.+82     	; 0x16ec <Lcd_vidinit+0x36c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    169a:	6c 85       	ldd	r22, Y+12	; 0x0c
    169c:	7d 85       	ldd	r23, Y+13	; 0x0d
    169e:	8e 85       	ldd	r24, Y+14	; 0x0e
    16a0:	9f 85       	ldd	r25, Y+15	; 0x0f
    16a2:	20 e0       	ldi	r18, 0x00	; 0
    16a4:	30 e0       	ldi	r19, 0x00	; 0
    16a6:	40 e2       	ldi	r20, 0x20	; 32
    16a8:	51 e4       	ldi	r21, 0x41	; 65
    16aa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16ae:	dc 01       	movw	r26, r24
    16b0:	cb 01       	movw	r24, r22
    16b2:	bc 01       	movw	r22, r24
    16b4:	cd 01       	movw	r24, r26
    16b6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16ba:	dc 01       	movw	r26, r24
    16bc:	cb 01       	movw	r24, r22
    16be:	9f 83       	std	Y+7, r25	; 0x07
    16c0:	8e 83       	std	Y+6, r24	; 0x06
    16c2:	0f c0       	rjmp	.+30     	; 0x16e2 <Lcd_vidinit+0x362>
    16c4:	80 e9       	ldi	r24, 0x90	; 144
    16c6:	91 e0       	ldi	r25, 0x01	; 1
    16c8:	9d 83       	std	Y+5, r25	; 0x05
    16ca:	8c 83       	std	Y+4, r24	; 0x04
    16cc:	8c 81       	ldd	r24, Y+4	; 0x04
    16ce:	9d 81       	ldd	r25, Y+5	; 0x05
    16d0:	01 97       	sbiw	r24, 0x01	; 1
    16d2:	f1 f7       	brne	.-4      	; 0x16d0 <Lcd_vidinit+0x350>
    16d4:	9d 83       	std	Y+5, r25	; 0x05
    16d6:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16d8:	8e 81       	ldd	r24, Y+6	; 0x06
    16da:	9f 81       	ldd	r25, Y+7	; 0x07
    16dc:	01 97       	sbiw	r24, 0x01	; 1
    16de:	9f 83       	std	Y+7, r25	; 0x07
    16e0:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16e2:	8e 81       	ldd	r24, Y+6	; 0x06
    16e4:	9f 81       	ldd	r25, Y+7	; 0x07
    16e6:	00 97       	sbiw	r24, 0x00	; 0
    16e8:	69 f7       	brne	.-38     	; 0x16c4 <Lcd_vidinit+0x344>
    16ea:	24 c0       	rjmp	.+72     	; 0x1734 <Lcd_vidinit+0x3b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16ec:	68 85       	ldd	r22, Y+8	; 0x08
    16ee:	79 85       	ldd	r23, Y+9	; 0x09
    16f0:	8a 85       	ldd	r24, Y+10	; 0x0a
    16f2:	9b 85       	ldd	r25, Y+11	; 0x0b
    16f4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16f8:	dc 01       	movw	r26, r24
    16fa:	cb 01       	movw	r24, r22
    16fc:	9f 83       	std	Y+7, r25	; 0x07
    16fe:	8e 83       	std	Y+6, r24	; 0x06
    1700:	8e 81       	ldd	r24, Y+6	; 0x06
    1702:	9f 81       	ldd	r25, Y+7	; 0x07
    1704:	9b 83       	std	Y+3, r25	; 0x03
    1706:	8a 83       	std	Y+2, r24	; 0x02
    1708:	8a 81       	ldd	r24, Y+2	; 0x02
    170a:	9b 81       	ldd	r25, Y+3	; 0x03
    170c:	01 97       	sbiw	r24, 0x01	; 1
    170e:	f1 f7       	brne	.-4      	; 0x170c <Lcd_vidinit+0x38c>
    1710:	9b 83       	std	Y+3, r25	; 0x03
    1712:	8a 83       	std	Y+2, r24	; 0x02
    1714:	0f c0       	rjmp	.+30     	; 0x1734 <Lcd_vidinit+0x3b4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1716:	69 89       	ldd	r22, Y+17	; 0x11
    1718:	7a 89       	ldd	r23, Y+18	; 0x12
    171a:	8b 89       	ldd	r24, Y+19	; 0x13
    171c:	9c 89       	ldd	r25, Y+20	; 0x14
    171e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1722:	dc 01       	movw	r26, r24
    1724:	cb 01       	movw	r24, r22
    1726:	88 8b       	std	Y+16, r24	; 0x10
    1728:	88 89       	ldd	r24, Y+16	; 0x10
    172a:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    172c:	89 81       	ldd	r24, Y+1	; 0x01
    172e:	8a 95       	dec	r24
    1730:	f1 f7       	brne	.-4      	; 0x172e <Lcd_vidinit+0x3ae>
    1732:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(100);
	Lcd_vidCmd(0x03);
    1734:	83 e0       	ldi	r24, 0x03	; 3
    1736:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <Lcd_vidCmd>
	Lcd_vidCmd(0x02);
    173a:	82 e0       	ldi	r24, 0x02	; 2
    173c:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <Lcd_vidCmd>
	Lcd_vidCmd(_LCD_4BIT_MODE);
    1740:	88 e2       	ldi	r24, 0x28	; 40
    1742:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <Lcd_vidCmd>
}
    1746:	e4 96       	adiw	r28, 0x34	; 52
    1748:	0f b6       	in	r0, 0x3f	; 63
    174a:	f8 94       	cli
    174c:	de bf       	out	0x3e, r29	; 62
    174e:	0f be       	out	0x3f, r0	; 63
    1750:	cd bf       	out	0x3d, r28	; 61
    1752:	cf 91       	pop	r28
    1754:	df 91       	pop	r29
    1756:	08 95       	ret

00001758 <Lcd_videnablePulse>:

static void Lcd_videnablePulse(void)
{
    1758:	df 93       	push	r29
    175a:	cf 93       	push	r28
    175c:	cd b7       	in	r28, 0x3d	; 61
    175e:	de b7       	in	r29, 0x3e	; 62
    1760:	a6 97       	sbiw	r28, 0x26	; 38
    1762:	0f b6       	in	r0, 0x3f	; 63
    1764:	f8 94       	cli
    1766:	de bf       	out	0x3e, r29	; 62
    1768:	0f be       	out	0x3f, r0	; 63
    176a:	cd bf       	out	0x3d, r28	; 61
	//send Enable pulse
	Dio_vidwriteChanel(DIO_PORTB, DIO_PIN3, DIO_HIGH);
    176c:	81 e0       	ldi	r24, 0x01	; 1
    176e:	63 e0       	ldi	r22, 0x03	; 3
    1770:	41 e0       	ldi	r20, 0x01	; 1
    1772:	0e 94 c2 11 	call	0x2384	; 0x2384 <Dio_vidwriteChanel>
    1776:	80 e0       	ldi	r24, 0x00	; 0
    1778:	90 e0       	ldi	r25, 0x00	; 0
    177a:	a0 e8       	ldi	r26, 0x80	; 128
    177c:	bf e3       	ldi	r27, 0x3F	; 63
    177e:	8b a3       	std	Y+35, r24	; 0x23
    1780:	9c a3       	std	Y+36, r25	; 0x24
    1782:	ad a3       	std	Y+37, r26	; 0x25
    1784:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1786:	6b a1       	ldd	r22, Y+35	; 0x23
    1788:	7c a1       	ldd	r23, Y+36	; 0x24
    178a:	8d a1       	ldd	r24, Y+37	; 0x25
    178c:	9e a1       	ldd	r25, Y+38	; 0x26
    178e:	2b ea       	ldi	r18, 0xAB	; 171
    1790:	3a ea       	ldi	r19, 0xAA	; 170
    1792:	4a ea       	ldi	r20, 0xAA	; 170
    1794:	50 e4       	ldi	r21, 0x40	; 64
    1796:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    179a:	dc 01       	movw	r26, r24
    179c:	cb 01       	movw	r24, r22
    179e:	8f 8f       	std	Y+31, r24	; 0x1f
    17a0:	98 a3       	std	Y+32, r25	; 0x20
    17a2:	a9 a3       	std	Y+33, r26	; 0x21
    17a4:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    17a6:	6f 8d       	ldd	r22, Y+31	; 0x1f
    17a8:	78 a1       	ldd	r23, Y+32	; 0x20
    17aa:	89 a1       	ldd	r24, Y+33	; 0x21
    17ac:	9a a1       	ldd	r25, Y+34	; 0x22
    17ae:	20 e0       	ldi	r18, 0x00	; 0
    17b0:	30 e0       	ldi	r19, 0x00	; 0
    17b2:	40 e8       	ldi	r20, 0x80	; 128
    17b4:	5f e3       	ldi	r21, 0x3F	; 63
    17b6:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    17ba:	88 23       	and	r24, r24
    17bc:	1c f4       	brge	.+6      	; 0x17c4 <Lcd_videnablePulse+0x6c>
		__ticks = 1;
    17be:	81 e0       	ldi	r24, 0x01	; 1
    17c0:	8e 8f       	std	Y+30, r24	; 0x1e
    17c2:	91 c0       	rjmp	.+290    	; 0x18e6 <Lcd_videnablePulse+0x18e>
	else if (__tmp > 255)
    17c4:	6f 8d       	ldd	r22, Y+31	; 0x1f
    17c6:	78 a1       	ldd	r23, Y+32	; 0x20
    17c8:	89 a1       	ldd	r24, Y+33	; 0x21
    17ca:	9a a1       	ldd	r25, Y+34	; 0x22
    17cc:	20 e0       	ldi	r18, 0x00	; 0
    17ce:	30 e0       	ldi	r19, 0x00	; 0
    17d0:	4f e7       	ldi	r20, 0x7F	; 127
    17d2:	53 e4       	ldi	r21, 0x43	; 67
    17d4:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    17d8:	18 16       	cp	r1, r24
    17da:	0c f0       	brlt	.+2      	; 0x17de <Lcd_videnablePulse+0x86>
    17dc:	7b c0       	rjmp	.+246    	; 0x18d4 <Lcd_videnablePulse+0x17c>
	{
		_delay_ms(__us / 1000.0);
    17de:	6b a1       	ldd	r22, Y+35	; 0x23
    17e0:	7c a1       	ldd	r23, Y+36	; 0x24
    17e2:	8d a1       	ldd	r24, Y+37	; 0x25
    17e4:	9e a1       	ldd	r25, Y+38	; 0x26
    17e6:	20 e0       	ldi	r18, 0x00	; 0
    17e8:	30 e0       	ldi	r19, 0x00	; 0
    17ea:	4a e7       	ldi	r20, 0x7A	; 122
    17ec:	54 e4       	ldi	r21, 0x44	; 68
    17ee:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    17f2:	dc 01       	movw	r26, r24
    17f4:	cb 01       	movw	r24, r22
    17f6:	8a 8f       	std	Y+26, r24	; 0x1a
    17f8:	9b 8f       	std	Y+27, r25	; 0x1b
    17fa:	ac 8f       	std	Y+28, r26	; 0x1c
    17fc:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17fe:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1800:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1802:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1804:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1806:	20 e0       	ldi	r18, 0x00	; 0
    1808:	30 e0       	ldi	r19, 0x00	; 0
    180a:	4a e7       	ldi	r20, 0x7A	; 122
    180c:	55 e4       	ldi	r21, 0x45	; 69
    180e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1812:	dc 01       	movw	r26, r24
    1814:	cb 01       	movw	r24, r22
    1816:	8e 8b       	std	Y+22, r24	; 0x16
    1818:	9f 8b       	std	Y+23, r25	; 0x17
    181a:	a8 8f       	std	Y+24, r26	; 0x18
    181c:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    181e:	6e 89       	ldd	r22, Y+22	; 0x16
    1820:	7f 89       	ldd	r23, Y+23	; 0x17
    1822:	88 8d       	ldd	r24, Y+24	; 0x18
    1824:	99 8d       	ldd	r25, Y+25	; 0x19
    1826:	20 e0       	ldi	r18, 0x00	; 0
    1828:	30 e0       	ldi	r19, 0x00	; 0
    182a:	40 e8       	ldi	r20, 0x80	; 128
    182c:	5f e3       	ldi	r21, 0x3F	; 63
    182e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1832:	88 23       	and	r24, r24
    1834:	2c f4       	brge	.+10     	; 0x1840 <Lcd_videnablePulse+0xe8>
		__ticks = 1;
    1836:	81 e0       	ldi	r24, 0x01	; 1
    1838:	90 e0       	ldi	r25, 0x00	; 0
    183a:	9d 8b       	std	Y+21, r25	; 0x15
    183c:	8c 8b       	std	Y+20, r24	; 0x14
    183e:	3f c0       	rjmp	.+126    	; 0x18be <Lcd_videnablePulse+0x166>
	else if (__tmp > 65535)
    1840:	6e 89       	ldd	r22, Y+22	; 0x16
    1842:	7f 89       	ldd	r23, Y+23	; 0x17
    1844:	88 8d       	ldd	r24, Y+24	; 0x18
    1846:	99 8d       	ldd	r25, Y+25	; 0x19
    1848:	20 e0       	ldi	r18, 0x00	; 0
    184a:	3f ef       	ldi	r19, 0xFF	; 255
    184c:	4f e7       	ldi	r20, 0x7F	; 127
    184e:	57 e4       	ldi	r21, 0x47	; 71
    1850:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1854:	18 16       	cp	r1, r24
    1856:	4c f5       	brge	.+82     	; 0x18aa <Lcd_videnablePulse+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1858:	6a 8d       	ldd	r22, Y+26	; 0x1a
    185a:	7b 8d       	ldd	r23, Y+27	; 0x1b
    185c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    185e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1860:	20 e0       	ldi	r18, 0x00	; 0
    1862:	30 e0       	ldi	r19, 0x00	; 0
    1864:	40 e2       	ldi	r20, 0x20	; 32
    1866:	51 e4       	ldi	r21, 0x41	; 65
    1868:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    186c:	dc 01       	movw	r26, r24
    186e:	cb 01       	movw	r24, r22
    1870:	bc 01       	movw	r22, r24
    1872:	cd 01       	movw	r24, r26
    1874:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1878:	dc 01       	movw	r26, r24
    187a:	cb 01       	movw	r24, r22
    187c:	9d 8b       	std	Y+21, r25	; 0x15
    187e:	8c 8b       	std	Y+20, r24	; 0x14
    1880:	0f c0       	rjmp	.+30     	; 0x18a0 <Lcd_videnablePulse+0x148>
    1882:	80 e9       	ldi	r24, 0x90	; 144
    1884:	91 e0       	ldi	r25, 0x01	; 1
    1886:	9b 8b       	std	Y+19, r25	; 0x13
    1888:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    188a:	8a 89       	ldd	r24, Y+18	; 0x12
    188c:	9b 89       	ldd	r25, Y+19	; 0x13
    188e:	01 97       	sbiw	r24, 0x01	; 1
    1890:	f1 f7       	brne	.-4      	; 0x188e <Lcd_videnablePulse+0x136>
    1892:	9b 8b       	std	Y+19, r25	; 0x13
    1894:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1896:	8c 89       	ldd	r24, Y+20	; 0x14
    1898:	9d 89       	ldd	r25, Y+21	; 0x15
    189a:	01 97       	sbiw	r24, 0x01	; 1
    189c:	9d 8b       	std	Y+21, r25	; 0x15
    189e:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18a0:	8c 89       	ldd	r24, Y+20	; 0x14
    18a2:	9d 89       	ldd	r25, Y+21	; 0x15
    18a4:	00 97       	sbiw	r24, 0x00	; 0
    18a6:	69 f7       	brne	.-38     	; 0x1882 <Lcd_videnablePulse+0x12a>
    18a8:	24 c0       	rjmp	.+72     	; 0x18f2 <Lcd_videnablePulse+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18aa:	6e 89       	ldd	r22, Y+22	; 0x16
    18ac:	7f 89       	ldd	r23, Y+23	; 0x17
    18ae:	88 8d       	ldd	r24, Y+24	; 0x18
    18b0:	99 8d       	ldd	r25, Y+25	; 0x19
    18b2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18b6:	dc 01       	movw	r26, r24
    18b8:	cb 01       	movw	r24, r22
    18ba:	9d 8b       	std	Y+21, r25	; 0x15
    18bc:	8c 8b       	std	Y+20, r24	; 0x14
    18be:	8c 89       	ldd	r24, Y+20	; 0x14
    18c0:	9d 89       	ldd	r25, Y+21	; 0x15
    18c2:	99 8b       	std	Y+17, r25	; 0x11
    18c4:	88 8b       	std	Y+16, r24	; 0x10
    18c6:	88 89       	ldd	r24, Y+16	; 0x10
    18c8:	99 89       	ldd	r25, Y+17	; 0x11
    18ca:	01 97       	sbiw	r24, 0x01	; 1
    18cc:	f1 f7       	brne	.-4      	; 0x18ca <Lcd_videnablePulse+0x172>
    18ce:	99 8b       	std	Y+17, r25	; 0x11
    18d0:	88 8b       	std	Y+16, r24	; 0x10
    18d2:	0f c0       	rjmp	.+30     	; 0x18f2 <Lcd_videnablePulse+0x19a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    18d4:	6f 8d       	ldd	r22, Y+31	; 0x1f
    18d6:	78 a1       	ldd	r23, Y+32	; 0x20
    18d8:	89 a1       	ldd	r24, Y+33	; 0x21
    18da:	9a a1       	ldd	r25, Y+34	; 0x22
    18dc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18e0:	dc 01       	movw	r26, r24
    18e2:	cb 01       	movw	r24, r22
    18e4:	8e 8f       	std	Y+30, r24	; 0x1e
    18e6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    18e8:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    18ea:	8f 85       	ldd	r24, Y+15	; 0x0f
    18ec:	8a 95       	dec	r24
    18ee:	f1 f7       	brne	.-4      	; 0x18ec <Lcd_videnablePulse+0x194>
    18f0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(1);
	Dio_vidwriteChanel(DIO_PORTB, DIO_PIN3, DIO_LOW);
    18f2:	81 e0       	ldi	r24, 0x01	; 1
    18f4:	63 e0       	ldi	r22, 0x03	; 3
    18f6:	40 e0       	ldi	r20, 0x00	; 0
    18f8:	0e 94 c2 11 	call	0x2384	; 0x2384 <Dio_vidwriteChanel>
    18fc:	80 e0       	ldi	r24, 0x00	; 0
    18fe:	90 e0       	ldi	r25, 0x00	; 0
    1900:	a0 e0       	ldi	r26, 0x00	; 0
    1902:	b0 e4       	ldi	r27, 0x40	; 64
    1904:	8b 87       	std	Y+11, r24	; 0x0b
    1906:	9c 87       	std	Y+12, r25	; 0x0c
    1908:	ad 87       	std	Y+13, r26	; 0x0d
    190a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    190c:	6b 85       	ldd	r22, Y+11	; 0x0b
    190e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1910:	8d 85       	ldd	r24, Y+13	; 0x0d
    1912:	9e 85       	ldd	r25, Y+14	; 0x0e
    1914:	20 e0       	ldi	r18, 0x00	; 0
    1916:	30 e0       	ldi	r19, 0x00	; 0
    1918:	4a e7       	ldi	r20, 0x7A	; 122
    191a:	55 e4       	ldi	r21, 0x45	; 69
    191c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1920:	dc 01       	movw	r26, r24
    1922:	cb 01       	movw	r24, r22
    1924:	8f 83       	std	Y+7, r24	; 0x07
    1926:	98 87       	std	Y+8, r25	; 0x08
    1928:	a9 87       	std	Y+9, r26	; 0x09
    192a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    192c:	6f 81       	ldd	r22, Y+7	; 0x07
    192e:	78 85       	ldd	r23, Y+8	; 0x08
    1930:	89 85       	ldd	r24, Y+9	; 0x09
    1932:	9a 85       	ldd	r25, Y+10	; 0x0a
    1934:	20 e0       	ldi	r18, 0x00	; 0
    1936:	30 e0       	ldi	r19, 0x00	; 0
    1938:	40 e8       	ldi	r20, 0x80	; 128
    193a:	5f e3       	ldi	r21, 0x3F	; 63
    193c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1940:	88 23       	and	r24, r24
    1942:	2c f4       	brge	.+10     	; 0x194e <Lcd_videnablePulse+0x1f6>
		__ticks = 1;
    1944:	81 e0       	ldi	r24, 0x01	; 1
    1946:	90 e0       	ldi	r25, 0x00	; 0
    1948:	9e 83       	std	Y+6, r25	; 0x06
    194a:	8d 83       	std	Y+5, r24	; 0x05
    194c:	3f c0       	rjmp	.+126    	; 0x19cc <Lcd_videnablePulse+0x274>
	else if (__tmp > 65535)
    194e:	6f 81       	ldd	r22, Y+7	; 0x07
    1950:	78 85       	ldd	r23, Y+8	; 0x08
    1952:	89 85       	ldd	r24, Y+9	; 0x09
    1954:	9a 85       	ldd	r25, Y+10	; 0x0a
    1956:	20 e0       	ldi	r18, 0x00	; 0
    1958:	3f ef       	ldi	r19, 0xFF	; 255
    195a:	4f e7       	ldi	r20, 0x7F	; 127
    195c:	57 e4       	ldi	r21, 0x47	; 71
    195e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1962:	18 16       	cp	r1, r24
    1964:	4c f5       	brge	.+82     	; 0x19b8 <Lcd_videnablePulse+0x260>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1966:	6b 85       	ldd	r22, Y+11	; 0x0b
    1968:	7c 85       	ldd	r23, Y+12	; 0x0c
    196a:	8d 85       	ldd	r24, Y+13	; 0x0d
    196c:	9e 85       	ldd	r25, Y+14	; 0x0e
    196e:	20 e0       	ldi	r18, 0x00	; 0
    1970:	30 e0       	ldi	r19, 0x00	; 0
    1972:	40 e2       	ldi	r20, 0x20	; 32
    1974:	51 e4       	ldi	r21, 0x41	; 65
    1976:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    197a:	dc 01       	movw	r26, r24
    197c:	cb 01       	movw	r24, r22
    197e:	bc 01       	movw	r22, r24
    1980:	cd 01       	movw	r24, r26
    1982:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1986:	dc 01       	movw	r26, r24
    1988:	cb 01       	movw	r24, r22
    198a:	9e 83       	std	Y+6, r25	; 0x06
    198c:	8d 83       	std	Y+5, r24	; 0x05
    198e:	0f c0       	rjmp	.+30     	; 0x19ae <Lcd_videnablePulse+0x256>
    1990:	80 e9       	ldi	r24, 0x90	; 144
    1992:	91 e0       	ldi	r25, 0x01	; 1
    1994:	9c 83       	std	Y+4, r25	; 0x04
    1996:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1998:	8b 81       	ldd	r24, Y+3	; 0x03
    199a:	9c 81       	ldd	r25, Y+4	; 0x04
    199c:	01 97       	sbiw	r24, 0x01	; 1
    199e:	f1 f7       	brne	.-4      	; 0x199c <Lcd_videnablePulse+0x244>
    19a0:	9c 83       	std	Y+4, r25	; 0x04
    19a2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19a4:	8d 81       	ldd	r24, Y+5	; 0x05
    19a6:	9e 81       	ldd	r25, Y+6	; 0x06
    19a8:	01 97       	sbiw	r24, 0x01	; 1
    19aa:	9e 83       	std	Y+6, r25	; 0x06
    19ac:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19ae:	8d 81       	ldd	r24, Y+5	; 0x05
    19b0:	9e 81       	ldd	r25, Y+6	; 0x06
    19b2:	00 97       	sbiw	r24, 0x00	; 0
    19b4:	69 f7       	brne	.-38     	; 0x1990 <Lcd_videnablePulse+0x238>
    19b6:	14 c0       	rjmp	.+40     	; 0x19e0 <Lcd_videnablePulse+0x288>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19b8:	6f 81       	ldd	r22, Y+7	; 0x07
    19ba:	78 85       	ldd	r23, Y+8	; 0x08
    19bc:	89 85       	ldd	r24, Y+9	; 0x09
    19be:	9a 85       	ldd	r25, Y+10	; 0x0a
    19c0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19c4:	dc 01       	movw	r26, r24
    19c6:	cb 01       	movw	r24, r22
    19c8:	9e 83       	std	Y+6, r25	; 0x06
    19ca:	8d 83       	std	Y+5, r24	; 0x05
    19cc:	8d 81       	ldd	r24, Y+5	; 0x05
    19ce:	9e 81       	ldd	r25, Y+6	; 0x06
    19d0:	9a 83       	std	Y+2, r25	; 0x02
    19d2:	89 83       	std	Y+1, r24	; 0x01
    19d4:	89 81       	ldd	r24, Y+1	; 0x01
    19d6:	9a 81       	ldd	r25, Y+2	; 0x02
    19d8:	01 97       	sbiw	r24, 0x01	; 1
    19da:	f1 f7       	brne	.-4      	; 0x19d8 <Lcd_videnablePulse+0x280>
    19dc:	9a 83       	std	Y+2, r25	; 0x02
    19de:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    19e0:	a6 96       	adiw	r28, 0x26	; 38
    19e2:	0f b6       	in	r0, 0x3f	; 63
    19e4:	f8 94       	cli
    19e6:	de bf       	out	0x3e, r29	; 62
    19e8:	0f be       	out	0x3f, r0	; 63
    19ea:	cd bf       	out	0x3d, r28	; 61
    19ec:	cf 91       	pop	r28
    19ee:	df 91       	pop	r29
    19f0:	08 95       	ret

000019f2 <Lcd_vidDisplayChar>:
void Lcd_vidDisplayChar(u8 chr)
{
    19f2:	df 93       	push	r29
    19f4:	cf 93       	push	r28
    19f6:	00 d0       	rcall	.+0      	; 0x19f8 <Lcd_vidDisplayChar+0x6>
    19f8:	0f 92       	push	r0
    19fa:	cd b7       	in	r28, 0x3d	; 61
    19fc:	de b7       	in	r29, 0x3e	; 62
    19fe:	8b 83       	std	Y+3, r24	; 0x03
	0b1101  1001

	1101   0000
	1001   0000
*/
	u8 loc_MSB = (chr & ~LCD_MASK);
    1a00:	8b 81       	ldd	r24, Y+3	; 0x03
    1a02:	80 7f       	andi	r24, 0xF0	; 240
    1a04:	8a 83       	std	Y+2, r24	; 0x02
	u8 loc_LSB = (chr<<4);
    1a06:	8b 81       	ldd	r24, Y+3	; 0x03
    1a08:	82 95       	swap	r24
    1a0a:	80 7f       	andi	r24, 0xF0	; 240
    1a0c:	89 83       	std	Y+1, r24	; 0x01
	//RS->1
	Dio_vidwriteChanel(DIO_PORTB, DIO_PIN1, DIO_HIGH);
    1a0e:	81 e0       	ldi	r24, 0x01	; 1
    1a10:	61 e0       	ldi	r22, 0x01	; 1
    1a12:	41 e0       	ldi	r20, 0x01	; 1
    1a14:	0e 94 c2 11 	call	0x2384	; 0x2384 <Dio_vidwriteChanel>

	//write data MSB to LCD
	Dio_vidWriteChanelGroup(DIO_PORTA, loc_MSB, LCD_MASK);
    1a18:	80 e0       	ldi	r24, 0x00	; 0
    1a1a:	6a 81       	ldd	r22, Y+2	; 0x02
    1a1c:	4f e0       	ldi	r20, 0x0F	; 15
    1a1e:	0e 94 a5 12 	call	0x254a	; 0x254a <Dio_vidWriteChanelGroup>
	//send Enable pulse
	Lcd_videnablePulse();
    1a22:	0e 94 ac 0b 	call	0x1758	; 0x1758 <Lcd_videnablePulse>

	//write data LSB to LCD
	Dio_vidWriteChanelGroup(DIO_PORTA, loc_LSB, LCD_MASK);
    1a26:	80 e0       	ldi	r24, 0x00	; 0
    1a28:	69 81       	ldd	r22, Y+1	; 0x01
    1a2a:	4f e0       	ldi	r20, 0x0F	; 15
    1a2c:	0e 94 a5 12 	call	0x254a	; 0x254a <Dio_vidWriteChanelGroup>
	//send Enable pulse
	Lcd_videnablePulse();
    1a30:	0e 94 ac 0b 	call	0x1758	; 0x1758 <Lcd_videnablePulse>
}
    1a34:	0f 90       	pop	r0
    1a36:	0f 90       	pop	r0
    1a38:	0f 90       	pop	r0
    1a3a:	cf 91       	pop	r28
    1a3c:	df 91       	pop	r29
    1a3e:	08 95       	ret

00001a40 <Lcd_vidCmd>:
void Lcd_vidCmd(lcd_Cmd_t cmd)
{
    1a40:	df 93       	push	r29
    1a42:	cf 93       	push	r28
    1a44:	00 d0       	rcall	.+0      	; 0x1a46 <Lcd_vidCmd+0x6>
    1a46:	0f 92       	push	r0
    1a48:	cd b7       	in	r28, 0x3d	; 61
    1a4a:	de b7       	in	r29, 0x3e	; 62
    1a4c:	8b 83       	std	Y+3, r24	; 0x03
	u8 loc_MSB = cmd & ~LCD_MASK;
    1a4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a50:	80 7f       	andi	r24, 0xF0	; 240
    1a52:	8a 83       	std	Y+2, r24	; 0x02
	u8 loc_LSB = cmd<<4;
    1a54:	8b 81       	ldd	r24, Y+3	; 0x03
    1a56:	82 95       	swap	r24
    1a58:	80 7f       	andi	r24, 0xF0	; 240
    1a5a:	89 83       	std	Y+1, r24	; 0x01
	//RS->0
	Dio_vidwriteChanel(DIO_PORTB, DIO_PIN1, DIO_LOW);
    1a5c:	81 e0       	ldi	r24, 0x01	; 1
    1a5e:	61 e0       	ldi	r22, 0x01	; 1
    1a60:	40 e0       	ldi	r20, 0x00	; 0
    1a62:	0e 94 c2 11 	call	0x2384	; 0x2384 <Dio_vidwriteChanel>

	//write data MSB to LCD
	Dio_vidWriteChanelGroup(DIO_PORTA, loc_MSB, LCD_MASK);
    1a66:	80 e0       	ldi	r24, 0x00	; 0
    1a68:	6a 81       	ldd	r22, Y+2	; 0x02
    1a6a:	4f e0       	ldi	r20, 0x0F	; 15
    1a6c:	0e 94 a5 12 	call	0x254a	; 0x254a <Dio_vidWriteChanelGroup>
	//send Enable pulse
	Lcd_videnablePulse();
    1a70:	0e 94 ac 0b 	call	0x1758	; 0x1758 <Lcd_videnablePulse>

	//write data LSB to LCD
	Dio_vidWriteChanelGroup(DIO_PORTA, loc_LSB, LCD_MASK);
    1a74:	80 e0       	ldi	r24, 0x00	; 0
    1a76:	69 81       	ldd	r22, Y+1	; 0x01
    1a78:	4f e0       	ldi	r20, 0x0F	; 15
    1a7a:	0e 94 a5 12 	call	0x254a	; 0x254a <Dio_vidWriteChanelGroup>
	//send Enable pulse
	Lcd_videnablePulse();
    1a7e:	0e 94 ac 0b 	call	0x1758	; 0x1758 <Lcd_videnablePulse>
}
    1a82:	0f 90       	pop	r0
    1a84:	0f 90       	pop	r0
    1a86:	0f 90       	pop	r0
    1a88:	cf 91       	pop	r28
    1a8a:	df 91       	pop	r29
    1a8c:	08 95       	ret

00001a8e <Lcd_vidRowColumn>:

void Lcd_vidRowColumn(u8 row, u8 col)
{
    1a8e:	df 93       	push	r29
    1a90:	cf 93       	push	r28
    1a92:	00 d0       	rcall	.+0      	; 0x1a94 <Lcd_vidRowColumn+0x6>
    1a94:	00 d0       	rcall	.+0      	; 0x1a96 <Lcd_vidRowColumn+0x8>
    1a96:	cd b7       	in	r28, 0x3d	; 61
    1a98:	de b7       	in	r29, 0x3e	; 62
    1a9a:	89 83       	std	Y+1, r24	; 0x01
    1a9c:	6a 83       	std	Y+2, r22	; 0x02
	switch (row)
    1a9e:	89 81       	ldd	r24, Y+1	; 0x01
    1aa0:	28 2f       	mov	r18, r24
    1aa2:	30 e0       	ldi	r19, 0x00	; 0
    1aa4:	3c 83       	std	Y+4, r19	; 0x04
    1aa6:	2b 83       	std	Y+3, r18	; 0x03
    1aa8:	8b 81       	ldd	r24, Y+3	; 0x03
    1aaa:	9c 81       	ldd	r25, Y+4	; 0x04
    1aac:	00 97       	sbiw	r24, 0x00	; 0
    1aae:	31 f0       	breq	.+12     	; 0x1abc <Lcd_vidRowColumn+0x2e>
    1ab0:	2b 81       	ldd	r18, Y+3	; 0x03
    1ab2:	3c 81       	ldd	r19, Y+4	; 0x04
    1ab4:	21 30       	cpi	r18, 0x01	; 1
    1ab6:	31 05       	cpc	r19, r1
    1ab8:	31 f0       	breq	.+12     	; 0x1ac6 <Lcd_vidRowColumn+0x38>
    1aba:	09 c0       	rjmp	.+18     	; 0x1ace <Lcd_vidRowColumn+0x40>
	{
	case 0:
		Lcd_vidCmd(0x80 + col);
    1abc:	8a 81       	ldd	r24, Y+2	; 0x02
    1abe:	80 58       	subi	r24, 0x80	; 128
    1ac0:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <Lcd_vidCmd>
    1ac4:	04 c0       	rjmp	.+8      	; 0x1ace <Lcd_vidRowColumn+0x40>
		break;

	case 1:
		Lcd_vidCmd(0xC0 + col);
    1ac6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac8:	80 54       	subi	r24, 0x40	; 64
    1aca:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <Lcd_vidCmd>
		break;
	}
}
    1ace:	0f 90       	pop	r0
    1ad0:	0f 90       	pop	r0
    1ad2:	0f 90       	pop	r0
    1ad4:	0f 90       	pop	r0
    1ad6:	cf 91       	pop	r28
    1ad8:	df 91       	pop	r29
    1ada:	08 95       	ret

00001adc <Lcd_vidDisplyStr>:
void Lcd_vidDisplyStr(u8* str)
{
    1adc:	df 93       	push	r29
    1ade:	cf 93       	push	r28
    1ae0:	00 d0       	rcall	.+0      	; 0x1ae2 <Lcd_vidDisplyStr+0x6>
    1ae2:	cd b7       	in	r28, 0x3d	; 61
    1ae4:	de b7       	in	r29, 0x3e	; 62
    1ae6:	9a 83       	std	Y+2, r25	; 0x02
    1ae8:	89 83       	std	Y+1, r24	; 0x01
    1aea:	0a c0       	rjmp	.+20     	; 0x1b00 <Lcd_vidDisplyStr+0x24>
	while (*str != '\0')
	{
		Lcd_vidDisplayChar(*str);
    1aec:	e9 81       	ldd	r30, Y+1	; 0x01
    1aee:	fa 81       	ldd	r31, Y+2	; 0x02
    1af0:	80 81       	ld	r24, Z
    1af2:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <Lcd_vidDisplayChar>
		str++;
    1af6:	89 81       	ldd	r24, Y+1	; 0x01
    1af8:	9a 81       	ldd	r25, Y+2	; 0x02
    1afa:	01 96       	adiw	r24, 0x01	; 1
    1afc:	9a 83       	std	Y+2, r25	; 0x02
    1afe:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
}
void Lcd_vidDisplyStr(u8* str)
{
	while (*str != '\0')
    1b00:	e9 81       	ldd	r30, Y+1	; 0x01
    1b02:	fa 81       	ldd	r31, Y+2	; 0x02
    1b04:	80 81       	ld	r24, Z
    1b06:	88 23       	and	r24, r24
    1b08:	89 f7       	brne	.-30     	; 0x1aec <Lcd_vidDisplyStr+0x10>
	{
		Lcd_vidDisplayChar(*str);
		str++;
	}
}
    1b0a:	0f 90       	pop	r0
    1b0c:	0f 90       	pop	r0
    1b0e:	cf 91       	pop	r28
    1b10:	df 91       	pop	r29
    1b12:	08 95       	ret

00001b14 <Lcd_vidDisplyInt>:

void Lcd_vidDisplyInt(u32 num)
{
    1b14:	df 93       	push	r29
    1b16:	cf 93       	push	r28
    1b18:	cd b7       	in	r28, 0x3d	; 61
    1b1a:	de b7       	in	r29, 0x3e	; 62
    1b1c:	29 97       	sbiw	r28, 0x09	; 9
    1b1e:	0f b6       	in	r0, 0x3f	; 63
    1b20:	f8 94       	cli
    1b22:	de bf       	out	0x3e, r29	; 62
    1b24:	0f be       	out	0x3f, r0	; 63
    1b26:	cd bf       	out	0x3d, r28	; 61
    1b28:	6e 83       	std	Y+6, r22	; 0x06
    1b2a:	7f 83       	std	Y+7, r23	; 0x07
    1b2c:	88 87       	std	Y+8, r24	; 0x08
    1b2e:	99 87       	std	Y+9, r25	; 0x09
	u8 buffer[5];
	sprintf(buffer,"%d",num);
    1b30:	8d b7       	in	r24, 0x3d	; 61
    1b32:	9e b7       	in	r25, 0x3e	; 62
    1b34:	08 97       	sbiw	r24, 0x08	; 8
    1b36:	0f b6       	in	r0, 0x3f	; 63
    1b38:	f8 94       	cli
    1b3a:	9e bf       	out	0x3e, r25	; 62
    1b3c:	0f be       	out	0x3f, r0	; 63
    1b3e:	8d bf       	out	0x3d, r24	; 61
    1b40:	ed b7       	in	r30, 0x3d	; 61
    1b42:	fe b7       	in	r31, 0x3e	; 62
    1b44:	31 96       	adiw	r30, 0x01	; 1
    1b46:	ce 01       	movw	r24, r28
    1b48:	01 96       	adiw	r24, 0x01	; 1
    1b4a:	91 83       	std	Z+1, r25	; 0x01
    1b4c:	80 83       	st	Z, r24
    1b4e:	80 e6       	ldi	r24, 0x60	; 96
    1b50:	90 e0       	ldi	r25, 0x00	; 0
    1b52:	93 83       	std	Z+3, r25	; 0x03
    1b54:	82 83       	std	Z+2, r24	; 0x02
    1b56:	8e 81       	ldd	r24, Y+6	; 0x06
    1b58:	9f 81       	ldd	r25, Y+7	; 0x07
    1b5a:	a8 85       	ldd	r26, Y+8	; 0x08
    1b5c:	b9 85       	ldd	r27, Y+9	; 0x09
    1b5e:	84 83       	std	Z+4, r24	; 0x04
    1b60:	95 83       	std	Z+5, r25	; 0x05
    1b62:	a6 83       	std	Z+6, r26	; 0x06
    1b64:	b7 83       	std	Z+7, r27	; 0x07
    1b66:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <sprintf>
    1b6a:	8d b7       	in	r24, 0x3d	; 61
    1b6c:	9e b7       	in	r25, 0x3e	; 62
    1b6e:	08 96       	adiw	r24, 0x08	; 8
    1b70:	0f b6       	in	r0, 0x3f	; 63
    1b72:	f8 94       	cli
    1b74:	9e bf       	out	0x3e, r25	; 62
    1b76:	0f be       	out	0x3f, r0	; 63
    1b78:	8d bf       	out	0x3d, r24	; 61
	Lcd_vidDisplyStr(buffer);
    1b7a:	ce 01       	movw	r24, r28
    1b7c:	01 96       	adiw	r24, 0x01	; 1
    1b7e:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <Lcd_vidDisplyStr>
}
    1b82:	29 96       	adiw	r28, 0x09	; 9
    1b84:	0f b6       	in	r0, 0x3f	; 63
    1b86:	f8 94       	cli
    1b88:	de bf       	out	0x3e, r29	; 62
    1b8a:	0f be       	out	0x3f, r0	; 63
    1b8c:	cd bf       	out	0x3d, r28	; 61
    1b8e:	cf 91       	pop	r28
    1b90:	df 91       	pop	r29
    1b92:	08 95       	ret

00001b94 <Keypad_vidInit>:
		{'7','8','9','C'},
		{'*','0','#','D'}
};

void Keypad_vidInit(void)
{
    1b94:	df 93       	push	r29
    1b96:	cf 93       	push	r28
    1b98:	cd b7       	in	r28, 0x3d	; 61
    1b9a:	de b7       	in	r29, 0x3e	; 62
	/*	Configure Rows Pins as input	*/
	Dio_vidconfigChanel(DIO_PORTC, DIO_PIN0, DIO_INPUT);/* ROW0	*/
    1b9c:	82 e0       	ldi	r24, 0x02	; 2
    1b9e:	60 e0       	ldi	r22, 0x00	; 0
    1ba0:	40 e0       	ldi	r20, 0x00	; 0
    1ba2:	0e 94 df 10 	call	0x21be	; 0x21be <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTC, DIO_PIN1, DIO_INPUT);/* ROW1	*/
    1ba6:	82 e0       	ldi	r24, 0x02	; 2
    1ba8:	61 e0       	ldi	r22, 0x01	; 1
    1baa:	40 e0       	ldi	r20, 0x00	; 0
    1bac:	0e 94 df 10 	call	0x21be	; 0x21be <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTC, DIO_PIN2, DIO_INPUT);/* ROW2	*/
    1bb0:	82 e0       	ldi	r24, 0x02	; 2
    1bb2:	62 e0       	ldi	r22, 0x02	; 2
    1bb4:	40 e0       	ldi	r20, 0x00	; 0
    1bb6:	0e 94 df 10 	call	0x21be	; 0x21be <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTC, DIO_PIN3, DIO_INPUT);/* ROW3 */
    1bba:	82 e0       	ldi	r24, 0x02	; 2
    1bbc:	63 e0       	ldi	r22, 0x03	; 3
    1bbe:	40 e0       	ldi	r20, 0x00	; 0
    1bc0:	0e 94 df 10 	call	0x21be	; 0x21be <Dio_vidconfigChanel>

	/*	Configure Columns Pins as output	*/
	Dio_vidconfigChanel(DIO_PORTC, DIO_PIN4, DIO_OUTPUT);/*	COL0 */
    1bc4:	82 e0       	ldi	r24, 0x02	; 2
    1bc6:	64 e0       	ldi	r22, 0x04	; 4
    1bc8:	41 e0       	ldi	r20, 0x01	; 1
    1bca:	0e 94 df 10 	call	0x21be	; 0x21be <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTC, DIO_PIN5, DIO_OUTPUT);/* COL1 */
    1bce:	82 e0       	ldi	r24, 0x02	; 2
    1bd0:	65 e0       	ldi	r22, 0x05	; 5
    1bd2:	41 e0       	ldi	r20, 0x01	; 1
    1bd4:	0e 94 df 10 	call	0x21be	; 0x21be <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTC, DIO_PIN6, DIO_OUTPUT);/* COL2 */
    1bd8:	82 e0       	ldi	r24, 0x02	; 2
    1bda:	66 e0       	ldi	r22, 0x06	; 6
    1bdc:	41 e0       	ldi	r20, 0x01	; 1
    1bde:	0e 94 df 10 	call	0x21be	; 0x21be <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTC, DIO_PIN7, DIO_OUTPUT);/* COL3 */
    1be2:	82 e0       	ldi	r24, 0x02	; 2
    1be4:	67 e0       	ldi	r22, 0x07	; 7
    1be6:	41 e0       	ldi	r20, 0x01	; 1
    1be8:	0e 94 df 10 	call	0x21be	; 0x21be <Dio_vidconfigChanel>

	Dio_vidPullUpEn(DIO_PORTC, DIO_PIN0);
    1bec:	82 e0       	ldi	r24, 0x02	; 2
    1bee:	60 e0       	ldi	r22, 0x00	; 0
    1bf0:	0e 94 11 14 	call	0x2822	; 0x2822 <Dio_vidPullUpEn>
	Dio_vidPullUpEn(DIO_PORTC, DIO_PIN1);
    1bf4:	82 e0       	ldi	r24, 0x02	; 2
    1bf6:	61 e0       	ldi	r22, 0x01	; 1
    1bf8:	0e 94 11 14 	call	0x2822	; 0x2822 <Dio_vidPullUpEn>
	Dio_vidPullUpEn(DIO_PORTC, DIO_PIN2);
    1bfc:	82 e0       	ldi	r24, 0x02	; 2
    1bfe:	62 e0       	ldi	r22, 0x02	; 2
    1c00:	0e 94 11 14 	call	0x2822	; 0x2822 <Dio_vidPullUpEn>
	Dio_vidPullUpEn(DIO_PORTC, DIO_PIN3);
    1c04:	82 e0       	ldi	r24, 0x02	; 2
    1c06:	63 e0       	ldi	r22, 0x03	; 3
    1c08:	0e 94 11 14 	call	0x2822	; 0x2822 <Dio_vidPullUpEn>


	Dio_vidwriteChanel(DIO_PORTC, DIO_PIN4, DIO_LOW);
    1c0c:	82 e0       	ldi	r24, 0x02	; 2
    1c0e:	64 e0       	ldi	r22, 0x04	; 4
    1c10:	40 e0       	ldi	r20, 0x00	; 0
    1c12:	0e 94 c2 11 	call	0x2384	; 0x2384 <Dio_vidwriteChanel>
	Dio_vidwriteChanel(DIO_PORTC, DIO_PIN5, DIO_LOW);
    1c16:	82 e0       	ldi	r24, 0x02	; 2
    1c18:	65 e0       	ldi	r22, 0x05	; 5
    1c1a:	40 e0       	ldi	r20, 0x00	; 0
    1c1c:	0e 94 c2 11 	call	0x2384	; 0x2384 <Dio_vidwriteChanel>
	Dio_vidwriteChanel(DIO_PORTC, DIO_PIN6, DIO_LOW);
    1c20:	82 e0       	ldi	r24, 0x02	; 2
    1c22:	66 e0       	ldi	r22, 0x06	; 6
    1c24:	40 e0       	ldi	r20, 0x00	; 0
    1c26:	0e 94 c2 11 	call	0x2384	; 0x2384 <Dio_vidwriteChanel>
	Dio_vidwriteChanel(DIO_PORTC, DIO_PIN7, DIO_LOW);
    1c2a:	82 e0       	ldi	r24, 0x02	; 2
    1c2c:	67 e0       	ldi	r22, 0x07	; 7
    1c2e:	40 e0       	ldi	r20, 0x00	; 0
    1c30:	0e 94 c2 11 	call	0x2384	; 0x2384 <Dio_vidwriteChanel>
}
    1c34:	cf 91       	pop	r28
    1c36:	df 91       	pop	r29
    1c38:	08 95       	ret

00001c3a <Keypad_IsPressed>:

static boolean Keypad_IsPressed(void)
{
    1c3a:	df 93       	push	r29
    1c3c:	cf 93       	push	r28
    1c3e:	0f 92       	push	r0
    1c40:	cd b7       	in	r28, 0x3d	; 61
    1c42:	de b7       	in	r29, 0x3e	; 62
	if (
    1c44:	82 e0       	ldi	r24, 0x02	; 2
    1c46:	60 e0       	ldi	r22, 0x00	; 0
    1c48:	0e 94 01 13 	call	0x2602	; 0x2602 <Dio_udtreadChanel>
    1c4c:	88 23       	and	r24, r24
    1c4e:	91 f0       	breq	.+36     	; 0x1c74 <Keypad_IsPressed+0x3a>
    1c50:	82 e0       	ldi	r24, 0x02	; 2
    1c52:	61 e0       	ldi	r22, 0x01	; 1
    1c54:	0e 94 01 13 	call	0x2602	; 0x2602 <Dio_udtreadChanel>
    1c58:	88 23       	and	r24, r24
    1c5a:	61 f0       	breq	.+24     	; 0x1c74 <Keypad_IsPressed+0x3a>
    1c5c:	82 e0       	ldi	r24, 0x02	; 2
    1c5e:	62 e0       	ldi	r22, 0x02	; 2
    1c60:	0e 94 01 13 	call	0x2602	; 0x2602 <Dio_udtreadChanel>
    1c64:	88 23       	and	r24, r24
    1c66:	31 f0       	breq	.+12     	; 0x1c74 <Keypad_IsPressed+0x3a>
    1c68:	82 e0       	ldi	r24, 0x02	; 2
    1c6a:	63 e0       	ldi	r22, 0x03	; 3
    1c6c:	0e 94 01 13 	call	0x2602	; 0x2602 <Dio_udtreadChanel>
    1c70:	88 23       	and	r24, r24
    1c72:	19 f4       	brne	.+6      	; 0x1c7a <Keypad_IsPressed+0x40>
			Dio_udtreadChanel(DIO_PORTC, DIO_PIN1) == DIO_LOW ||
			Dio_udtreadChanel(DIO_PORTC, DIO_PIN2) == DIO_LOW ||
			Dio_udtreadChanel(DIO_PORTC, DIO_PIN3) == DIO_LOW
	)
	{
		return TRUE;
    1c74:	81 e0       	ldi	r24, 0x01	; 1
    1c76:	89 83       	std	Y+1, r24	; 0x01
    1c78:	01 c0       	rjmp	.+2      	; 0x1c7c <Keypad_IsPressed+0x42>
	}
	else
	{
		return FALSE;
    1c7a:	19 82       	std	Y+1, r1	; 0x01
    1c7c:	89 81       	ldd	r24, Y+1	; 0x01
	}
}
    1c7e:	0f 90       	pop	r0
    1c80:	cf 91       	pop	r28
    1c82:	df 91       	pop	r29
    1c84:	08 95       	ret

00001c86 <Keypad_GetRow>:


static kp_row_t Keypad_GetRow(void)
{
    1c86:	df 93       	push	r29
    1c88:	cf 93       	push	r28
    1c8a:	0f 92       	push	r0
    1c8c:	cd b7       	in	r28, 0x3d	; 61
    1c8e:	de b7       	in	r29, 0x3e	; 62
	kp_row_t loc_ButtonRow = KP_NOROW;
    1c90:	8f ef       	ldi	r24, 0xFF	; 255
    1c92:	89 83       	std	Y+1, r24	; 0x01
	if (Dio_udtreadChanel(DIO_PORTC, DIO_PIN0) == DIO_LOW)
    1c94:	82 e0       	ldi	r24, 0x02	; 2
    1c96:	60 e0       	ldi	r22, 0x00	; 0
    1c98:	0e 94 01 13 	call	0x2602	; 0x2602 <Dio_udtreadChanel>
    1c9c:	88 23       	and	r24, r24
    1c9e:	11 f4       	brne	.+4      	; 0x1ca4 <Keypad_GetRow+0x1e>
	{
		loc_ButtonRow = KP_ROW0;
    1ca0:	19 82       	std	Y+1, r1	; 0x01
    1ca2:	1d c0       	rjmp	.+58     	; 0x1cde <Keypad_GetRow+0x58>
	}
	else if (Dio_udtreadChanel(DIO_PORTC, DIO_PIN1) == DIO_LOW)
    1ca4:	82 e0       	ldi	r24, 0x02	; 2
    1ca6:	61 e0       	ldi	r22, 0x01	; 1
    1ca8:	0e 94 01 13 	call	0x2602	; 0x2602 <Dio_udtreadChanel>
    1cac:	88 23       	and	r24, r24
    1cae:	19 f4       	brne	.+6      	; 0x1cb6 <Keypad_GetRow+0x30>
	{
		loc_ButtonRow = KP_ROW1;
    1cb0:	81 e0       	ldi	r24, 0x01	; 1
    1cb2:	89 83       	std	Y+1, r24	; 0x01
    1cb4:	14 c0       	rjmp	.+40     	; 0x1cde <Keypad_GetRow+0x58>
	}
	else if (Dio_udtreadChanel(DIO_PORTC, DIO_PIN2) == DIO_LOW)
    1cb6:	82 e0       	ldi	r24, 0x02	; 2
    1cb8:	62 e0       	ldi	r22, 0x02	; 2
    1cba:	0e 94 01 13 	call	0x2602	; 0x2602 <Dio_udtreadChanel>
    1cbe:	88 23       	and	r24, r24
    1cc0:	19 f4       	brne	.+6      	; 0x1cc8 <Keypad_GetRow+0x42>
	{
		loc_ButtonRow = KP_ROW2;
    1cc2:	82 e0       	ldi	r24, 0x02	; 2
    1cc4:	89 83       	std	Y+1, r24	; 0x01
    1cc6:	0b c0       	rjmp	.+22     	; 0x1cde <Keypad_GetRow+0x58>
	}
	else if (Dio_udtreadChanel(DIO_PORTC, DIO_PIN3) == DIO_LOW)
    1cc8:	82 e0       	ldi	r24, 0x02	; 2
    1cca:	63 e0       	ldi	r22, 0x03	; 3
    1ccc:	0e 94 01 13 	call	0x2602	; 0x2602 <Dio_udtreadChanel>
    1cd0:	88 23       	and	r24, r24
    1cd2:	19 f4       	brne	.+6      	; 0x1cda <Keypad_GetRow+0x54>
	{
		loc_ButtonRow = KP_ROW3;
    1cd4:	83 e0       	ldi	r24, 0x03	; 3
    1cd6:	89 83       	std	Y+1, r24	; 0x01
    1cd8:	02 c0       	rjmp	.+4      	; 0x1cde <Keypad_GetRow+0x58>
	}
	else
	{
		loc_ButtonRow = KP_NOROW;
    1cda:	8f ef       	ldi	r24, 0xFF	; 255
    1cdc:	89 83       	std	Y+1, r24	; 0x01
	}
	return loc_ButtonRow;
    1cde:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ce0:	0f 90       	pop	r0
    1ce2:	cf 91       	pop	r28
    1ce4:	df 91       	pop	r29
    1ce6:	08 95       	ret

00001ce8 <Keypad_GetCol>:

static kp_col_t Keypad_GetCol(kp_row_t current_row)
{
    1ce8:	df 93       	push	r29
    1cea:	cf 93       	push	r28
    1cec:	00 d0       	rcall	.+0      	; 0x1cee <Keypad_GetCol+0x6>
    1cee:	cd b7       	in	r28, 0x3d	; 61
    1cf0:	de b7       	in	r29, 0x3e	; 62
    1cf2:	8a 83       	std	Y+2, r24	; 0x02
	kp_col_t loc_ButtonCol = KP_NOCOL;
    1cf4:	8f ef       	ldi	r24, 0xFF	; 255
    1cf6:	89 83       	std	Y+1, r24	; 0x01

	Dio_vidwriteChanel(DIO_PORTC, DIO_PIN4, DIO_LOW);
    1cf8:	82 e0       	ldi	r24, 0x02	; 2
    1cfa:	64 e0       	ldi	r22, 0x04	; 4
    1cfc:	40 e0       	ldi	r20, 0x00	; 0
    1cfe:	0e 94 c2 11 	call	0x2384	; 0x2384 <Dio_vidwriteChanel>
	Dio_vidwriteChanel(DIO_PORTC, DIO_PIN5, DIO_HIGH);
    1d02:	82 e0       	ldi	r24, 0x02	; 2
    1d04:	65 e0       	ldi	r22, 0x05	; 5
    1d06:	41 e0       	ldi	r20, 0x01	; 1
    1d08:	0e 94 c2 11 	call	0x2384	; 0x2384 <Dio_vidwriteChanel>
	Dio_vidwriteChanel(DIO_PORTC, DIO_PIN6, DIO_HIGH);
    1d0c:	82 e0       	ldi	r24, 0x02	; 2
    1d0e:	66 e0       	ldi	r22, 0x06	; 6
    1d10:	41 e0       	ldi	r20, 0x01	; 1
    1d12:	0e 94 c2 11 	call	0x2384	; 0x2384 <Dio_vidwriteChanel>
	Dio_vidwriteChanel(DIO_PORTC, DIO_PIN7, DIO_HIGH);
    1d16:	82 e0       	ldi	r24, 0x02	; 2
    1d18:	67 e0       	ldi	r22, 0x07	; 7
    1d1a:	41 e0       	ldi	r20, 0x01	; 1
    1d1c:	0e 94 c2 11 	call	0x2384	; 0x2384 <Dio_vidwriteChanel>

	if (Keypad_GetRow() == current_row)
    1d20:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <Keypad_GetRow>
    1d24:	98 2f       	mov	r25, r24
    1d26:	8a 81       	ldd	r24, Y+2	; 0x02
    1d28:	98 17       	cp	r25, r24
    1d2a:	11 f4       	brne	.+4      	; 0x1d30 <Keypad_GetCol+0x48>
	{
		loc_ButtonCol = KP_COL0;
    1d2c:	19 82       	std	Y+1, r1	; 0x01
    1d2e:	59 c0       	rjmp	.+178    	; 0x1de2 <Keypad_GetCol+0xfa>
	}
	else
	{
		Dio_vidwriteChanel(DIO_PORTC, DIO_PIN4, DIO_HIGH);
    1d30:	82 e0       	ldi	r24, 0x02	; 2
    1d32:	64 e0       	ldi	r22, 0x04	; 4
    1d34:	41 e0       	ldi	r20, 0x01	; 1
    1d36:	0e 94 c2 11 	call	0x2384	; 0x2384 <Dio_vidwriteChanel>
		Dio_vidwriteChanel(DIO_PORTC, DIO_PIN5, DIO_LOW);
    1d3a:	82 e0       	ldi	r24, 0x02	; 2
    1d3c:	65 e0       	ldi	r22, 0x05	; 5
    1d3e:	40 e0       	ldi	r20, 0x00	; 0
    1d40:	0e 94 c2 11 	call	0x2384	; 0x2384 <Dio_vidwriteChanel>
		Dio_vidwriteChanel(DIO_PORTC, DIO_PIN6, DIO_HIGH);
    1d44:	82 e0       	ldi	r24, 0x02	; 2
    1d46:	66 e0       	ldi	r22, 0x06	; 6
    1d48:	41 e0       	ldi	r20, 0x01	; 1
    1d4a:	0e 94 c2 11 	call	0x2384	; 0x2384 <Dio_vidwriteChanel>
		Dio_vidwriteChanel(DIO_PORTC, DIO_PIN7, DIO_HIGH);
    1d4e:	82 e0       	ldi	r24, 0x02	; 2
    1d50:	67 e0       	ldi	r22, 0x07	; 7
    1d52:	41 e0       	ldi	r20, 0x01	; 1
    1d54:	0e 94 c2 11 	call	0x2384	; 0x2384 <Dio_vidwriteChanel>

		if (Keypad_GetRow() == current_row)
    1d58:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <Keypad_GetRow>
    1d5c:	98 2f       	mov	r25, r24
    1d5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d60:	98 17       	cp	r25, r24
    1d62:	19 f4       	brne	.+6      	; 0x1d6a <Keypad_GetCol+0x82>
		{
			loc_ButtonCol = KP_COL1;
    1d64:	81 e0       	ldi	r24, 0x01	; 1
    1d66:	89 83       	std	Y+1, r24	; 0x01
    1d68:	3c c0       	rjmp	.+120    	; 0x1de2 <Keypad_GetCol+0xfa>
		}
		else
		{
			Dio_vidwriteChanel(DIO_PORTC, DIO_PIN4, DIO_HIGH);
    1d6a:	82 e0       	ldi	r24, 0x02	; 2
    1d6c:	64 e0       	ldi	r22, 0x04	; 4
    1d6e:	41 e0       	ldi	r20, 0x01	; 1
    1d70:	0e 94 c2 11 	call	0x2384	; 0x2384 <Dio_vidwriteChanel>
			Dio_vidwriteChanel(DIO_PORTC, DIO_PIN5, DIO_HIGH);
    1d74:	82 e0       	ldi	r24, 0x02	; 2
    1d76:	65 e0       	ldi	r22, 0x05	; 5
    1d78:	41 e0       	ldi	r20, 0x01	; 1
    1d7a:	0e 94 c2 11 	call	0x2384	; 0x2384 <Dio_vidwriteChanel>
			Dio_vidwriteChanel(DIO_PORTC, DIO_PIN6, DIO_LOW);
    1d7e:	82 e0       	ldi	r24, 0x02	; 2
    1d80:	66 e0       	ldi	r22, 0x06	; 6
    1d82:	40 e0       	ldi	r20, 0x00	; 0
    1d84:	0e 94 c2 11 	call	0x2384	; 0x2384 <Dio_vidwriteChanel>
			Dio_vidwriteChanel(DIO_PORTC, DIO_PIN7, DIO_HIGH);
    1d88:	82 e0       	ldi	r24, 0x02	; 2
    1d8a:	67 e0       	ldi	r22, 0x07	; 7
    1d8c:	41 e0       	ldi	r20, 0x01	; 1
    1d8e:	0e 94 c2 11 	call	0x2384	; 0x2384 <Dio_vidwriteChanel>

			if (Keypad_GetRow() == current_row)
    1d92:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <Keypad_GetRow>
    1d96:	98 2f       	mov	r25, r24
    1d98:	8a 81       	ldd	r24, Y+2	; 0x02
    1d9a:	98 17       	cp	r25, r24
    1d9c:	19 f4       	brne	.+6      	; 0x1da4 <Keypad_GetCol+0xbc>
			{
				loc_ButtonCol = KP_COL2;
    1d9e:	82 e0       	ldi	r24, 0x02	; 2
    1da0:	89 83       	std	Y+1, r24	; 0x01
    1da2:	1f c0       	rjmp	.+62     	; 0x1de2 <Keypad_GetCol+0xfa>
			}
			else
			{
				Dio_vidwriteChanel(DIO_PORTC, DIO_PIN4, DIO_HIGH);
    1da4:	82 e0       	ldi	r24, 0x02	; 2
    1da6:	64 e0       	ldi	r22, 0x04	; 4
    1da8:	41 e0       	ldi	r20, 0x01	; 1
    1daa:	0e 94 c2 11 	call	0x2384	; 0x2384 <Dio_vidwriteChanel>
				Dio_vidwriteChanel(DIO_PORTC, DIO_PIN5, DIO_HIGH);
    1dae:	82 e0       	ldi	r24, 0x02	; 2
    1db0:	65 e0       	ldi	r22, 0x05	; 5
    1db2:	41 e0       	ldi	r20, 0x01	; 1
    1db4:	0e 94 c2 11 	call	0x2384	; 0x2384 <Dio_vidwriteChanel>
				Dio_vidwriteChanel(DIO_PORTC, DIO_PIN6, DIO_HIGH);
    1db8:	82 e0       	ldi	r24, 0x02	; 2
    1dba:	66 e0       	ldi	r22, 0x06	; 6
    1dbc:	41 e0       	ldi	r20, 0x01	; 1
    1dbe:	0e 94 c2 11 	call	0x2384	; 0x2384 <Dio_vidwriteChanel>
				Dio_vidwriteChanel(DIO_PORTC, DIO_PIN7, DIO_LOW);
    1dc2:	82 e0       	ldi	r24, 0x02	; 2
    1dc4:	67 e0       	ldi	r22, 0x07	; 7
    1dc6:	40 e0       	ldi	r20, 0x00	; 0
    1dc8:	0e 94 c2 11 	call	0x2384	; 0x2384 <Dio_vidwriteChanel>

				if (Keypad_GetRow() == current_row)
    1dcc:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <Keypad_GetRow>
    1dd0:	98 2f       	mov	r25, r24
    1dd2:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd4:	98 17       	cp	r25, r24
    1dd6:	19 f4       	brne	.+6      	; 0x1dde <Keypad_GetCol+0xf6>
				{
					loc_ButtonCol = KP_COL3;
    1dd8:	83 e0       	ldi	r24, 0x03	; 3
    1dda:	89 83       	std	Y+1, r24	; 0x01
    1ddc:	02 c0       	rjmp	.+4      	; 0x1de2 <Keypad_GetCol+0xfa>
				}
				else
				{
					loc_ButtonCol = KP_NOCOL;
    1dde:	8f ef       	ldi	r24, 0xFF	; 255
    1de0:	89 83       	std	Y+1, r24	; 0x01
				}
			}
		}
	}
	return loc_ButtonCol;
    1de2:	89 81       	ldd	r24, Y+1	; 0x01
}
    1de4:	0f 90       	pop	r0
    1de6:	0f 90       	pop	r0
    1de8:	cf 91       	pop	r28
    1dea:	df 91       	pop	r29
    1dec:	08 95       	ret

00001dee <Keypad_u8GetKey>:

u8 Keypad_u8GetKey(void)
{
    1dee:	df 93       	push	r29
    1df0:	cf 93       	push	r28
    1df2:	00 d0       	rcall	.+0      	; 0x1df4 <Keypad_u8GetKey+0x6>
    1df4:	0f 92       	push	r0
    1df6:	cd b7       	in	r28, 0x3d	; 61
    1df8:	de b7       	in	r29, 0x3e	; 62
	u8 loc_key = 0xFF;
    1dfa:	8f ef       	ldi	r24, 0xFF	; 255
    1dfc:	8b 83       	std	Y+3, r24	; 0x03
	kp_row_t loc_Row = KP_NOROW;
    1dfe:	8f ef       	ldi	r24, 0xFF	; 255
    1e00:	8a 83       	std	Y+2, r24	; 0x02
	kp_row_t loc_Col = KP_NOCOL;
    1e02:	8f ef       	ldi	r24, 0xFF	; 255
    1e04:	89 83       	std	Y+1, r24	; 0x01

	Keypad_vidInit();
    1e06:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <Keypad_vidInit>
	/*	Check If Keypad Pressed*/
	if (Keypad_IsPressed() == TRUE)
    1e0a:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <Keypad_IsPressed>
    1e0e:	81 30       	cpi	r24, 0x01	; 1
    1e10:	f1 f4       	brne	.+60     	; 0x1e4e <Keypad_u8GetKey+0x60>
	{
		/*	Get pressed key ROW*/
		loc_Row = Keypad_GetRow();
    1e12:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <Keypad_GetRow>
    1e16:	8a 83       	std	Y+2, r24	; 0x02
		/*	Get pressed key COLUMN	*/
		loc_Col = Keypad_GetCol(loc_Row);
    1e18:	8a 81       	ldd	r24, Y+2	; 0x02
    1e1a:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <Keypad_GetCol>
    1e1e:	89 83       	std	Y+1, r24	; 0x01
		/* loc_key = Keypad_layout[ROW][COLUMN]	*/
		loc_key = Keypad_layout[loc_Row][loc_Col];
    1e20:	8a 81       	ldd	r24, Y+2	; 0x02
    1e22:	48 2f       	mov	r20, r24
    1e24:	55 27       	eor	r21, r21
    1e26:	47 fd       	sbrc	r20, 7
    1e28:	50 95       	com	r21
    1e2a:	89 81       	ldd	r24, Y+1	; 0x01
    1e2c:	28 2f       	mov	r18, r24
    1e2e:	33 27       	eor	r19, r19
    1e30:	27 fd       	sbrc	r18, 7
    1e32:	30 95       	com	r19
    1e34:	ca 01       	movw	r24, r20
    1e36:	88 0f       	add	r24, r24
    1e38:	99 1f       	adc	r25, r25
    1e3a:	88 0f       	add	r24, r24
    1e3c:	99 1f       	adc	r25, r25
    1e3e:	82 0f       	add	r24, r18
    1e40:	93 1f       	adc	r25, r19
    1e42:	fc 01       	movw	r30, r24
    1e44:	e5 59       	subi	r30, 0x95	; 149
    1e46:	ff 4f       	sbci	r31, 0xFF	; 255
    1e48:	80 81       	ld	r24, Z
    1e4a:	8b 83       	std	Y+3, r24	; 0x03
    1e4c:	02 c0       	rjmp	.+4      	; 0x1e52 <Keypad_u8GetKey+0x64>
	}
	else
	{
		/*	Do Nothing	*/
		loc_key = 0xFF;
    1e4e:	8f ef       	ldi	r24, 0xFF	; 255
    1e50:	8b 83       	std	Y+3, r24	; 0x03
	}
	return loc_key;
    1e52:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1e54:	0f 90       	pop	r0
    1e56:	0f 90       	pop	r0
    1e58:	0f 90       	pop	r0
    1e5a:	cf 91       	pop	r28
    1e5c:	df 91       	pop	r29
    1e5e:	08 95       	ret

00001e60 <Buzzer_vidinit>:
 *      Author: Eng_Fawzi
 */
#include "Dio.h"

void Buzzer_vidinit(void)
{
    1e60:	df 93       	push	r29
    1e62:	cf 93       	push	r28
    1e64:	cd b7       	in	r28, 0x3d	; 61
    1e66:	de b7       	in	r29, 0x3e	; 62
	Dio_vidconfigChanel(DIO_PORTA,DIO_PIN3,DIO_OUTPUT);
    1e68:	80 e0       	ldi	r24, 0x00	; 0
    1e6a:	63 e0       	ldi	r22, 0x03	; 3
    1e6c:	41 e0       	ldi	r20, 0x01	; 1
    1e6e:	0e 94 df 10 	call	0x21be	; 0x21be <Dio_vidconfigChanel>
}
    1e72:	cf 91       	pop	r28
    1e74:	df 91       	pop	r29
    1e76:	08 95       	ret

00001e78 <Buzzer_vidbuzzerOn>:
void Buzzer_vidbuzzerOn(void)
{
    1e78:	df 93       	push	r29
    1e7a:	cf 93       	push	r28
    1e7c:	cd b7       	in	r28, 0x3d	; 61
    1e7e:	de b7       	in	r29, 0x3e	; 62
	Dio_vidwriteChanel(DIO_PORTA, DIO_PIN3, DIO_HIGH);
    1e80:	80 e0       	ldi	r24, 0x00	; 0
    1e82:	63 e0       	ldi	r22, 0x03	; 3
    1e84:	41 e0       	ldi	r20, 0x01	; 1
    1e86:	0e 94 c2 11 	call	0x2384	; 0x2384 <Dio_vidwriteChanel>
}
    1e8a:	cf 91       	pop	r28
    1e8c:	df 91       	pop	r29
    1e8e:	08 95       	ret

00001e90 <Buzzer_vidbuzzerOff>:
void Buzzer_vidbuzzerOff(void)
{
    1e90:	df 93       	push	r29
    1e92:	cf 93       	push	r28
    1e94:	cd b7       	in	r28, 0x3d	; 61
    1e96:	de b7       	in	r29, 0x3e	; 62
	Dio_vidwriteChanel(DIO_PORTA, DIO_PIN3, DIO_LOW);
    1e98:	80 e0       	ldi	r24, 0x00	; 0
    1e9a:	63 e0       	ldi	r22, 0x03	; 3
    1e9c:	40 e0       	ldi	r20, 0x00	; 0
    1e9e:	0e 94 c2 11 	call	0x2384	; 0x2384 <Dio_vidwriteChanel>
}
    1ea2:	cf 91       	pop	r28
    1ea4:	df 91       	pop	r29
    1ea6:	08 95       	ret

00001ea8 <Button_vidbuttonInit>:
 */
#include "Button.h"
#include "Dio.h"

void Button_vidbuttonInit(void)
{
    1ea8:	df 93       	push	r29
    1eaa:	cf 93       	push	r28
    1eac:	cd b7       	in	r28, 0x3d	; 61
    1eae:	de b7       	in	r29, 0x3e	; 62
	Dio_vidconfigChanel(DIO_PORTB, DIO_PIN0, DIO_INPUT);
    1eb0:	81 e0       	ldi	r24, 0x01	; 1
    1eb2:	60 e0       	ldi	r22, 0x00	; 0
    1eb4:	40 e0       	ldi	r20, 0x00	; 0
    1eb6:	0e 94 df 10 	call	0x21be	; 0x21be <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTD, DIO_PIN6, DIO_INPUT);
    1eba:	83 e0       	ldi	r24, 0x03	; 3
    1ebc:	66 e0       	ldi	r22, 0x06	; 6
    1ebe:	40 e0       	ldi	r20, 0x00	; 0
    1ec0:	0e 94 df 10 	call	0x21be	; 0x21be <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTD, DIO_PIN2, DIO_INPUT);
    1ec4:	83 e0       	ldi	r24, 0x03	; 3
    1ec6:	62 e0       	ldi	r22, 0x02	; 2
    1ec8:	40 e0       	ldi	r20, 0x00	; 0
    1eca:	0e 94 df 10 	call	0x21be	; 0x21be <Dio_vidconfigChanel>
}
    1ece:	cf 91       	pop	r28
    1ed0:	df 91       	pop	r29
    1ed2:	08 95       	ret

00001ed4 <Button_udtbuttonStatus>:


button_butStatus_t Button_udtbuttonStatus(button_buttonId_t butnId)
{
    1ed4:	df 93       	push	r29
    1ed6:	cf 93       	push	r28
    1ed8:	00 d0       	rcall	.+0      	; 0x1eda <Button_udtbuttonStatus+0x6>
    1eda:	00 d0       	rcall	.+0      	; 0x1edc <Button_udtbuttonStatus+0x8>
    1edc:	cd b7       	in	r28, 0x3d	; 61
    1ede:	de b7       	in	r29, 0x3e	; 62
    1ee0:	8a 83       	std	Y+2, r24	; 0x02
	button_butStatus_t locBtnStatus = RELAEASED;
    1ee2:	19 82       	std	Y+1, r1	; 0x01
	switch (butnId)
    1ee4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ee6:	28 2f       	mov	r18, r24
    1ee8:	30 e0       	ldi	r19, 0x00	; 0
    1eea:	3c 83       	std	Y+4, r19	; 0x04
    1eec:	2b 83       	std	Y+3, r18	; 0x03
    1eee:	8b 81       	ldd	r24, Y+3	; 0x03
    1ef0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ef2:	81 30       	cpi	r24, 0x01	; 1
    1ef4:	91 05       	cpc	r25, r1
    1ef6:	a1 f0       	breq	.+40     	; 0x1f20 <Button_udtbuttonStatus+0x4c>
    1ef8:	2b 81       	ldd	r18, Y+3	; 0x03
    1efa:	3c 81       	ldd	r19, Y+4	; 0x04
    1efc:	22 30       	cpi	r18, 0x02	; 2
    1efe:	31 05       	cpc	r19, r1
    1f00:	d1 f0       	breq	.+52     	; 0x1f36 <Button_udtbuttonStatus+0x62>
    1f02:	8b 81       	ldd	r24, Y+3	; 0x03
    1f04:	9c 81       	ldd	r25, Y+4	; 0x04
    1f06:	00 97       	sbiw	r24, 0x00	; 0
    1f08:	01 f5       	brne	.+64     	; 0x1f4a <Button_udtbuttonStatus+0x76>
	{
		case BUTTON0:
			if (Dio_udtreadChanel(DIO_PORTB, DIO_PIN0) == DIO_HIGH)
    1f0a:	81 e0       	ldi	r24, 0x01	; 1
    1f0c:	60 e0       	ldi	r22, 0x00	; 0
    1f0e:	0e 94 01 13 	call	0x2602	; 0x2602 <Dio_udtreadChanel>
    1f12:	81 30       	cpi	r24, 0x01	; 1
    1f14:	19 f4       	brne	.+6      	; 0x1f1c <Button_udtbuttonStatus+0x48>
			{
				locBtnStatus = PRESSED;
    1f16:	81 e0       	ldi	r24, 0x01	; 1
    1f18:	89 83       	std	Y+1, r24	; 0x01
    1f1a:	17 c0       	rjmp	.+46     	; 0x1f4a <Button_udtbuttonStatus+0x76>
			}
			else
			{
				locBtnStatus = RELAEASED;
    1f1c:	19 82       	std	Y+1, r1	; 0x01
    1f1e:	15 c0       	rjmp	.+42     	; 0x1f4a <Button_udtbuttonStatus+0x76>
			}
			break;

		case BUTTON1:
			if (Dio_udtreadChanel(DIO_PORTD, DIO_PIN6) == DIO_HIGH)
    1f20:	83 e0       	ldi	r24, 0x03	; 3
    1f22:	66 e0       	ldi	r22, 0x06	; 6
    1f24:	0e 94 01 13 	call	0x2602	; 0x2602 <Dio_udtreadChanel>
    1f28:	81 30       	cpi	r24, 0x01	; 1
    1f2a:	19 f4       	brne	.+6      	; 0x1f32 <Button_udtbuttonStatus+0x5e>
			{
				locBtnStatus = PRESSED;
    1f2c:	81 e0       	ldi	r24, 0x01	; 1
    1f2e:	89 83       	std	Y+1, r24	; 0x01
    1f30:	0c c0       	rjmp	.+24     	; 0x1f4a <Button_udtbuttonStatus+0x76>
			}
			else
			{
				locBtnStatus = RELAEASED;
    1f32:	19 82       	std	Y+1, r1	; 0x01
    1f34:	0a c0       	rjmp	.+20     	; 0x1f4a <Button_udtbuttonStatus+0x76>
			}
			break;

		case BUTTON2:
			if (Dio_udtreadChanel(DIO_PORTD, DIO_PIN2) == DIO_HIGH)
    1f36:	83 e0       	ldi	r24, 0x03	; 3
    1f38:	62 e0       	ldi	r22, 0x02	; 2
    1f3a:	0e 94 01 13 	call	0x2602	; 0x2602 <Dio_udtreadChanel>
    1f3e:	81 30       	cpi	r24, 0x01	; 1
    1f40:	19 f4       	brne	.+6      	; 0x1f48 <Button_udtbuttonStatus+0x74>
			{
				locBtnStatus = PRESSED;
    1f42:	81 e0       	ldi	r24, 0x01	; 1
    1f44:	89 83       	std	Y+1, r24	; 0x01
    1f46:	01 c0       	rjmp	.+2      	; 0x1f4a <Button_udtbuttonStatus+0x76>
			}
			else
			{
				locBtnStatus = RELAEASED;
    1f48:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
	}
	return locBtnStatus;
    1f4a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f4c:	0f 90       	pop	r0
    1f4e:	0f 90       	pop	r0
    1f50:	0f 90       	pop	r0
    1f52:	0f 90       	pop	r0
    1f54:	cf 91       	pop	r28
    1f56:	df 91       	pop	r29
    1f58:	08 95       	ret

00001f5a <GINT_vidEnableAllInterrupts>:

#include "GINT_Reg.h"
#include "Bit_Math.h"

void GINT_vidEnableAllInterrupts(void)
{
    1f5a:	df 93       	push	r29
    1f5c:	cf 93       	push	r28
    1f5e:	cd b7       	in	r28, 0x3d	; 61
    1f60:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GINT_SREG_REG,7);
    1f62:	af e5       	ldi	r26, 0x5F	; 95
    1f64:	b0 e0       	ldi	r27, 0x00	; 0
    1f66:	ef e5       	ldi	r30, 0x5F	; 95
    1f68:	f0 e0       	ldi	r31, 0x00	; 0
    1f6a:	80 81       	ld	r24, Z
    1f6c:	80 68       	ori	r24, 0x80	; 128
    1f6e:	8c 93       	st	X, r24
}
    1f70:	cf 91       	pop	r28
    1f72:	df 91       	pop	r29
    1f74:	08 95       	ret

00001f76 <GINT_vidDisableAllInterrupts>:

void GINT_vidDisableAllInterrupts(void)
{
    1f76:	df 93       	push	r29
    1f78:	cf 93       	push	r28
    1f7a:	cd b7       	in	r28, 0x3d	; 61
    1f7c:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(GINT_SREG_REG,7);
    1f7e:	af e5       	ldi	r26, 0x5F	; 95
    1f80:	b0 e0       	ldi	r27, 0x00	; 0
    1f82:	ef e5       	ldi	r30, 0x5F	; 95
    1f84:	f0 e0       	ldi	r31, 0x00	; 0
    1f86:	80 81       	ld	r24, Z
    1f88:	8f 77       	andi	r24, 0x7F	; 127
    1f8a:	8c 93       	st	X, r24
}
    1f8c:	cf 91       	pop	r28
    1f8e:	df 91       	pop	r29
    1f90:	08 95       	ret

00001f92 <ExtInt_vidConfigExtInt>:
#include "ExtInt_Reg.h"
#include "ExtInt.h"
#include "Std_Types.h"

void ExtInt_vidConfigExtInt(extint_id_t intId, extint_sensectrl_t sensCtrl)
{
    1f92:	df 93       	push	r29
    1f94:	cf 93       	push	r28
    1f96:	00 d0       	rcall	.+0      	; 0x1f98 <ExtInt_vidConfigExtInt+0x6>
    1f98:	00 d0       	rcall	.+0      	; 0x1f9a <ExtInt_vidConfigExtInt+0x8>
    1f9a:	cd b7       	in	r28, 0x3d	; 61
    1f9c:	de b7       	in	r29, 0x3e	; 62
    1f9e:	89 83       	std	Y+1, r24	; 0x01
    1fa0:	6a 83       	std	Y+2, r22	; 0x02
	switch(intId)
    1fa2:	89 81       	ldd	r24, Y+1	; 0x01
    1fa4:	28 2f       	mov	r18, r24
    1fa6:	30 e0       	ldi	r19, 0x00	; 0
    1fa8:	3c 83       	std	Y+4, r19	; 0x04
    1faa:	2b 83       	std	Y+3, r18	; 0x03
    1fac:	8b 81       	ldd	r24, Y+3	; 0x03
    1fae:	9c 81       	ldd	r25, Y+4	; 0x04
    1fb0:	81 30       	cpi	r24, 0x01	; 1
    1fb2:	91 05       	cpc	r25, r1
    1fb4:	09 f4       	brne	.+2      	; 0x1fb8 <ExtInt_vidConfigExtInt+0x26>
    1fb6:	5a c0       	rjmp	.+180    	; 0x206c <ExtInt_vidConfigExtInt+0xda>
    1fb8:	2b 81       	ldd	r18, Y+3	; 0x03
    1fba:	3c 81       	ldd	r19, Y+4	; 0x04
    1fbc:	22 30       	cpi	r18, 0x02	; 2
    1fbe:	31 05       	cpc	r19, r1
    1fc0:	09 f4       	brne	.+2      	; 0x1fc4 <ExtInt_vidConfigExtInt+0x32>
    1fc2:	a3 c0       	rjmp	.+326    	; 0x210a <ExtInt_vidConfigExtInt+0x178>
    1fc4:	8b 81       	ldd	r24, Y+3	; 0x03
    1fc6:	9c 81       	ldd	r25, Y+4	; 0x04
    1fc8:	00 97       	sbiw	r24, 0x00	; 0
    1fca:	09 f0       	breq	.+2      	; 0x1fce <ExtInt_vidConfigExtInt+0x3c>
    1fcc:	ba c0       	rjmp	.+372    	; 0x2142 <ExtInt_vidConfigExtInt+0x1b0>
	{
	case EXT_INT0:
		/*	configure sense control	*/
		if (sensCtrl == EXT_RISING_EDGE)
    1fce:	8a 81       	ldd	r24, Y+2	; 0x02
    1fd0:	81 30       	cpi	r24, 0x01	; 1
    1fd2:	79 f4       	brne	.+30     	; 0x1ff2 <ExtInt_vidConfigExtInt+0x60>
		{
			SET_BIT(EXTINT_MCUCR_REG,0);
    1fd4:	a5 e5       	ldi	r26, 0x55	; 85
    1fd6:	b0 e0       	ldi	r27, 0x00	; 0
    1fd8:	e5 e5       	ldi	r30, 0x55	; 85
    1fda:	f0 e0       	ldi	r31, 0x00	; 0
    1fdc:	80 81       	ld	r24, Z
    1fde:	81 60       	ori	r24, 0x01	; 1
    1fe0:	8c 93       	st	X, r24
			SET_BIT(EXTINT_MCUCR_REG,1);
    1fe2:	a5 e5       	ldi	r26, 0x55	; 85
    1fe4:	b0 e0       	ldi	r27, 0x00	; 0
    1fe6:	e5 e5       	ldi	r30, 0x55	; 85
    1fe8:	f0 e0       	ldi	r31, 0x00	; 0
    1fea:	80 81       	ld	r24, Z
    1fec:	82 60       	ori	r24, 0x02	; 2
    1fee:	8c 93       	st	X, r24
    1ff0:	35 c0       	rjmp	.+106    	; 0x205c <ExtInt_vidConfigExtInt+0xca>
		}
		else if (sensCtrl == EXT_FAILING_EDGE)
    1ff2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ff4:	88 23       	and	r24, r24
    1ff6:	79 f4       	brne	.+30     	; 0x2016 <ExtInt_vidConfigExtInt+0x84>
		{
			CLEAR_BIT(EXTINT_MCUCR_REG,0);
    1ff8:	a5 e5       	ldi	r26, 0x55	; 85
    1ffa:	b0 e0       	ldi	r27, 0x00	; 0
    1ffc:	e5 e5       	ldi	r30, 0x55	; 85
    1ffe:	f0 e0       	ldi	r31, 0x00	; 0
    2000:	80 81       	ld	r24, Z
    2002:	8e 7f       	andi	r24, 0xFE	; 254
    2004:	8c 93       	st	X, r24
			SET_BIT(EXTINT_MCUCR_REG,1);
    2006:	a5 e5       	ldi	r26, 0x55	; 85
    2008:	b0 e0       	ldi	r27, 0x00	; 0
    200a:	e5 e5       	ldi	r30, 0x55	; 85
    200c:	f0 e0       	ldi	r31, 0x00	; 0
    200e:	80 81       	ld	r24, Z
    2010:	82 60       	ori	r24, 0x02	; 2
    2012:	8c 93       	st	X, r24
    2014:	23 c0       	rjmp	.+70     	; 0x205c <ExtInt_vidConfigExtInt+0xca>
		}
		else if (sensCtrl == EXT_BOTH_EDGE)
    2016:	8a 81       	ldd	r24, Y+2	; 0x02
    2018:	82 30       	cpi	r24, 0x02	; 2
    201a:	79 f4       	brne	.+30     	; 0x203a <ExtInt_vidConfigExtInt+0xa8>
		{
			SET_BIT(EXTINT_MCUCR_REG,0);
    201c:	a5 e5       	ldi	r26, 0x55	; 85
    201e:	b0 e0       	ldi	r27, 0x00	; 0
    2020:	e5 e5       	ldi	r30, 0x55	; 85
    2022:	f0 e0       	ldi	r31, 0x00	; 0
    2024:	80 81       	ld	r24, Z
    2026:	81 60       	ori	r24, 0x01	; 1
    2028:	8c 93       	st	X, r24
			CLEAR_BIT(EXTINT_MCUCR_REG,1);
    202a:	a5 e5       	ldi	r26, 0x55	; 85
    202c:	b0 e0       	ldi	r27, 0x00	; 0
    202e:	e5 e5       	ldi	r30, 0x55	; 85
    2030:	f0 e0       	ldi	r31, 0x00	; 0
    2032:	80 81       	ld	r24, Z
    2034:	8d 7f       	andi	r24, 0xFD	; 253
    2036:	8c 93       	st	X, r24
    2038:	11 c0       	rjmp	.+34     	; 0x205c <ExtInt_vidConfigExtInt+0xca>
		}
		else if (sensCtrl == EXT_LOW_LEVEL)
    203a:	8a 81       	ldd	r24, Y+2	; 0x02
    203c:	83 30       	cpi	r24, 0x03	; 3
    203e:	71 f4       	brne	.+28     	; 0x205c <ExtInt_vidConfigExtInt+0xca>
		{
			CLEAR_BIT(EXTINT_MCUCR_REG,0);
    2040:	a5 e5       	ldi	r26, 0x55	; 85
    2042:	b0 e0       	ldi	r27, 0x00	; 0
    2044:	e5 e5       	ldi	r30, 0x55	; 85
    2046:	f0 e0       	ldi	r31, 0x00	; 0
    2048:	80 81       	ld	r24, Z
    204a:	8e 7f       	andi	r24, 0xFE	; 254
    204c:	8c 93       	st	X, r24
			CLEAR_BIT(EXTINT_MCUCR_REG,1);
    204e:	a5 e5       	ldi	r26, 0x55	; 85
    2050:	b0 e0       	ldi	r27, 0x00	; 0
    2052:	e5 e5       	ldi	r30, 0x55	; 85
    2054:	f0 e0       	ldi	r31, 0x00	; 0
    2056:	80 81       	ld	r24, Z
    2058:	8d 7f       	andi	r24, 0xFD	; 253
    205a:	8c 93       	st	X, r24
		else
		{
			/*	Do Nothing	*/
		}
		/*	Enable Int0 Interrupt	*/
		SET_BIT(EXTINT_GICR_REG,INT0_EN_BIT);
    205c:	ab e5       	ldi	r26, 0x5B	; 91
    205e:	b0 e0       	ldi	r27, 0x00	; 0
    2060:	eb e5       	ldi	r30, 0x5B	; 91
    2062:	f0 e0       	ldi	r31, 0x00	; 0
    2064:	80 81       	ld	r24, Z
    2066:	80 64       	ori	r24, 0x40	; 64
    2068:	8c 93       	st	X, r24
    206a:	6b c0       	rjmp	.+214    	; 0x2142 <ExtInt_vidConfigExtInt+0x1b0>
		break;

	case EXT_INT1:

		/*	configure sense control	*/
				if (sensCtrl == EXT_RISING_EDGE)
    206c:	8a 81       	ldd	r24, Y+2	; 0x02
    206e:	81 30       	cpi	r24, 0x01	; 1
    2070:	79 f4       	brne	.+30     	; 0x2090 <ExtInt_vidConfigExtInt+0xfe>
				{
					SET_BIT(EXTINT_MCUCR_REG,2);
    2072:	a5 e5       	ldi	r26, 0x55	; 85
    2074:	b0 e0       	ldi	r27, 0x00	; 0
    2076:	e5 e5       	ldi	r30, 0x55	; 85
    2078:	f0 e0       	ldi	r31, 0x00	; 0
    207a:	80 81       	ld	r24, Z
    207c:	84 60       	ori	r24, 0x04	; 4
    207e:	8c 93       	st	X, r24
					SET_BIT(EXTINT_MCUCR_REG,3);
    2080:	a5 e5       	ldi	r26, 0x55	; 85
    2082:	b0 e0       	ldi	r27, 0x00	; 0
    2084:	e5 e5       	ldi	r30, 0x55	; 85
    2086:	f0 e0       	ldi	r31, 0x00	; 0
    2088:	80 81       	ld	r24, Z
    208a:	88 60       	ori	r24, 0x08	; 8
    208c:	8c 93       	st	X, r24
    208e:	35 c0       	rjmp	.+106    	; 0x20fa <ExtInt_vidConfigExtInt+0x168>
				}
				else if (sensCtrl == EXT_FAILING_EDGE)
    2090:	8a 81       	ldd	r24, Y+2	; 0x02
    2092:	88 23       	and	r24, r24
    2094:	79 f4       	brne	.+30     	; 0x20b4 <ExtInt_vidConfigExtInt+0x122>
				{
					CLEAR_BIT(EXTINT_MCUCR_REG,2);
    2096:	a5 e5       	ldi	r26, 0x55	; 85
    2098:	b0 e0       	ldi	r27, 0x00	; 0
    209a:	e5 e5       	ldi	r30, 0x55	; 85
    209c:	f0 e0       	ldi	r31, 0x00	; 0
    209e:	80 81       	ld	r24, Z
    20a0:	8b 7f       	andi	r24, 0xFB	; 251
    20a2:	8c 93       	st	X, r24
					SET_BIT(EXTINT_MCUCR_REG,3);
    20a4:	a5 e5       	ldi	r26, 0x55	; 85
    20a6:	b0 e0       	ldi	r27, 0x00	; 0
    20a8:	e5 e5       	ldi	r30, 0x55	; 85
    20aa:	f0 e0       	ldi	r31, 0x00	; 0
    20ac:	80 81       	ld	r24, Z
    20ae:	88 60       	ori	r24, 0x08	; 8
    20b0:	8c 93       	st	X, r24
    20b2:	23 c0       	rjmp	.+70     	; 0x20fa <ExtInt_vidConfigExtInt+0x168>
				}
				else if (sensCtrl == EXT_BOTH_EDGE)
    20b4:	8a 81       	ldd	r24, Y+2	; 0x02
    20b6:	82 30       	cpi	r24, 0x02	; 2
    20b8:	79 f4       	brne	.+30     	; 0x20d8 <ExtInt_vidConfigExtInt+0x146>
				{
					SET_BIT(EXTINT_MCUCR_REG,2);
    20ba:	a5 e5       	ldi	r26, 0x55	; 85
    20bc:	b0 e0       	ldi	r27, 0x00	; 0
    20be:	e5 e5       	ldi	r30, 0x55	; 85
    20c0:	f0 e0       	ldi	r31, 0x00	; 0
    20c2:	80 81       	ld	r24, Z
    20c4:	84 60       	ori	r24, 0x04	; 4
    20c6:	8c 93       	st	X, r24
					CLEAR_BIT(EXTINT_MCUCR_REG,3);
    20c8:	a5 e5       	ldi	r26, 0x55	; 85
    20ca:	b0 e0       	ldi	r27, 0x00	; 0
    20cc:	e5 e5       	ldi	r30, 0x55	; 85
    20ce:	f0 e0       	ldi	r31, 0x00	; 0
    20d0:	80 81       	ld	r24, Z
    20d2:	87 7f       	andi	r24, 0xF7	; 247
    20d4:	8c 93       	st	X, r24
    20d6:	11 c0       	rjmp	.+34     	; 0x20fa <ExtInt_vidConfigExtInt+0x168>
				}
				else if (sensCtrl == EXT_LOW_LEVEL)
    20d8:	8a 81       	ldd	r24, Y+2	; 0x02
    20da:	83 30       	cpi	r24, 0x03	; 3
    20dc:	71 f4       	brne	.+28     	; 0x20fa <ExtInt_vidConfigExtInt+0x168>
				{
					CLEAR_BIT(EXTINT_MCUCR_REG,2);
    20de:	a5 e5       	ldi	r26, 0x55	; 85
    20e0:	b0 e0       	ldi	r27, 0x00	; 0
    20e2:	e5 e5       	ldi	r30, 0x55	; 85
    20e4:	f0 e0       	ldi	r31, 0x00	; 0
    20e6:	80 81       	ld	r24, Z
    20e8:	8b 7f       	andi	r24, 0xFB	; 251
    20ea:	8c 93       	st	X, r24
					CLEAR_BIT(EXTINT_MCUCR_REG,3);
    20ec:	a5 e5       	ldi	r26, 0x55	; 85
    20ee:	b0 e0       	ldi	r27, 0x00	; 0
    20f0:	e5 e5       	ldi	r30, 0x55	; 85
    20f2:	f0 e0       	ldi	r31, 0x00	; 0
    20f4:	80 81       	ld	r24, Z
    20f6:	87 7f       	andi	r24, 0xF7	; 247
    20f8:	8c 93       	st	X, r24
				else
				{
					/*	Do Nothing	*/
				}

		SET_BIT(EXTINT_GICR_REG,INT1_EN_BIT);
    20fa:	ab e5       	ldi	r26, 0x5B	; 91
    20fc:	b0 e0       	ldi	r27, 0x00	; 0
    20fe:	eb e5       	ldi	r30, 0x5B	; 91
    2100:	f0 e0       	ldi	r31, 0x00	; 0
    2102:	80 81       	ld	r24, Z
    2104:	80 68       	ori	r24, 0x80	; 128
    2106:	8c 93       	st	X, r24
    2108:	1c c0       	rjmp	.+56     	; 0x2142 <ExtInt_vidConfigExtInt+0x1b0>
		break;

	case EXT_INT2:

		if (sensCtrl == EXT_FAILING_EDGE)
    210a:	8a 81       	ldd	r24, Y+2	; 0x02
    210c:	88 23       	and	r24, r24
    210e:	41 f4       	brne	.+16     	; 0x2120 <ExtInt_vidConfigExtInt+0x18e>
		{
			CLEAR_BIT(EXTINT_MCUCSR_REG,6);
    2110:	a4 e5       	ldi	r26, 0x54	; 84
    2112:	b0 e0       	ldi	r27, 0x00	; 0
    2114:	e4 e5       	ldi	r30, 0x54	; 84
    2116:	f0 e0       	ldi	r31, 0x00	; 0
    2118:	80 81       	ld	r24, Z
    211a:	8f 7b       	andi	r24, 0xBF	; 191
    211c:	8c 93       	st	X, r24
    211e:	0a c0       	rjmp	.+20     	; 0x2134 <ExtInt_vidConfigExtInt+0x1a2>
		}
		else if (sensCtrl == EXT_RISING_EDGE)
    2120:	8a 81       	ldd	r24, Y+2	; 0x02
    2122:	81 30       	cpi	r24, 0x01	; 1
    2124:	39 f4       	brne	.+14     	; 0x2134 <ExtInt_vidConfigExtInt+0x1a2>
		{
			SET_BIT(EXTINT_MCUCSR_REG,6);
    2126:	a4 e5       	ldi	r26, 0x54	; 84
    2128:	b0 e0       	ldi	r27, 0x00	; 0
    212a:	e4 e5       	ldi	r30, 0x54	; 84
    212c:	f0 e0       	ldi	r31, 0x00	; 0
    212e:	80 81       	ld	r24, Z
    2130:	80 64       	ori	r24, 0x40	; 64
    2132:	8c 93       	st	X, r24
		}
		else
		{
			/*	Do Nothing	*/
		}
		SET_BIT(EXTINT_GICR_REG,INT2_EN_BIT);
    2134:	ab e5       	ldi	r26, 0x5B	; 91
    2136:	b0 e0       	ldi	r27, 0x00	; 0
    2138:	eb e5       	ldi	r30, 0x5B	; 91
    213a:	f0 e0       	ldi	r31, 0x00	; 0
    213c:	80 81       	ld	r24, Z
    213e:	80 62       	ori	r24, 0x20	; 32
    2140:	8c 93       	st	X, r24
		break;
	}
}
    2142:	0f 90       	pop	r0
    2144:	0f 90       	pop	r0
    2146:	0f 90       	pop	r0
    2148:	0f 90       	pop	r0
    214a:	cf 91       	pop	r28
    214c:	df 91       	pop	r29
    214e:	08 95       	ret

00002150 <ExtInt_vidDisableExtInt>:

void ExtInt_vidDisableExtInt(extint_id_t intId)
{
    2150:	df 93       	push	r29
    2152:	cf 93       	push	r28
    2154:	00 d0       	rcall	.+0      	; 0x2156 <ExtInt_vidDisableExtInt+0x6>
    2156:	0f 92       	push	r0
    2158:	cd b7       	in	r28, 0x3d	; 61
    215a:	de b7       	in	r29, 0x3e	; 62
    215c:	89 83       	std	Y+1, r24	; 0x01
	switch (intId)
    215e:	89 81       	ldd	r24, Y+1	; 0x01
    2160:	28 2f       	mov	r18, r24
    2162:	30 e0       	ldi	r19, 0x00	; 0
    2164:	3b 83       	std	Y+3, r19	; 0x03
    2166:	2a 83       	std	Y+2, r18	; 0x02
    2168:	8a 81       	ldd	r24, Y+2	; 0x02
    216a:	9b 81       	ldd	r25, Y+3	; 0x03
    216c:	81 30       	cpi	r24, 0x01	; 1
    216e:	91 05       	cpc	r25, r1
    2170:	89 f0       	breq	.+34     	; 0x2194 <ExtInt_vidDisableExtInt+0x44>
    2172:	2a 81       	ldd	r18, Y+2	; 0x02
    2174:	3b 81       	ldd	r19, Y+3	; 0x03
    2176:	22 30       	cpi	r18, 0x02	; 2
    2178:	31 05       	cpc	r19, r1
    217a:	a1 f0       	breq	.+40     	; 0x21a4 <ExtInt_vidDisableExtInt+0x54>
    217c:	8a 81       	ldd	r24, Y+2	; 0x02
    217e:	9b 81       	ldd	r25, Y+3	; 0x03
    2180:	00 97       	sbiw	r24, 0x00	; 0
    2182:	b9 f4       	brne	.+46     	; 0x21b2 <ExtInt_vidDisableExtInt+0x62>
	{
	case EXT_INT0:
		SET_BIT(EXTINT_GICR_REG,INT0_EN_BIT);
    2184:	ab e5       	ldi	r26, 0x5B	; 91
    2186:	b0 e0       	ldi	r27, 0x00	; 0
    2188:	eb e5       	ldi	r30, 0x5B	; 91
    218a:	f0 e0       	ldi	r31, 0x00	; 0
    218c:	80 81       	ld	r24, Z
    218e:	80 64       	ori	r24, 0x40	; 64
    2190:	8c 93       	st	X, r24
    2192:	0f c0       	rjmp	.+30     	; 0x21b2 <ExtInt_vidDisableExtInt+0x62>
		break;

	case EXT_INT1:
		SET_BIT(EXTINT_GICR_REG,INT1_EN_BIT);
    2194:	ab e5       	ldi	r26, 0x5B	; 91
    2196:	b0 e0       	ldi	r27, 0x00	; 0
    2198:	eb e5       	ldi	r30, 0x5B	; 91
    219a:	f0 e0       	ldi	r31, 0x00	; 0
    219c:	80 81       	ld	r24, Z
    219e:	80 68       	ori	r24, 0x80	; 128
    21a0:	8c 93       	st	X, r24
    21a2:	07 c0       	rjmp	.+14     	; 0x21b2 <ExtInt_vidDisableExtInt+0x62>
		break;

	case EXT_INT2:
		SET_BIT(EXTINT_GICR_REG,INT2_EN_BIT);
    21a4:	ab e5       	ldi	r26, 0x5B	; 91
    21a6:	b0 e0       	ldi	r27, 0x00	; 0
    21a8:	eb e5       	ldi	r30, 0x5B	; 91
    21aa:	f0 e0       	ldi	r31, 0x00	; 0
    21ac:	80 81       	ld	r24, Z
    21ae:	80 62       	ori	r24, 0x20	; 32
    21b0:	8c 93       	st	X, r24
		break;
	}
}
    21b2:	0f 90       	pop	r0
    21b4:	0f 90       	pop	r0
    21b6:	0f 90       	pop	r0
    21b8:	cf 91       	pop	r28
    21ba:	df 91       	pop	r29
    21bc:	08 95       	ret

000021be <Dio_vidconfigChanel>:
 */
#include "Dio.h"
#include "Bit_Math.h"

void Dio_vidconfigChanel(dio_port_t port, dio_pin_t pin,dio_dir_t dir)
{
    21be:	df 93       	push	r29
    21c0:	cf 93       	push	r28
    21c2:	00 d0       	rcall	.+0      	; 0x21c4 <Dio_vidconfigChanel+0x6>
    21c4:	00 d0       	rcall	.+0      	; 0x21c6 <Dio_vidconfigChanel+0x8>
    21c6:	0f 92       	push	r0
    21c8:	cd b7       	in	r28, 0x3d	; 61
    21ca:	de b7       	in	r29, 0x3e	; 62
    21cc:	89 83       	std	Y+1, r24	; 0x01
    21ce:	6a 83       	std	Y+2, r22	; 0x02
    21d0:	4b 83       	std	Y+3, r20	; 0x03
	switch(port)
    21d2:	89 81       	ldd	r24, Y+1	; 0x01
    21d4:	28 2f       	mov	r18, r24
    21d6:	30 e0       	ldi	r19, 0x00	; 0
    21d8:	3d 83       	std	Y+5, r19	; 0x05
    21da:	2c 83       	std	Y+4, r18	; 0x04
    21dc:	8c 81       	ldd	r24, Y+4	; 0x04
    21de:	9d 81       	ldd	r25, Y+5	; 0x05
    21e0:	81 30       	cpi	r24, 0x01	; 1
    21e2:	91 05       	cpc	r25, r1
    21e4:	09 f4       	brne	.+2      	; 0x21e8 <Dio_vidconfigChanel+0x2a>
    21e6:	43 c0       	rjmp	.+134    	; 0x226e <Dio_vidconfigChanel+0xb0>
    21e8:	2c 81       	ldd	r18, Y+4	; 0x04
    21ea:	3d 81       	ldd	r19, Y+5	; 0x05
    21ec:	22 30       	cpi	r18, 0x02	; 2
    21ee:	31 05       	cpc	r19, r1
    21f0:	2c f4       	brge	.+10     	; 0x21fc <Dio_vidconfigChanel+0x3e>
    21f2:	8c 81       	ldd	r24, Y+4	; 0x04
    21f4:	9d 81       	ldd	r25, Y+5	; 0x05
    21f6:	00 97       	sbiw	r24, 0x00	; 0
    21f8:	71 f0       	breq	.+28     	; 0x2216 <Dio_vidconfigChanel+0x58>
    21fa:	bc c0       	rjmp	.+376    	; 0x2374 <Dio_vidconfigChanel+0x1b6>
    21fc:	2c 81       	ldd	r18, Y+4	; 0x04
    21fe:	3d 81       	ldd	r19, Y+5	; 0x05
    2200:	22 30       	cpi	r18, 0x02	; 2
    2202:	31 05       	cpc	r19, r1
    2204:	09 f4       	brne	.+2      	; 0x2208 <Dio_vidconfigChanel+0x4a>
    2206:	5f c0       	rjmp	.+190    	; 0x22c6 <Dio_vidconfigChanel+0x108>
    2208:	8c 81       	ldd	r24, Y+4	; 0x04
    220a:	9d 81       	ldd	r25, Y+5	; 0x05
    220c:	83 30       	cpi	r24, 0x03	; 3
    220e:	91 05       	cpc	r25, r1
    2210:	09 f4       	brne	.+2      	; 0x2214 <Dio_vidconfigChanel+0x56>
    2212:	85 c0       	rjmp	.+266    	; 0x231e <Dio_vidconfigChanel+0x160>
    2214:	af c0       	rjmp	.+350    	; 0x2374 <Dio_vidconfigChanel+0x1b6>
	{
	case DIO_PORTA:
		if (dir == DIO_INPUT)
    2216:	8b 81       	ldd	r24, Y+3	; 0x03
    2218:	88 23       	and	r24, r24
    221a:	a9 f4       	brne	.+42     	; 0x2246 <Dio_vidconfigChanel+0x88>
		{
			CLEAR_BIT(DIO_DDRA_REG,pin);
    221c:	aa e3       	ldi	r26, 0x3A	; 58
    221e:	b0 e0       	ldi	r27, 0x00	; 0
    2220:	ea e3       	ldi	r30, 0x3A	; 58
    2222:	f0 e0       	ldi	r31, 0x00	; 0
    2224:	80 81       	ld	r24, Z
    2226:	48 2f       	mov	r20, r24
    2228:	8a 81       	ldd	r24, Y+2	; 0x02
    222a:	28 2f       	mov	r18, r24
    222c:	30 e0       	ldi	r19, 0x00	; 0
    222e:	81 e0       	ldi	r24, 0x01	; 1
    2230:	90 e0       	ldi	r25, 0x00	; 0
    2232:	02 2e       	mov	r0, r18
    2234:	02 c0       	rjmp	.+4      	; 0x223a <Dio_vidconfigChanel+0x7c>
    2236:	88 0f       	add	r24, r24
    2238:	99 1f       	adc	r25, r25
    223a:	0a 94       	dec	r0
    223c:	e2 f7       	brpl	.-8      	; 0x2236 <Dio_vidconfigChanel+0x78>
    223e:	80 95       	com	r24
    2240:	84 23       	and	r24, r20
    2242:	8c 93       	st	X, r24
    2244:	97 c0       	rjmp	.+302    	; 0x2374 <Dio_vidconfigChanel+0x1b6>
		}
		else
		{
			SET_BIT(DIO_DDRA_REG,pin);
    2246:	aa e3       	ldi	r26, 0x3A	; 58
    2248:	b0 e0       	ldi	r27, 0x00	; 0
    224a:	ea e3       	ldi	r30, 0x3A	; 58
    224c:	f0 e0       	ldi	r31, 0x00	; 0
    224e:	80 81       	ld	r24, Z
    2250:	48 2f       	mov	r20, r24
    2252:	8a 81       	ldd	r24, Y+2	; 0x02
    2254:	28 2f       	mov	r18, r24
    2256:	30 e0       	ldi	r19, 0x00	; 0
    2258:	81 e0       	ldi	r24, 0x01	; 1
    225a:	90 e0       	ldi	r25, 0x00	; 0
    225c:	02 2e       	mov	r0, r18
    225e:	02 c0       	rjmp	.+4      	; 0x2264 <Dio_vidconfigChanel+0xa6>
    2260:	88 0f       	add	r24, r24
    2262:	99 1f       	adc	r25, r25
    2264:	0a 94       	dec	r0
    2266:	e2 f7       	brpl	.-8      	; 0x2260 <Dio_vidconfigChanel+0xa2>
    2268:	84 2b       	or	r24, r20
    226a:	8c 93       	st	X, r24
    226c:	83 c0       	rjmp	.+262    	; 0x2374 <Dio_vidconfigChanel+0x1b6>
		}
		break;

	case DIO_PORTB:
		if (dir == DIO_INPUT)
    226e:	8b 81       	ldd	r24, Y+3	; 0x03
    2270:	88 23       	and	r24, r24
    2272:	a9 f4       	brne	.+42     	; 0x229e <Dio_vidconfigChanel+0xe0>
		{
			CLEAR_BIT(DIO_DDRB_REG,pin);
    2274:	a7 e3       	ldi	r26, 0x37	; 55
    2276:	b0 e0       	ldi	r27, 0x00	; 0
    2278:	e7 e3       	ldi	r30, 0x37	; 55
    227a:	f0 e0       	ldi	r31, 0x00	; 0
    227c:	80 81       	ld	r24, Z
    227e:	48 2f       	mov	r20, r24
    2280:	8a 81       	ldd	r24, Y+2	; 0x02
    2282:	28 2f       	mov	r18, r24
    2284:	30 e0       	ldi	r19, 0x00	; 0
    2286:	81 e0       	ldi	r24, 0x01	; 1
    2288:	90 e0       	ldi	r25, 0x00	; 0
    228a:	02 2e       	mov	r0, r18
    228c:	02 c0       	rjmp	.+4      	; 0x2292 <Dio_vidconfigChanel+0xd4>
    228e:	88 0f       	add	r24, r24
    2290:	99 1f       	adc	r25, r25
    2292:	0a 94       	dec	r0
    2294:	e2 f7       	brpl	.-8      	; 0x228e <Dio_vidconfigChanel+0xd0>
    2296:	80 95       	com	r24
    2298:	84 23       	and	r24, r20
    229a:	8c 93       	st	X, r24
    229c:	6b c0       	rjmp	.+214    	; 0x2374 <Dio_vidconfigChanel+0x1b6>
		}
		else
		{
			SET_BIT(DIO_DDRB_REG,pin);
    229e:	a7 e3       	ldi	r26, 0x37	; 55
    22a0:	b0 e0       	ldi	r27, 0x00	; 0
    22a2:	e7 e3       	ldi	r30, 0x37	; 55
    22a4:	f0 e0       	ldi	r31, 0x00	; 0
    22a6:	80 81       	ld	r24, Z
    22a8:	48 2f       	mov	r20, r24
    22aa:	8a 81       	ldd	r24, Y+2	; 0x02
    22ac:	28 2f       	mov	r18, r24
    22ae:	30 e0       	ldi	r19, 0x00	; 0
    22b0:	81 e0       	ldi	r24, 0x01	; 1
    22b2:	90 e0       	ldi	r25, 0x00	; 0
    22b4:	02 2e       	mov	r0, r18
    22b6:	02 c0       	rjmp	.+4      	; 0x22bc <Dio_vidconfigChanel+0xfe>
    22b8:	88 0f       	add	r24, r24
    22ba:	99 1f       	adc	r25, r25
    22bc:	0a 94       	dec	r0
    22be:	e2 f7       	brpl	.-8      	; 0x22b8 <Dio_vidconfigChanel+0xfa>
    22c0:	84 2b       	or	r24, r20
    22c2:	8c 93       	st	X, r24
    22c4:	57 c0       	rjmp	.+174    	; 0x2374 <Dio_vidconfigChanel+0x1b6>
		}
		break;

	case DIO_PORTC:
		if (dir == DIO_INPUT)
    22c6:	8b 81       	ldd	r24, Y+3	; 0x03
    22c8:	88 23       	and	r24, r24
    22ca:	a9 f4       	brne	.+42     	; 0x22f6 <Dio_vidconfigChanel+0x138>
		{
			CLEAR_BIT(DIO_DDRC_REG,pin);
    22cc:	a4 e3       	ldi	r26, 0x34	; 52
    22ce:	b0 e0       	ldi	r27, 0x00	; 0
    22d0:	e4 e3       	ldi	r30, 0x34	; 52
    22d2:	f0 e0       	ldi	r31, 0x00	; 0
    22d4:	80 81       	ld	r24, Z
    22d6:	48 2f       	mov	r20, r24
    22d8:	8a 81       	ldd	r24, Y+2	; 0x02
    22da:	28 2f       	mov	r18, r24
    22dc:	30 e0       	ldi	r19, 0x00	; 0
    22de:	81 e0       	ldi	r24, 0x01	; 1
    22e0:	90 e0       	ldi	r25, 0x00	; 0
    22e2:	02 2e       	mov	r0, r18
    22e4:	02 c0       	rjmp	.+4      	; 0x22ea <Dio_vidconfigChanel+0x12c>
    22e6:	88 0f       	add	r24, r24
    22e8:	99 1f       	adc	r25, r25
    22ea:	0a 94       	dec	r0
    22ec:	e2 f7       	brpl	.-8      	; 0x22e6 <Dio_vidconfigChanel+0x128>
    22ee:	80 95       	com	r24
    22f0:	84 23       	and	r24, r20
    22f2:	8c 93       	st	X, r24
    22f4:	3f c0       	rjmp	.+126    	; 0x2374 <Dio_vidconfigChanel+0x1b6>
		}
		else
		{
			SET_BIT(DIO_DDRC_REG,pin);
    22f6:	a4 e3       	ldi	r26, 0x34	; 52
    22f8:	b0 e0       	ldi	r27, 0x00	; 0
    22fa:	e4 e3       	ldi	r30, 0x34	; 52
    22fc:	f0 e0       	ldi	r31, 0x00	; 0
    22fe:	80 81       	ld	r24, Z
    2300:	48 2f       	mov	r20, r24
    2302:	8a 81       	ldd	r24, Y+2	; 0x02
    2304:	28 2f       	mov	r18, r24
    2306:	30 e0       	ldi	r19, 0x00	; 0
    2308:	81 e0       	ldi	r24, 0x01	; 1
    230a:	90 e0       	ldi	r25, 0x00	; 0
    230c:	02 2e       	mov	r0, r18
    230e:	02 c0       	rjmp	.+4      	; 0x2314 <Dio_vidconfigChanel+0x156>
    2310:	88 0f       	add	r24, r24
    2312:	99 1f       	adc	r25, r25
    2314:	0a 94       	dec	r0
    2316:	e2 f7       	brpl	.-8      	; 0x2310 <Dio_vidconfigChanel+0x152>
    2318:	84 2b       	or	r24, r20
    231a:	8c 93       	st	X, r24
    231c:	2b c0       	rjmp	.+86     	; 0x2374 <Dio_vidconfigChanel+0x1b6>
		}
		break;

	case DIO_PORTD:
		if (dir == DIO_INPUT)
    231e:	8b 81       	ldd	r24, Y+3	; 0x03
    2320:	88 23       	and	r24, r24
    2322:	a9 f4       	brne	.+42     	; 0x234e <Dio_vidconfigChanel+0x190>
		{
			CLEAR_BIT(DIO_DDRD_REG,pin);
    2324:	a1 e3       	ldi	r26, 0x31	; 49
    2326:	b0 e0       	ldi	r27, 0x00	; 0
    2328:	e1 e3       	ldi	r30, 0x31	; 49
    232a:	f0 e0       	ldi	r31, 0x00	; 0
    232c:	80 81       	ld	r24, Z
    232e:	48 2f       	mov	r20, r24
    2330:	8a 81       	ldd	r24, Y+2	; 0x02
    2332:	28 2f       	mov	r18, r24
    2334:	30 e0       	ldi	r19, 0x00	; 0
    2336:	81 e0       	ldi	r24, 0x01	; 1
    2338:	90 e0       	ldi	r25, 0x00	; 0
    233a:	02 2e       	mov	r0, r18
    233c:	02 c0       	rjmp	.+4      	; 0x2342 <Dio_vidconfigChanel+0x184>
    233e:	88 0f       	add	r24, r24
    2340:	99 1f       	adc	r25, r25
    2342:	0a 94       	dec	r0
    2344:	e2 f7       	brpl	.-8      	; 0x233e <Dio_vidconfigChanel+0x180>
    2346:	80 95       	com	r24
    2348:	84 23       	and	r24, r20
    234a:	8c 93       	st	X, r24
    234c:	13 c0       	rjmp	.+38     	; 0x2374 <Dio_vidconfigChanel+0x1b6>
		}
		else
		{
			SET_BIT(DIO_DDRD_REG,pin);
    234e:	a1 e3       	ldi	r26, 0x31	; 49
    2350:	b0 e0       	ldi	r27, 0x00	; 0
    2352:	e1 e3       	ldi	r30, 0x31	; 49
    2354:	f0 e0       	ldi	r31, 0x00	; 0
    2356:	80 81       	ld	r24, Z
    2358:	48 2f       	mov	r20, r24
    235a:	8a 81       	ldd	r24, Y+2	; 0x02
    235c:	28 2f       	mov	r18, r24
    235e:	30 e0       	ldi	r19, 0x00	; 0
    2360:	81 e0       	ldi	r24, 0x01	; 1
    2362:	90 e0       	ldi	r25, 0x00	; 0
    2364:	02 2e       	mov	r0, r18
    2366:	02 c0       	rjmp	.+4      	; 0x236c <Dio_vidconfigChanel+0x1ae>
    2368:	88 0f       	add	r24, r24
    236a:	99 1f       	adc	r25, r25
    236c:	0a 94       	dec	r0
    236e:	e2 f7       	brpl	.-8      	; 0x2368 <Dio_vidconfigChanel+0x1aa>
    2370:	84 2b       	or	r24, r20
    2372:	8c 93       	st	X, r24
		}
		break;
	}
}
    2374:	0f 90       	pop	r0
    2376:	0f 90       	pop	r0
    2378:	0f 90       	pop	r0
    237a:	0f 90       	pop	r0
    237c:	0f 90       	pop	r0
    237e:	cf 91       	pop	r28
    2380:	df 91       	pop	r29
    2382:	08 95       	ret

00002384 <Dio_vidwriteChanel>:

void Dio_vidwriteChanel(dio_port_t port, dio_pin_t pin,dio_level_t level)
{
    2384:	df 93       	push	r29
    2386:	cf 93       	push	r28
    2388:	00 d0       	rcall	.+0      	; 0x238a <Dio_vidwriteChanel+0x6>
    238a:	00 d0       	rcall	.+0      	; 0x238c <Dio_vidwriteChanel+0x8>
    238c:	0f 92       	push	r0
    238e:	cd b7       	in	r28, 0x3d	; 61
    2390:	de b7       	in	r29, 0x3e	; 62
    2392:	89 83       	std	Y+1, r24	; 0x01
    2394:	6a 83       	std	Y+2, r22	; 0x02
    2396:	4b 83       	std	Y+3, r20	; 0x03
	switch (port)
    2398:	89 81       	ldd	r24, Y+1	; 0x01
    239a:	28 2f       	mov	r18, r24
    239c:	30 e0       	ldi	r19, 0x00	; 0
    239e:	3d 83       	std	Y+5, r19	; 0x05
    23a0:	2c 83       	std	Y+4, r18	; 0x04
    23a2:	8c 81       	ldd	r24, Y+4	; 0x04
    23a4:	9d 81       	ldd	r25, Y+5	; 0x05
    23a6:	81 30       	cpi	r24, 0x01	; 1
    23a8:	91 05       	cpc	r25, r1
    23aa:	09 f4       	brne	.+2      	; 0x23ae <Dio_vidwriteChanel+0x2a>
    23ac:	43 c0       	rjmp	.+134    	; 0x2434 <Dio_vidwriteChanel+0xb0>
    23ae:	2c 81       	ldd	r18, Y+4	; 0x04
    23b0:	3d 81       	ldd	r19, Y+5	; 0x05
    23b2:	22 30       	cpi	r18, 0x02	; 2
    23b4:	31 05       	cpc	r19, r1
    23b6:	2c f4       	brge	.+10     	; 0x23c2 <Dio_vidwriteChanel+0x3e>
    23b8:	8c 81       	ldd	r24, Y+4	; 0x04
    23ba:	9d 81       	ldd	r25, Y+5	; 0x05
    23bc:	00 97       	sbiw	r24, 0x00	; 0
    23be:	71 f0       	breq	.+28     	; 0x23dc <Dio_vidwriteChanel+0x58>
    23c0:	bc c0       	rjmp	.+376    	; 0x253a <Dio_vidwriteChanel+0x1b6>
    23c2:	2c 81       	ldd	r18, Y+4	; 0x04
    23c4:	3d 81       	ldd	r19, Y+5	; 0x05
    23c6:	22 30       	cpi	r18, 0x02	; 2
    23c8:	31 05       	cpc	r19, r1
    23ca:	09 f4       	brne	.+2      	; 0x23ce <Dio_vidwriteChanel+0x4a>
    23cc:	5f c0       	rjmp	.+190    	; 0x248c <Dio_vidwriteChanel+0x108>
    23ce:	8c 81       	ldd	r24, Y+4	; 0x04
    23d0:	9d 81       	ldd	r25, Y+5	; 0x05
    23d2:	83 30       	cpi	r24, 0x03	; 3
    23d4:	91 05       	cpc	r25, r1
    23d6:	09 f4       	brne	.+2      	; 0x23da <Dio_vidwriteChanel+0x56>
    23d8:	85 c0       	rjmp	.+266    	; 0x24e4 <Dio_vidwriteChanel+0x160>
    23da:	af c0       	rjmp	.+350    	; 0x253a <Dio_vidwriteChanel+0x1b6>
	{
	case DIO_PORTA:
		if (level == DIO_HIGH)
    23dc:	8b 81       	ldd	r24, Y+3	; 0x03
    23de:	81 30       	cpi	r24, 0x01	; 1
    23e0:	a1 f4       	brne	.+40     	; 0x240a <Dio_vidwriteChanel+0x86>
		{
			SET_BIT(DIO_PORTA_REG,pin);
    23e2:	ab e3       	ldi	r26, 0x3B	; 59
    23e4:	b0 e0       	ldi	r27, 0x00	; 0
    23e6:	eb e3       	ldi	r30, 0x3B	; 59
    23e8:	f0 e0       	ldi	r31, 0x00	; 0
    23ea:	80 81       	ld	r24, Z
    23ec:	48 2f       	mov	r20, r24
    23ee:	8a 81       	ldd	r24, Y+2	; 0x02
    23f0:	28 2f       	mov	r18, r24
    23f2:	30 e0       	ldi	r19, 0x00	; 0
    23f4:	81 e0       	ldi	r24, 0x01	; 1
    23f6:	90 e0       	ldi	r25, 0x00	; 0
    23f8:	02 2e       	mov	r0, r18
    23fa:	02 c0       	rjmp	.+4      	; 0x2400 <Dio_vidwriteChanel+0x7c>
    23fc:	88 0f       	add	r24, r24
    23fe:	99 1f       	adc	r25, r25
    2400:	0a 94       	dec	r0
    2402:	e2 f7       	brpl	.-8      	; 0x23fc <Dio_vidwriteChanel+0x78>
    2404:	84 2b       	or	r24, r20
    2406:	8c 93       	st	X, r24
    2408:	98 c0       	rjmp	.+304    	; 0x253a <Dio_vidwriteChanel+0x1b6>
		}
		else
		{
			CLEAR_BIT(DIO_PORTA_REG,pin);
    240a:	ab e3       	ldi	r26, 0x3B	; 59
    240c:	b0 e0       	ldi	r27, 0x00	; 0
    240e:	eb e3       	ldi	r30, 0x3B	; 59
    2410:	f0 e0       	ldi	r31, 0x00	; 0
    2412:	80 81       	ld	r24, Z
    2414:	48 2f       	mov	r20, r24
    2416:	8a 81       	ldd	r24, Y+2	; 0x02
    2418:	28 2f       	mov	r18, r24
    241a:	30 e0       	ldi	r19, 0x00	; 0
    241c:	81 e0       	ldi	r24, 0x01	; 1
    241e:	90 e0       	ldi	r25, 0x00	; 0
    2420:	02 2e       	mov	r0, r18
    2422:	02 c0       	rjmp	.+4      	; 0x2428 <Dio_vidwriteChanel+0xa4>
    2424:	88 0f       	add	r24, r24
    2426:	99 1f       	adc	r25, r25
    2428:	0a 94       	dec	r0
    242a:	e2 f7       	brpl	.-8      	; 0x2424 <Dio_vidwriteChanel+0xa0>
    242c:	80 95       	com	r24
    242e:	84 23       	and	r24, r20
    2430:	8c 93       	st	X, r24
    2432:	83 c0       	rjmp	.+262    	; 0x253a <Dio_vidwriteChanel+0x1b6>
		}
		break;

	case DIO_PORTB:
		if (level == DIO_HIGH)
    2434:	8b 81       	ldd	r24, Y+3	; 0x03
    2436:	81 30       	cpi	r24, 0x01	; 1
    2438:	a1 f4       	brne	.+40     	; 0x2462 <Dio_vidwriteChanel+0xde>
		{
			SET_BIT(DIO_PORTB_REG,pin);
    243a:	a8 e3       	ldi	r26, 0x38	; 56
    243c:	b0 e0       	ldi	r27, 0x00	; 0
    243e:	e8 e3       	ldi	r30, 0x38	; 56
    2440:	f0 e0       	ldi	r31, 0x00	; 0
    2442:	80 81       	ld	r24, Z
    2444:	48 2f       	mov	r20, r24
    2446:	8a 81       	ldd	r24, Y+2	; 0x02
    2448:	28 2f       	mov	r18, r24
    244a:	30 e0       	ldi	r19, 0x00	; 0
    244c:	81 e0       	ldi	r24, 0x01	; 1
    244e:	90 e0       	ldi	r25, 0x00	; 0
    2450:	02 2e       	mov	r0, r18
    2452:	02 c0       	rjmp	.+4      	; 0x2458 <Dio_vidwriteChanel+0xd4>
    2454:	88 0f       	add	r24, r24
    2456:	99 1f       	adc	r25, r25
    2458:	0a 94       	dec	r0
    245a:	e2 f7       	brpl	.-8      	; 0x2454 <Dio_vidwriteChanel+0xd0>
    245c:	84 2b       	or	r24, r20
    245e:	8c 93       	st	X, r24
    2460:	6c c0       	rjmp	.+216    	; 0x253a <Dio_vidwriteChanel+0x1b6>
		}
		else
		{
			CLEAR_BIT(DIO_PORTB_REG,pin);
    2462:	a8 e3       	ldi	r26, 0x38	; 56
    2464:	b0 e0       	ldi	r27, 0x00	; 0
    2466:	e8 e3       	ldi	r30, 0x38	; 56
    2468:	f0 e0       	ldi	r31, 0x00	; 0
    246a:	80 81       	ld	r24, Z
    246c:	48 2f       	mov	r20, r24
    246e:	8a 81       	ldd	r24, Y+2	; 0x02
    2470:	28 2f       	mov	r18, r24
    2472:	30 e0       	ldi	r19, 0x00	; 0
    2474:	81 e0       	ldi	r24, 0x01	; 1
    2476:	90 e0       	ldi	r25, 0x00	; 0
    2478:	02 2e       	mov	r0, r18
    247a:	02 c0       	rjmp	.+4      	; 0x2480 <Dio_vidwriteChanel+0xfc>
    247c:	88 0f       	add	r24, r24
    247e:	99 1f       	adc	r25, r25
    2480:	0a 94       	dec	r0
    2482:	e2 f7       	brpl	.-8      	; 0x247c <Dio_vidwriteChanel+0xf8>
    2484:	80 95       	com	r24
    2486:	84 23       	and	r24, r20
    2488:	8c 93       	st	X, r24
    248a:	57 c0       	rjmp	.+174    	; 0x253a <Dio_vidwriteChanel+0x1b6>
		}
		break;

	case DIO_PORTC:
		if (level == DIO_HIGH)
    248c:	8b 81       	ldd	r24, Y+3	; 0x03
    248e:	81 30       	cpi	r24, 0x01	; 1
    2490:	a1 f4       	brne	.+40     	; 0x24ba <Dio_vidwriteChanel+0x136>
		{
			SET_BIT(DIO_PORTC_REG,pin);
    2492:	a5 e3       	ldi	r26, 0x35	; 53
    2494:	b0 e0       	ldi	r27, 0x00	; 0
    2496:	e5 e3       	ldi	r30, 0x35	; 53
    2498:	f0 e0       	ldi	r31, 0x00	; 0
    249a:	80 81       	ld	r24, Z
    249c:	48 2f       	mov	r20, r24
    249e:	8a 81       	ldd	r24, Y+2	; 0x02
    24a0:	28 2f       	mov	r18, r24
    24a2:	30 e0       	ldi	r19, 0x00	; 0
    24a4:	81 e0       	ldi	r24, 0x01	; 1
    24a6:	90 e0       	ldi	r25, 0x00	; 0
    24a8:	02 2e       	mov	r0, r18
    24aa:	02 c0       	rjmp	.+4      	; 0x24b0 <Dio_vidwriteChanel+0x12c>
    24ac:	88 0f       	add	r24, r24
    24ae:	99 1f       	adc	r25, r25
    24b0:	0a 94       	dec	r0
    24b2:	e2 f7       	brpl	.-8      	; 0x24ac <Dio_vidwriteChanel+0x128>
    24b4:	84 2b       	or	r24, r20
    24b6:	8c 93       	st	X, r24
    24b8:	40 c0       	rjmp	.+128    	; 0x253a <Dio_vidwriteChanel+0x1b6>
		}
		else
		{
			CLEAR_BIT(DIO_PORTC_REG,pin);
    24ba:	a5 e3       	ldi	r26, 0x35	; 53
    24bc:	b0 e0       	ldi	r27, 0x00	; 0
    24be:	e5 e3       	ldi	r30, 0x35	; 53
    24c0:	f0 e0       	ldi	r31, 0x00	; 0
    24c2:	80 81       	ld	r24, Z
    24c4:	48 2f       	mov	r20, r24
    24c6:	8a 81       	ldd	r24, Y+2	; 0x02
    24c8:	28 2f       	mov	r18, r24
    24ca:	30 e0       	ldi	r19, 0x00	; 0
    24cc:	81 e0       	ldi	r24, 0x01	; 1
    24ce:	90 e0       	ldi	r25, 0x00	; 0
    24d0:	02 2e       	mov	r0, r18
    24d2:	02 c0       	rjmp	.+4      	; 0x24d8 <Dio_vidwriteChanel+0x154>
    24d4:	88 0f       	add	r24, r24
    24d6:	99 1f       	adc	r25, r25
    24d8:	0a 94       	dec	r0
    24da:	e2 f7       	brpl	.-8      	; 0x24d4 <Dio_vidwriteChanel+0x150>
    24dc:	80 95       	com	r24
    24de:	84 23       	and	r24, r20
    24e0:	8c 93       	st	X, r24
    24e2:	2b c0       	rjmp	.+86     	; 0x253a <Dio_vidwriteChanel+0x1b6>
		}
		break;

	case DIO_PORTD:
		if (level == DIO_HIGH)
    24e4:	8b 81       	ldd	r24, Y+3	; 0x03
    24e6:	81 30       	cpi	r24, 0x01	; 1
    24e8:	a1 f4       	brne	.+40     	; 0x2512 <Dio_vidwriteChanel+0x18e>
		{
			SET_BIT(DIO_PORTD_REG,pin);
    24ea:	a2 e3       	ldi	r26, 0x32	; 50
    24ec:	b0 e0       	ldi	r27, 0x00	; 0
    24ee:	e2 e3       	ldi	r30, 0x32	; 50
    24f0:	f0 e0       	ldi	r31, 0x00	; 0
    24f2:	80 81       	ld	r24, Z
    24f4:	48 2f       	mov	r20, r24
    24f6:	8a 81       	ldd	r24, Y+2	; 0x02
    24f8:	28 2f       	mov	r18, r24
    24fa:	30 e0       	ldi	r19, 0x00	; 0
    24fc:	81 e0       	ldi	r24, 0x01	; 1
    24fe:	90 e0       	ldi	r25, 0x00	; 0
    2500:	02 2e       	mov	r0, r18
    2502:	02 c0       	rjmp	.+4      	; 0x2508 <Dio_vidwriteChanel+0x184>
    2504:	88 0f       	add	r24, r24
    2506:	99 1f       	adc	r25, r25
    2508:	0a 94       	dec	r0
    250a:	e2 f7       	brpl	.-8      	; 0x2504 <Dio_vidwriteChanel+0x180>
    250c:	84 2b       	or	r24, r20
    250e:	8c 93       	st	X, r24
    2510:	14 c0       	rjmp	.+40     	; 0x253a <Dio_vidwriteChanel+0x1b6>
		}
		else
		{
			CLEAR_BIT(DIO_PORTD_REG,pin);
    2512:	a2 e3       	ldi	r26, 0x32	; 50
    2514:	b0 e0       	ldi	r27, 0x00	; 0
    2516:	e2 e3       	ldi	r30, 0x32	; 50
    2518:	f0 e0       	ldi	r31, 0x00	; 0
    251a:	80 81       	ld	r24, Z
    251c:	48 2f       	mov	r20, r24
    251e:	8a 81       	ldd	r24, Y+2	; 0x02
    2520:	28 2f       	mov	r18, r24
    2522:	30 e0       	ldi	r19, 0x00	; 0
    2524:	81 e0       	ldi	r24, 0x01	; 1
    2526:	90 e0       	ldi	r25, 0x00	; 0
    2528:	02 2e       	mov	r0, r18
    252a:	02 c0       	rjmp	.+4      	; 0x2530 <Dio_vidwriteChanel+0x1ac>
    252c:	88 0f       	add	r24, r24
    252e:	99 1f       	adc	r25, r25
    2530:	0a 94       	dec	r0
    2532:	e2 f7       	brpl	.-8      	; 0x252c <Dio_vidwriteChanel+0x1a8>
    2534:	80 95       	com	r24
    2536:	84 23       	and	r24, r20
    2538:	8c 93       	st	X, r24
		}
		break;
	}
}
    253a:	0f 90       	pop	r0
    253c:	0f 90       	pop	r0
    253e:	0f 90       	pop	r0
    2540:	0f 90       	pop	r0
    2542:	0f 90       	pop	r0
    2544:	cf 91       	pop	r28
    2546:	df 91       	pop	r29
    2548:	08 95       	ret

0000254a <Dio_vidWriteChanelGroup>:

void Dio_vidWriteChanelGroup(dio_port_t port, u8 data, u8 mask)
{
    254a:	df 93       	push	r29
    254c:	cf 93       	push	r28
    254e:	00 d0       	rcall	.+0      	; 0x2550 <Dio_vidWriteChanelGroup+0x6>
    2550:	00 d0       	rcall	.+0      	; 0x2552 <Dio_vidWriteChanelGroup+0x8>
    2552:	0f 92       	push	r0
    2554:	cd b7       	in	r28, 0x3d	; 61
    2556:	de b7       	in	r29, 0x3e	; 62
    2558:	89 83       	std	Y+1, r24	; 0x01
    255a:	6a 83       	std	Y+2, r22	; 0x02
    255c:	4b 83       	std	Y+3, r20	; 0x03
	switch(port)
    255e:	89 81       	ldd	r24, Y+1	; 0x01
    2560:	28 2f       	mov	r18, r24
    2562:	30 e0       	ldi	r19, 0x00	; 0
    2564:	3d 83       	std	Y+5, r19	; 0x05
    2566:	2c 83       	std	Y+4, r18	; 0x04
    2568:	8c 81       	ldd	r24, Y+4	; 0x04
    256a:	9d 81       	ldd	r25, Y+5	; 0x05
    256c:	81 30       	cpi	r24, 0x01	; 1
    256e:	91 05       	cpc	r25, r1
    2570:	01 f1       	breq	.+64     	; 0x25b2 <Dio_vidWriteChanelGroup+0x68>
    2572:	2c 81       	ldd	r18, Y+4	; 0x04
    2574:	3d 81       	ldd	r19, Y+5	; 0x05
    2576:	22 30       	cpi	r18, 0x02	; 2
    2578:	31 05       	cpc	r19, r1
    257a:	2c f4       	brge	.+10     	; 0x2586 <Dio_vidWriteChanelGroup+0x3c>
    257c:	8c 81       	ldd	r24, Y+4	; 0x04
    257e:	9d 81       	ldd	r25, Y+5	; 0x05
    2580:	00 97       	sbiw	r24, 0x00	; 0
    2582:	61 f0       	breq	.+24     	; 0x259c <Dio_vidWriteChanelGroup+0x52>
    2584:	36 c0       	rjmp	.+108    	; 0x25f2 <Dio_vidWriteChanelGroup+0xa8>
    2586:	2c 81       	ldd	r18, Y+4	; 0x04
    2588:	3d 81       	ldd	r19, Y+5	; 0x05
    258a:	22 30       	cpi	r18, 0x02	; 2
    258c:	31 05       	cpc	r19, r1
    258e:	e1 f0       	breq	.+56     	; 0x25c8 <Dio_vidWriteChanelGroup+0x7e>
    2590:	8c 81       	ldd	r24, Y+4	; 0x04
    2592:	9d 81       	ldd	r25, Y+5	; 0x05
    2594:	83 30       	cpi	r24, 0x03	; 3
    2596:	91 05       	cpc	r25, r1
    2598:	11 f1       	breq	.+68     	; 0x25de <Dio_vidWriteChanelGroup+0x94>
    259a:	2b c0       	rjmp	.+86     	; 0x25f2 <Dio_vidWriteChanelGroup+0xa8>
	{
	case DIO_PORTA:
		DIO_PORTA_REG = (DIO_PORTA_REG & mask)|(data);
    259c:	ab e3       	ldi	r26, 0x3B	; 59
    259e:	b0 e0       	ldi	r27, 0x00	; 0
    25a0:	eb e3       	ldi	r30, 0x3B	; 59
    25a2:	f0 e0       	ldi	r31, 0x00	; 0
    25a4:	90 81       	ld	r25, Z
    25a6:	8b 81       	ldd	r24, Y+3	; 0x03
    25a8:	98 23       	and	r25, r24
    25aa:	8a 81       	ldd	r24, Y+2	; 0x02
    25ac:	89 2b       	or	r24, r25
    25ae:	8c 93       	st	X, r24
    25b0:	20 c0       	rjmp	.+64     	; 0x25f2 <Dio_vidWriteChanelGroup+0xa8>
		break;

	case DIO_PORTB:
		DIO_PORTB_REG = (DIO_PORTB_REG & mask)|(data);
    25b2:	a8 e3       	ldi	r26, 0x38	; 56
    25b4:	b0 e0       	ldi	r27, 0x00	; 0
    25b6:	e8 e3       	ldi	r30, 0x38	; 56
    25b8:	f0 e0       	ldi	r31, 0x00	; 0
    25ba:	90 81       	ld	r25, Z
    25bc:	8b 81       	ldd	r24, Y+3	; 0x03
    25be:	98 23       	and	r25, r24
    25c0:	8a 81       	ldd	r24, Y+2	; 0x02
    25c2:	89 2b       	or	r24, r25
    25c4:	8c 93       	st	X, r24
    25c6:	15 c0       	rjmp	.+42     	; 0x25f2 <Dio_vidWriteChanelGroup+0xa8>
		break;

	case DIO_PORTC:
		DIO_PORTC_REG = (DIO_PORTC_REG & mask)|(data);
    25c8:	a5 e3       	ldi	r26, 0x35	; 53
    25ca:	b0 e0       	ldi	r27, 0x00	; 0
    25cc:	e5 e3       	ldi	r30, 0x35	; 53
    25ce:	f0 e0       	ldi	r31, 0x00	; 0
    25d0:	90 81       	ld	r25, Z
    25d2:	8b 81       	ldd	r24, Y+3	; 0x03
    25d4:	98 23       	and	r25, r24
    25d6:	8a 81       	ldd	r24, Y+2	; 0x02
    25d8:	89 2b       	or	r24, r25
    25da:	8c 93       	st	X, r24
    25dc:	0a c0       	rjmp	.+20     	; 0x25f2 <Dio_vidWriteChanelGroup+0xa8>
		break;

	case DIO_PORTD:
		DIO_PORTD_REG = (DIO_PORTD_REG & mask)|(data);
    25de:	a2 e3       	ldi	r26, 0x32	; 50
    25e0:	b0 e0       	ldi	r27, 0x00	; 0
    25e2:	e2 e3       	ldi	r30, 0x32	; 50
    25e4:	f0 e0       	ldi	r31, 0x00	; 0
    25e6:	90 81       	ld	r25, Z
    25e8:	8b 81       	ldd	r24, Y+3	; 0x03
    25ea:	98 23       	and	r25, r24
    25ec:	8a 81       	ldd	r24, Y+2	; 0x02
    25ee:	89 2b       	or	r24, r25
    25f0:	8c 93       	st	X, r24
		break;
	}
}
    25f2:	0f 90       	pop	r0
    25f4:	0f 90       	pop	r0
    25f6:	0f 90       	pop	r0
    25f8:	0f 90       	pop	r0
    25fa:	0f 90       	pop	r0
    25fc:	cf 91       	pop	r28
    25fe:	df 91       	pop	r29
    2600:	08 95       	ret

00002602 <Dio_udtreadChanel>:

dio_level_t Dio_udtreadChanel(dio_port_t port, dio_pin_t pin)
{
    2602:	df 93       	push	r29
    2604:	cf 93       	push	r28
    2606:	00 d0       	rcall	.+0      	; 0x2608 <Dio_udtreadChanel+0x6>
    2608:	00 d0       	rcall	.+0      	; 0x260a <Dio_udtreadChanel+0x8>
    260a:	0f 92       	push	r0
    260c:	cd b7       	in	r28, 0x3d	; 61
    260e:	de b7       	in	r29, 0x3e	; 62
    2610:	8a 83       	std	Y+2, r24	; 0x02
    2612:	6b 83       	std	Y+3, r22	; 0x03
	dio_level_t loc_result = DIO_LOW;
    2614:	19 82       	std	Y+1, r1	; 0x01

	switch (port)
    2616:	8a 81       	ldd	r24, Y+2	; 0x02
    2618:	28 2f       	mov	r18, r24
    261a:	30 e0       	ldi	r19, 0x00	; 0
    261c:	3d 83       	std	Y+5, r19	; 0x05
    261e:	2c 83       	std	Y+4, r18	; 0x04
    2620:	4c 81       	ldd	r20, Y+4	; 0x04
    2622:	5d 81       	ldd	r21, Y+5	; 0x05
    2624:	41 30       	cpi	r20, 0x01	; 1
    2626:	51 05       	cpc	r21, r1
    2628:	79 f1       	breq	.+94     	; 0x2688 <Dio_udtreadChanel+0x86>
    262a:	8c 81       	ldd	r24, Y+4	; 0x04
    262c:	9d 81       	ldd	r25, Y+5	; 0x05
    262e:	82 30       	cpi	r24, 0x02	; 2
    2630:	91 05       	cpc	r25, r1
    2632:	34 f4       	brge	.+12     	; 0x2640 <Dio_udtreadChanel+0x3e>
    2634:	2c 81       	ldd	r18, Y+4	; 0x04
    2636:	3d 81       	ldd	r19, Y+5	; 0x05
    2638:	21 15       	cp	r18, r1
    263a:	31 05       	cpc	r19, r1
    263c:	69 f0       	breq	.+26     	; 0x2658 <Dio_udtreadChanel+0x56>
    263e:	6b c0       	rjmp	.+214    	; 0x2716 <Dio_udtreadChanel+0x114>
    2640:	4c 81       	ldd	r20, Y+4	; 0x04
    2642:	5d 81       	ldd	r21, Y+5	; 0x05
    2644:	42 30       	cpi	r20, 0x02	; 2
    2646:	51 05       	cpc	r21, r1
    2648:	b9 f1       	breq	.+110    	; 0x26b8 <Dio_udtreadChanel+0xb6>
    264a:	8c 81       	ldd	r24, Y+4	; 0x04
    264c:	9d 81       	ldd	r25, Y+5	; 0x05
    264e:	83 30       	cpi	r24, 0x03	; 3
    2650:	91 05       	cpc	r25, r1
    2652:	09 f4       	brne	.+2      	; 0x2656 <Dio_udtreadChanel+0x54>
    2654:	49 c0       	rjmp	.+146    	; 0x26e8 <Dio_udtreadChanel+0xe6>
    2656:	5f c0       	rjmp	.+190    	; 0x2716 <Dio_udtreadChanel+0x114>
	{
	case DIO_PORTA:
		if (CHECK_BIT(DIO_PINA_REG,pin) == 1)
    2658:	e9 e3       	ldi	r30, 0x39	; 57
    265a:	f0 e0       	ldi	r31, 0x00	; 0
    265c:	80 81       	ld	r24, Z
    265e:	28 2f       	mov	r18, r24
    2660:	30 e0       	ldi	r19, 0x00	; 0
    2662:	8b 81       	ldd	r24, Y+3	; 0x03
    2664:	88 2f       	mov	r24, r24
    2666:	90 e0       	ldi	r25, 0x00	; 0
    2668:	a9 01       	movw	r20, r18
    266a:	02 c0       	rjmp	.+4      	; 0x2670 <Dio_udtreadChanel+0x6e>
    266c:	55 95       	asr	r21
    266e:	47 95       	ror	r20
    2670:	8a 95       	dec	r24
    2672:	e2 f7       	brpl	.-8      	; 0x266c <Dio_udtreadChanel+0x6a>
    2674:	ca 01       	movw	r24, r20
    2676:	81 70       	andi	r24, 0x01	; 1
    2678:	90 70       	andi	r25, 0x00	; 0
    267a:	88 23       	and	r24, r24
    267c:	19 f0       	breq	.+6      	; 0x2684 <Dio_udtreadChanel+0x82>
		{
			loc_result = DIO_HIGH;
    267e:	81 e0       	ldi	r24, 0x01	; 1
    2680:	89 83       	std	Y+1, r24	; 0x01
    2682:	49 c0       	rjmp	.+146    	; 0x2716 <Dio_udtreadChanel+0x114>
		}
		else
		{
			loc_result = DIO_LOW;
    2684:	19 82       	std	Y+1, r1	; 0x01
    2686:	47 c0       	rjmp	.+142    	; 0x2716 <Dio_udtreadChanel+0x114>
		}
		break;

	case DIO_PORTB:
		if (CHECK_BIT(DIO_PINB_REG,pin) == 1)
    2688:	e6 e3       	ldi	r30, 0x36	; 54
    268a:	f0 e0       	ldi	r31, 0x00	; 0
    268c:	80 81       	ld	r24, Z
    268e:	28 2f       	mov	r18, r24
    2690:	30 e0       	ldi	r19, 0x00	; 0
    2692:	8b 81       	ldd	r24, Y+3	; 0x03
    2694:	88 2f       	mov	r24, r24
    2696:	90 e0       	ldi	r25, 0x00	; 0
    2698:	a9 01       	movw	r20, r18
    269a:	02 c0       	rjmp	.+4      	; 0x26a0 <Dio_udtreadChanel+0x9e>
    269c:	55 95       	asr	r21
    269e:	47 95       	ror	r20
    26a0:	8a 95       	dec	r24
    26a2:	e2 f7       	brpl	.-8      	; 0x269c <Dio_udtreadChanel+0x9a>
    26a4:	ca 01       	movw	r24, r20
    26a6:	81 70       	andi	r24, 0x01	; 1
    26a8:	90 70       	andi	r25, 0x00	; 0
    26aa:	88 23       	and	r24, r24
    26ac:	19 f0       	breq	.+6      	; 0x26b4 <Dio_udtreadChanel+0xb2>
		{
			loc_result = DIO_HIGH;
    26ae:	81 e0       	ldi	r24, 0x01	; 1
    26b0:	89 83       	std	Y+1, r24	; 0x01
    26b2:	31 c0       	rjmp	.+98     	; 0x2716 <Dio_udtreadChanel+0x114>
		}
		else
		{
			loc_result = DIO_LOW;
    26b4:	19 82       	std	Y+1, r1	; 0x01
    26b6:	2f c0       	rjmp	.+94     	; 0x2716 <Dio_udtreadChanel+0x114>
		}
		break;

	case DIO_PORTC:
		if (CHECK_BIT(DIO_PINC_REG,pin) == 1)
    26b8:	e3 e3       	ldi	r30, 0x33	; 51
    26ba:	f0 e0       	ldi	r31, 0x00	; 0
    26bc:	80 81       	ld	r24, Z
    26be:	28 2f       	mov	r18, r24
    26c0:	30 e0       	ldi	r19, 0x00	; 0
    26c2:	8b 81       	ldd	r24, Y+3	; 0x03
    26c4:	88 2f       	mov	r24, r24
    26c6:	90 e0       	ldi	r25, 0x00	; 0
    26c8:	a9 01       	movw	r20, r18
    26ca:	02 c0       	rjmp	.+4      	; 0x26d0 <Dio_udtreadChanel+0xce>
    26cc:	55 95       	asr	r21
    26ce:	47 95       	ror	r20
    26d0:	8a 95       	dec	r24
    26d2:	e2 f7       	brpl	.-8      	; 0x26cc <Dio_udtreadChanel+0xca>
    26d4:	ca 01       	movw	r24, r20
    26d6:	81 70       	andi	r24, 0x01	; 1
    26d8:	90 70       	andi	r25, 0x00	; 0
    26da:	88 23       	and	r24, r24
    26dc:	19 f0       	breq	.+6      	; 0x26e4 <Dio_udtreadChanel+0xe2>
		{
			loc_result = DIO_HIGH;
    26de:	81 e0       	ldi	r24, 0x01	; 1
    26e0:	89 83       	std	Y+1, r24	; 0x01
    26e2:	19 c0       	rjmp	.+50     	; 0x2716 <Dio_udtreadChanel+0x114>
		}
		else
		{
			loc_result = DIO_LOW;
    26e4:	19 82       	std	Y+1, r1	; 0x01
    26e6:	17 c0       	rjmp	.+46     	; 0x2716 <Dio_udtreadChanel+0x114>
		}
		break;

	case DIO_PORTD:
		if (CHECK_BIT(DIO_PIND_REG,pin) == 1)
    26e8:	e0 e3       	ldi	r30, 0x30	; 48
    26ea:	f0 e0       	ldi	r31, 0x00	; 0
    26ec:	80 81       	ld	r24, Z
    26ee:	28 2f       	mov	r18, r24
    26f0:	30 e0       	ldi	r19, 0x00	; 0
    26f2:	8b 81       	ldd	r24, Y+3	; 0x03
    26f4:	88 2f       	mov	r24, r24
    26f6:	90 e0       	ldi	r25, 0x00	; 0
    26f8:	a9 01       	movw	r20, r18
    26fa:	02 c0       	rjmp	.+4      	; 0x2700 <Dio_udtreadChanel+0xfe>
    26fc:	55 95       	asr	r21
    26fe:	47 95       	ror	r20
    2700:	8a 95       	dec	r24
    2702:	e2 f7       	brpl	.-8      	; 0x26fc <Dio_udtreadChanel+0xfa>
    2704:	ca 01       	movw	r24, r20
    2706:	81 70       	andi	r24, 0x01	; 1
    2708:	90 70       	andi	r25, 0x00	; 0
    270a:	88 23       	and	r24, r24
    270c:	19 f0       	breq	.+6      	; 0x2714 <Dio_udtreadChanel+0x112>
		{
			loc_result = DIO_HIGH;
    270e:	81 e0       	ldi	r24, 0x01	; 1
    2710:	89 83       	std	Y+1, r24	; 0x01
    2712:	01 c0       	rjmp	.+2      	; 0x2716 <Dio_udtreadChanel+0x114>
		}
		else
		{
			loc_result = DIO_LOW;
    2714:	19 82       	std	Y+1, r1	; 0x01
		}
		break;
	}
	return loc_result;
    2716:	89 81       	ldd	r24, Y+1	; 0x01
}
    2718:	0f 90       	pop	r0
    271a:	0f 90       	pop	r0
    271c:	0f 90       	pop	r0
    271e:	0f 90       	pop	r0
    2720:	0f 90       	pop	r0
    2722:	cf 91       	pop	r28
    2724:	df 91       	pop	r29
    2726:	08 95       	ret

00002728 <Dio_vidflipChanel>:

void Dio_vidflipChanel(dio_port_t port, dio_pin_t pin)
{
    2728:	df 93       	push	r29
    272a:	cf 93       	push	r28
    272c:	00 d0       	rcall	.+0      	; 0x272e <Dio_vidflipChanel+0x6>
    272e:	00 d0       	rcall	.+0      	; 0x2730 <Dio_vidflipChanel+0x8>
    2730:	cd b7       	in	r28, 0x3d	; 61
    2732:	de b7       	in	r29, 0x3e	; 62
    2734:	89 83       	std	Y+1, r24	; 0x01
    2736:	6a 83       	std	Y+2, r22	; 0x02
	switch (port)
    2738:	89 81       	ldd	r24, Y+1	; 0x01
    273a:	28 2f       	mov	r18, r24
    273c:	30 e0       	ldi	r19, 0x00	; 0
    273e:	3c 83       	std	Y+4, r19	; 0x04
    2740:	2b 83       	std	Y+3, r18	; 0x03
    2742:	8b 81       	ldd	r24, Y+3	; 0x03
    2744:	9c 81       	ldd	r25, Y+4	; 0x04
    2746:	81 30       	cpi	r24, 0x01	; 1
    2748:	91 05       	cpc	r25, r1
    274a:	49 f1       	breq	.+82     	; 0x279e <Dio_vidflipChanel+0x76>
    274c:	2b 81       	ldd	r18, Y+3	; 0x03
    274e:	3c 81       	ldd	r19, Y+4	; 0x04
    2750:	22 30       	cpi	r18, 0x02	; 2
    2752:	31 05       	cpc	r19, r1
    2754:	2c f4       	brge	.+10     	; 0x2760 <Dio_vidflipChanel+0x38>
    2756:	8b 81       	ldd	r24, Y+3	; 0x03
    2758:	9c 81       	ldd	r25, Y+4	; 0x04
    275a:	00 97       	sbiw	r24, 0x00	; 0
    275c:	61 f0       	breq	.+24     	; 0x2776 <Dio_vidflipChanel+0x4e>
    275e:	5a c0       	rjmp	.+180    	; 0x2814 <Dio_vidflipChanel+0xec>
    2760:	2b 81       	ldd	r18, Y+3	; 0x03
    2762:	3c 81       	ldd	r19, Y+4	; 0x04
    2764:	22 30       	cpi	r18, 0x02	; 2
    2766:	31 05       	cpc	r19, r1
    2768:	71 f1       	breq	.+92     	; 0x27c6 <Dio_vidflipChanel+0x9e>
    276a:	8b 81       	ldd	r24, Y+3	; 0x03
    276c:	9c 81       	ldd	r25, Y+4	; 0x04
    276e:	83 30       	cpi	r24, 0x03	; 3
    2770:	91 05       	cpc	r25, r1
    2772:	e9 f1       	breq	.+122    	; 0x27ee <Dio_vidflipChanel+0xc6>
    2774:	4f c0       	rjmp	.+158    	; 0x2814 <Dio_vidflipChanel+0xec>
	{
	case DIO_PORTA:
		FLIP_BIT(DIO_PORTA_REG,pin);
    2776:	ab e3       	ldi	r26, 0x3B	; 59
    2778:	b0 e0       	ldi	r27, 0x00	; 0
    277a:	eb e3       	ldi	r30, 0x3B	; 59
    277c:	f0 e0       	ldi	r31, 0x00	; 0
    277e:	80 81       	ld	r24, Z
    2780:	48 2f       	mov	r20, r24
    2782:	8a 81       	ldd	r24, Y+2	; 0x02
    2784:	28 2f       	mov	r18, r24
    2786:	30 e0       	ldi	r19, 0x00	; 0
    2788:	81 e0       	ldi	r24, 0x01	; 1
    278a:	90 e0       	ldi	r25, 0x00	; 0
    278c:	02 2e       	mov	r0, r18
    278e:	02 c0       	rjmp	.+4      	; 0x2794 <Dio_vidflipChanel+0x6c>
    2790:	88 0f       	add	r24, r24
    2792:	99 1f       	adc	r25, r25
    2794:	0a 94       	dec	r0
    2796:	e2 f7       	brpl	.-8      	; 0x2790 <Dio_vidflipChanel+0x68>
    2798:	84 27       	eor	r24, r20
    279a:	8c 93       	st	X, r24
    279c:	3b c0       	rjmp	.+118    	; 0x2814 <Dio_vidflipChanel+0xec>
		break;

	case DIO_PORTB:
		FLIP_BIT(DIO_PORTB_REG,pin);
    279e:	a8 e3       	ldi	r26, 0x38	; 56
    27a0:	b0 e0       	ldi	r27, 0x00	; 0
    27a2:	e8 e3       	ldi	r30, 0x38	; 56
    27a4:	f0 e0       	ldi	r31, 0x00	; 0
    27a6:	80 81       	ld	r24, Z
    27a8:	48 2f       	mov	r20, r24
    27aa:	8a 81       	ldd	r24, Y+2	; 0x02
    27ac:	28 2f       	mov	r18, r24
    27ae:	30 e0       	ldi	r19, 0x00	; 0
    27b0:	81 e0       	ldi	r24, 0x01	; 1
    27b2:	90 e0       	ldi	r25, 0x00	; 0
    27b4:	02 2e       	mov	r0, r18
    27b6:	02 c0       	rjmp	.+4      	; 0x27bc <Dio_vidflipChanel+0x94>
    27b8:	88 0f       	add	r24, r24
    27ba:	99 1f       	adc	r25, r25
    27bc:	0a 94       	dec	r0
    27be:	e2 f7       	brpl	.-8      	; 0x27b8 <Dio_vidflipChanel+0x90>
    27c0:	84 27       	eor	r24, r20
    27c2:	8c 93       	st	X, r24
    27c4:	27 c0       	rjmp	.+78     	; 0x2814 <Dio_vidflipChanel+0xec>
		break;

	case DIO_PORTC:
		FLIP_BIT(DIO_PORTC_REG,pin);
    27c6:	a5 e3       	ldi	r26, 0x35	; 53
    27c8:	b0 e0       	ldi	r27, 0x00	; 0
    27ca:	e5 e3       	ldi	r30, 0x35	; 53
    27cc:	f0 e0       	ldi	r31, 0x00	; 0
    27ce:	80 81       	ld	r24, Z
    27d0:	48 2f       	mov	r20, r24
    27d2:	8a 81       	ldd	r24, Y+2	; 0x02
    27d4:	28 2f       	mov	r18, r24
    27d6:	30 e0       	ldi	r19, 0x00	; 0
    27d8:	81 e0       	ldi	r24, 0x01	; 1
    27da:	90 e0       	ldi	r25, 0x00	; 0
    27dc:	02 2e       	mov	r0, r18
    27de:	02 c0       	rjmp	.+4      	; 0x27e4 <Dio_vidflipChanel+0xbc>
    27e0:	88 0f       	add	r24, r24
    27e2:	99 1f       	adc	r25, r25
    27e4:	0a 94       	dec	r0
    27e6:	e2 f7       	brpl	.-8      	; 0x27e0 <Dio_vidflipChanel+0xb8>
    27e8:	84 27       	eor	r24, r20
    27ea:	8c 93       	st	X, r24
    27ec:	13 c0       	rjmp	.+38     	; 0x2814 <Dio_vidflipChanel+0xec>
		break;

	case DIO_PORTD:
		FLIP_BIT(DIO_PORTD_REG,pin);
    27ee:	a2 e3       	ldi	r26, 0x32	; 50
    27f0:	b0 e0       	ldi	r27, 0x00	; 0
    27f2:	e2 e3       	ldi	r30, 0x32	; 50
    27f4:	f0 e0       	ldi	r31, 0x00	; 0
    27f6:	80 81       	ld	r24, Z
    27f8:	48 2f       	mov	r20, r24
    27fa:	8a 81       	ldd	r24, Y+2	; 0x02
    27fc:	28 2f       	mov	r18, r24
    27fe:	30 e0       	ldi	r19, 0x00	; 0
    2800:	81 e0       	ldi	r24, 0x01	; 1
    2802:	90 e0       	ldi	r25, 0x00	; 0
    2804:	02 2e       	mov	r0, r18
    2806:	02 c0       	rjmp	.+4      	; 0x280c <Dio_vidflipChanel+0xe4>
    2808:	88 0f       	add	r24, r24
    280a:	99 1f       	adc	r25, r25
    280c:	0a 94       	dec	r0
    280e:	e2 f7       	brpl	.-8      	; 0x2808 <Dio_vidflipChanel+0xe0>
    2810:	84 27       	eor	r24, r20
    2812:	8c 93       	st	X, r24
		break;
	}
}
    2814:	0f 90       	pop	r0
    2816:	0f 90       	pop	r0
    2818:	0f 90       	pop	r0
    281a:	0f 90       	pop	r0
    281c:	cf 91       	pop	r28
    281e:	df 91       	pop	r29
    2820:	08 95       	ret

00002822 <Dio_vidPullUpEn>:
void Dio_vidPullUpEn(dio_port_t port, dio_pin_t pin)
{
    2822:	df 93       	push	r29
    2824:	cf 93       	push	r28
    2826:	00 d0       	rcall	.+0      	; 0x2828 <Dio_vidPullUpEn+0x6>
    2828:	00 d0       	rcall	.+0      	; 0x282a <Dio_vidPullUpEn+0x8>
    282a:	cd b7       	in	r28, 0x3d	; 61
    282c:	de b7       	in	r29, 0x3e	; 62
    282e:	89 83       	std	Y+1, r24	; 0x01
    2830:	6a 83       	std	Y+2, r22	; 0x02
	switch (port)
    2832:	89 81       	ldd	r24, Y+1	; 0x01
    2834:	28 2f       	mov	r18, r24
    2836:	30 e0       	ldi	r19, 0x00	; 0
    2838:	3c 83       	std	Y+4, r19	; 0x04
    283a:	2b 83       	std	Y+3, r18	; 0x03
    283c:	8b 81       	ldd	r24, Y+3	; 0x03
    283e:	9c 81       	ldd	r25, Y+4	; 0x04
    2840:	81 30       	cpi	r24, 0x01	; 1
    2842:	91 05       	cpc	r25, r1
    2844:	49 f1       	breq	.+82     	; 0x2898 <Dio_vidPullUpEn+0x76>
    2846:	2b 81       	ldd	r18, Y+3	; 0x03
    2848:	3c 81       	ldd	r19, Y+4	; 0x04
    284a:	22 30       	cpi	r18, 0x02	; 2
    284c:	31 05       	cpc	r19, r1
    284e:	2c f4       	brge	.+10     	; 0x285a <Dio_vidPullUpEn+0x38>
    2850:	8b 81       	ldd	r24, Y+3	; 0x03
    2852:	9c 81       	ldd	r25, Y+4	; 0x04
    2854:	00 97       	sbiw	r24, 0x00	; 0
    2856:	61 f0       	breq	.+24     	; 0x2870 <Dio_vidPullUpEn+0x4e>
    2858:	5a c0       	rjmp	.+180    	; 0x290e <Dio_vidPullUpEn+0xec>
    285a:	2b 81       	ldd	r18, Y+3	; 0x03
    285c:	3c 81       	ldd	r19, Y+4	; 0x04
    285e:	22 30       	cpi	r18, 0x02	; 2
    2860:	31 05       	cpc	r19, r1
    2862:	71 f1       	breq	.+92     	; 0x28c0 <Dio_vidPullUpEn+0x9e>
    2864:	8b 81       	ldd	r24, Y+3	; 0x03
    2866:	9c 81       	ldd	r25, Y+4	; 0x04
    2868:	83 30       	cpi	r24, 0x03	; 3
    286a:	91 05       	cpc	r25, r1
    286c:	e9 f1       	breq	.+122    	; 0x28e8 <Dio_vidPullUpEn+0xc6>
    286e:	4f c0       	rjmp	.+158    	; 0x290e <Dio_vidPullUpEn+0xec>
	{
	case DIO_PORTA:
		SET_BIT(DIO_PORTA_REG,pin);
    2870:	ab e3       	ldi	r26, 0x3B	; 59
    2872:	b0 e0       	ldi	r27, 0x00	; 0
    2874:	eb e3       	ldi	r30, 0x3B	; 59
    2876:	f0 e0       	ldi	r31, 0x00	; 0
    2878:	80 81       	ld	r24, Z
    287a:	48 2f       	mov	r20, r24
    287c:	8a 81       	ldd	r24, Y+2	; 0x02
    287e:	28 2f       	mov	r18, r24
    2880:	30 e0       	ldi	r19, 0x00	; 0
    2882:	81 e0       	ldi	r24, 0x01	; 1
    2884:	90 e0       	ldi	r25, 0x00	; 0
    2886:	02 2e       	mov	r0, r18
    2888:	02 c0       	rjmp	.+4      	; 0x288e <Dio_vidPullUpEn+0x6c>
    288a:	88 0f       	add	r24, r24
    288c:	99 1f       	adc	r25, r25
    288e:	0a 94       	dec	r0
    2890:	e2 f7       	brpl	.-8      	; 0x288a <Dio_vidPullUpEn+0x68>
    2892:	84 2b       	or	r24, r20
    2894:	8c 93       	st	X, r24
    2896:	3b c0       	rjmp	.+118    	; 0x290e <Dio_vidPullUpEn+0xec>
		break;

	case DIO_PORTB:
		SET_BIT(DIO_PORTB_REG,pin);
    2898:	a8 e3       	ldi	r26, 0x38	; 56
    289a:	b0 e0       	ldi	r27, 0x00	; 0
    289c:	e8 e3       	ldi	r30, 0x38	; 56
    289e:	f0 e0       	ldi	r31, 0x00	; 0
    28a0:	80 81       	ld	r24, Z
    28a2:	48 2f       	mov	r20, r24
    28a4:	8a 81       	ldd	r24, Y+2	; 0x02
    28a6:	28 2f       	mov	r18, r24
    28a8:	30 e0       	ldi	r19, 0x00	; 0
    28aa:	81 e0       	ldi	r24, 0x01	; 1
    28ac:	90 e0       	ldi	r25, 0x00	; 0
    28ae:	02 2e       	mov	r0, r18
    28b0:	02 c0       	rjmp	.+4      	; 0x28b6 <Dio_vidPullUpEn+0x94>
    28b2:	88 0f       	add	r24, r24
    28b4:	99 1f       	adc	r25, r25
    28b6:	0a 94       	dec	r0
    28b8:	e2 f7       	brpl	.-8      	; 0x28b2 <Dio_vidPullUpEn+0x90>
    28ba:	84 2b       	or	r24, r20
    28bc:	8c 93       	st	X, r24
    28be:	27 c0       	rjmp	.+78     	; 0x290e <Dio_vidPullUpEn+0xec>
		break;

	case DIO_PORTC:
		SET_BIT(DIO_PORTC_REG,pin);
    28c0:	a5 e3       	ldi	r26, 0x35	; 53
    28c2:	b0 e0       	ldi	r27, 0x00	; 0
    28c4:	e5 e3       	ldi	r30, 0x35	; 53
    28c6:	f0 e0       	ldi	r31, 0x00	; 0
    28c8:	80 81       	ld	r24, Z
    28ca:	48 2f       	mov	r20, r24
    28cc:	8a 81       	ldd	r24, Y+2	; 0x02
    28ce:	28 2f       	mov	r18, r24
    28d0:	30 e0       	ldi	r19, 0x00	; 0
    28d2:	81 e0       	ldi	r24, 0x01	; 1
    28d4:	90 e0       	ldi	r25, 0x00	; 0
    28d6:	02 2e       	mov	r0, r18
    28d8:	02 c0       	rjmp	.+4      	; 0x28de <Dio_vidPullUpEn+0xbc>
    28da:	88 0f       	add	r24, r24
    28dc:	99 1f       	adc	r25, r25
    28de:	0a 94       	dec	r0
    28e0:	e2 f7       	brpl	.-8      	; 0x28da <Dio_vidPullUpEn+0xb8>
    28e2:	84 2b       	or	r24, r20
    28e4:	8c 93       	st	X, r24
    28e6:	13 c0       	rjmp	.+38     	; 0x290e <Dio_vidPullUpEn+0xec>
		break;

	case DIO_PORTD:
		SET_BIT(DIO_PORTD_REG,pin);
    28e8:	a2 e3       	ldi	r26, 0x32	; 50
    28ea:	b0 e0       	ldi	r27, 0x00	; 0
    28ec:	e2 e3       	ldi	r30, 0x32	; 50
    28ee:	f0 e0       	ldi	r31, 0x00	; 0
    28f0:	80 81       	ld	r24, Z
    28f2:	48 2f       	mov	r20, r24
    28f4:	8a 81       	ldd	r24, Y+2	; 0x02
    28f6:	28 2f       	mov	r18, r24
    28f8:	30 e0       	ldi	r19, 0x00	; 0
    28fa:	81 e0       	ldi	r24, 0x01	; 1
    28fc:	90 e0       	ldi	r25, 0x00	; 0
    28fe:	02 2e       	mov	r0, r18
    2900:	02 c0       	rjmp	.+4      	; 0x2906 <Dio_vidPullUpEn+0xe4>
    2902:	88 0f       	add	r24, r24
    2904:	99 1f       	adc	r25, r25
    2906:	0a 94       	dec	r0
    2908:	e2 f7       	brpl	.-8      	; 0x2902 <Dio_vidPullUpEn+0xe0>
    290a:	84 2b       	or	r24, r20
    290c:	8c 93       	st	X, r24
		break;
	}
}
    290e:	0f 90       	pop	r0
    2910:	0f 90       	pop	r0
    2912:	0f 90       	pop	r0
    2914:	0f 90       	pop	r0
    2916:	cf 91       	pop	r28
    2918:	df 91       	pop	r29
    291a:	08 95       	ret

0000291c <__udivmodqi4>:
    291c:	99 1b       	sub	r25, r25
    291e:	79 e0       	ldi	r23, 0x09	; 9
    2920:	04 c0       	rjmp	.+8      	; 0x292a <__udivmodqi4_ep>

00002922 <__udivmodqi4_loop>:
    2922:	99 1f       	adc	r25, r25
    2924:	96 17       	cp	r25, r22
    2926:	08 f0       	brcs	.+2      	; 0x292a <__udivmodqi4_ep>
    2928:	96 1b       	sub	r25, r22

0000292a <__udivmodqi4_ep>:
    292a:	88 1f       	adc	r24, r24
    292c:	7a 95       	dec	r23
    292e:	c9 f7       	brne	.-14     	; 0x2922 <__udivmodqi4_loop>
    2930:	80 95       	com	r24
    2932:	08 95       	ret

00002934 <__prologue_saves__>:
    2934:	2f 92       	push	r2
    2936:	3f 92       	push	r3
    2938:	4f 92       	push	r4
    293a:	5f 92       	push	r5
    293c:	6f 92       	push	r6
    293e:	7f 92       	push	r7
    2940:	8f 92       	push	r8
    2942:	9f 92       	push	r9
    2944:	af 92       	push	r10
    2946:	bf 92       	push	r11
    2948:	cf 92       	push	r12
    294a:	df 92       	push	r13
    294c:	ef 92       	push	r14
    294e:	ff 92       	push	r15
    2950:	0f 93       	push	r16
    2952:	1f 93       	push	r17
    2954:	cf 93       	push	r28
    2956:	df 93       	push	r29
    2958:	cd b7       	in	r28, 0x3d	; 61
    295a:	de b7       	in	r29, 0x3e	; 62
    295c:	ca 1b       	sub	r28, r26
    295e:	db 0b       	sbc	r29, r27
    2960:	0f b6       	in	r0, 0x3f	; 63
    2962:	f8 94       	cli
    2964:	de bf       	out	0x3e, r29	; 62
    2966:	0f be       	out	0x3f, r0	; 63
    2968:	cd bf       	out	0x3d, r28	; 61
    296a:	09 94       	ijmp

0000296c <__epilogue_restores__>:
    296c:	2a 88       	ldd	r2, Y+18	; 0x12
    296e:	39 88       	ldd	r3, Y+17	; 0x11
    2970:	48 88       	ldd	r4, Y+16	; 0x10
    2972:	5f 84       	ldd	r5, Y+15	; 0x0f
    2974:	6e 84       	ldd	r6, Y+14	; 0x0e
    2976:	7d 84       	ldd	r7, Y+13	; 0x0d
    2978:	8c 84       	ldd	r8, Y+12	; 0x0c
    297a:	9b 84       	ldd	r9, Y+11	; 0x0b
    297c:	aa 84       	ldd	r10, Y+10	; 0x0a
    297e:	b9 84       	ldd	r11, Y+9	; 0x09
    2980:	c8 84       	ldd	r12, Y+8	; 0x08
    2982:	df 80       	ldd	r13, Y+7	; 0x07
    2984:	ee 80       	ldd	r14, Y+6	; 0x06
    2986:	fd 80       	ldd	r15, Y+5	; 0x05
    2988:	0c 81       	ldd	r16, Y+4	; 0x04
    298a:	1b 81       	ldd	r17, Y+3	; 0x03
    298c:	aa 81       	ldd	r26, Y+2	; 0x02
    298e:	b9 81       	ldd	r27, Y+1	; 0x01
    2990:	ce 0f       	add	r28, r30
    2992:	d1 1d       	adc	r29, r1
    2994:	0f b6       	in	r0, 0x3f	; 63
    2996:	f8 94       	cli
    2998:	de bf       	out	0x3e, r29	; 62
    299a:	0f be       	out	0x3f, r0	; 63
    299c:	cd bf       	out	0x3d, r28	; 61
    299e:	ed 01       	movw	r28, r26
    29a0:	08 95       	ret

000029a2 <sprintf>:
    29a2:	ae e0       	ldi	r26, 0x0E	; 14
    29a4:	b0 e0       	ldi	r27, 0x00	; 0
    29a6:	e7 ed       	ldi	r30, 0xD7	; 215
    29a8:	f4 e1       	ldi	r31, 0x14	; 20
    29aa:	0c 94 a8 14 	jmp	0x2950	; 0x2950 <__prologue_saves__+0x1c>
    29ae:	0d 89       	ldd	r16, Y+21	; 0x15
    29b0:	1e 89       	ldd	r17, Y+22	; 0x16
    29b2:	86 e0       	ldi	r24, 0x06	; 6
    29b4:	8c 83       	std	Y+4, r24	; 0x04
    29b6:	1a 83       	std	Y+2, r17	; 0x02
    29b8:	09 83       	std	Y+1, r16	; 0x01
    29ba:	8f ef       	ldi	r24, 0xFF	; 255
    29bc:	9f e7       	ldi	r25, 0x7F	; 127
    29be:	9e 83       	std	Y+6, r25	; 0x06
    29c0:	8d 83       	std	Y+5, r24	; 0x05
    29c2:	9e 01       	movw	r18, r28
    29c4:	27 5e       	subi	r18, 0xE7	; 231
    29c6:	3f 4f       	sbci	r19, 0xFF	; 255
    29c8:	ce 01       	movw	r24, r28
    29ca:	01 96       	adiw	r24, 0x01	; 1
    29cc:	6f 89       	ldd	r22, Y+23	; 0x17
    29ce:	78 8d       	ldd	r23, Y+24	; 0x18
    29d0:	a9 01       	movw	r20, r18
    29d2:	0e 94 f5 14 	call	0x29ea	; 0x29ea <vfprintf>
    29d6:	2f 81       	ldd	r18, Y+7	; 0x07
    29d8:	38 85       	ldd	r19, Y+8	; 0x08
    29da:	02 0f       	add	r16, r18
    29dc:	13 1f       	adc	r17, r19
    29de:	f8 01       	movw	r30, r16
    29e0:	10 82       	st	Z, r1
    29e2:	2e 96       	adiw	r28, 0x0e	; 14
    29e4:	e4 e0       	ldi	r30, 0x04	; 4
    29e6:	0c 94 c4 14 	jmp	0x2988	; 0x2988 <__epilogue_restores__+0x1c>

000029ea <vfprintf>:
    29ea:	ab e0       	ldi	r26, 0x0B	; 11
    29ec:	b0 e0       	ldi	r27, 0x00	; 0
    29ee:	eb ef       	ldi	r30, 0xFB	; 251
    29f0:	f4 e1       	ldi	r31, 0x14	; 20
    29f2:	0c 94 9a 14 	jmp	0x2934	; 0x2934 <__prologue_saves__>
    29f6:	3c 01       	movw	r6, r24
    29f8:	2b 01       	movw	r4, r22
    29fa:	5a 01       	movw	r10, r20
    29fc:	fc 01       	movw	r30, r24
    29fe:	17 82       	std	Z+7, r1	; 0x07
    2a00:	16 82       	std	Z+6, r1	; 0x06
    2a02:	83 81       	ldd	r24, Z+3	; 0x03
    2a04:	81 fd       	sbrc	r24, 1
    2a06:	03 c0       	rjmp	.+6      	; 0x2a0e <vfprintf+0x24>
    2a08:	6f ef       	ldi	r22, 0xFF	; 255
    2a0a:	7f ef       	ldi	r23, 0xFF	; 255
    2a0c:	c6 c1       	rjmp	.+908    	; 0x2d9a <vfprintf+0x3b0>
    2a0e:	9a e0       	ldi	r25, 0x0A	; 10
    2a10:	89 2e       	mov	r8, r25
    2a12:	1e 01       	movw	r2, r28
    2a14:	08 94       	sec
    2a16:	21 1c       	adc	r2, r1
    2a18:	31 1c       	adc	r3, r1
    2a1a:	f3 01       	movw	r30, r6
    2a1c:	23 81       	ldd	r18, Z+3	; 0x03
    2a1e:	f2 01       	movw	r30, r4
    2a20:	23 fd       	sbrc	r18, 3
    2a22:	85 91       	lpm	r24, Z+
    2a24:	23 ff       	sbrs	r18, 3
    2a26:	81 91       	ld	r24, Z+
    2a28:	2f 01       	movw	r4, r30
    2a2a:	88 23       	and	r24, r24
    2a2c:	09 f4       	brne	.+2      	; 0x2a30 <vfprintf+0x46>
    2a2e:	b2 c1       	rjmp	.+868    	; 0x2d94 <vfprintf+0x3aa>
    2a30:	85 32       	cpi	r24, 0x25	; 37
    2a32:	39 f4       	brne	.+14     	; 0x2a42 <vfprintf+0x58>
    2a34:	23 fd       	sbrc	r18, 3
    2a36:	85 91       	lpm	r24, Z+
    2a38:	23 ff       	sbrs	r18, 3
    2a3a:	81 91       	ld	r24, Z+
    2a3c:	2f 01       	movw	r4, r30
    2a3e:	85 32       	cpi	r24, 0x25	; 37
    2a40:	29 f4       	brne	.+10     	; 0x2a4c <vfprintf+0x62>
    2a42:	90 e0       	ldi	r25, 0x00	; 0
    2a44:	b3 01       	movw	r22, r6
    2a46:	0e 94 e8 16 	call	0x2dd0	; 0x2dd0 <fputc>
    2a4a:	e7 cf       	rjmp	.-50     	; 0x2a1a <vfprintf+0x30>
    2a4c:	98 2f       	mov	r25, r24
    2a4e:	ff 24       	eor	r15, r15
    2a50:	ee 24       	eor	r14, r14
    2a52:	99 24       	eor	r9, r9
    2a54:	ff e1       	ldi	r31, 0x1F	; 31
    2a56:	ff 15       	cp	r31, r15
    2a58:	d0 f0       	brcs	.+52     	; 0x2a8e <vfprintf+0xa4>
    2a5a:	9b 32       	cpi	r25, 0x2B	; 43
    2a5c:	69 f0       	breq	.+26     	; 0x2a78 <vfprintf+0x8e>
    2a5e:	9c 32       	cpi	r25, 0x2C	; 44
    2a60:	28 f4       	brcc	.+10     	; 0x2a6c <vfprintf+0x82>
    2a62:	90 32       	cpi	r25, 0x20	; 32
    2a64:	59 f0       	breq	.+22     	; 0x2a7c <vfprintf+0x92>
    2a66:	93 32       	cpi	r25, 0x23	; 35
    2a68:	91 f4       	brne	.+36     	; 0x2a8e <vfprintf+0xa4>
    2a6a:	0e c0       	rjmp	.+28     	; 0x2a88 <vfprintf+0x9e>
    2a6c:	9d 32       	cpi	r25, 0x2D	; 45
    2a6e:	49 f0       	breq	.+18     	; 0x2a82 <vfprintf+0x98>
    2a70:	90 33       	cpi	r25, 0x30	; 48
    2a72:	69 f4       	brne	.+26     	; 0x2a8e <vfprintf+0xa4>
    2a74:	41 e0       	ldi	r20, 0x01	; 1
    2a76:	24 c0       	rjmp	.+72     	; 0x2ac0 <vfprintf+0xd6>
    2a78:	52 e0       	ldi	r21, 0x02	; 2
    2a7a:	f5 2a       	or	r15, r21
    2a7c:	84 e0       	ldi	r24, 0x04	; 4
    2a7e:	f8 2a       	or	r15, r24
    2a80:	28 c0       	rjmp	.+80     	; 0x2ad2 <vfprintf+0xe8>
    2a82:	98 e0       	ldi	r25, 0x08	; 8
    2a84:	f9 2a       	or	r15, r25
    2a86:	25 c0       	rjmp	.+74     	; 0x2ad2 <vfprintf+0xe8>
    2a88:	e0 e1       	ldi	r30, 0x10	; 16
    2a8a:	fe 2a       	or	r15, r30
    2a8c:	22 c0       	rjmp	.+68     	; 0x2ad2 <vfprintf+0xe8>
    2a8e:	f7 fc       	sbrc	r15, 7
    2a90:	29 c0       	rjmp	.+82     	; 0x2ae4 <vfprintf+0xfa>
    2a92:	89 2f       	mov	r24, r25
    2a94:	80 53       	subi	r24, 0x30	; 48
    2a96:	8a 30       	cpi	r24, 0x0A	; 10
    2a98:	70 f4       	brcc	.+28     	; 0x2ab6 <vfprintf+0xcc>
    2a9a:	f6 fe       	sbrs	r15, 6
    2a9c:	05 c0       	rjmp	.+10     	; 0x2aa8 <vfprintf+0xbe>
    2a9e:	98 9c       	mul	r9, r8
    2aa0:	90 2c       	mov	r9, r0
    2aa2:	11 24       	eor	r1, r1
    2aa4:	98 0e       	add	r9, r24
    2aa6:	15 c0       	rjmp	.+42     	; 0x2ad2 <vfprintf+0xe8>
    2aa8:	e8 9c       	mul	r14, r8
    2aaa:	e0 2c       	mov	r14, r0
    2aac:	11 24       	eor	r1, r1
    2aae:	e8 0e       	add	r14, r24
    2ab0:	f0 e2       	ldi	r31, 0x20	; 32
    2ab2:	ff 2a       	or	r15, r31
    2ab4:	0e c0       	rjmp	.+28     	; 0x2ad2 <vfprintf+0xe8>
    2ab6:	9e 32       	cpi	r25, 0x2E	; 46
    2ab8:	29 f4       	brne	.+10     	; 0x2ac4 <vfprintf+0xda>
    2aba:	f6 fc       	sbrc	r15, 6
    2abc:	6b c1       	rjmp	.+726    	; 0x2d94 <vfprintf+0x3aa>
    2abe:	40 e4       	ldi	r20, 0x40	; 64
    2ac0:	f4 2a       	or	r15, r20
    2ac2:	07 c0       	rjmp	.+14     	; 0x2ad2 <vfprintf+0xe8>
    2ac4:	9c 36       	cpi	r25, 0x6C	; 108
    2ac6:	19 f4       	brne	.+6      	; 0x2ace <vfprintf+0xe4>
    2ac8:	50 e8       	ldi	r21, 0x80	; 128
    2aca:	f5 2a       	or	r15, r21
    2acc:	02 c0       	rjmp	.+4      	; 0x2ad2 <vfprintf+0xe8>
    2ace:	98 36       	cpi	r25, 0x68	; 104
    2ad0:	49 f4       	brne	.+18     	; 0x2ae4 <vfprintf+0xfa>
    2ad2:	f2 01       	movw	r30, r4
    2ad4:	23 fd       	sbrc	r18, 3
    2ad6:	95 91       	lpm	r25, Z+
    2ad8:	23 ff       	sbrs	r18, 3
    2ada:	91 91       	ld	r25, Z+
    2adc:	2f 01       	movw	r4, r30
    2ade:	99 23       	and	r25, r25
    2ae0:	09 f0       	breq	.+2      	; 0x2ae4 <vfprintf+0xfa>
    2ae2:	b8 cf       	rjmp	.-144    	; 0x2a54 <vfprintf+0x6a>
    2ae4:	89 2f       	mov	r24, r25
    2ae6:	85 54       	subi	r24, 0x45	; 69
    2ae8:	83 30       	cpi	r24, 0x03	; 3
    2aea:	18 f0       	brcs	.+6      	; 0x2af2 <vfprintf+0x108>
    2aec:	80 52       	subi	r24, 0x20	; 32
    2aee:	83 30       	cpi	r24, 0x03	; 3
    2af0:	38 f4       	brcc	.+14     	; 0x2b00 <vfprintf+0x116>
    2af2:	44 e0       	ldi	r20, 0x04	; 4
    2af4:	50 e0       	ldi	r21, 0x00	; 0
    2af6:	a4 0e       	add	r10, r20
    2af8:	b5 1e       	adc	r11, r21
    2afa:	5f e3       	ldi	r21, 0x3F	; 63
    2afc:	59 83       	std	Y+1, r21	; 0x01
    2afe:	0f c0       	rjmp	.+30     	; 0x2b1e <vfprintf+0x134>
    2b00:	93 36       	cpi	r25, 0x63	; 99
    2b02:	31 f0       	breq	.+12     	; 0x2b10 <vfprintf+0x126>
    2b04:	93 37       	cpi	r25, 0x73	; 115
    2b06:	79 f0       	breq	.+30     	; 0x2b26 <vfprintf+0x13c>
    2b08:	93 35       	cpi	r25, 0x53	; 83
    2b0a:	09 f0       	breq	.+2      	; 0x2b0e <vfprintf+0x124>
    2b0c:	56 c0       	rjmp	.+172    	; 0x2bba <vfprintf+0x1d0>
    2b0e:	20 c0       	rjmp	.+64     	; 0x2b50 <vfprintf+0x166>
    2b10:	f5 01       	movw	r30, r10
    2b12:	80 81       	ld	r24, Z
    2b14:	89 83       	std	Y+1, r24	; 0x01
    2b16:	42 e0       	ldi	r20, 0x02	; 2
    2b18:	50 e0       	ldi	r21, 0x00	; 0
    2b1a:	a4 0e       	add	r10, r20
    2b1c:	b5 1e       	adc	r11, r21
    2b1e:	61 01       	movw	r12, r2
    2b20:	01 e0       	ldi	r16, 0x01	; 1
    2b22:	10 e0       	ldi	r17, 0x00	; 0
    2b24:	12 c0       	rjmp	.+36     	; 0x2b4a <vfprintf+0x160>
    2b26:	f5 01       	movw	r30, r10
    2b28:	c0 80       	ld	r12, Z
    2b2a:	d1 80       	ldd	r13, Z+1	; 0x01
    2b2c:	f6 fc       	sbrc	r15, 6
    2b2e:	03 c0       	rjmp	.+6      	; 0x2b36 <vfprintf+0x14c>
    2b30:	6f ef       	ldi	r22, 0xFF	; 255
    2b32:	7f ef       	ldi	r23, 0xFF	; 255
    2b34:	02 c0       	rjmp	.+4      	; 0x2b3a <vfprintf+0x150>
    2b36:	69 2d       	mov	r22, r9
    2b38:	70 e0       	ldi	r23, 0x00	; 0
    2b3a:	42 e0       	ldi	r20, 0x02	; 2
    2b3c:	50 e0       	ldi	r21, 0x00	; 0
    2b3e:	a4 0e       	add	r10, r20
    2b40:	b5 1e       	adc	r11, r21
    2b42:	c6 01       	movw	r24, r12
    2b44:	0e 94 dd 16 	call	0x2dba	; 0x2dba <strnlen>
    2b48:	8c 01       	movw	r16, r24
    2b4a:	5f e7       	ldi	r21, 0x7F	; 127
    2b4c:	f5 22       	and	r15, r21
    2b4e:	14 c0       	rjmp	.+40     	; 0x2b78 <vfprintf+0x18e>
    2b50:	f5 01       	movw	r30, r10
    2b52:	c0 80       	ld	r12, Z
    2b54:	d1 80       	ldd	r13, Z+1	; 0x01
    2b56:	f6 fc       	sbrc	r15, 6
    2b58:	03 c0       	rjmp	.+6      	; 0x2b60 <vfprintf+0x176>
    2b5a:	6f ef       	ldi	r22, 0xFF	; 255
    2b5c:	7f ef       	ldi	r23, 0xFF	; 255
    2b5e:	02 c0       	rjmp	.+4      	; 0x2b64 <vfprintf+0x17a>
    2b60:	69 2d       	mov	r22, r9
    2b62:	70 e0       	ldi	r23, 0x00	; 0
    2b64:	42 e0       	ldi	r20, 0x02	; 2
    2b66:	50 e0       	ldi	r21, 0x00	; 0
    2b68:	a4 0e       	add	r10, r20
    2b6a:	b5 1e       	adc	r11, r21
    2b6c:	c6 01       	movw	r24, r12
    2b6e:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <strnlen_P>
    2b72:	8c 01       	movw	r16, r24
    2b74:	50 e8       	ldi	r21, 0x80	; 128
    2b76:	f5 2a       	or	r15, r21
    2b78:	f3 fe       	sbrs	r15, 3
    2b7a:	07 c0       	rjmp	.+14     	; 0x2b8a <vfprintf+0x1a0>
    2b7c:	1a c0       	rjmp	.+52     	; 0x2bb2 <vfprintf+0x1c8>
    2b7e:	80 e2       	ldi	r24, 0x20	; 32
    2b80:	90 e0       	ldi	r25, 0x00	; 0
    2b82:	b3 01       	movw	r22, r6
    2b84:	0e 94 e8 16 	call	0x2dd0	; 0x2dd0 <fputc>
    2b88:	ea 94       	dec	r14
    2b8a:	8e 2d       	mov	r24, r14
    2b8c:	90 e0       	ldi	r25, 0x00	; 0
    2b8e:	08 17       	cp	r16, r24
    2b90:	19 07       	cpc	r17, r25
    2b92:	a8 f3       	brcs	.-22     	; 0x2b7e <vfprintf+0x194>
    2b94:	0e c0       	rjmp	.+28     	; 0x2bb2 <vfprintf+0x1c8>
    2b96:	f6 01       	movw	r30, r12
    2b98:	f7 fc       	sbrc	r15, 7
    2b9a:	85 91       	lpm	r24, Z+
    2b9c:	f7 fe       	sbrs	r15, 7
    2b9e:	81 91       	ld	r24, Z+
    2ba0:	6f 01       	movw	r12, r30
    2ba2:	90 e0       	ldi	r25, 0x00	; 0
    2ba4:	b3 01       	movw	r22, r6
    2ba6:	0e 94 e8 16 	call	0x2dd0	; 0x2dd0 <fputc>
    2baa:	e1 10       	cpse	r14, r1
    2bac:	ea 94       	dec	r14
    2bae:	01 50       	subi	r16, 0x01	; 1
    2bb0:	10 40       	sbci	r17, 0x00	; 0
    2bb2:	01 15       	cp	r16, r1
    2bb4:	11 05       	cpc	r17, r1
    2bb6:	79 f7       	brne	.-34     	; 0x2b96 <vfprintf+0x1ac>
    2bb8:	ea c0       	rjmp	.+468    	; 0x2d8e <vfprintf+0x3a4>
    2bba:	94 36       	cpi	r25, 0x64	; 100
    2bbc:	11 f0       	breq	.+4      	; 0x2bc2 <vfprintf+0x1d8>
    2bbe:	99 36       	cpi	r25, 0x69	; 105
    2bc0:	69 f5       	brne	.+90     	; 0x2c1c <vfprintf+0x232>
    2bc2:	f7 fe       	sbrs	r15, 7
    2bc4:	08 c0       	rjmp	.+16     	; 0x2bd6 <vfprintf+0x1ec>
    2bc6:	f5 01       	movw	r30, r10
    2bc8:	20 81       	ld	r18, Z
    2bca:	31 81       	ldd	r19, Z+1	; 0x01
    2bcc:	42 81       	ldd	r20, Z+2	; 0x02
    2bce:	53 81       	ldd	r21, Z+3	; 0x03
    2bd0:	84 e0       	ldi	r24, 0x04	; 4
    2bd2:	90 e0       	ldi	r25, 0x00	; 0
    2bd4:	0a c0       	rjmp	.+20     	; 0x2bea <vfprintf+0x200>
    2bd6:	f5 01       	movw	r30, r10
    2bd8:	80 81       	ld	r24, Z
    2bda:	91 81       	ldd	r25, Z+1	; 0x01
    2bdc:	9c 01       	movw	r18, r24
    2bde:	44 27       	eor	r20, r20
    2be0:	37 fd       	sbrc	r19, 7
    2be2:	40 95       	com	r20
    2be4:	54 2f       	mov	r21, r20
    2be6:	82 e0       	ldi	r24, 0x02	; 2
    2be8:	90 e0       	ldi	r25, 0x00	; 0
    2bea:	a8 0e       	add	r10, r24
    2bec:	b9 1e       	adc	r11, r25
    2bee:	9f e6       	ldi	r25, 0x6F	; 111
    2bf0:	f9 22       	and	r15, r25
    2bf2:	57 ff       	sbrs	r21, 7
    2bf4:	09 c0       	rjmp	.+18     	; 0x2c08 <vfprintf+0x21e>
    2bf6:	50 95       	com	r21
    2bf8:	40 95       	com	r20
    2bfa:	30 95       	com	r19
    2bfc:	21 95       	neg	r18
    2bfe:	3f 4f       	sbci	r19, 0xFF	; 255
    2c00:	4f 4f       	sbci	r20, 0xFF	; 255
    2c02:	5f 4f       	sbci	r21, 0xFF	; 255
    2c04:	e0 e8       	ldi	r30, 0x80	; 128
    2c06:	fe 2a       	or	r15, r30
    2c08:	ca 01       	movw	r24, r20
    2c0a:	b9 01       	movw	r22, r18
    2c0c:	a1 01       	movw	r20, r2
    2c0e:	2a e0       	ldi	r18, 0x0A	; 10
    2c10:	30 e0       	ldi	r19, 0x00	; 0
    2c12:	0e 94 14 17 	call	0x2e28	; 0x2e28 <__ultoa_invert>
    2c16:	d8 2e       	mov	r13, r24
    2c18:	d2 18       	sub	r13, r2
    2c1a:	40 c0       	rjmp	.+128    	; 0x2c9c <vfprintf+0x2b2>
    2c1c:	95 37       	cpi	r25, 0x75	; 117
    2c1e:	29 f4       	brne	.+10     	; 0x2c2a <vfprintf+0x240>
    2c20:	1f 2d       	mov	r17, r15
    2c22:	1f 7e       	andi	r17, 0xEF	; 239
    2c24:	2a e0       	ldi	r18, 0x0A	; 10
    2c26:	30 e0       	ldi	r19, 0x00	; 0
    2c28:	1d c0       	rjmp	.+58     	; 0x2c64 <vfprintf+0x27a>
    2c2a:	1f 2d       	mov	r17, r15
    2c2c:	19 7f       	andi	r17, 0xF9	; 249
    2c2e:	9f 36       	cpi	r25, 0x6F	; 111
    2c30:	61 f0       	breq	.+24     	; 0x2c4a <vfprintf+0x260>
    2c32:	90 37       	cpi	r25, 0x70	; 112
    2c34:	20 f4       	brcc	.+8      	; 0x2c3e <vfprintf+0x254>
    2c36:	98 35       	cpi	r25, 0x58	; 88
    2c38:	09 f0       	breq	.+2      	; 0x2c3c <vfprintf+0x252>
    2c3a:	ac c0       	rjmp	.+344    	; 0x2d94 <vfprintf+0x3aa>
    2c3c:	0f c0       	rjmp	.+30     	; 0x2c5c <vfprintf+0x272>
    2c3e:	90 37       	cpi	r25, 0x70	; 112
    2c40:	39 f0       	breq	.+14     	; 0x2c50 <vfprintf+0x266>
    2c42:	98 37       	cpi	r25, 0x78	; 120
    2c44:	09 f0       	breq	.+2      	; 0x2c48 <vfprintf+0x25e>
    2c46:	a6 c0       	rjmp	.+332    	; 0x2d94 <vfprintf+0x3aa>
    2c48:	04 c0       	rjmp	.+8      	; 0x2c52 <vfprintf+0x268>
    2c4a:	28 e0       	ldi	r18, 0x08	; 8
    2c4c:	30 e0       	ldi	r19, 0x00	; 0
    2c4e:	0a c0       	rjmp	.+20     	; 0x2c64 <vfprintf+0x27a>
    2c50:	10 61       	ori	r17, 0x10	; 16
    2c52:	14 fd       	sbrc	r17, 4
    2c54:	14 60       	ori	r17, 0x04	; 4
    2c56:	20 e1       	ldi	r18, 0x10	; 16
    2c58:	30 e0       	ldi	r19, 0x00	; 0
    2c5a:	04 c0       	rjmp	.+8      	; 0x2c64 <vfprintf+0x27a>
    2c5c:	14 fd       	sbrc	r17, 4
    2c5e:	16 60       	ori	r17, 0x06	; 6
    2c60:	20 e1       	ldi	r18, 0x10	; 16
    2c62:	32 e0       	ldi	r19, 0x02	; 2
    2c64:	17 ff       	sbrs	r17, 7
    2c66:	08 c0       	rjmp	.+16     	; 0x2c78 <vfprintf+0x28e>
    2c68:	f5 01       	movw	r30, r10
    2c6a:	60 81       	ld	r22, Z
    2c6c:	71 81       	ldd	r23, Z+1	; 0x01
    2c6e:	82 81       	ldd	r24, Z+2	; 0x02
    2c70:	93 81       	ldd	r25, Z+3	; 0x03
    2c72:	44 e0       	ldi	r20, 0x04	; 4
    2c74:	50 e0       	ldi	r21, 0x00	; 0
    2c76:	08 c0       	rjmp	.+16     	; 0x2c88 <vfprintf+0x29e>
    2c78:	f5 01       	movw	r30, r10
    2c7a:	80 81       	ld	r24, Z
    2c7c:	91 81       	ldd	r25, Z+1	; 0x01
    2c7e:	bc 01       	movw	r22, r24
    2c80:	80 e0       	ldi	r24, 0x00	; 0
    2c82:	90 e0       	ldi	r25, 0x00	; 0
    2c84:	42 e0       	ldi	r20, 0x02	; 2
    2c86:	50 e0       	ldi	r21, 0x00	; 0
    2c88:	a4 0e       	add	r10, r20
    2c8a:	b5 1e       	adc	r11, r21
    2c8c:	a1 01       	movw	r20, r2
    2c8e:	0e 94 14 17 	call	0x2e28	; 0x2e28 <__ultoa_invert>
    2c92:	d8 2e       	mov	r13, r24
    2c94:	d2 18       	sub	r13, r2
    2c96:	8f e7       	ldi	r24, 0x7F	; 127
    2c98:	f8 2e       	mov	r15, r24
    2c9a:	f1 22       	and	r15, r17
    2c9c:	f6 fe       	sbrs	r15, 6
    2c9e:	0b c0       	rjmp	.+22     	; 0x2cb6 <vfprintf+0x2cc>
    2ca0:	5e ef       	ldi	r21, 0xFE	; 254
    2ca2:	f5 22       	and	r15, r21
    2ca4:	d9 14       	cp	r13, r9
    2ca6:	38 f4       	brcc	.+14     	; 0x2cb6 <vfprintf+0x2cc>
    2ca8:	f4 fe       	sbrs	r15, 4
    2caa:	07 c0       	rjmp	.+14     	; 0x2cba <vfprintf+0x2d0>
    2cac:	f2 fc       	sbrc	r15, 2
    2cae:	05 c0       	rjmp	.+10     	; 0x2cba <vfprintf+0x2d0>
    2cb0:	8f ee       	ldi	r24, 0xEF	; 239
    2cb2:	f8 22       	and	r15, r24
    2cb4:	02 c0       	rjmp	.+4      	; 0x2cba <vfprintf+0x2d0>
    2cb6:	1d 2d       	mov	r17, r13
    2cb8:	01 c0       	rjmp	.+2      	; 0x2cbc <vfprintf+0x2d2>
    2cba:	19 2d       	mov	r17, r9
    2cbc:	f4 fe       	sbrs	r15, 4
    2cbe:	0d c0       	rjmp	.+26     	; 0x2cda <vfprintf+0x2f0>
    2cc0:	fe 01       	movw	r30, r28
    2cc2:	ed 0d       	add	r30, r13
    2cc4:	f1 1d       	adc	r31, r1
    2cc6:	80 81       	ld	r24, Z
    2cc8:	80 33       	cpi	r24, 0x30	; 48
    2cca:	19 f4       	brne	.+6      	; 0x2cd2 <vfprintf+0x2e8>
    2ccc:	99 ee       	ldi	r25, 0xE9	; 233
    2cce:	f9 22       	and	r15, r25
    2cd0:	08 c0       	rjmp	.+16     	; 0x2ce2 <vfprintf+0x2f8>
    2cd2:	1f 5f       	subi	r17, 0xFF	; 255
    2cd4:	f2 fe       	sbrs	r15, 2
    2cd6:	05 c0       	rjmp	.+10     	; 0x2ce2 <vfprintf+0x2f8>
    2cd8:	03 c0       	rjmp	.+6      	; 0x2ce0 <vfprintf+0x2f6>
    2cda:	8f 2d       	mov	r24, r15
    2cdc:	86 78       	andi	r24, 0x86	; 134
    2cde:	09 f0       	breq	.+2      	; 0x2ce2 <vfprintf+0x2f8>
    2ce0:	1f 5f       	subi	r17, 0xFF	; 255
    2ce2:	0f 2d       	mov	r16, r15
    2ce4:	f3 fc       	sbrc	r15, 3
    2ce6:	14 c0       	rjmp	.+40     	; 0x2d10 <vfprintf+0x326>
    2ce8:	f0 fe       	sbrs	r15, 0
    2cea:	0f c0       	rjmp	.+30     	; 0x2d0a <vfprintf+0x320>
    2cec:	1e 15       	cp	r17, r14
    2cee:	10 f0       	brcs	.+4      	; 0x2cf4 <vfprintf+0x30a>
    2cf0:	9d 2c       	mov	r9, r13
    2cf2:	0b c0       	rjmp	.+22     	; 0x2d0a <vfprintf+0x320>
    2cf4:	9d 2c       	mov	r9, r13
    2cf6:	9e 0c       	add	r9, r14
    2cf8:	91 1a       	sub	r9, r17
    2cfa:	1e 2d       	mov	r17, r14
    2cfc:	06 c0       	rjmp	.+12     	; 0x2d0a <vfprintf+0x320>
    2cfe:	80 e2       	ldi	r24, 0x20	; 32
    2d00:	90 e0       	ldi	r25, 0x00	; 0
    2d02:	b3 01       	movw	r22, r6
    2d04:	0e 94 e8 16 	call	0x2dd0	; 0x2dd0 <fputc>
    2d08:	1f 5f       	subi	r17, 0xFF	; 255
    2d0a:	1e 15       	cp	r17, r14
    2d0c:	c0 f3       	brcs	.-16     	; 0x2cfe <vfprintf+0x314>
    2d0e:	04 c0       	rjmp	.+8      	; 0x2d18 <vfprintf+0x32e>
    2d10:	1e 15       	cp	r17, r14
    2d12:	10 f4       	brcc	.+4      	; 0x2d18 <vfprintf+0x32e>
    2d14:	e1 1a       	sub	r14, r17
    2d16:	01 c0       	rjmp	.+2      	; 0x2d1a <vfprintf+0x330>
    2d18:	ee 24       	eor	r14, r14
    2d1a:	04 ff       	sbrs	r16, 4
    2d1c:	0f c0       	rjmp	.+30     	; 0x2d3c <vfprintf+0x352>
    2d1e:	80 e3       	ldi	r24, 0x30	; 48
    2d20:	90 e0       	ldi	r25, 0x00	; 0
    2d22:	b3 01       	movw	r22, r6
    2d24:	0e 94 e8 16 	call	0x2dd0	; 0x2dd0 <fputc>
    2d28:	02 ff       	sbrs	r16, 2
    2d2a:	1d c0       	rjmp	.+58     	; 0x2d66 <vfprintf+0x37c>
    2d2c:	01 fd       	sbrc	r16, 1
    2d2e:	03 c0       	rjmp	.+6      	; 0x2d36 <vfprintf+0x34c>
    2d30:	88 e7       	ldi	r24, 0x78	; 120
    2d32:	90 e0       	ldi	r25, 0x00	; 0
    2d34:	0e c0       	rjmp	.+28     	; 0x2d52 <vfprintf+0x368>
    2d36:	88 e5       	ldi	r24, 0x58	; 88
    2d38:	90 e0       	ldi	r25, 0x00	; 0
    2d3a:	0b c0       	rjmp	.+22     	; 0x2d52 <vfprintf+0x368>
    2d3c:	80 2f       	mov	r24, r16
    2d3e:	86 78       	andi	r24, 0x86	; 134
    2d40:	91 f0       	breq	.+36     	; 0x2d66 <vfprintf+0x37c>
    2d42:	01 ff       	sbrs	r16, 1
    2d44:	02 c0       	rjmp	.+4      	; 0x2d4a <vfprintf+0x360>
    2d46:	8b e2       	ldi	r24, 0x2B	; 43
    2d48:	01 c0       	rjmp	.+2      	; 0x2d4c <vfprintf+0x362>
    2d4a:	80 e2       	ldi	r24, 0x20	; 32
    2d4c:	f7 fc       	sbrc	r15, 7
    2d4e:	8d e2       	ldi	r24, 0x2D	; 45
    2d50:	90 e0       	ldi	r25, 0x00	; 0
    2d52:	b3 01       	movw	r22, r6
    2d54:	0e 94 e8 16 	call	0x2dd0	; 0x2dd0 <fputc>
    2d58:	06 c0       	rjmp	.+12     	; 0x2d66 <vfprintf+0x37c>
    2d5a:	80 e3       	ldi	r24, 0x30	; 48
    2d5c:	90 e0       	ldi	r25, 0x00	; 0
    2d5e:	b3 01       	movw	r22, r6
    2d60:	0e 94 e8 16 	call	0x2dd0	; 0x2dd0 <fputc>
    2d64:	9a 94       	dec	r9
    2d66:	d9 14       	cp	r13, r9
    2d68:	c0 f3       	brcs	.-16     	; 0x2d5a <vfprintf+0x370>
    2d6a:	da 94       	dec	r13
    2d6c:	f1 01       	movw	r30, r2
    2d6e:	ed 0d       	add	r30, r13
    2d70:	f1 1d       	adc	r31, r1
    2d72:	80 81       	ld	r24, Z
    2d74:	90 e0       	ldi	r25, 0x00	; 0
    2d76:	b3 01       	movw	r22, r6
    2d78:	0e 94 e8 16 	call	0x2dd0	; 0x2dd0 <fputc>
    2d7c:	dd 20       	and	r13, r13
    2d7e:	a9 f7       	brne	.-22     	; 0x2d6a <vfprintf+0x380>
    2d80:	06 c0       	rjmp	.+12     	; 0x2d8e <vfprintf+0x3a4>
    2d82:	80 e2       	ldi	r24, 0x20	; 32
    2d84:	90 e0       	ldi	r25, 0x00	; 0
    2d86:	b3 01       	movw	r22, r6
    2d88:	0e 94 e8 16 	call	0x2dd0	; 0x2dd0 <fputc>
    2d8c:	ea 94       	dec	r14
    2d8e:	ee 20       	and	r14, r14
    2d90:	c1 f7       	brne	.-16     	; 0x2d82 <vfprintf+0x398>
    2d92:	43 ce       	rjmp	.-890    	; 0x2a1a <vfprintf+0x30>
    2d94:	f3 01       	movw	r30, r6
    2d96:	66 81       	ldd	r22, Z+6	; 0x06
    2d98:	77 81       	ldd	r23, Z+7	; 0x07
    2d9a:	cb 01       	movw	r24, r22
    2d9c:	2b 96       	adiw	r28, 0x0b	; 11
    2d9e:	e2 e1       	ldi	r30, 0x12	; 18
    2da0:	0c 94 b6 14 	jmp	0x296c	; 0x296c <__epilogue_restores__>

00002da4 <strnlen_P>:
    2da4:	fc 01       	movw	r30, r24
    2da6:	05 90       	lpm	r0, Z+
    2da8:	61 50       	subi	r22, 0x01	; 1
    2daa:	70 40       	sbci	r23, 0x00	; 0
    2dac:	01 10       	cpse	r0, r1
    2dae:	d8 f7       	brcc	.-10     	; 0x2da6 <strnlen_P+0x2>
    2db0:	80 95       	com	r24
    2db2:	90 95       	com	r25
    2db4:	8e 0f       	add	r24, r30
    2db6:	9f 1f       	adc	r25, r31
    2db8:	08 95       	ret

00002dba <strnlen>:
    2dba:	fc 01       	movw	r30, r24
    2dbc:	61 50       	subi	r22, 0x01	; 1
    2dbe:	70 40       	sbci	r23, 0x00	; 0
    2dc0:	01 90       	ld	r0, Z+
    2dc2:	01 10       	cpse	r0, r1
    2dc4:	d8 f7       	brcc	.-10     	; 0x2dbc <strnlen+0x2>
    2dc6:	80 95       	com	r24
    2dc8:	90 95       	com	r25
    2dca:	8e 0f       	add	r24, r30
    2dcc:	9f 1f       	adc	r25, r31
    2dce:	08 95       	ret

00002dd0 <fputc>:
    2dd0:	0f 93       	push	r16
    2dd2:	1f 93       	push	r17
    2dd4:	cf 93       	push	r28
    2dd6:	df 93       	push	r29
    2dd8:	8c 01       	movw	r16, r24
    2dda:	eb 01       	movw	r28, r22
    2ddc:	8b 81       	ldd	r24, Y+3	; 0x03
    2dde:	81 ff       	sbrs	r24, 1
    2de0:	1b c0       	rjmp	.+54     	; 0x2e18 <fputc+0x48>
    2de2:	82 ff       	sbrs	r24, 2
    2de4:	0d c0       	rjmp	.+26     	; 0x2e00 <fputc+0x30>
    2de6:	2e 81       	ldd	r18, Y+6	; 0x06
    2de8:	3f 81       	ldd	r19, Y+7	; 0x07
    2dea:	8c 81       	ldd	r24, Y+4	; 0x04
    2dec:	9d 81       	ldd	r25, Y+5	; 0x05
    2dee:	28 17       	cp	r18, r24
    2df0:	39 07       	cpc	r19, r25
    2df2:	64 f4       	brge	.+24     	; 0x2e0c <fputc+0x3c>
    2df4:	e8 81       	ld	r30, Y
    2df6:	f9 81       	ldd	r31, Y+1	; 0x01
    2df8:	01 93       	st	Z+, r16
    2dfa:	f9 83       	std	Y+1, r31	; 0x01
    2dfc:	e8 83       	st	Y, r30
    2dfe:	06 c0       	rjmp	.+12     	; 0x2e0c <fputc+0x3c>
    2e00:	e8 85       	ldd	r30, Y+8	; 0x08
    2e02:	f9 85       	ldd	r31, Y+9	; 0x09
    2e04:	80 2f       	mov	r24, r16
    2e06:	09 95       	icall
    2e08:	89 2b       	or	r24, r25
    2e0a:	31 f4       	brne	.+12     	; 0x2e18 <fputc+0x48>
    2e0c:	8e 81       	ldd	r24, Y+6	; 0x06
    2e0e:	9f 81       	ldd	r25, Y+7	; 0x07
    2e10:	01 96       	adiw	r24, 0x01	; 1
    2e12:	9f 83       	std	Y+7, r25	; 0x07
    2e14:	8e 83       	std	Y+6, r24	; 0x06
    2e16:	02 c0       	rjmp	.+4      	; 0x2e1c <fputc+0x4c>
    2e18:	0f ef       	ldi	r16, 0xFF	; 255
    2e1a:	1f ef       	ldi	r17, 0xFF	; 255
    2e1c:	c8 01       	movw	r24, r16
    2e1e:	df 91       	pop	r29
    2e20:	cf 91       	pop	r28
    2e22:	1f 91       	pop	r17
    2e24:	0f 91       	pop	r16
    2e26:	08 95       	ret

00002e28 <__ultoa_invert>:
    2e28:	fa 01       	movw	r30, r20
    2e2a:	aa 27       	eor	r26, r26
    2e2c:	28 30       	cpi	r18, 0x08	; 8
    2e2e:	51 f1       	breq	.+84     	; 0x2e84 <__ultoa_invert+0x5c>
    2e30:	20 31       	cpi	r18, 0x10	; 16
    2e32:	81 f1       	breq	.+96     	; 0x2e94 <__ultoa_invert+0x6c>
    2e34:	e8 94       	clt
    2e36:	6f 93       	push	r22
    2e38:	6e 7f       	andi	r22, 0xFE	; 254
    2e3a:	6e 5f       	subi	r22, 0xFE	; 254
    2e3c:	7f 4f       	sbci	r23, 0xFF	; 255
    2e3e:	8f 4f       	sbci	r24, 0xFF	; 255
    2e40:	9f 4f       	sbci	r25, 0xFF	; 255
    2e42:	af 4f       	sbci	r26, 0xFF	; 255
    2e44:	b1 e0       	ldi	r27, 0x01	; 1
    2e46:	3e d0       	rcall	.+124    	; 0x2ec4 <__ultoa_invert+0x9c>
    2e48:	b4 e0       	ldi	r27, 0x04	; 4
    2e4a:	3c d0       	rcall	.+120    	; 0x2ec4 <__ultoa_invert+0x9c>
    2e4c:	67 0f       	add	r22, r23
    2e4e:	78 1f       	adc	r23, r24
    2e50:	89 1f       	adc	r24, r25
    2e52:	9a 1f       	adc	r25, r26
    2e54:	a1 1d       	adc	r26, r1
    2e56:	68 0f       	add	r22, r24
    2e58:	79 1f       	adc	r23, r25
    2e5a:	8a 1f       	adc	r24, r26
    2e5c:	91 1d       	adc	r25, r1
    2e5e:	a1 1d       	adc	r26, r1
    2e60:	6a 0f       	add	r22, r26
    2e62:	71 1d       	adc	r23, r1
    2e64:	81 1d       	adc	r24, r1
    2e66:	91 1d       	adc	r25, r1
    2e68:	a1 1d       	adc	r26, r1
    2e6a:	20 d0       	rcall	.+64     	; 0x2eac <__ultoa_invert+0x84>
    2e6c:	09 f4       	brne	.+2      	; 0x2e70 <__ultoa_invert+0x48>
    2e6e:	68 94       	set
    2e70:	3f 91       	pop	r19
    2e72:	2a e0       	ldi	r18, 0x0A	; 10
    2e74:	26 9f       	mul	r18, r22
    2e76:	11 24       	eor	r1, r1
    2e78:	30 19       	sub	r19, r0
    2e7a:	30 5d       	subi	r19, 0xD0	; 208
    2e7c:	31 93       	st	Z+, r19
    2e7e:	de f6       	brtc	.-74     	; 0x2e36 <__ultoa_invert+0xe>
    2e80:	cf 01       	movw	r24, r30
    2e82:	08 95       	ret
    2e84:	46 2f       	mov	r20, r22
    2e86:	47 70       	andi	r20, 0x07	; 7
    2e88:	40 5d       	subi	r20, 0xD0	; 208
    2e8a:	41 93       	st	Z+, r20
    2e8c:	b3 e0       	ldi	r27, 0x03	; 3
    2e8e:	0f d0       	rcall	.+30     	; 0x2eae <__ultoa_invert+0x86>
    2e90:	c9 f7       	brne	.-14     	; 0x2e84 <__ultoa_invert+0x5c>
    2e92:	f6 cf       	rjmp	.-20     	; 0x2e80 <__ultoa_invert+0x58>
    2e94:	46 2f       	mov	r20, r22
    2e96:	4f 70       	andi	r20, 0x0F	; 15
    2e98:	40 5d       	subi	r20, 0xD0	; 208
    2e9a:	4a 33       	cpi	r20, 0x3A	; 58
    2e9c:	18 f0       	brcs	.+6      	; 0x2ea4 <__ultoa_invert+0x7c>
    2e9e:	49 5d       	subi	r20, 0xD9	; 217
    2ea0:	31 fd       	sbrc	r19, 1
    2ea2:	40 52       	subi	r20, 0x20	; 32
    2ea4:	41 93       	st	Z+, r20
    2ea6:	02 d0       	rcall	.+4      	; 0x2eac <__ultoa_invert+0x84>
    2ea8:	a9 f7       	brne	.-22     	; 0x2e94 <__ultoa_invert+0x6c>
    2eaa:	ea cf       	rjmp	.-44     	; 0x2e80 <__ultoa_invert+0x58>
    2eac:	b4 e0       	ldi	r27, 0x04	; 4
    2eae:	a6 95       	lsr	r26
    2eb0:	97 95       	ror	r25
    2eb2:	87 95       	ror	r24
    2eb4:	77 95       	ror	r23
    2eb6:	67 95       	ror	r22
    2eb8:	ba 95       	dec	r27
    2eba:	c9 f7       	brne	.-14     	; 0x2eae <__ultoa_invert+0x86>
    2ebc:	00 97       	sbiw	r24, 0x00	; 0
    2ebe:	61 05       	cpc	r22, r1
    2ec0:	71 05       	cpc	r23, r1
    2ec2:	08 95       	ret
    2ec4:	9b 01       	movw	r18, r22
    2ec6:	ac 01       	movw	r20, r24
    2ec8:	0a 2e       	mov	r0, r26
    2eca:	06 94       	lsr	r0
    2ecc:	57 95       	ror	r21
    2ece:	47 95       	ror	r20
    2ed0:	37 95       	ror	r19
    2ed2:	27 95       	ror	r18
    2ed4:	ba 95       	dec	r27
    2ed6:	c9 f7       	brne	.-14     	; 0x2eca <__ultoa_invert+0xa2>
    2ed8:	62 0f       	add	r22, r18
    2eda:	73 1f       	adc	r23, r19
    2edc:	84 1f       	adc	r24, r20
    2ede:	95 1f       	adc	r25, r21
    2ee0:	a0 1d       	adc	r26, r0
    2ee2:	08 95       	ret

00002ee4 <_exit>:
    2ee4:	f8 94       	cli

00002ee6 <__stop_program>:
    2ee6:	ff cf       	rjmp	.-2      	; 0x2ee6 <__stop_program>
